
Sensor_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009084  08009084  00019084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090ec  080090ec  00020328  2**0
                  CONTENTS
  4 .ARM          00000000  080090ec  080090ec  00020328  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090ec  080090ec  00020328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090ec  080090ec  000190ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090f0  080090f0  000190f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000328  20000000  080090f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20000328  0800941c  00020328  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000910  0800941c  00020910  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020351  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015729  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a9d  00000000  00000000  00035abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00038560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c84  00000000  00000000  00039590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019369  00000000  00000000  0003a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013fc2  00000000  00000000  0005357d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008de5e  00000000  00000000  0006753f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004918  00000000  00000000  000f53a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f9cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000328 	.word	0x20000328
 8000128:	00000000 	.word	0x00000000
 800012c:	0800906c 	.word	0x0800906c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000032c 	.word	0x2000032c
 8000148:	0800906c 	.word	0x0800906c

0800014c <CANCom_Init>:

extern CAN_HandleTypeDef hcan;
extern uint8_t SendBuf[8];
extern uint8_t MsgCounter;

void CANCom_Init() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef RxFilter = { 0 };
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2228      	movs	r2, #40	; 0x28
 8000156:	2100      	movs	r1, #0
 8000158:	4618      	mov	r0, r3
 800015a:	f008 faed 	bl	8008738 <memset>
	RxFilter.FilterActivation = CAN_FILTER_ENABLE;
 800015e:	2301      	movs	r3, #1
 8000160:	627b      	str	r3, [r7, #36]	; 0x24
	RxFilter.FilterBank = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	61bb      	str	r3, [r7, #24]
	RxFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000166:	2300      	movs	r3, #0
 8000168:	617b      	str	r3, [r7, #20]
	RxFilter.FilterIdHigh = RX_ID << 5;
 800016a:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 800016e:	607b      	str	r3, [r7, #4]
	RxFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000170:	2301      	movs	r3, #1
 8000172:	61fb      	str	r3, [r7, #28]
	RxFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 8000174:	2300      	movs	r3, #0
 8000176:	623b      	str	r3, [r7, #32]
	HAL_StatusTypeDef stat = HAL_OK;
 8000178:	2300      	movs	r3, #0
 800017a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	stat = HAL_CAN_ConfigFilter(&hcan, &RxFilter);
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	4619      	mov	r1, r3
 8000182:	480b      	ldr	r0, [pc, #44]	; (80001b0 <CANCom_Init+0x64>)
 8000184:	f000 fd7f 	bl	8000c86 <HAL_CAN_ConfigFilter>
 8000188:	4603      	mov	r3, r0
 800018a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	stat = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800018e:	2102      	movs	r1, #2
 8000190:	4807      	ldr	r0, [pc, #28]	; (80001b0 <CANCom_Init+0x64>)
 8000192:	f000 ff54 	bl	800103e <HAL_CAN_ActivateNotification>
 8000196:	4603      	mov	r3, r0
 8000198:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	stat = HAL_CAN_Start(&hcan);
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <CANCom_Init+0x64>)
 800019e:	f000 fe3b 	bl	8000e18 <HAL_CAN_Start>
 80001a2:	4603      	mov	r3, r0
 80001a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 80001a8:	bf00      	nop
 80001aa:	3730      	adds	r7, #48	; 0x30
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	20000344 	.word	0x20000344

080001b4 <CANCom_Transmit>:

void CANCom_Transmit(uint8_t *pData, uint8_t len) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b08a      	sub	sp, #40	; 0x28
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	460b      	mov	r3, r1
 80001be:	70fb      	strb	r3, [r7, #3]
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = len;
 80001c0:	78fb      	ldrb	r3, [r7, #3]
 80001c2:	623b      	str	r3, [r7, #32]
	TxHeader.IDE = CAN_ID_STD;
 80001c4:	2300      	movs	r3, #0
 80001c6:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 80001c8:	2300      	movs	r3, #0
 80001ca:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = TX_ID;
 80001cc:	2312      	movs	r3, #18
 80001ce:	613b      	str	r3, [r7, #16]
	uint8_t Mailbox;
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, pData, &Mailbox);
 80001d0:	f107 030f 	add.w	r3, r7, #15
 80001d4:	f107 0110 	add.w	r1, r7, #16
 80001d8:	687a      	ldr	r2, [r7, #4]
 80001da:	4803      	ldr	r0, [pc, #12]	; (80001e8 <CANCom_Transmit+0x34>)
 80001dc:	f000 fe60 	bl	8000ea0 <HAL_CAN_AddTxMessage>
}
 80001e0:	bf00      	nop
 80001e2:	3728      	adds	r7, #40	; 0x28
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	20000344 	.word	0x20000344

080001ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b08e      	sub	sp, #56	; 0x38
 80001f0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001f2:	f000 fbc7 	bl	8000984 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001f6:	f000 f8a1 	bl	800033c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001fa:	f000 f975 	bl	80004e8 <MX_GPIO_Init>
	MX_CAN_Init();
 80001fe:	f000 f8e3 	bl	80003c8 <MX_CAN_Init>
	MX_I2C1_Init();
 8000202:	f000 f919 	bl	8000438 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000206:	f000 f945 	bl	8000494 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */


	GPIO_WritePin(Xshut0, 0);
 800020a:	4b45      	ldr	r3, [pc, #276]	; (8000320 <main+0x134>)
 800020c:	2200      	movs	r2, #0
 800020e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000212:	f003 f931 	bl	8003478 <GPIO_WritePin>
	GPIO_WritePin(Xshut1, 0);
 8000216:	4b43      	ldr	r3, [pc, #268]	; (8000324 <main+0x138>)
 8000218:	2200      	movs	r2, #0
 800021a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800021e:	f003 f92b 	bl	8003478 <GPIO_WritePin>

	VL53L0X_Error err = VL53L0X_ERROR_NONE;
 8000222:	2300      	movs	r3, #0
 8000224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	err = Vl53l0x_Init(&VL53LXX_Handler_0, &hi2c1, VL53L0X_ADDRESS_0, Xshut0);
 8000228:	4b3d      	ldr	r3, [pc, #244]	; (8000320 <main+0x134>)
 800022a:	685a      	ldr	r2, [r3, #4]
 800022c:	9200      	str	r2, [sp, #0]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2233      	movs	r2, #51	; 0x33
 8000232:	493d      	ldr	r1, [pc, #244]	; (8000328 <main+0x13c>)
 8000234:	483d      	ldr	r0, [pc, #244]	; (800032c <main+0x140>)
 8000236:	f008 f92a 	bl	800848e <Vl53l0x_Init>
 800023a:	4603      	mov	r3, r0
 800023c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (err != VL53L0X_ERROR_NONE) {
 8000240:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000244:	2b00      	cmp	r3, #0
 8000246:	d005      	beq.n	8000254 <main+0x68>
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 8000248:	2201      	movs	r2, #1
 800024a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800024e:	4838      	ldr	r0, [pc, #224]	; (8000330 <main+0x144>)
 8000250:	f001 fbd8 	bl	8001a04 <HAL_GPIO_WritePin>
	}

//	GPIO_WritePin(Xshut0, 1);
	err = Vl53l0x_Init(&VL53LXX_Handler_1, &hi2c1, VL53L0X_ADDRESS_1, Xshut1);
 8000254:	4b33      	ldr	r3, [pc, #204]	; (8000324 <main+0x138>)
 8000256:	685a      	ldr	r2, [r3, #4]
 8000258:	9200      	str	r2, [sp, #0]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2232      	movs	r2, #50	; 0x32
 800025e:	4932      	ldr	r1, [pc, #200]	; (8000328 <main+0x13c>)
 8000260:	4834      	ldr	r0, [pc, #208]	; (8000334 <main+0x148>)
 8000262:	f008 f914 	bl	800848e <Vl53l0x_Init>
 8000266:	4603      	mov	r3, r0
 8000268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (err != VL53L0X_ERROR_NONE) {
 800026c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000270:	2b00      	cmp	r3, #0
 8000272:	d005      	beq.n	8000280 <main+0x94>
		HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 1);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800027a:	482d      	ldr	r0, [pc, #180]	; (8000330 <main+0x144>)
 800027c:	f001 fbc2 	bl	8001a04 <HAL_GPIO_WritePin>
	}
	int16_t Distance_0 = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	85bb      	strh	r3, [r7, #44]	; 0x2c
	int16_t Distance_1 = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t Can_msg[20] = "";
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]
 800028c:	f107 0318 	add.w	r3, r7, #24
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
	uint8_t CanMsgLen = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t Uart_msg[20] = "";
 80002a0:	2300      	movs	r3, #0
 80002a2:	603b      	str	r3, [r7, #0]
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
	uint8_t UartMsgLen = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	CANCom_Init();
 80002b6:	f7ff ff49 	bl	800014c <CANCom_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Distance_0 = Vl53l0x_ReadMeasure(&VL53LXX_Handler_0);
 80002ba:	481c      	ldr	r0, [pc, #112]	; (800032c <main+0x140>)
 80002bc:	f008 fa00 	bl	80086c0 <Vl53l0x_ReadMeasure>
 80002c0:	4603      	mov	r3, r0
 80002c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
		Distance_1 = Vl53l0x_ReadMeasure(&VL53LXX_Handler_1);
 80002c4:	481b      	ldr	r0, [pc, #108]	; (8000334 <main+0x148>)
 80002c6:	f008 f9fb 	bl	80086c0 <Vl53l0x_ReadMeasure>
 80002ca:	4603      	mov	r3, r0
 80002cc:	857b      	strh	r3, [r7, #42]	; 0x2a
		if ((Distance_0 >= 0 && Distance_0 < 100) || (Distance_1 >= 0 && Distance_1 < 100)) {
 80002ce:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	db03      	blt.n	80002de <main+0xf2>
 80002d6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80002da:	2b63      	cmp	r3, #99	; 0x63
 80002dc:	dd07      	ble.n	80002ee <main+0x102>
 80002de:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	db17      	blt.n	8000316 <main+0x12a>
 80002e6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80002ea:	2b63      	cmp	r3, #99	; 0x63
 80002ec:	dc13      	bgt.n	8000316 <main+0x12a>
			CanMsgLen = sprintf(Can_msg, "%d;%d", Distance_0,
 80002ee:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 80002f2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80002f6:	f107 0014 	add.w	r0, r7, #20
 80002fa:	490f      	ldr	r1, [pc, #60]	; (8000338 <main+0x14c>)
 80002fc:	f008 f9fc 	bl	80086f8 <siprintf>
 8000300:	4603      	mov	r3, r0
 8000302:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
					Distance_1);
			CANCom_Transmit(Can_msg, CanMsgLen);
 8000306:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800030a:	f107 0314 	add.w	r3, r7, #20
 800030e:	4611      	mov	r1, r2
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff4f 	bl	80001b4 <CANCom_Transmit>
		}
//		UartMsgLen = sprintf(Uart_msg, "%d;%d\r\n", Distance_0, Distance_1);
//		HAL_UART_Transmit(&huart1, Uart_msg, UartMsgLen, 300);
		HAL_Delay(1000);
 8000316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800031a:	f000 fb95 	bl	8000a48 <HAL_Delay>
		Distance_0 = Vl53l0x_ReadMeasure(&VL53LXX_Handler_0);
 800031e:	e7cc      	b.n	80002ba <main+0xce>
 8000320:	20000000 	.word	0x20000000
 8000324:	20000008 	.word	0x20000008
 8000328:	2000036c 	.word	0x2000036c
 800032c:	20000408 	.word	0x20000408
 8000330:	40010c00 	.word	0x40010c00
 8000334:	200005c4 	.word	0x200005c4
 8000338:	08009084 	.word	0x08009084

0800033c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b090      	sub	sp, #64	; 0x40
 8000340:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	2228      	movs	r2, #40	; 0x28
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f008 f9f4 	bl	8008738 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
 800035c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800035e:	2301      	movs	r3, #1
 8000360:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000366:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036c:	2301      	movs	r3, #1
 800036e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000370:	2302      	movs	r3, #2
 8000372:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000378:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800037a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800037e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000380:	f107 0318 	add.w	r3, r7, #24
 8000384:	4618      	mov	r0, r3
 8000386:	f002 fb89 	bl	8002a9c <HAL_RCC_OscConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0x58>
		Error_Handler();
 8000390:	f000 f918 	bl	80005c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000394:	230f      	movs	r3, #15
 8000396:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000398:	2302      	movs	r3, #2
 800039a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2102      	movs	r1, #2
 80003ae:	4618      	mov	r0, r3
 80003b0:	f002 fdf6 	bl	8002fa0 <HAL_RCC_ClockConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x82>
		Error_Handler();
 80003ba:	f000 f903 	bl	80005c4 <Error_Handler>
	}
}
 80003be:	bf00      	nop
 80003c0:	3740      	adds	r7, #64	; 0x40
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <MX_CAN_Init+0x68>)
 80003ce:	4a19      	ldr	r2, [pc, #100]	; (8000434 <MX_CAN_Init+0x6c>)
 80003d0:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 4;
 80003d2:	4b17      	ldr	r3, [pc, #92]	; (8000430 <MX_CAN_Init+0x68>)
 80003d4:	2204      	movs	r2, #4
 80003d6:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80003d8:	4b15      	ldr	r3, [pc, #84]	; (8000430 <MX_CAN_Init+0x68>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80003de:	4b14      	ldr	r3, [pc, #80]	; (8000430 <MX_CAN_Init+0x68>)
 80003e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80003e4:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <MX_CAN_Init+0x68>)
 80003e8:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80003ec:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <MX_CAN_Init+0x68>)
 80003f0:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80003f4:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <MX_CAN_Init+0x68>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MX_CAN_Init+0x68>)
 80003fe:	2200      	movs	r2, #0
 8000400:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <MX_CAN_Init+0x68>)
 8000404:	2200      	movs	r2, #0
 8000406:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <MX_CAN_Init+0x68>)
 800040a:	2200      	movs	r2, #0
 800040c:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <MX_CAN_Init+0x68>)
 8000410:	2200      	movs	r2, #0
 8000412:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <MX_CAN_Init+0x68>)
 8000416:	2200      	movs	r2, #0
 8000418:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 800041a:	4805      	ldr	r0, [pc, #20]	; (8000430 <MX_CAN_Init+0x68>)
 800041c:	f000 fb38 	bl	8000a90 <HAL_CAN_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_CAN_Init+0x62>
		Error_Handler();
 8000426:	f000 f8cd 	bl	80005c4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000344 	.word	0x20000344
 8000434:	40006400 	.word	0x40006400

08000438 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800043c:	4b12      	ldr	r3, [pc, #72]	; (8000488 <MX_I2C1_Init+0x50>)
 800043e:	4a13      	ldr	r2, [pc, #76]	; (800048c <MX_I2C1_Init+0x54>)
 8000440:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000442:	4b11      	ldr	r3, [pc, #68]	; (8000488 <MX_I2C1_Init+0x50>)
 8000444:	4a12      	ldr	r2, [pc, #72]	; (8000490 <MX_I2C1_Init+0x58>)
 8000446:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <MX_I2C1_Init+0x50>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <MX_I2C1_Init+0x50>)
 8000450:	2200      	movs	r2, #0
 8000452:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <MX_I2C1_Init+0x50>)
 8000456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800045a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800045c:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <MX_I2C1_Init+0x50>)
 800045e:	2200      	movs	r2, #0
 8000460:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <MX_I2C1_Init+0x50>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <MX_I2C1_Init+0x50>)
 800046a:	2200      	movs	r2, #0
 800046c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <MX_I2C1_Init+0x50>)
 8000470:	2200      	movs	r2, #0
 8000472:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000474:	4804      	ldr	r0, [pc, #16]	; (8000488 <MX_I2C1_Init+0x50>)
 8000476:	f001 fadd 	bl	8001a34 <HAL_I2C_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000480:	f000 f8a0 	bl	80005c4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	2000036c 	.word	0x2000036c
 800048c:	40005400 	.word	0x40005400
 8000490:	000186a0 	.word	0x000186a0

08000494 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 800049a:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <MX_USART1_UART_Init+0x50>)
 800049c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800049e:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004a4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <MX_USART1_UART_Init+0x4c>)
 80004cc:	f002 fef6 	bl	80032bc <HAL_UART_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80004d6:	f000 f875 	bl	80005c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	200003c0 	.word	0x200003c0
 80004e4:	40013800 	.word	0x40013800

080004e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004fc:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <MX_GPIO_Init+0xd0>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a2d      	ldr	r2, [pc, #180]	; (80005b8 <MX_GPIO_Init+0xd0>)
 8000502:	f043 0310 	orr.w	r3, r3, #16
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <MX_GPIO_Init+0xd0>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0310 	and.w	r3, r3, #16
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <MX_GPIO_Init+0xd0>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a27      	ldr	r2, [pc, #156]	; (80005b8 <MX_GPIO_Init+0xd0>)
 800051a:	f043 0320 	orr.w	r3, r3, #32
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <MX_GPIO_Init+0xd0>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0320 	and.w	r3, r3, #32
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <MX_GPIO_Init+0xd0>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a21      	ldr	r2, [pc, #132]	; (80005b8 <MX_GPIO_Init+0xd0>)
 8000532:	f043 0308 	orr.w	r3, r3, #8
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <MX_GPIO_Init+0xd0>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0308 	and.w	r3, r3, #8
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <MX_GPIO_Init+0xd0>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <MX_GPIO_Init+0xd0>)
 800054a:	f043 0304 	orr.w	r3, r3, #4
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <MX_GPIO_Init+0xd0>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0304 	and.w	r3, r3, #4
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LEDIn_Pin | Xshut0_Pin, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000562:	4816      	ldr	r0, [pc, #88]	; (80005bc <MX_GPIO_Init+0xd4>)
 8000564:	f001 fa4e 	bl	8001a04 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LEDB_Pin | LEDG_Pin | LEDR_Pin | Xshut1_Pin,
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 800056e:	4814      	ldr	r0, [pc, #80]	; (80005c0 <MX_GPIO_Init+0xd8>)
 8000570:	f001 fa48 	bl	8001a04 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LEDIn_Pin Xshut0_Pin */
	GPIO_InitStruct.Pin = LEDIn_Pin | Xshut0_Pin;
 8000574:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000578:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	2301      	movs	r3, #1
 800057c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	2302      	movs	r3, #2
 8000584:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	4619      	mov	r1, r3
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <MX_GPIO_Init+0xd4>)
 800058e:	f001 f8b5 	bl	80016fc <HAL_GPIO_Init>

	/*Configure GPIO pins : LEDB_Pin LEDG_Pin LEDR_Pin Xshut1_Pin */
	GPIO_InitStruct.Pin = LEDB_Pin | LEDG_Pin | LEDR_Pin | Xshut1_Pin;
 8000592:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000596:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <MX_GPIO_Init+0xd8>)
 80005ac:	f001 f8a6 	bl	80016fc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80005b0:	bf00      	nop
 80005b2:	3720      	adds	r7, #32
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40011000 	.word	0x40011000
 80005c0:	40010c00 	.word	0x40010c00

080005c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <HAL_MspInit+0x5c>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a14      	ldr	r2, [pc, #80]	; (800062c <HAL_MspInit+0x5c>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_MspInit+0x5c>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_MspInit+0x5c>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_MspInit+0x5c>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_MspInit+0x5c>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <HAL_MspInit+0x60>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <HAL_MspInit+0x60>)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000
 8000630:	40010000 	.word	0x40010000

08000634 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a2c      	ldr	r2, [pc, #176]	; (8000700 <HAL_CAN_MspInit+0xcc>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d151      	bne.n	80006f8 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000654:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <HAL_CAN_MspInit+0xd0>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	4a2a      	ldr	r2, [pc, #168]	; (8000704 <HAL_CAN_MspInit+0xd0>)
 800065a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800065e:	61d3      	str	r3, [r2, #28]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <HAL_CAN_MspInit+0xd0>)
 8000662:	69db      	ldr	r3, [r3, #28]
 8000664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <HAL_CAN_MspInit+0xd0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a24      	ldr	r2, [pc, #144]	; (8000704 <HAL_CAN_MspInit+0xd0>)
 8000672:	f043 0304 	orr.w	r3, r3, #4
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <HAL_CAN_MspInit+0xd0>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000684:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000688:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	4619      	mov	r1, r3
 8000698:	481b      	ldr	r0, [pc, #108]	; (8000708 <HAL_CAN_MspInit+0xd4>)
 800069a:	f001 f82f 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	4815      	ldr	r0, [pc, #84]	; (8000708 <HAL_CAN_MspInit+0xd4>)
 80006b4:	f001 f822 	bl	80016fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	2013      	movs	r0, #19
 80006be:	f000 ffe6 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80006c2:	2013      	movs	r0, #19
 80006c4:	f000 ffff 	bl	80016c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2100      	movs	r1, #0
 80006cc:	2014      	movs	r0, #20
 80006ce:	f000 ffde 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80006d2:	2014      	movs	r0, #20
 80006d4:	f000 fff7 	bl	80016c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	2015      	movs	r0, #21
 80006de:	f000 ffd6 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006e2:	2015      	movs	r0, #21
 80006e4:	f000 ffef 	bl	80016c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	2016      	movs	r0, #22
 80006ee:	f000 ffce 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80006f2:	2016      	movs	r0, #22
 80006f4:	f000 ffe7 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80006f8:	bf00      	nop
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40006400 	.word	0x40006400
 8000704:	40021000 	.word	0x40021000
 8000708:	40010800 	.word	0x40010800

0800070c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a15      	ldr	r2, [pc, #84]	; (800077c <HAL_I2C_MspInit+0x70>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d123      	bne.n	8000774 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <HAL_I2C_MspInit+0x74>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a13      	ldr	r2, [pc, #76]	; (8000780 <HAL_I2C_MspInit+0x74>)
 8000732:	f043 0308 	orr.w	r3, r3, #8
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_I2C_MspInit+0x74>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0308 	and.w	r3, r3, #8
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000744:	23c0      	movs	r3, #192	; 0xc0
 8000746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000748:	2312      	movs	r3, #18
 800074a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	480b      	ldr	r0, [pc, #44]	; (8000784 <HAL_I2C_MspInit+0x78>)
 8000758:	f000 ffd0 	bl	80016fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_I2C_MspInit+0x74>)
 800075e:	69db      	ldr	r3, [r3, #28]
 8000760:	4a07      	ldr	r2, [pc, #28]	; (8000780 <HAL_I2C_MspInit+0x74>)
 8000762:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000766:	61d3      	str	r3, [r2, #28]
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_I2C_MspInit+0x74>)
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40005400 	.word	0x40005400
 8000780:	40021000 	.word	0x40021000
 8000784:	40010c00 	.word	0x40010c00

08000788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <HAL_UART_MspInit+0x8c>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d131      	bne.n	800080c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <HAL_UART_MspInit+0x90>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a1a      	ldr	r2, [pc, #104]	; (8000818 <HAL_UART_MspInit+0x90>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <HAL_UART_MspInit+0x90>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_UART_MspInit+0x90>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a14      	ldr	r2, [pc, #80]	; (8000818 <HAL_UART_MspInit+0x90>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_UART_MspInit+0x90>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <HAL_UART_MspInit+0x94>)
 80007ee:	f000 ff85 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <HAL_UART_MspInit+0x94>)
 8000808:	f000 ff78 	bl	80016fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40013800 	.word	0x40013800
 8000818:	40021000 	.word	0x40021000
 800081c:	40010800 	.word	0x40010800

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000866:	f000 f8d3 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000876:	f000 fc07 	bl	8001088 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000344 	.word	0x20000344

08000884 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800088a:	f000 fbfd 	bl	8001088 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000344 	.word	0x20000344

08000898 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <CAN1_RX1_IRQHandler+0x10>)
 800089e:	f000 fbf3 	bl	8001088 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000344 	.word	0x20000344

080008ac <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <CAN1_SCE_IRQHandler+0x10>)
 80008b2:	f000 fbe9 	bl	8001088 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000344 	.word	0x20000344

080008c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c8:	4a14      	ldr	r2, [pc, #80]	; (800091c <_sbrk+0x5c>)
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <_sbrk+0x60>)
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d102      	bne.n	80008e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <_sbrk+0x64>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <_sbrk+0x68>)
 80008e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d207      	bcs.n	8000900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f0:	f007 ff2a 	bl	8008748 <__errno>
 80008f4:	4603      	mov	r3, r0
 80008f6:	220c      	movs	r2, #12
 80008f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	e009      	b.n	8000914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <_sbrk+0x64>)
 8000910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000912:	68fb      	ldr	r3, [r7, #12]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20005000 	.word	0x20005000
 8000920:	00000400 	.word	0x00000400
 8000924:	20000780 	.word	0x20000780
 8000928:	20000910 	.word	0x20000910

0800092c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000938:	f7ff fff8 	bl	800092c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800093e:	490c      	ldr	r1, [pc, #48]	; (8000970 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a09      	ldr	r2, [pc, #36]	; (8000978 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000954:	4c09      	ldr	r4, [pc, #36]	; (800097c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000962:	f007 fef7 	bl	8008754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000966:	f7ff fc41 	bl	80001ec <main>
  bx lr
 800096a:	4770      	bx	lr
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	20000328 	.word	0x20000328
  ldr r2, =_sidata
 8000974:	080090f4 	.word	0x080090f4
  ldr r2, =_sbss
 8000978:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 800097c:	20000910 	.word	0x20000910

08000980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC1_2_IRQHandler>
	...

08000984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_Init+0x28>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <HAL_Init+0x28>)
 800098e:	f043 0310 	orr.w	r3, r3, #16
 8000992:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000994:	2003      	movs	r0, #3
 8000996:	f000 fe6f 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099a:	200f      	movs	r0, #15
 800099c:	f000 f808 	bl	80009b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a0:	f7ff fe16 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40022000 	.word	0x40022000

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_InitTick+0x54>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x58>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 fe87 	bl	80016e2 <HAL_SYSTICK_Config>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e00e      	b.n	80009fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d80a      	bhi.n	80009fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f000 fe4f 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <HAL_InitTick+0x5c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000010 	.word	0x20000010
 8000a08:	20000018 	.word	0x20000018
 8000a0c:	20000014 	.word	0x20000014

08000a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x1c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x20>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a03      	ldr	r2, [pc, #12]	; (8000a30 <HAL_IncTick+0x20>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	20000018 	.word	0x20000018
 8000a30:	20000784 	.word	0x20000784

08000a34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b02      	ldr	r3, [pc, #8]	; (8000a44 <HAL_GetTick+0x10>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	20000784 	.word	0x20000784

08000a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a50:	f7ff fff0 	bl	8000a34 <HAL_GetTick>
 8000a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a60:	d005      	beq.n	8000a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_Delay+0x44>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a6e:	bf00      	nop
 8000a70:	f7ff ffe0 	bl	8000a34 <HAL_GetTick>
 8000a74:	4602      	mov	r2, r0
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d8f7      	bhi.n	8000a70 <HAL_Delay+0x28>
  {
  }
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000018 	.word	0x20000018

08000a90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e0ed      	b.n	8000c7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d102      	bne.n	8000ab4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff fdc0 	bl	8000634 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f042 0201 	orr.w	r2, r2, #1
 8000ac2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ac4:	f7ff ffb6 	bl	8000a34 <HAL_GetTick>
 8000ac8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aca:	e012      	b.n	8000af2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000acc:	f7ff ffb2 	bl	8000a34 <HAL_GetTick>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	2b0a      	cmp	r3, #10
 8000ad8:	d90b      	bls.n	8000af2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ade:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2205      	movs	r2, #5
 8000aea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e0c5      	b.n	8000c7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d0e5      	beq.n	8000acc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f022 0202 	bic.w	r2, r2, #2
 8000b0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b10:	f7ff ff90 	bl	8000a34 <HAL_GetTick>
 8000b14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b16:	e012      	b.n	8000b3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b18:	f7ff ff8c 	bl	8000a34 <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	2b0a      	cmp	r3, #10
 8000b24:	d90b      	bls.n	8000b3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2205      	movs	r2, #5
 8000b36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e09f      	b.n	8000c7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1e5      	bne.n	8000b18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	7e1b      	ldrb	r3, [r3, #24]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d108      	bne.n	8000b66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	e007      	b.n	8000b76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7e5b      	ldrb	r3, [r3, #25]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d108      	bne.n	8000b90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	e007      	b.n	8000ba0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	7e9b      	ldrb	r3, [r3, #26]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d108      	bne.n	8000bba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f042 0220 	orr.w	r2, r2, #32
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	e007      	b.n	8000bca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 0220 	bic.w	r2, r2, #32
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7edb      	ldrb	r3, [r3, #27]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d108      	bne.n	8000be4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f022 0210 	bic.w	r2, r2, #16
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	e007      	b.n	8000bf4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f042 0210 	orr.w	r2, r2, #16
 8000bf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7f1b      	ldrb	r3, [r3, #28]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d108      	bne.n	8000c0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f042 0208 	orr.w	r2, r2, #8
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	e007      	b.n	8000c1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 0208 	bic.w	r2, r2, #8
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	7f5b      	ldrb	r3, [r3, #29]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d108      	bne.n	8000c38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f042 0204 	orr.w	r2, r2, #4
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e007      	b.n	8000c48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0204 	bic.w	r2, r2, #4
 8000c46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	431a      	orrs	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	ea42 0103 	orr.w	r1, r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	1e5a      	subs	r2, r3, #1
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b087      	sub	sp, #28
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c9c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c9e:	7cfb      	ldrb	r3, [r7, #19]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d003      	beq.n	8000cac <HAL_CAN_ConfigFilter+0x26>
 8000ca4:	7cfb      	ldrb	r3, [r7, #19]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	f040 80aa 	bne.w	8000e00 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cb2:	f043 0201 	orr.w	r2, r3, #1
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	f003 031f 	and.w	r3, r3, #31
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d123      	bne.n	8000d2e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	401a      	ands	r2, r3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3248      	adds	r2, #72	; 0x48
 8000d0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d24:	6979      	ldr	r1, [r7, #20]
 8000d26:	3348      	adds	r3, #72	; 0x48
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	440b      	add	r3, r1
 8000d2c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d122      	bne.n	8000d7c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d52:	683a      	ldr	r2, [r7, #0]
 8000d54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	3248      	adds	r2, #72	; 0x48
 8000d5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d72:	6979      	ldr	r1, [r7, #20]
 8000d74:	3348      	adds	r3, #72	; 0x48
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	440b      	add	r3, r1
 8000d7a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d109      	bne.n	8000d98 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000d96:	e007      	b.n	8000da8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	431a      	orrs	r2, r3
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	691b      	ldr	r3, [r3, #16]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d109      	bne.n	8000dc4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000dc2:	e007      	b.n	8000dd4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d107      	bne.n	8000dec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	431a      	orrs	r2, r3
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000df2:	f023 0201 	bic.w	r2, r3, #1
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	e006      	b.n	8000e0e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
  }
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	371c      	adds	r7, #28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d12e      	bne.n	8000e8a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2202      	movs	r2, #2
 8000e30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f022 0201 	bic.w	r2, r2, #1
 8000e42:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e44:	f7ff fdf6 	bl	8000a34 <HAL_GetTick>
 8000e48:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e4a:	e012      	b.n	8000e72 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e4c:	f7ff fdf2 	bl	8000a34 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b0a      	cmp	r3, #10
 8000e58:	d90b      	bls.n	8000e72 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2205      	movs	r2, #5
 8000e6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e012      	b.n	8000e98 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1e5      	bne.n	8000e4c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e006      	b.n	8000e98 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
  }
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ebe:	7ffb      	ldrb	r3, [r7, #31]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d003      	beq.n	8000ecc <HAL_CAN_AddTxMessage+0x2c>
 8000ec4:	7ffb      	ldrb	r3, [r7, #31]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	f040 80ad 	bne.w	8001026 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10a      	bne.n	8000eec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d105      	bne.n	8000eec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 8095 	beq.w	8001016 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	0e1b      	lsrs	r3, r3, #24
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10d      	bne.n	8000f24 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f12:	68f9      	ldr	r1, [r7, #12]
 8000f14:	6809      	ldr	r1, [r1, #0]
 8000f16:	431a      	orrs	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3318      	adds	r3, #24
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	440b      	add	r3, r1
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e00f      	b.n	8000f44 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f2e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f34:	68f9      	ldr	r1, [r7, #12]
 8000f36:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f38:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3318      	adds	r3, #24
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	440b      	add	r3, r1
 8000f42:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6819      	ldr	r1, [r3, #0]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3318      	adds	r3, #24
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	440b      	add	r3, r1
 8000f54:	3304      	adds	r3, #4
 8000f56:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	7d1b      	ldrb	r3, [r3, #20]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d111      	bne.n	8000f84 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3318      	adds	r3, #24
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	4413      	add	r3, r2
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	6811      	ldr	r1, [r2, #0]
 8000f74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3318      	adds	r3, #24
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	440b      	add	r3, r1
 8000f80:	3304      	adds	r3, #4
 8000f82:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3307      	adds	r3, #7
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	061a      	lsls	r2, r3, #24
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3306      	adds	r3, #6
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	041b      	lsls	r3, r3, #16
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3305      	adds	r3, #5
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	3204      	adds	r2, #4
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	6811      	ldr	r1, [r2, #0]
 8000fac:	ea43 0200 	orr.w	r2, r3, r0
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	440b      	add	r3, r1
 8000fb6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000fba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3303      	adds	r3, #3
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	061a      	lsls	r2, r3, #24
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	041b      	lsls	r3, r3, #16
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	7812      	ldrb	r2, [r2, #0]
 8000fdc:	4610      	mov	r0, r2
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	6811      	ldr	r1, [r2, #0]
 8000fe2:	ea43 0200 	orr.w	r2, r3, r0
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	440b      	add	r3, r1
 8000fec:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000ff0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3318      	adds	r3, #24
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	4413      	add	r3, r2
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	6811      	ldr	r1, [r2, #0]
 8001004:	f043 0201 	orr.w	r2, r3, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3318      	adds	r3, #24
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	440b      	add	r3, r1
 8001010:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e00e      	b.n	8001034 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e006      	b.n	8001034 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
  }
}
 8001034:	4618      	mov	r0, r3
 8001036:	3724      	adds	r7, #36	; 0x24
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800103e:	b480      	push	{r7}
 8001040:	b085      	sub	sp, #20
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800104e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d002      	beq.n	800105c <HAL_CAN_ActivateNotification+0x1e>
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d109      	bne.n	8001070 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6959      	ldr	r1, [r3, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	e006      	b.n	800107e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001074:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
  }
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d07c      	beq.n	80011c8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d023      	beq.n	8001120 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2201      	movs	r2, #1
 80010de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f983 	bl	80013f6 <HAL_CAN_TxMailbox0CompleteCallback>
 80010f0:	e016      	b.n	8001120 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
 8001104:	e00c      	b.n	8001120 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	2b00      	cmp	r3, #0
 800110e:	d004      	beq.n	800111a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
 8001118:	e002      	b.n	8001120 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f986 	bl	800142c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001126:	2b00      	cmp	r3, #0
 8001128:	d024      	beq.n	8001174 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001132:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f962 	bl	8001408 <HAL_CAN_TxMailbox1CompleteCallback>
 8001144:	e016      	b.n	8001174 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	2b00      	cmp	r3, #0
 800114e:	d004      	beq.n	800115a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
 8001158:	e00c      	b.n	8001174 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
 800116c:	e002      	b.n	8001174 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f965 	bl	800143e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d024      	beq.n	80011c8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001186:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f941 	bl	800141a <HAL_CAN_TxMailbox2CompleteCallback>
 8001198:	e016      	b.n	80011c8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
 80011ac:	e00c      	b.n	80011c8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
 80011c0:	e002      	b.n	80011c8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f944 	bl	8001450 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00c      	beq.n	80011ec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d007      	beq.n	80011ec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2210      	movs	r2, #16
 80011ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011ec:	6a3b      	ldr	r3, [r7, #32]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2208      	movs	r2, #8
 8001206:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f933 	bl	8001474 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d009      	beq.n	800122c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f91b 	bl	8001462 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00c      	beq.n	8001250 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	f003 0310 	and.w	r3, r3, #16
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001246:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2210      	movs	r2, #16
 800124e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00b      	beq.n	8001272 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2208      	movs	r2, #8
 800126a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f913 	bl	8001498 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2b00      	cmp	r3, #0
 800127a:	d009      	beq.n	8001290 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f8fb 	bl	8001486 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00b      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2210      	movs	r2, #16
 80012aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f8fc 	bl	80014aa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00b      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2208      	movs	r2, #8
 80012cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f8f4 	bl	80014bc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d07b      	beq.n	80013d6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d072      	beq.n	80013ce <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d008      	beq.n	8001304 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800130a:	2b00      	cmp	r3, #0
 800130c:	d008      	beq.n	8001320 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001326:	2b00      	cmp	r3, #0
 8001328:	d008      	beq.n	800133c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001342:	2b00      	cmp	r3, #0
 8001344:	d043      	beq.n	80013ce <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800134c:	2b00      	cmp	r3, #0
 800134e:	d03e      	beq.n	80013ce <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001356:	2b60      	cmp	r3, #96	; 0x60
 8001358:	d02b      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x32a>
 800135a:	2b60      	cmp	r3, #96	; 0x60
 800135c:	d82e      	bhi.n	80013bc <HAL_CAN_IRQHandler+0x334>
 800135e:	2b50      	cmp	r3, #80	; 0x50
 8001360:	d022      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x320>
 8001362:	2b50      	cmp	r3, #80	; 0x50
 8001364:	d82a      	bhi.n	80013bc <HAL_CAN_IRQHandler+0x334>
 8001366:	2b40      	cmp	r3, #64	; 0x40
 8001368:	d019      	beq.n	800139e <HAL_CAN_IRQHandler+0x316>
 800136a:	2b40      	cmp	r3, #64	; 0x40
 800136c:	d826      	bhi.n	80013bc <HAL_CAN_IRQHandler+0x334>
 800136e:	2b30      	cmp	r3, #48	; 0x30
 8001370:	d010      	beq.n	8001394 <HAL_CAN_IRQHandler+0x30c>
 8001372:	2b30      	cmp	r3, #48	; 0x30
 8001374:	d822      	bhi.n	80013bc <HAL_CAN_IRQHandler+0x334>
 8001376:	2b10      	cmp	r3, #16
 8001378:	d002      	beq.n	8001380 <HAL_CAN_IRQHandler+0x2f8>
 800137a:	2b20      	cmp	r3, #32
 800137c:	d005      	beq.n	800138a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800137e:	e01d      	b.n	80013bc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001388:	e019      	b.n	80013be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	f043 0310 	orr.w	r3, r3, #16
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001392:	e014      	b.n	80013be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	f043 0320 	orr.w	r3, r3, #32
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800139c:	e00f      	b.n	80013be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013a6:	e00a      	b.n	80013be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013b0:	e005      	b.n	80013be <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013ba:	e000      	b.n	80013be <HAL_CAN_IRQHandler+0x336>
            break;
 80013bc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	699a      	ldr	r2, [r3, #24]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013cc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2204      	movs	r2, #4
 80013d4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d008      	beq.n	80013ee <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f870 	bl	80014ce <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr

080014ce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db0b      	blt.n	800156e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	4906      	ldr	r1, [pc, #24]	; (8001578 <__NVIC_EnableIRQ+0x34>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	2001      	movs	r0, #1
 8001566:	fa00 f202 	lsl.w	r2, r0, r2
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff90 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff2d 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff42 	bl	8001528 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff90 	bl	80015d0 <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5f 	bl	800157c <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff35 	bl	8001544 <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffa2 	bl	8001634 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b08b      	sub	sp, #44	; 0x2c
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170e:	e169      	b.n	80019e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001710:	2201      	movs	r2, #1
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	429a      	cmp	r2, r3
 800172a:	f040 8158 	bne.w	80019de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4a9a      	ldr	r2, [pc, #616]	; (800199c <HAL_GPIO_Init+0x2a0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d05e      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
 8001738:	4a98      	ldr	r2, [pc, #608]	; (800199c <HAL_GPIO_Init+0x2a0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d875      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 800173e:	4a98      	ldr	r2, [pc, #608]	; (80019a0 <HAL_GPIO_Init+0x2a4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d058      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
 8001744:	4a96      	ldr	r2, [pc, #600]	; (80019a0 <HAL_GPIO_Init+0x2a4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d86f      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 800174a:	4a96      	ldr	r2, [pc, #600]	; (80019a4 <HAL_GPIO_Init+0x2a8>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d052      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
 8001750:	4a94      	ldr	r2, [pc, #592]	; (80019a4 <HAL_GPIO_Init+0x2a8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d869      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 8001756:	4a94      	ldr	r2, [pc, #592]	; (80019a8 <HAL_GPIO_Init+0x2ac>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d04c      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
 800175c:	4a92      	ldr	r2, [pc, #584]	; (80019a8 <HAL_GPIO_Init+0x2ac>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d863      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 8001762:	4a92      	ldr	r2, [pc, #584]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d046      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
 8001768:	4a90      	ldr	r2, [pc, #576]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d85d      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 800176e:	2b12      	cmp	r3, #18
 8001770:	d82a      	bhi.n	80017c8 <HAL_GPIO_Init+0xcc>
 8001772:	2b12      	cmp	r3, #18
 8001774:	d859      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 8001776:	a201      	add	r2, pc, #4	; (adr r2, 800177c <HAL_GPIO_Init+0x80>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	080017f7 	.word	0x080017f7
 8001780:	080017d1 	.word	0x080017d1
 8001784:	080017e3 	.word	0x080017e3
 8001788:	08001825 	.word	0x08001825
 800178c:	0800182b 	.word	0x0800182b
 8001790:	0800182b 	.word	0x0800182b
 8001794:	0800182b 	.word	0x0800182b
 8001798:	0800182b 	.word	0x0800182b
 800179c:	0800182b 	.word	0x0800182b
 80017a0:	0800182b 	.word	0x0800182b
 80017a4:	0800182b 	.word	0x0800182b
 80017a8:	0800182b 	.word	0x0800182b
 80017ac:	0800182b 	.word	0x0800182b
 80017b0:	0800182b 	.word	0x0800182b
 80017b4:	0800182b 	.word	0x0800182b
 80017b8:	0800182b 	.word	0x0800182b
 80017bc:	0800182b 	.word	0x0800182b
 80017c0:	080017d9 	.word	0x080017d9
 80017c4:	080017ed 	.word	0x080017ed
 80017c8:	4a79      	ldr	r2, [pc, #484]	; (80019b0 <HAL_GPIO_Init+0x2b4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d013      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ce:	e02c      	b.n	800182a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	623b      	str	r3, [r7, #32]
          break;
 80017d6:	e029      	b.n	800182c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	3304      	adds	r3, #4
 80017de:	623b      	str	r3, [r7, #32]
          break;
 80017e0:	e024      	b.n	800182c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	3308      	adds	r3, #8
 80017e8:	623b      	str	r3, [r7, #32]
          break;
 80017ea:	e01f      	b.n	800182c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	330c      	adds	r3, #12
 80017f2:	623b      	str	r3, [r7, #32]
          break;
 80017f4:	e01a      	b.n	800182c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017fe:	2304      	movs	r3, #4
 8001800:	623b      	str	r3, [r7, #32]
          break;
 8001802:	e013      	b.n	800182c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d105      	bne.n	8001818 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800180c:	2308      	movs	r3, #8
 800180e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	611a      	str	r2, [r3, #16]
          break;
 8001816:	e009      	b.n	800182c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001818:	2308      	movs	r3, #8
 800181a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	615a      	str	r2, [r3, #20]
          break;
 8001822:	e003      	b.n	800182c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
          break;
 8001828:	e000      	b.n	800182c <HAL_GPIO_Init+0x130>
          break;
 800182a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2bff      	cmp	r3, #255	; 0xff
 8001830:	d801      	bhi.n	8001836 <HAL_GPIO_Init+0x13a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	e001      	b.n	800183a <HAL_GPIO_Init+0x13e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3304      	adds	r3, #4
 800183a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2bff      	cmp	r3, #255	; 0xff
 8001840:	d802      	bhi.n	8001848 <HAL_GPIO_Init+0x14c>
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	e002      	b.n	800184e <HAL_GPIO_Init+0x152>
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	3b08      	subs	r3, #8
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	210f      	movs	r1, #15
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	401a      	ands	r2, r3
 8001860:	6a39      	ldr	r1, [r7, #32]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	431a      	orrs	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 80b1 	beq.w	80019de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800187c:	4b4d      	ldr	r3, [pc, #308]	; (80019b4 <HAL_GPIO_Init+0x2b8>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a4c      	ldr	r2, [pc, #304]	; (80019b4 <HAL_GPIO_Init+0x2b8>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b4a      	ldr	r3, [pc, #296]	; (80019b4 <HAL_GPIO_Init+0x2b8>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001894:	4a48      	ldr	r2, [pc, #288]	; (80019b8 <HAL_GPIO_Init+0x2bc>)
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	3302      	adds	r3, #2
 800189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	220f      	movs	r2, #15
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4013      	ands	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a40      	ldr	r2, [pc, #256]	; (80019bc <HAL_GPIO_Init+0x2c0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d013      	beq.n	80018e8 <HAL_GPIO_Init+0x1ec>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a3f      	ldr	r2, [pc, #252]	; (80019c0 <HAL_GPIO_Init+0x2c4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d00d      	beq.n	80018e4 <HAL_GPIO_Init+0x1e8>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a3e      	ldr	r2, [pc, #248]	; (80019c4 <HAL_GPIO_Init+0x2c8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d007      	beq.n	80018e0 <HAL_GPIO_Init+0x1e4>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a3d      	ldr	r2, [pc, #244]	; (80019c8 <HAL_GPIO_Init+0x2cc>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d101      	bne.n	80018dc <HAL_GPIO_Init+0x1e0>
 80018d8:	2303      	movs	r3, #3
 80018da:	e006      	b.n	80018ea <HAL_GPIO_Init+0x1ee>
 80018dc:	2304      	movs	r3, #4
 80018de:	e004      	b.n	80018ea <HAL_GPIO_Init+0x1ee>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e002      	b.n	80018ea <HAL_GPIO_Init+0x1ee>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <HAL_GPIO_Init+0x1ee>
 80018e8:	2300      	movs	r3, #0
 80018ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ec:	f002 0203 	and.w	r2, r2, #3
 80018f0:	0092      	lsls	r2, r2, #2
 80018f2:	4093      	lsls	r3, r2
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018fa:	492f      	ldr	r1, [pc, #188]	; (80019b8 <HAL_GPIO_Init+0x2bc>)
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	3302      	adds	r3, #2
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001914:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	492c      	ldr	r1, [pc, #176]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	608b      	str	r3, [r1, #8]
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001922:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	43db      	mvns	r3, r3
 800192a:	4928      	ldr	r1, [pc, #160]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 800192c:	4013      	ands	r3, r2
 800192e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800193c:	4b23      	ldr	r3, [pc, #140]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	4922      	ldr	r1, [pc, #136]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	60cb      	str	r3, [r1, #12]
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	43db      	mvns	r3, r3
 8001952:	491e      	ldr	r1, [pc, #120]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 8001954:	4013      	ands	r3, r2
 8001956:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	4918      	ldr	r1, [pc, #96]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001972:	4b16      	ldr	r3, [pc, #88]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	43db      	mvns	r3, r3
 800197a:	4914      	ldr	r1, [pc, #80]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 800197c:	4013      	ands	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d021      	beq.n	80019d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	490e      	ldr	r1, [pc, #56]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	600b      	str	r3, [r1, #0]
 8001998:	e021      	b.n	80019de <HAL_GPIO_Init+0x2e2>
 800199a:	bf00      	nop
 800199c:	10320000 	.word	0x10320000
 80019a0:	10310000 	.word	0x10310000
 80019a4:	10220000 	.word	0x10220000
 80019a8:	10210000 	.word	0x10210000
 80019ac:	10120000 	.word	0x10120000
 80019b0:	10110000 	.word	0x10110000
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010000 	.word	0x40010000
 80019bc:	40010800 	.word	0x40010800
 80019c0:	40010c00 	.word	0x40010c00
 80019c4:	40011000 	.word	0x40011000
 80019c8:	40011400 	.word	0x40011400
 80019cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_GPIO_Init+0x304>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	4909      	ldr	r1, [pc, #36]	; (8001a00 <HAL_GPIO_Init+0x304>)
 80019da:	4013      	ands	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	3301      	adds	r3, #1
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	fa22 f303 	lsr.w	r3, r2, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f47f ae8e 	bne.w	8001710 <HAL_GPIO_Init+0x14>
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	372c      	adds	r7, #44	; 0x2c
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	40010400 	.word	0x40010400

08001a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
 8001a10:	4613      	mov	r3, r2
 8001a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a14:	787b      	ldrb	r3, [r7, #1]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a20:	e003      	b.n	8001a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	041a      	lsls	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	611a      	str	r2, [r3, #16]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e12b      	b.n	8001c9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7fe fe56 	bl	800070c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2224      	movs	r2, #36	; 0x24
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a98:	f001 fbca 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 8001a9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4a81      	ldr	r2, [pc, #516]	; (8001ca8 <HAL_I2C_Init+0x274>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d807      	bhi.n	8001ab8 <HAL_I2C_Init+0x84>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4a80      	ldr	r2, [pc, #512]	; (8001cac <HAL_I2C_Init+0x278>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	bf94      	ite	ls
 8001ab0:	2301      	movls	r3, #1
 8001ab2:	2300      	movhi	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	e006      	b.n	8001ac6 <HAL_I2C_Init+0x92>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4a7d      	ldr	r2, [pc, #500]	; (8001cb0 <HAL_I2C_Init+0x27c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	bf94      	ite	ls
 8001ac0:	2301      	movls	r3, #1
 8001ac2:	2300      	movhi	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e0e7      	b.n	8001c9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4a78      	ldr	r2, [pc, #480]	; (8001cb4 <HAL_I2C_Init+0x280>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9b      	lsrs	r3, r3, #18
 8001ad8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a6a      	ldr	r2, [pc, #424]	; (8001ca8 <HAL_I2C_Init+0x274>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d802      	bhi.n	8001b08 <HAL_I2C_Init+0xd4>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	3301      	adds	r3, #1
 8001b06:	e009      	b.n	8001b1c <HAL_I2C_Init+0xe8>
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	4a69      	ldr	r2, [pc, #420]	; (8001cb8 <HAL_I2C_Init+0x284>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	099b      	lsrs	r3, r3, #6
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	430b      	orrs	r3, r1
 8001b22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	495c      	ldr	r1, [pc, #368]	; (8001ca8 <HAL_I2C_Init+0x274>)
 8001b38:	428b      	cmp	r3, r1
 8001b3a:	d819      	bhi.n	8001b70 <HAL_I2C_Init+0x13c>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1e59      	subs	r1, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b4a:	1c59      	adds	r1, r3, #1
 8001b4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b50:	400b      	ands	r3, r1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00a      	beq.n	8001b6c <HAL_I2C_Init+0x138>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1e59      	subs	r1, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b6a:	e051      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	e04f      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d111      	bne.n	8001b9c <HAL_I2C_Init+0x168>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1e58      	subs	r0, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6859      	ldr	r1, [r3, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	440b      	add	r3, r1
 8001b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	bf0c      	ite	eq
 8001b94:	2301      	moveq	r3, #1
 8001b96:	2300      	movne	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	e012      	b.n	8001bc2 <HAL_I2C_Init+0x18e>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1e58      	subs	r0, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	0099      	lsls	r1, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_I2C_Init+0x196>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e022      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10e      	bne.n	8001bf0 <HAL_I2C_Init+0x1bc>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1e58      	subs	r0, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6859      	ldr	r1, [r3, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	440b      	add	r3, r1
 8001be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be4:	3301      	adds	r3, #1
 8001be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bee:	e00f      	b.n	8001c10 <HAL_I2C_Init+0x1dc>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1e58      	subs	r0, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	0099      	lsls	r1, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c06:	3301      	adds	r3, #1
 8001c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	6809      	ldr	r1, [r1, #0]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69da      	ldr	r2, [r3, #28]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6911      	ldr	r1, [r2, #16]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68d2      	ldr	r2, [r2, #12]
 8001c4a:	4311      	orrs	r1, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	430b      	orrs	r3, r1
 8001c52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	000186a0 	.word	0x000186a0
 8001cac:	001e847f 	.word	0x001e847f
 8001cb0:	003d08ff 	.word	0x003d08ff
 8001cb4:	431bde83 	.word	0x431bde83
 8001cb8:	10624dd3 	.word	0x10624dd3

08001cbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	460b      	mov	r3, r1
 8001cca:	817b      	strh	r3, [r7, #10]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7fe feb0 	bl	8000a34 <HAL_GetTick>
 8001cd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	f040 80e0 	bne.w	8001ea4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2319      	movs	r3, #25
 8001cea:	2201      	movs	r2, #1
 8001cec:	4970      	ldr	r1, [pc, #448]	; (8001eb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fc9e 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e0d3      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_I2C_Master_Transmit+0x50>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e0cc      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x1ea>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d007      	beq.n	8001d32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2221      	movs	r2, #33	; 0x21
 8001d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	893a      	ldrh	r2, [r7, #8]
 8001d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4a50      	ldr	r2, [pc, #320]	; (8001eb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d74:	8979      	ldrh	r1, [r7, #10]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	6a3a      	ldr	r2, [r7, #32]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 fb08 	bl	8002390 <I2C_MasterRequestWrite>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e08d      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001da0:	e066      	b.n	8001e70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	6a39      	ldr	r1, [r7, #32]
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fd5c 	bl	8002864 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00d      	beq.n	8001dce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d107      	bne.n	8001dca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e06b      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	781a      	ldrb	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d11b      	bne.n	8001e44 <HAL_I2C_Master_Transmit+0x188>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d017      	beq.n	8001e44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	6a39      	ldr	r1, [r7, #32]
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 fd53 	bl	80028f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00d      	beq.n	8001e70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d107      	bne.n	8001e6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e01a      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d194      	bne.n	8001da2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e000      	b.n	8001ea6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ea4:	2302      	movs	r3, #2
  }
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	00100002 	.word	0x00100002
 8001eb4:	ffff0000 	.word	0xffff0000

08001eb8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08c      	sub	sp, #48	; 0x30
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	817b      	strh	r3, [r7, #10]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7fe fdb0 	bl	8000a34 <HAL_GetTick>
 8001ed4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b20      	cmp	r3, #32
 8001ee0:	f040 824b 	bne.w	800237a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	2319      	movs	r3, #25
 8001eea:	2201      	movs	r2, #1
 8001eec:	497f      	ldr	r1, [pc, #508]	; (80020ec <HAL_I2C_Master_Receive+0x234>)
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 fb9e 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001efa:	2302      	movs	r3, #2
 8001efc:	e23e      	b.n	800237c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_I2C_Master_Receive+0x54>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e237      	b.n	800237c <HAL_I2C_Master_Receive+0x4c4>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d007      	beq.n	8001f32 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2222      	movs	r2, #34	; 0x22
 8001f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	893a      	ldrh	r2, [r7, #8]
 8001f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4a5f      	ldr	r2, [pc, #380]	; (80020f0 <HAL_I2C_Master_Receive+0x238>)
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f74:	8979      	ldrh	r1, [r7, #10]
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 fa8a 	bl	8002494 <I2C_MasterRequestRead>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e1f8      	b.n	800237c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d113      	bne.n	8001fba <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	e1cc      	b.n	8002354 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d11e      	bne.n	8002000 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd2:	b672      	cpsid	i
}
 8001fd4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ffc:	b662      	cpsie	i
}
 8001ffe:	e035      	b.n	800206c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002004:	2b02      	cmp	r3, #2
 8002006:	d11e      	bne.n	8002046 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002016:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002018:	b672      	cpsid	i
}
 800201a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002040:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002042:	b662      	cpsie	i
}
 8002044:	e012      	b.n	800206c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002054:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800206c:	e172      	b.n	8002354 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002072:	2b03      	cmp	r3, #3
 8002074:	f200 811f 	bhi.w	80022b6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207c:	2b01      	cmp	r3, #1
 800207e:	d123      	bne.n	80020c8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002082:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 fc7d 	bl	8002984 <I2C_WaitOnRXNEFlagUntilTimeout>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e173      	b.n	800237c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020c6:	e145      	b.n	8002354 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d152      	bne.n	8002176 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d6:	2200      	movs	r2, #0
 80020d8:	4906      	ldr	r1, [pc, #24]	; (80020f4 <HAL_I2C_Master_Receive+0x23c>)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 faa8 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e148      	b.n	800237c <HAL_I2C_Master_Receive+0x4c4>
 80020ea:	bf00      	nop
 80020ec:	00100002 	.word	0x00100002
 80020f0:	ffff0000 	.word	0xffff0000
 80020f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80020f8:	b672      	cpsid	i
}
 80020fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800213e:	b662      	cpsie	i
}
 8002140:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002174:	e0ee      	b.n	8002354 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217c:	2200      	movs	r2, #0
 800217e:	4981      	ldr	r1, [pc, #516]	; (8002384 <HAL_I2C_Master_Receive+0x4cc>)
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 fa55 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0f5      	b.n	800237c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021a0:	b672      	cpsid	i
}
 80021a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80021d6:	4b6c      	ldr	r3, [pc, #432]	; (8002388 <HAL_I2C_Master_Receive+0x4d0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	08db      	lsrs	r3, r3, #3
 80021dc:	4a6b      	ldr	r2, [pc, #428]	; (800238c <HAL_I2C_Master_Receive+0x4d4>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0a1a      	lsrs	r2, r3, #8
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00da      	lsls	r2, r3, #3
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d118      	bne.n	800222e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f043 0220 	orr.w	r2, r3, #32
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800221e:	b662      	cpsie	i
}
 8002220:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0a6      	b.n	800237c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b04      	cmp	r3, #4
 800223a:	d1d9      	bne.n	80021f0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800224a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800227e:	b662      	cpsie	i
}
 8002280:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022b4:	e04e      	b.n	8002354 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fb62 	bl	8002984 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e058      	b.n	800237c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b04      	cmp	r3, #4
 8002308:	d124      	bne.n	8002354 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230e:	2b03      	cmp	r3, #3
 8002310:	d107      	bne.n	8002322 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002320:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	2b00      	cmp	r3, #0
 800235a:	f47f ae88 	bne.w	800206e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800237a:	2302      	movs	r3, #2
  }
}
 800237c:	4618      	mov	r0, r3
 800237e:	3728      	adds	r7, #40	; 0x28
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	00010004 	.word	0x00010004
 8002388:	20000010 	.word	0x20000010
 800238c:	14f8b589 	.word	0x14f8b589

08002390 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	460b      	mov	r3, r1
 800239e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d006      	beq.n	80023ba <I2C_MasterRequestWrite+0x2a>
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d003      	beq.n	80023ba <I2C_MasterRequestWrite+0x2a>
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023b8:	d108      	bne.n	80023cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e00b      	b.n	80023e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	2b12      	cmp	r3, #18
 80023d2:	d107      	bne.n	80023e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f91d 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00d      	beq.n	8002418 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800240a:	d103      	bne.n	8002414 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e035      	b.n	8002484 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002420:	d108      	bne.n	8002434 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002422:	897b      	ldrh	r3, [r7, #10]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002430:	611a      	str	r2, [r3, #16]
 8002432:	e01b      	b.n	800246c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002434:	897b      	ldrh	r3, [r7, #10]
 8002436:	11db      	asrs	r3, r3, #7
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f003 0306 	and.w	r3, r3, #6
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f063 030f 	orn	r3, r3, #15
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	490e      	ldr	r1, [pc, #56]	; (800248c <I2C_MasterRequestWrite+0xfc>)
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f966 	bl	8002724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e010      	b.n	8002484 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002462:	897b      	ldrh	r3, [r7, #10]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4907      	ldr	r1, [pc, #28]	; (8002490 <I2C_MasterRequestWrite+0x100>)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f956 	bl	8002724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	00010008 	.word	0x00010008
 8002490:	00010002 	.word	0x00010002

08002494 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	460b      	mov	r3, r1
 80024a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d006      	beq.n	80024ce <I2C_MasterRequestRead+0x3a>
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d003      	beq.n	80024ce <I2C_MasterRequestRead+0x3a>
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024cc:	d108      	bne.n	80024e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e00b      	b.n	80024f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	2b11      	cmp	r3, #17
 80024e6:	d107      	bne.n	80024f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f893 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00d      	beq.n	800252c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800251e:	d103      	bne.n	8002528 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002526:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e079      	b.n	8002620 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002534:	d108      	bne.n	8002548 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002536:	897b      	ldrh	r3, [r7, #10]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	b2da      	uxtb	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	611a      	str	r2, [r3, #16]
 8002546:	e05f      	b.n	8002608 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002548:	897b      	ldrh	r3, [r7, #10]
 800254a:	11db      	asrs	r3, r3, #7
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f003 0306 	and.w	r3, r3, #6
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f063 030f 	orn	r3, r3, #15
 8002558:	b2da      	uxtb	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4930      	ldr	r1, [pc, #192]	; (8002628 <I2C_MasterRequestRead+0x194>)
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f8dc 	bl	8002724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e054      	b.n	8002620 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002576:	897b      	ldrh	r3, [r7, #10]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4929      	ldr	r1, [pc, #164]	; (800262c <I2C_MasterRequestRead+0x198>)
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f8cc 	bl	8002724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e044      	b.n	8002620 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f831 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00d      	beq.n	80025f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e2:	d103      	bne.n	80025ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e017      	b.n	8002620 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80025f0:	897b      	ldrh	r3, [r7, #10]
 80025f2:	11db      	asrs	r3, r3, #7
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f003 0306 	and.w	r3, r3, #6
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f063 030e 	orn	r3, r3, #14
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4907      	ldr	r1, [pc, #28]	; (800262c <I2C_MasterRequestRead+0x198>)
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f888 	bl	8002724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	00010008 	.word	0x00010008
 800262c:	00010002 	.word	0x00010002

08002630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002640:	e048      	b.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d044      	beq.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7fe f9f3 	bl	8000a34 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <I2C_WaitOnFlagUntilTimeout+0x30>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d139      	bne.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	0c1b      	lsrs	r3, r3, #16
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b01      	cmp	r3, #1
 8002668:	d10d      	bne.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x56>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	43da      	mvns	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	4013      	ands	r3, r2
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	e00c      	b.n	80026a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	43da      	mvns	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4013      	ands	r3, r2
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	461a      	mov	r2, r3
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d116      	bne.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e023      	b.n	800271c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	0c1b      	lsrs	r3, r3, #16
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d10d      	bne.n	80026fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	43da      	mvns	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	4013      	ands	r3, r2
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2300      	movne	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	e00c      	b.n	8002714 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	43da      	mvns	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4013      	ands	r3, r2
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	429a      	cmp	r2, r3
 8002718:	d093      	beq.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002732:	e071      	b.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002742:	d123      	bne.n	800278c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002752:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800275c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f043 0204 	orr.w	r2, r3, #4
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e067      	b.n	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d041      	beq.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002794:	f7fe f94e 	bl	8000a34 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d302      	bcc.n	80027aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d136      	bne.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d10c      	bne.n	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4013      	ands	r3, r2
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	e00b      	b.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	43da      	mvns	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4013      	ands	r3, r2
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f043 0220 	orr.w	r2, r3, #32
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e021      	b.n	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	0c1b      	lsrs	r3, r3, #16
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d10c      	bne.n	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	43da      	mvns	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4013      	ands	r3, r2
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e00b      	b.n	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4013      	ands	r3, r2
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	bf14      	ite	ne
 800284e:	2301      	movne	r3, #1
 8002850:	2300      	moveq	r3, #0
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	f47f af6d 	bne.w	8002734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002870:	e034      	b.n	80028dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f8e3 	bl	8002a3e <I2C_IsAcknowledgeFailed>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e034      	b.n	80028ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d028      	beq.n	80028dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288a:	f7fe f8d3 	bl	8000a34 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	429a      	cmp	r2, r3
 8002898:	d302      	bcc.n	80028a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d11d      	bne.n	80028dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028aa:	2b80      	cmp	r3, #128	; 0x80
 80028ac:	d016      	beq.n	80028dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f043 0220 	orr.w	r2, r3, #32
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e007      	b.n	80028ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e6:	2b80      	cmp	r3, #128	; 0x80
 80028e8:	d1c3      	bne.n	8002872 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002900:	e034      	b.n	800296c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f89b 	bl	8002a3e <I2C_IsAcknowledgeFailed>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e034      	b.n	800297c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d028      	beq.n	800296c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291a:	f7fe f88b 	bl	8000a34 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	429a      	cmp	r2, r3
 8002928:	d302      	bcc.n	8002930 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d11d      	bne.n	800296c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b04      	cmp	r3, #4
 800293c:	d016      	beq.n	800296c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f043 0220 	orr.w	r2, r3, #32
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e007      	b.n	800297c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b04      	cmp	r3, #4
 8002978:	d1c3      	bne.n	8002902 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002990:	e049      	b.n	8002a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b10      	cmp	r3, #16
 800299e:	d119      	bne.n	80029d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0210 	mvn.w	r2, #16
 80029a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e030      	b.n	8002a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d4:	f7fe f82e 	bl	8000a34 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d302      	bcc.n	80029ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d11d      	bne.n	8002a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f4:	2b40      	cmp	r3, #64	; 0x40
 80029f6:	d016      	beq.n	8002a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f043 0220 	orr.w	r2, r3, #32
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e007      	b.n	8002a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	d1ae      	bne.n	8002992 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a54:	d11b      	bne.n	8002a8e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a5e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f043 0204 	orr.w	r2, r3, #4
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e272      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8087 	beq.w	8002bca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002abc:	4b92      	ldr	r3, [pc, #584]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d00c      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ac8:	4b8f      	ldr	r3, [pc, #572]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d112      	bne.n	8002afa <HAL_RCC_OscConfig+0x5e>
 8002ad4:	4b8c      	ldr	r3, [pc, #560]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae0:	d10b      	bne.n	8002afa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae2:	4b89      	ldr	r3, [pc, #548]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d06c      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x12c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d168      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e24c      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x76>
 8002b04:	4b80      	ldr	r3, [pc, #512]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a7f      	ldr	r2, [pc, #508]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	e02e      	b.n	8002b70 <HAL_RCC_OscConfig+0xd4>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x98>
 8002b1a:	4b7b      	ldr	r3, [pc, #492]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a7a      	ldr	r2, [pc, #488]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	4b78      	ldr	r3, [pc, #480]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a77      	ldr	r2, [pc, #476]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e01d      	b.n	8002b70 <HAL_RCC_OscConfig+0xd4>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0xbc>
 8002b3e:	4b72      	ldr	r3, [pc, #456]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a71      	ldr	r2, [pc, #452]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	4b6f      	ldr	r3, [pc, #444]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a6e      	ldr	r2, [pc, #440]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e00b      	b.n	8002b70 <HAL_RCC_OscConfig+0xd4>
 8002b58:	4b6b      	ldr	r3, [pc, #428]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a6a      	ldr	r2, [pc, #424]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	4b68      	ldr	r3, [pc, #416]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a67      	ldr	r2, [pc, #412]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d013      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fd ff5c 	bl	8000a34 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b80:	f7fd ff58 	bl	8000a34 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e200      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	4b5d      	ldr	r3, [pc, #372]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0xe4>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fd ff48 	bl	8000a34 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fd ff44 	bl	8000a34 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e1ec      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x10c>
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d063      	beq.n	8002c9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bd6:	4b4c      	ldr	r3, [pc, #304]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002be2:	4b49      	ldr	r3, [pc, #292]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d11c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x18c>
 8002bee:	4b46      	ldr	r3, [pc, #280]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d116      	bne.n	8002c28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	4b43      	ldr	r3, [pc, #268]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_RCC_OscConfig+0x176>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e1c0      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c12:	4b3d      	ldr	r3, [pc, #244]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4939      	ldr	r1, [pc, #228]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c26:	e03a      	b.n	8002c9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d020      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c30:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c36:	f7fd fefd 	bl	8000a34 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3e:	f7fd fef9 	bl	8000a34 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e1a1      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c50:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5c:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4927      	ldr	r1, [pc, #156]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]
 8002c70:	e015      	b.n	8002c9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c72:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fd fedc 	bl	8000a34 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c80:	f7fd fed8 	bl	8000a34 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e180      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d03a      	beq.n	8002d20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d019      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb2:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb8:	f7fd febc 	bl	8000a34 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc0:	f7fd feb8 	bl	8000a34 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e160      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f000 face 	bl	8003280 <RCC_Delay>
 8002ce4:	e01c      	b.n	8002d20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cec:	f7fd fea2 	bl	8000a34 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf2:	e00f      	b.n	8002d14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf4:	f7fd fe9e 	bl	8000a34 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d908      	bls.n	8002d14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e146      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	42420000 	.word	0x42420000
 8002d10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d14:	4b92      	ldr	r3, [pc, #584]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e9      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80a6 	beq.w	8002e7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d32:	4b8b      	ldr	r3, [pc, #556]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10d      	bne.n	8002d5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3e:	4b88      	ldr	r3, [pc, #544]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4a87      	ldr	r2, [pc, #540]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d48:	61d3      	str	r3, [r2, #28]
 8002d4a:	4b85      	ldr	r3, [pc, #532]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d56:	2301      	movs	r3, #1
 8002d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5a:	4b82      	ldr	r3, [pc, #520]	; (8002f64 <HAL_RCC_OscConfig+0x4c8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d118      	bne.n	8002d98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d66:	4b7f      	ldr	r3, [pc, #508]	; (8002f64 <HAL_RCC_OscConfig+0x4c8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a7e      	ldr	r2, [pc, #504]	; (8002f64 <HAL_RCC_OscConfig+0x4c8>)
 8002d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d72:	f7fd fe5f 	bl	8000a34 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7a:	f7fd fe5b 	bl	8000a34 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b64      	cmp	r3, #100	; 0x64
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e103      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	4b75      	ldr	r3, [pc, #468]	; (8002f64 <HAL_RCC_OscConfig+0x4c8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d106      	bne.n	8002dae <HAL_RCC_OscConfig+0x312>
 8002da0:	4b6f      	ldr	r3, [pc, #444]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4a6e      	ldr	r2, [pc, #440]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6213      	str	r3, [r2, #32]
 8002dac:	e02d      	b.n	8002e0a <HAL_RCC_OscConfig+0x36e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x334>
 8002db6:	4b6a      	ldr	r3, [pc, #424]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	4a69      	ldr	r2, [pc, #420]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	6213      	str	r3, [r2, #32]
 8002dc2:	4b67      	ldr	r3, [pc, #412]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4a66      	ldr	r2, [pc, #408]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	f023 0304 	bic.w	r3, r3, #4
 8002dcc:	6213      	str	r3, [r2, #32]
 8002dce:	e01c      	b.n	8002e0a <HAL_RCC_OscConfig+0x36e>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	d10c      	bne.n	8002df2 <HAL_RCC_OscConfig+0x356>
 8002dd8:	4b61      	ldr	r3, [pc, #388]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	4a60      	ldr	r2, [pc, #384]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	f043 0304 	orr.w	r3, r3, #4
 8002de2:	6213      	str	r3, [r2, #32]
 8002de4:	4b5e      	ldr	r3, [pc, #376]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	4a5d      	ldr	r2, [pc, #372]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6213      	str	r3, [r2, #32]
 8002df0:	e00b      	b.n	8002e0a <HAL_RCC_OscConfig+0x36e>
 8002df2:	4b5b      	ldr	r3, [pc, #364]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	4a5a      	ldr	r2, [pc, #360]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	6213      	str	r3, [r2, #32]
 8002dfe:	4b58      	ldr	r3, [pc, #352]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	4a57      	ldr	r2, [pc, #348]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	f023 0304 	bic.w	r3, r3, #4
 8002e08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d015      	beq.n	8002e3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e12:	f7fd fe0f 	bl	8000a34 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7fd fe0b 	bl	8000a34 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e0b1      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	4b4b      	ldr	r3, [pc, #300]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0ee      	beq.n	8002e1a <HAL_RCC_OscConfig+0x37e>
 8002e3c:	e014      	b.n	8002e68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3e:	f7fd fdf9 	bl	8000a34 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7fd fdf5 	bl	8000a34 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e09b      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5c:	4b40      	ldr	r3, [pc, #256]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ee      	bne.n	8002e46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d105      	bne.n	8002e7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6e:	4b3c      	ldr	r3, [pc, #240]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	4a3b      	ldr	r2, [pc, #236]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8087 	beq.w	8002f92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e84:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d061      	beq.n	8002f54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d146      	bne.n	8002f26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e98:	4b33      	ldr	r3, [pc, #204]	; (8002f68 <HAL_RCC_OscConfig+0x4cc>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9e:	f7fd fdc9 	bl	8000a34 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7fd fdc5 	bl	8000a34 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e06d      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb8:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f0      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ecc:	d108      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	4921      	ldr	r1, [pc, #132]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a19      	ldr	r1, [r3, #32]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	491b      	ldr	r1, [pc, #108]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x4cc>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efe:	f7fd fd99 	bl	8000a34 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f06:	f7fd fd95 	bl	8000a34 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e03d      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f0      	beq.n	8002f06 <HAL_RCC_OscConfig+0x46a>
 8002f24:	e035      	b.n	8002f92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <HAL_RCC_OscConfig+0x4cc>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fd fd82 	bl	8000a34 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f34:	f7fd fd7e 	bl	8000a34 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e026      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x498>
 8002f52:	e01e      	b.n	8002f92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d107      	bne.n	8002f6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e019      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40007000 	.word	0x40007000
 8002f68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_OscConfig+0x500>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000

08002fa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0d0      	b.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b6a      	ldr	r3, [pc, #424]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d910      	bls.n	8002fe4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b67      	ldr	r3, [pc, #412]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 0207 	bic.w	r2, r3, #7
 8002fca:	4965      	ldr	r1, [pc, #404]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd2:	4b63      	ldr	r3, [pc, #396]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0b8      	b.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d020      	beq.n	8003032 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ffc:	4b59      	ldr	r3, [pc, #356]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4a58      	ldr	r2, [pc, #352]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003006:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003014:	4b53      	ldr	r3, [pc, #332]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4a52      	ldr	r2, [pc, #328]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800301e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003020:	4b50      	ldr	r3, [pc, #320]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	494d      	ldr	r1, [pc, #308]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d040      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d115      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e07f      	b.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d107      	bne.n	800306e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305e:	4b41      	ldr	r3, [pc, #260]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e073      	b.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306e:	4b3d      	ldr	r3, [pc, #244]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e06b      	b.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307e:	4b39      	ldr	r3, [pc, #228]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f023 0203 	bic.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4936      	ldr	r1, [pc, #216]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003090:	f7fd fcd0 	bl	8000a34 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	e00a      	b.n	80030ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003098:	f7fd fccc 	bl	8000a34 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e053      	b.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	4b2d      	ldr	r3, [pc, #180]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 020c 	and.w	r2, r3, #12
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	429a      	cmp	r2, r3
 80030be:	d1eb      	bne.n	8003098 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030c0:	4b27      	ldr	r3, [pc, #156]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d210      	bcs.n	80030f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b24      	ldr	r3, [pc, #144]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0207 	bic.w	r2, r3, #7
 80030d6:	4922      	ldr	r1, [pc, #136]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b20      	ldr	r3, [pc, #128]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e032      	b.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4916      	ldr	r1, [pc, #88]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800311a:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	490e      	ldr	r1, [pc, #56]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800312e:	f000 f821 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 8003132:	4602      	mov	r2, r0
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	490a      	ldr	r1, [pc, #40]	; (8003168 <HAL_RCC_ClockConfig+0x1c8>)
 8003140:	5ccb      	ldrb	r3, [r1, r3]
 8003142:	fa22 f303 	lsr.w	r3, r2, r3
 8003146:	4a09      	ldr	r2, [pc, #36]	; (800316c <HAL_RCC_ClockConfig+0x1cc>)
 8003148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_ClockConfig+0x1d0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd fc2e 	bl	80009b0 <HAL_InitTick>

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40022000 	.word	0x40022000
 8003164:	40021000 	.word	0x40021000
 8003168:	0800908c 	.word	0x0800908c
 800316c:	20000010 	.word	0x20000010
 8003170:	20000014 	.word	0x20000014

08003174 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	2300      	movs	r3, #0
 8003188:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800318e:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <HAL_RCC_GetSysClockFreq+0x94>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b04      	cmp	r3, #4
 800319c:	d002      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0x30>
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d003      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x36>
 80031a2:	e027      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031a4:	4b19      	ldr	r3, [pc, #100]	; (800320c <HAL_RCC_GetSysClockFreq+0x98>)
 80031a6:	613b      	str	r3, [r7, #16]
      break;
 80031a8:	e027      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	0c9b      	lsrs	r3, r3, #18
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	4a17      	ldr	r2, [pc, #92]	; (8003210 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031b4:	5cd3      	ldrb	r3, [r2, r3]
 80031b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d010      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031c2:	4b11      	ldr	r3, [pc, #68]	; (8003208 <HAL_RCC_GetSysClockFreq+0x94>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	0c5b      	lsrs	r3, r3, #17
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	4a11      	ldr	r2, [pc, #68]	; (8003214 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031ce:	5cd3      	ldrb	r3, [r2, r3]
 80031d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a0d      	ldr	r2, [pc, #52]	; (800320c <HAL_RCC_GetSysClockFreq+0x98>)
 80031d6:	fb03 f202 	mul.w	r2, r3, r2
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	e004      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031e8:	fb02 f303 	mul.w	r3, r2, r3
 80031ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	613b      	str	r3, [r7, #16]
      break;
 80031f2:	e002      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCC_GetSysClockFreq+0x98>)
 80031f6:	613b      	str	r3, [r7, #16]
      break;
 80031f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031fa:	693b      	ldr	r3, [r7, #16]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	371c      	adds	r7, #28
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	007a1200 	.word	0x007a1200
 8003210:	080090a4 	.word	0x080090a4
 8003214:	080090b4 	.word	0x080090b4
 8003218:	003d0900 	.word	0x003d0900

0800321c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003220:	4b02      	ldr	r3, [pc, #8]	; (800322c <HAL_RCC_GetHCLKFreq+0x10>)
 8003222:	681b      	ldr	r3, [r3, #0]
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr
 800322c:	20000010 	.word	0x20000010

08003230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003234:	f7ff fff2 	bl	800321c <HAL_RCC_GetHCLKFreq>
 8003238:	4602      	mov	r2, r0
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	4903      	ldr	r1, [pc, #12]	; (8003254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003246:	5ccb      	ldrb	r3, [r1, r3]
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800324c:	4618      	mov	r0, r3
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	0800909c 	.word	0x0800909c

08003258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800325c:	f7ff ffde 	bl	800321c <HAL_RCC_GetHCLKFreq>
 8003260:	4602      	mov	r2, r0
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	0adb      	lsrs	r3, r3, #11
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	4903      	ldr	r1, [pc, #12]	; (800327c <HAL_RCC_GetPCLK2Freq+0x24>)
 800326e:	5ccb      	ldrb	r3, [r1, r3]
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	0800909c 	.word	0x0800909c

08003280 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <RCC_Delay+0x34>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <RCC_Delay+0x38>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	0a5b      	lsrs	r3, r3, #9
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800329c:	bf00      	nop
  }
  while (Delay --);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1e5a      	subs	r2, r3, #1
 80032a2:	60fa      	str	r2, [r7, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f9      	bne.n	800329c <RCC_Delay+0x1c>
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr
 80032b4:	20000010 	.word	0x20000010
 80032b8:	10624dd3 	.word	0x10624dd3

080032bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e042      	b.n	8003354 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd fa50 	bl	8000788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f82b 	bl	800335c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003396:	f023 030c 	bic.w	r3, r3, #12
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a2c      	ldr	r2, [pc, #176]	; (8003470 <UART_SetConfig+0x114>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d103      	bne.n	80033cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033c4:	f7ff ff48 	bl	8003258 <HAL_RCC_GetPCLK2Freq>
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	e002      	b.n	80033d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033cc:	f7ff ff30 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 80033d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	009a      	lsls	r2, r3, #2
 80033dc:	441a      	add	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	4a22      	ldr	r2, [pc, #136]	; (8003474 <UART_SetConfig+0x118>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	0119      	lsls	r1, r3, #4
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	009a      	lsls	r2, r3, #2
 80033fc:	441a      	add	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	fbb2 f2f3 	udiv	r2, r2, r3
 8003408:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <UART_SetConfig+0x118>)
 800340a:	fba3 0302 	umull	r0, r3, r3, r2
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	2064      	movs	r0, #100	; 0x64
 8003412:	fb00 f303 	mul.w	r3, r0, r3
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	3332      	adds	r3, #50	; 0x32
 800341c:	4a15      	ldr	r2, [pc, #84]	; (8003474 <UART_SetConfig+0x118>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003428:	4419      	add	r1, r3
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009a      	lsls	r2, r3, #2
 8003434:	441a      	add	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <UART_SetConfig+0x118>)
 8003442:	fba3 0302 	umull	r0, r3, r3, r2
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2064      	movs	r0, #100	; 0x64
 800344a:	fb00 f303 	mul.w	r3, r0, r3
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	3332      	adds	r3, #50	; 0x32
 8003454:	4a07      	ldr	r2, [pc, #28]	; (8003474 <UART_SetConfig+0x118>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	f003 020f 	and.w	r2, r3, #15
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	440a      	add	r2, r1
 8003466:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40013800 	.word	0x40013800
 8003474:	51eb851f 	.word	0x51eb851f

08003478 <GPIO_WritePin>:
{
	return HAL_GPIO_TogglePin(GPIO.Port, GPIO.Pin);
}

void GPIO_WritePin(GPIO_HandlerStruct GPIO, uint32_t PinState)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	f107 0308 	add.w	r3, r7, #8
 8003482:	e883 0003 	stmia.w	r3, {r0, r1}
 8003486:	607a      	str	r2, [r7, #4]
	return HAL_GPIO_WritePin(GPIO.Port, GPIO.Pin, PinState);
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	b291      	uxth	r1, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f7fe fab6 	bl	8001a04 <HAL_GPIO_WritePin>
}
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034a8:	2300      	movs	r3, #0
 80034aa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80034ac:	6839      	ldr	r1, [r7, #0]
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f001 fcb1 	bl	8004e16 <VL53L0X_get_offset_calibration_data_micro_meter>
 80034b4:	4603      	mov	r3, r0
 80034b6:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80034b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	461a      	mov	r2, r3
 80034d8:	218a      	movs	r1, #138	; 0x8a
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f004 fea8 	bl	8008230 <VL53L0X_WrByte>
 80034e0:	4603      	mov	r3, r0
 80034e2:	73fb      	strb	r3, [r7, #15]
		DeviceAddress);

	LOG_FUNCTION_END(Status);
	return Status;
 80034e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80034f0:	b5b0      	push	{r4, r5, r7, lr}
 80034f2:	b096      	sub	sp, #88	; 0x58
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80034fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003502:	2b00      	cmp	r3, #0
 8003504:	d107      	bne.n	8003516 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8003506:	2200      	movs	r2, #0
 8003508:	2188      	movs	r1, #136	; 0x88
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f004 fe90 	bl	8008230 <VL53L0X_WrByte>
 8003510:	4603      	mov	r3, r0
 8003512:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003524:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800352e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a9e      	ldr	r2, [pc, #632]	; (80037b0 <VL53L0X_DataInit+0x2c0>)
 8003536:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a9d      	ldr	r2, [pc, #628]	; (80037b4 <VL53L0X_DataInit+0x2c4>)
 800353e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003548:	f107 0310 	add.w	r3, r7, #16
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fab4 	bl	8003abc <VL53L0X_GetDeviceParameters>
 8003554:	4603      	mov	r3, r0
 8003556:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800355a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800355e:	2b00      	cmp	r3, #0
 8003560:	d112      	bne.n	8003588 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8003562:	2300      	movs	r3, #0
 8003564:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8003566:	2300      	movs	r3, #0
 8003568:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f103 0410 	add.w	r4, r3, #16
 8003570:	f107 0510 	add.w	r5, r7, #16
 8003574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800357a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800357c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800357e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003580:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2264      	movs	r2, #100	; 0x64
 800358c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003596:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80035a0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80035aa:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80035b6:	2201      	movs	r2, #1
 80035b8:	2180      	movs	r1, #128	; 0x80
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f004 fe38 	bl	8008230 <VL53L0X_WrByte>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80035ce:	2201      	movs	r2, #1
 80035d0:	21ff      	movs	r1, #255	; 0xff
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f004 fe2c 	bl	8008230 <VL53L0X_WrByte>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80035e6:	2200      	movs	r2, #0
 80035e8:	2100      	movs	r1, #0
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f004 fe20 	bl	8008230 <VL53L0X_WrByte>
 80035f0:	4603      	mov	r3, r0
 80035f2:	461a      	mov	r2, r3
 80035f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80035fe:	f107 030f 	add.w	r3, r7, #15
 8003602:	461a      	mov	r2, r3
 8003604:	2191      	movs	r1, #145	; 0x91
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f004 fe94 	bl	8008334 <VL53L0X_RdByte>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003614:	4313      	orrs	r3, r2
 8003616:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800361a:	7bfa      	ldrb	r2, [r7, #15]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003622:	2201      	movs	r2, #1
 8003624:	2100      	movs	r1, #0
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f004 fe02 	bl	8008230 <VL53L0X_WrByte>
 800362c:	4603      	mov	r3, r0
 800362e:	461a      	mov	r2, r3
 8003630:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003634:	4313      	orrs	r3, r2
 8003636:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800363a:	2200      	movs	r2, #0
 800363c:	21ff      	movs	r1, #255	; 0xff
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f004 fdf6 	bl	8008230 <VL53L0X_WrByte>
 8003644:	4603      	mov	r3, r0
 8003646:	461a      	mov	r2, r3
 8003648:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800364c:	4313      	orrs	r3, r2
 800364e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003652:	2200      	movs	r2, #0
 8003654:	2180      	movs	r1, #128	; 0x80
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f004 fdea 	bl	8008230 <VL53L0X_WrByte>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003664:	4313      	orrs	r3, r2
 8003666:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800366a:	2300      	movs	r3, #0
 800366c:	653b      	str	r3, [r7, #80]	; 0x50
 800366e:	e014      	b.n	800369a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8003670:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003674:	2b00      	cmp	r3, #0
 8003676:	d114      	bne.n	80036a2 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8003678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800367a:	b29b      	uxth	r3, r3
 800367c:	2201      	movs	r2, #1
 800367e:	4619      	mov	r1, r3
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fd23 	bl	80040cc <VL53L0X_SetLimitCheckEnable>
 8003686:	4603      	mov	r3, r0
 8003688:	461a      	mov	r2, r3
 800368a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800368e:	4313      	orrs	r3, r2
 8003690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003696:	3301      	adds	r3, #1
 8003698:	653b      	str	r3, [r7, #80]	; 0x50
 800369a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800369c:	2b05      	cmp	r3, #5
 800369e:	dde7      	ble.n	8003670 <VL53L0X_DataInit+0x180>
 80036a0:	e000      	b.n	80036a4 <VL53L0X_DataInit+0x1b4>
		else
			break;
 80036a2:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80036a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d107      	bne.n	80036bc <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80036ac:	2200      	movs	r2, #0
 80036ae:	2102      	movs	r1, #2
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fd0b 	bl	80040cc <VL53L0X_SetLimitCheckEnable>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80036bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d107      	bne.n	80036d4 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80036c4:	2200      	movs	r2, #0
 80036c6:	2103      	movs	r1, #3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fcff 	bl	80040cc <VL53L0X_SetLimitCheckEnable>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80036d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80036dc:	2200      	movs	r2, #0
 80036de:	2104      	movs	r1, #4
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fcf3 	bl	80040cc <VL53L0X_SetLimitCheckEnable>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80036ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d107      	bne.n	8003704 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80036f4:	2200      	movs	r2, #0
 80036f6:	2105      	movs	r1, #5
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fce7 	bl	80040cc <VL53L0X_SetLimitCheckEnable>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8003704:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003708:	2b00      	cmp	r3, #0
 800370a:	d108      	bne.n	800371e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800370c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8003710:	2100      	movs	r1, #0
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fd88 	bl	8004228 <VL53L0X_SetLimitCheckValue>
 8003718:	4603      	mov	r3, r0
 800371a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800371e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003722:	2b00      	cmp	r3, #0
 8003724:	d108      	bne.n	8003738 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003726:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800372a:	2101      	movs	r1, #1
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fd7b 	bl	8004228 <VL53L0X_SetLimitCheckValue>
 8003732:	4603      	mov	r3, r0
 8003734:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003738:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800373c:	2b00      	cmp	r3, #0
 800373e:	d108      	bne.n	8003752 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003740:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8003744:	2102      	movs	r1, #2
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fd6e 	bl	8004228 <VL53L0X_SetLimitCheckValue>
 800374c:	4603      	mov	r3, r0
 800374e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003752:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003756:	2b00      	cmp	r3, #0
 8003758:	d107      	bne.n	800376a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800375a:	2200      	movs	r2, #0
 800375c:	2103      	movs	r1, #3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fd62 	bl	8004228 <VL53L0X_SetLimitCheckValue>
 8003764:	4603      	mov	r3, r0
 8003766:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800376a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10f      	bne.n	8003792 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	22ff      	movs	r2, #255	; 0xff
 8003776:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800377a:	22ff      	movs	r2, #255	; 0xff
 800377c:	2101      	movs	r1, #1
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f004 fd56 	bl	8008230 <VL53L0X_WrByte>
 8003784:	4603      	mov	r3, r0
 8003786:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8003792:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003796:	2b00      	cmp	r3, #0
 8003798:	d103      	bne.n	80037a2 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80037a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3758      	adds	r7, #88	; 0x58
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bdb0      	pop	{r4, r5, r7, pc}
 80037ae:	bf00      	nop
 80037b0:	00016b85 	.word	0x00016b85
 80037b4:	000970a4 	.word	0x000970a4

080037b8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80037b8:	b5b0      	push	{r4, r5, r7, lr}
 80037ba:	b09e      	sub	sp, #120	; 0x78
 80037bc:	af02      	add	r7, sp, #8
 80037be:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80037c6:	f107 031c 	add.w	r3, r7, #28
 80037ca:	2240      	movs	r2, #64	; 0x40
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f004 ffb2 	bl	8008738 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80037f4:	2101      	movs	r1, #1
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f002 fa5f 	bl	8005cba <VL53L0X_get_info_from_device>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8003808:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8003810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8003814:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003818:	2b01      	cmp	r3, #1
 800381a:	d80d      	bhi.n	8003838 <VL53L0X_StaticInit+0x80>
 800381c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003820:	2b01      	cmp	r3, #1
 8003822:	d102      	bne.n	800382a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8003824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003826:	2b20      	cmp	r3, #32
 8003828:	d806      	bhi.n	8003838 <VL53L0X_StaticInit+0x80>
 800382a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10e      	bne.n	8003850 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8003832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003834:	2b0c      	cmp	r3, #12
 8003836:	d90b      	bls.n	8003850 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8003838:	f107 0218 	add.w	r2, r7, #24
 800383c:	f107 0314 	add.w	r3, r7, #20
 8003840:	4619      	mov	r1, r3
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f001 fce1 	bl	800520a <VL53L0X_perform_ref_spad_management>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800384e:	e009      	b.n	8003864 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8003850:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003854:	461a      	mov	r2, r3
 8003856:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f001 fee2 	bl	8005622 <VL53L0X_set_reference_spads>
 800385e:	4603      	mov	r3, r0
 8003860:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003864:	4b94      	ldr	r3, [pc, #592]	; (8003ab8 <VL53L0X_StaticInit+0x300>)
 8003866:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8003868:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10f      	bne.n	8003890 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8003876:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800387a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003888:	66bb      	str	r3, [r7, #104]	; 0x68
 800388a:	e001      	b.n	8003890 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800388c:	4b8a      	ldr	r3, [pc, #552]	; (8003ab8 <VL53L0X_StaticInit+0x300>)
 800388e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003890:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003894:	2b00      	cmp	r3, #0
 8003896:	d106      	bne.n	80038a6 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003898:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f003 fdae 	bl	80073fc <VL53L0X_load_tuning_settings>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80038a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80038ae:	2300      	movs	r3, #0
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	2304      	movs	r3, #4
 80038b4:	2200      	movs	r2, #0
 80038b6:	2100      	movs	r1, #0
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f001 f8dd 	bl	8004a78 <VL53L0X_SetGpioConfig>
 80038be:	4603      	mov	r3, r0
 80038c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80038c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d121      	bne.n	8003910 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80038cc:	2201      	movs	r2, #1
 80038ce:	21ff      	movs	r1, #255	; 0xff
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f004 fcad 	bl	8008230 <VL53L0X_WrByte>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80038dc:	f107 031a 	add.w	r3, r7, #26
 80038e0:	461a      	mov	r2, r3
 80038e2:	2184      	movs	r1, #132	; 0x84
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f004 fd4f 	bl	8008388 <VL53L0X_RdWord>
 80038ea:	4603      	mov	r3, r0
 80038ec:	461a      	mov	r2, r3
 80038ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80038f8:	2200      	movs	r2, #0
 80038fa:	21ff      	movs	r1, #255	; 0xff
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f004 fc97 	bl	8008230 <VL53L0X_WrByte>
 8003902:	4603      	mov	r3, r0
 8003904:	461a      	mov	r2, r3
 8003906:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800390a:	4313      	orrs	r3, r2
 800390c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003910:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003914:	2b00      	cmp	r3, #0
 8003916:	d105      	bne.n	8003924 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003918:	8b7b      	ldrh	r3, [r7, #26]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	461a      	mov	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003924:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003928:	2b00      	cmp	r3, #0
 800392a:	d108      	bne.n	800393e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800392c:	f107 031c 	add.w	r3, r7, #28
 8003930:	4619      	mov	r1, r3
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f8c2 	bl	8003abc <VL53L0X_GetDeviceParameters>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800393e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003942:	2b00      	cmp	r3, #0
 8003944:	d110      	bne.n	8003968 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003946:	f107 0319 	add.w	r3, r7, #25
 800394a:	4619      	mov	r1, r3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f983 	bl	8003c58 <VL53L0X_GetFractionEnable>
 8003952:	4603      	mov	r3, r0
 8003954:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8003958:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800395c:	2b00      	cmp	r3, #0
 800395e:	d103      	bne.n	8003968 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003960:	7e7a      	ldrb	r2, [r7, #25]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003968:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10e      	bne.n	800398e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f103 0410 	add.w	r4, r3, #16
 8003976:	f107 051c 	add.w	r5, r7, #28
 800397a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800397c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800397e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003986:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800398a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800398e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003992:	2b00      	cmp	r3, #0
 8003994:	d111      	bne.n	80039ba <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8003996:	f107 0319 	add.w	r3, r7, #25
 800399a:	461a      	mov	r2, r3
 800399c:	2101      	movs	r1, #1
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f004 fcc8 	bl	8008334 <VL53L0X_RdByte>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80039aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d103      	bne.n	80039ba <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80039b2:	7e7a      	ldrb	r2, [r7, #25]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80039ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d107      	bne.n	80039d2 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80039c2:	2200      	movs	r2, #0
 80039c4:	2100      	movs	r1, #0
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f9ba 	bl	8003d40 <VL53L0X_SetSequenceStepEnable>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80039d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d107      	bne.n	80039ea <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80039da:	2200      	movs	r2, #0
 80039dc:	2102      	movs	r1, #2
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f9ae 	bl	8003d40 <VL53L0X_SetSequenceStepEnable>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80039ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2203      	movs	r2, #3
 80039f6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80039fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003a02:	f107 0313 	add.w	r3, r7, #19
 8003a06:	461a      	mov	r2, r3
 8003a08:	2100      	movs	r1, #0
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f981 	bl	8003d12 <VL53L0X_GetVcselPulsePeriod>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003a16:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003a1e:	7cfa      	ldrb	r2, [r7, #19]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003a26:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003a2e:	f107 0313 	add.w	r3, r7, #19
 8003a32:	461a      	mov	r2, r3
 8003a34:	2101      	movs	r1, #1
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f96b 	bl	8003d12 <VL53L0X_GetVcselPulsePeriod>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003a42:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003a4a:	7cfa      	ldrb	r2, [r7, #19]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003a52:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8003a5a:	f107 030c 	add.w	r3, r7, #12
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2103      	movs	r1, #3
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f002 fea8 	bl	80067b8 <get_sequence_step_timeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003a6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d103      	bne.n	8003a7e <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003a7e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8003a86:	f107 030c 	add.w	r3, r7, #12
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	2104      	movs	r1, #4
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f002 fe92 	bl	80067b8 <get_sequence_step_timeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003a9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003aaa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3770      	adds	r7, #112	; 0x70
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000001c 	.word	0x2000001c

08003abc <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	4619      	mov	r1, r3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f8b0 	bl	8003c34 <VL53L0X_GetDeviceMode>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d107      	bne.n	8003af0 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fa74 	bl	8003fd4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003aec:	4603      	mov	r3, r0
 8003aee:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2200      	movs	r2, #0
 8003afc:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d107      	bne.n	8003b16 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	3310      	adds	r3, #16
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 faa9 	bl	8004064 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8003b12:	4603      	mov	r3, r0
 8003b14:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d107      	bne.n	8003b2e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	3314      	adds	r3, #20
 8003b22:	4619      	mov	r1, r3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff fcba 	bl	800349e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d134      	bne.n	8003ba0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	e02a      	b.n	8003b92 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d12a      	bne.n	8003b9a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	b299      	uxth	r1, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	4413      	add	r3, r2
 8003b52:	3304      	adds	r3, #4
 8003b54:	461a      	mov	r2, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fbc8 	bl	80042ec <VL53L0X_GetLimitCheckValue>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	461a      	mov	r2, r3
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8003b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d117      	bne.n	8003b9e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	b299      	uxth	r1, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	3318      	adds	r3, #24
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	4413      	add	r3, r2
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fb31 	bl	80041e4 <VL53L0X_GetLimitCheckEnable>
 8003b82:	4603      	mov	r3, r0
 8003b84:	461a      	mov	r2, r3
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	ddd1      	ble.n	8003b3c <VL53L0X_GetDeviceParameters+0x80>
 8003b98:	e002      	b.n	8003ba0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003b9a:	bf00      	nop
 8003b9c:	e000      	b.n	8003ba0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003b9e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d107      	bne.n	8003bb8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	333c      	adds	r3, #60	; 0x3c
 8003bac:	4619      	mov	r1, r3
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fc2a 	bl	8004408 <VL53L0X_GetWrapAroundCheckEnable>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d107      	bne.n	8003bd0 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f878 	bl	8003cbc <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	2b15      	cmp	r3, #21
 8003bf0:	bf8c      	ite	hi
 8003bf2:	2201      	movhi	r2, #1
 8003bf4:	2200      	movls	r2, #0
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	2a00      	cmp	r2, #0
 8003bfa:	d10f      	bne.n	8003c1c <VL53L0X_SetDeviceMode+0x40>
 8003bfc:	4a0c      	ldr	r2, [pc, #48]	; (8003c30 <VL53L0X_SetDeviceMode+0x54>)
 8003bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf14      	ite	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	2300      	moveq	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	78fa      	ldrb	r2, [r7, #3]
 8003c18:	741a      	strb	r2, [r3, #16]
		break;
 8003c1a:	e001      	b.n	8003c20 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003c1c:	23f8      	movs	r3, #248	; 0xf8
 8003c1e:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	0030000b 	.word	0x0030000b

08003c34 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	7c1a      	ldrb	r2, [r3, #16]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	2109      	movs	r1, #9
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f004 fb62 	bl	8008334 <VL53L0X_RdByte>
 8003c70:	4603      	mov	r3, r0
 8003c72:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8003ca4:	6839      	ldr	r1, [r7, #0]
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f003 fa17 	bl	80070da <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003cac:	4603      	mov	r3, r0
 8003cae:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8003cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003cca:	6839      	ldr	r1, [r7, #0]
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f003 fae4 	bl	800729a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	70fb      	strb	r3, [r7, #3]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8003cf6:	78ba      	ldrb	r2, [r7, #2]
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f002 ff2e 	bl	8006b5e <VL53L0X_set_vcsel_pulse_period>
 8003d02:	4603      	mov	r3, r0
 8003d04:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b086      	sub	sp, #24
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003d24:	7afb      	ldrb	r3, [r7, #11]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f003 f99e 	bl	800706c <VL53L0X_get_vcsel_pulse_period>
 8003d30:	4603      	mov	r3, r0
 8003d32:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	70fb      	strb	r3, [r7, #3]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003d5c:	f107 030f 	add.w	r3, r7, #15
 8003d60:	461a      	mov	r2, r3
 8003d62:	2101      	movs	r1, #1
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f004 fae5 	bl	8008334 <VL53L0X_RdByte>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8003d72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d159      	bne.n	8003e2e <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8003d7a:	78bb      	ldrb	r3, [r7, #2]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d12b      	bne.n	8003dd8 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d825      	bhi.n	8003dd2 <VL53L0X_SetSequenceStepEnable+0x92>
 8003d86:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003da1 	.word	0x08003da1
 8003d90:	08003dab 	.word	0x08003dab
 8003d94:	08003db5 	.word	0x08003db5
 8003d98:	08003dbf 	.word	0x08003dbf
 8003d9c:	08003dc9 	.word	0x08003dc9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8003da0:	7dbb      	ldrb	r3, [r7, #22]
 8003da2:	f043 0310 	orr.w	r3, r3, #16
 8003da6:	75bb      	strb	r3, [r7, #22]
				break;
 8003da8:	e041      	b.n	8003e2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8003daa:	7dbb      	ldrb	r3, [r7, #22]
 8003dac:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003db0:	75bb      	strb	r3, [r7, #22]
				break;
 8003db2:	e03c      	b.n	8003e2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8003db4:	7dbb      	ldrb	r3, [r7, #22]
 8003db6:	f043 0304 	orr.w	r3, r3, #4
 8003dba:	75bb      	strb	r3, [r7, #22]
				break;
 8003dbc:	e037      	b.n	8003e2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8003dbe:	7dbb      	ldrb	r3, [r7, #22]
 8003dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc4:	75bb      	strb	r3, [r7, #22]
				break;
 8003dc6:	e032      	b.n	8003e2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8003dc8:	7dbb      	ldrb	r3, [r7, #22]
 8003dca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dce:	75bb      	strb	r3, [r7, #22]
				break;
 8003dd0:	e02d      	b.n	8003e2e <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003dd2:	23fc      	movs	r3, #252	; 0xfc
 8003dd4:	75fb      	strb	r3, [r7, #23]
 8003dd6:	e02a      	b.n	8003e2e <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d825      	bhi.n	8003e2a <VL53L0X_SetSequenceStepEnable+0xea>
 8003dde:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8003de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de4:	08003df9 	.word	0x08003df9
 8003de8:	08003e03 	.word	0x08003e03
 8003dec:	08003e0d 	.word	0x08003e0d
 8003df0:	08003e17 	.word	0x08003e17
 8003df4:	08003e21 	.word	0x08003e21
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8003df8:	7dbb      	ldrb	r3, [r7, #22]
 8003dfa:	f023 0310 	bic.w	r3, r3, #16
 8003dfe:	75bb      	strb	r3, [r7, #22]
				break;
 8003e00:	e015      	b.n	8003e2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8003e02:	7dbb      	ldrb	r3, [r7, #22]
 8003e04:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003e08:	75bb      	strb	r3, [r7, #22]
				break;
 8003e0a:	e010      	b.n	8003e2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8003e0c:	7dbb      	ldrb	r3, [r7, #22]
 8003e0e:	f023 0304 	bic.w	r3, r3, #4
 8003e12:	75bb      	strb	r3, [r7, #22]
				break;
 8003e14:	e00b      	b.n	8003e2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8003e16:	7dbb      	ldrb	r3, [r7, #22]
 8003e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e1c:	75bb      	strb	r3, [r7, #22]
				break;
 8003e1e:	e006      	b.n	8003e2e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8003e20:	7dbb      	ldrb	r3, [r7, #22]
 8003e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e26:	75bb      	strb	r3, [r7, #22]
				break;
 8003e28:	e001      	b.n	8003e2e <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003e2a:	23fc      	movs	r3, #252	; 0xfc
 8003e2c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	7dba      	ldrb	r2, [r7, #22]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d01e      	beq.n	8003e74 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8003e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d107      	bne.n	8003e4e <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8003e3e:	7dbb      	ldrb	r3, [r7, #22]
 8003e40:	461a      	mov	r2, r3
 8003e42:	2101      	movs	r1, #1
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f004 f9f3 	bl	8008230 <VL53L0X_WrByte>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8003e4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	7dba      	ldrb	r2, [r7, #22]
 8003e5a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8003e5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8003e6c:	6939      	ldr	r1, [r7, #16]
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff ff11 	bl	8003c96 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8003e74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	607b      	str	r3, [r7, #4]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	72fb      	strb	r3, [r7, #11]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e92:	2300      	movs	r3, #0
 8003e94:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8003e9c:	7afb      	ldrb	r3, [r7, #11]
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d836      	bhi.n	8003f10 <sequence_step_enabled+0x90>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <sequence_step_enabled+0x28>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003ebd 	.word	0x08003ebd
 8003eac:	08003ecf 	.word	0x08003ecf
 8003eb0:	08003ee1 	.word	0x08003ee1
 8003eb4:	08003ef3 	.word	0x08003ef3
 8003eb8:	08003f05 	.word	0x08003f05
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8003ebc:	7abb      	ldrb	r3, [r7, #10]
 8003ebe:	111b      	asrs	r3, r3, #4
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	701a      	strb	r2, [r3, #0]
		break;
 8003ecc:	e022      	b.n	8003f14 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8003ece:	7abb      	ldrb	r3, [r7, #10]
 8003ed0:	10db      	asrs	r3, r3, #3
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	701a      	strb	r2, [r3, #0]
		break;
 8003ede:	e019      	b.n	8003f14 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8003ee0:	7abb      	ldrb	r3, [r7, #10]
 8003ee2:	109b      	asrs	r3, r3, #2
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	701a      	strb	r2, [r3, #0]
		break;
 8003ef0:	e010      	b.n	8003f14 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8003ef2:	7abb      	ldrb	r3, [r7, #10]
 8003ef4:	119b      	asrs	r3, r3, #6
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	701a      	strb	r2, [r3, #0]
		break;
 8003f02:	e007      	b.n	8003f14 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8003f04:	7abb      	ldrb	r3, [r7, #10]
 8003f06:	09db      	lsrs	r3, r3, #7
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	701a      	strb	r2, [r3, #0]
		break;
 8003f0e:	e001      	b.n	8003f14 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003f10:	23fc      	movs	r3, #252	; 0xfc
 8003f12:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003f14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop

08003f24 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003f36:	f107 030e 	add.w	r3, r7, #14
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f004 f9f8 	bl	8008334 <VL53L0X_RdByte>
 8003f44:	4603      	mov	r3, r0
 8003f46:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8003f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d107      	bne.n	8003f60 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8003f50:	7bba      	ldrb	r2, [r7, #14]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2100      	movs	r1, #0
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff ff92 	bl	8003e80 <sequence_step_enabled>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d108      	bne.n	8003f7a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8003f68:	7bba      	ldrb	r2, [r7, #14]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	3302      	adds	r3, #2
 8003f6e:	2101      	movs	r1, #1
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff ff85 	bl	8003e80 <sequence_step_enabled>
 8003f76:	4603      	mov	r3, r0
 8003f78:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d108      	bne.n	8003f94 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8003f82:	7bba      	ldrb	r2, [r7, #14]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	3301      	adds	r3, #1
 8003f88:	2102      	movs	r1, #2
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff ff78 	bl	8003e80 <sequence_step_enabled>
 8003f90:	4603      	mov	r3, r0
 8003f92:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d108      	bne.n	8003fae <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8003f9c:	7bba      	ldrb	r2, [r7, #14]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	3303      	adds	r3, #3
 8003fa2:	2103      	movs	r1, #3
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff ff6b 	bl	8003e80 <sequence_step_enabled>
 8003faa:	4603      	mov	r3, r0
 8003fac:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d108      	bne.n	8003fc8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8003fb6:	7bba      	ldrb	r2, [r7, #14]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	2104      	movs	r1, #4
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff ff5e 	bl	8003e80 <sequence_step_enabled>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8003fe2:	f107 030c 	add.w	r3, r7, #12
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	21f8      	movs	r1, #248	; 0xf8
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f004 f9cc 	bl	8008388 <VL53L0X_RdWord>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8003ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d108      	bne.n	800400e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8003ffc:	f107 0308 	add.w	r3, r7, #8
 8004000:	461a      	mov	r2, r3
 8004002:	2104      	movs	r1, #4
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f004 f9f7 	bl	80083f8 <VL53L0X_RdDWord>
 800400a:	4603      	mov	r3, r0
 800400c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800400e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10c      	bne.n	8004030 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8004016:	89bb      	ldrh	r3, [r7, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	89ba      	ldrh	r2, [r7, #12]
 8004020:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004030:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	7f1b      	ldrb	r3, [r3, #28]
 800404e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	7bba      	ldrb	r2, [r7, #14]
 8004054:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004056:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800406e:	2300      	movs	r3, #0
 8004070:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8004072:	f107 030e 	add.w	r3, r7, #14
 8004076:	461a      	mov	r2, r3
 8004078:	2120      	movs	r1, #32
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f004 f984 	bl	8008388 <VL53L0X_RdWord>
 8004080:	4603      	mov	r3, r0
 8004082:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8004084:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d118      	bne.n	80040be <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800408c:	89fb      	ldrh	r3, [r7, #14]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d109      	bne.n	80040a6 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	771a      	strb	r2, [r3, #28]
 80040a4:	e00b      	b.n	80040be <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80040a6:	89fb      	ldrh	r3, [r7, #14]
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80040be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	807b      	strh	r3, [r7, #2]
 80040d8:	4613      	mov	r3, r2
 80040da:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040dc:	2300      	movs	r3, #0
 80040de:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80040ec:	887b      	ldrh	r3, [r7, #2]
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	d902      	bls.n	80040f8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80040f2:	23fc      	movs	r3, #252	; 0xfc
 80040f4:	75fb      	strb	r3, [r7, #23]
 80040f6:	e05b      	b.n	80041b0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80040f8:	787b      	ldrb	r3, [r7, #1]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8004106:	2301      	movs	r3, #1
 8004108:	73bb      	strb	r3, [r7, #14]
 800410a:	e00a      	b.n	8004122 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800410c:	887b      	ldrh	r3, [r7, #2]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	330c      	adds	r3, #12
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800411e:	2301      	movs	r3, #1
 8004120:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8004122:	887b      	ldrh	r3, [r7, #2]
 8004124:	2b05      	cmp	r3, #5
 8004126:	d841      	bhi.n	80041ac <VL53L0X_SetLimitCheckEnable+0xe0>
 8004128:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <VL53L0X_SetLimitCheckEnable+0x64>)
 800412a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412e:	bf00      	nop
 8004130:	08004149 	.word	0x08004149
 8004134:	08004153 	.word	0x08004153
 8004138:	08004169 	.word	0x08004169
 800413c:	08004173 	.word	0x08004173
 8004140:	0800417d 	.word	0x0800417d
 8004144:	08004195 	.word	0x08004195

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	7bfa      	ldrb	r2, [r7, #15]
 800414c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8004150:	e02e      	b.n	80041b0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004156:	b29b      	uxth	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	2144      	movs	r1, #68	; 0x44
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f004 f88b 	bl	8008278 <VL53L0X_WrWord>
 8004162:	4603      	mov	r3, r0
 8004164:	75fb      	strb	r3, [r7, #23]

			break;
 8004166:	e023      	b.n	80041b0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	7bfa      	ldrb	r2, [r7, #15]
 800416c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8004170:	e01e      	b.n	80041b0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	7bfa      	ldrb	r2, [r7, #15]
 8004176:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800417a:	e019      	b.n	80041b0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800417c:	7bbb      	ldrb	r3, [r7, #14]
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004182:	7b7b      	ldrb	r3, [r7, #13]
 8004184:	22fe      	movs	r2, #254	; 0xfe
 8004186:	2160      	movs	r1, #96	; 0x60
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f004 f89f 	bl	80082cc <VL53L0X_UpdateByte>
 800418e:	4603      	mov	r3, r0
 8004190:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8004192:	e00d      	b.n	80041b0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8004194:	7bbb      	ldrb	r3, [r7, #14]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800419a:	7b7b      	ldrb	r3, [r7, #13]
 800419c:	22ef      	movs	r2, #239	; 0xef
 800419e:	2160      	movs	r1, #96	; 0x60
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f004 f893 	bl	80082cc <VL53L0X_UpdateByte>
 80041a6:	4603      	mov	r3, r0
 80041a8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80041aa:	e001      	b.n	80041b0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80041ac:	23fc      	movs	r3, #252	; 0xfc
 80041ae:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80041b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10f      	bne.n	80041d8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80041b8:	787b      	ldrb	r3, [r7, #1]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80041be:	887b      	ldrh	r3, [r7, #2]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	4413      	add	r3, r2
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80041ca:	e005      	b.n	80041d8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80041cc:	887b      	ldrh	r3, [r7, #2]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4413      	add	r3, r2
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80041d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	460b      	mov	r3, r1
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80041f6:	897b      	ldrh	r3, [r7, #10]
 80041f8:	2b05      	cmp	r3, #5
 80041fa:	d905      	bls.n	8004208 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80041fc:	23fc      	movs	r3, #252	; 0xfc
 80041fe:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e008      	b.n	800421a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004208:	897b      	ldrh	r3, [r7, #10]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004212:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	7dba      	ldrb	r2, [r7, #22]
 8004218:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800421a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800421e:	4618      	mov	r0, r3
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	460b      	mov	r3, r1
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800423a:	897b      	ldrh	r3, [r7, #10]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004244:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8004246:	7dbb      	ldrb	r3, [r7, #22]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d107      	bne.n	800425c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800424c:	897b      	ldrh	r3, [r7, #10]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	330c      	adds	r3, #12
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	e040      	b.n	80042de <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800425c:	897b      	ldrh	r3, [r7, #10]
 800425e:	2b05      	cmp	r3, #5
 8004260:	d830      	bhi.n	80042c4 <VL53L0X_SetLimitCheckValue+0x9c>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <VL53L0X_SetLimitCheckValue+0x40>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	08004281 	.word	0x08004281
 800426c:	08004289 	.word	0x08004289
 8004270:	0800429f 	.word	0x0800429f
 8004274:	080042a7 	.word	0x080042a7
 8004278:	080042af 	.word	0x080042af
 800427c:	080042af 	.word	0x080042af

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8004286:	e01f      	b.n	80042c8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800428c:	b29b      	uxth	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	2144      	movs	r1, #68	; 0x44
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f003 fff0 	bl	8008278 <VL53L0X_WrWord>
 8004298:	4603      	mov	r3, r0
 800429a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800429c:	e014      	b.n	80042c8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80042a4:	e010      	b.n	80042c8 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80042ac:	e00c      	b.n	80042c8 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	2164      	movs	r1, #100	; 0x64
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f003 ffdd 	bl	8008278 <VL53L0X_WrWord>
 80042be:	4603      	mov	r3, r0
 80042c0:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80042c2:	e001      	b.n	80042c8 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80042c4:	23fc      	movs	r3, #252	; 0xfc
 80042c6:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80042c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d106      	bne.n	80042de <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80042d0:	897b      	ldrh	r3, [r7, #10]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	330c      	adds	r3, #12
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80042de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop

080042ec <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	460b      	mov	r3, r1
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004302:	897b      	ldrh	r3, [r7, #10]
 8004304:	2b05      	cmp	r3, #5
 8004306:	d847      	bhi.n	8004398 <VL53L0X_GetLimitCheckValue+0xac>
 8004308:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <VL53L0X_GetLimitCheckValue+0x24>)
 800430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430e:	bf00      	nop
 8004310:	08004329 	.word	0x08004329
 8004314:	08004335 	.word	0x08004335
 8004318:	0800435b 	.word	0x0800435b
 800431c:	08004367 	.word	0x08004367
 8004320:	08004373 	.word	0x08004373
 8004324:	08004373 	.word	0x08004373

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	77bb      	strb	r3, [r7, #30]
		break;
 8004332:	e033      	b.n	800439c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004334:	f107 0316 	add.w	r3, r7, #22
 8004338:	461a      	mov	r2, r3
 800433a:	2144      	movs	r1, #68	; 0x44
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f004 f823 	bl	8008388 <VL53L0X_RdWord>
 8004342:	4603      	mov	r3, r0
 8004344:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004346:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800434e:	8afb      	ldrh	r3, [r7, #22]
 8004350:	025b      	lsls	r3, r3, #9
 8004352:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8004354:	2301      	movs	r3, #1
 8004356:	77bb      	strb	r3, [r7, #30]
		break;
 8004358:	e020      	b.n	800439c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	77bb      	strb	r3, [r7, #30]
		break;
 8004364:	e01a      	b.n	800439c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	77bb      	strb	r3, [r7, #30]
		break;
 8004370:	e014      	b.n	800439c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004372:	f107 0316 	add.w	r3, r7, #22
 8004376:	461a      	mov	r2, r3
 8004378:	2164      	movs	r1, #100	; 0x64
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f004 f804 	bl	8008388 <VL53L0X_RdWord>
 8004380:	4603      	mov	r3, r0
 8004382:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004384:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800438c:	8afb      	ldrh	r3, [r7, #22]
 800438e:	025b      	lsls	r3, r3, #9
 8004390:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	77bb      	strb	r3, [r7, #30]
		break;
 8004396:	e001      	b.n	800439c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004398:	23fc      	movs	r3, #252	; 0xfc
 800439a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800439c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d12a      	bne.n	80043fa <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80043a4:	7fbb      	ldrb	r3, [r7, #30]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d124      	bne.n	80043f4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d110      	bne.n	80043d2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80043b0:	897b      	ldrh	r3, [r7, #10]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	330c      	adds	r3, #12
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80043c4:	897b      	ldrh	r3, [r7, #10]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4413      	add	r3, r2
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80043d0:	e013      	b.n	80043fa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80043d8:	897b      	ldrh	r3, [r7, #10]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	330c      	adds	r3, #12
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80043e6:	897b      	ldrh	r3, [r7, #10]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80043f2:	e002      	b.n	80043fa <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80043fa:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop

08004408 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004412:	2300      	movs	r3, #0
 8004414:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8004416:	f107 030e 	add.w	r3, r7, #14
 800441a:	461a      	mov	r2, r3
 800441c:	2101      	movs	r1, #1
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f003 ff88 	bl	8008334 <VL53L0X_RdByte>
 8004424:	4603      	mov	r3, r0
 8004426:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8004428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10e      	bne.n	800444e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8004430:	7bba      	ldrb	r2, [r7, #14]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8004438:	7bbb      	ldrb	r3, [r7, #14]
 800443a:	b25b      	sxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	da03      	bge.n	8004448 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2201      	movs	r2, #1
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	e002      	b.n	800444e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800444e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d104      	bne.n	8004460 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781a      	ldrb	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004460:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004474:	2300      	movs	r3, #0
 8004476:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004478:	f107 030e 	add.w	r3, r7, #14
 800447c:	4619      	mov	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff fbd8 	bl	8003c34 <VL53L0X_GetDeviceMode>
 8004484:	4603      	mov	r3, r0
 8004486:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d107      	bne.n	80044a0 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004490:	7bbb      	ldrb	r3, [r7, #14]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d104      	bne.n	80044a0 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f898 	bl	80045cc <VL53L0X_StartMeasurement>
 800449c:	4603      	mov	r3, r0
 800449e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80044a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d104      	bne.n	80044b2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f001 fb3c 	bl	8005b26 <VL53L0X_measurement_poll_for_completion>
 80044ae:	4603      	mov	r3, r0
 80044b0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80044b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80044ba:	7bbb      	ldrb	r3, [r7, #14]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d103      	bne.n	80044c8 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2203      	movs	r2, #3
 80044c4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80044c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80044e4:	2301      	movs	r3, #1
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f001 fade 	bl	8005aac <VL53L0X_perform_ref_calibration>
 80044f0:	4603      	mov	r3, r0
 80044f2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80044f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800450c:	2300      	movs	r3, #0
 800450e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004516:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8004518:	7dbb      	ldrb	r3, [r7, #22]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d005      	beq.n	800452a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800451e:	7dbb      	ldrb	r3, [r7, #22]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d002      	beq.n	800452a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8004524:	7dbb      	ldrb	r3, [r7, #22]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d147      	bne.n	80045ba <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800452a:	f107 030c 	add.w	r3, r7, #12
 800452e:	f107 0210 	add.w	r2, r7, #16
 8004532:	2101      	movs	r1, #1
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fbc1 	bl	8004cbc <VL53L0X_GetInterruptThresholds>
 800453a:	4603      	mov	r3, r0
 800453c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004544:	d803      	bhi.n	800454e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8004546:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8004548:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800454c:	d935      	bls.n	80045ba <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800454e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d131      	bne.n	80045ba <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8004556:	78fb      	ldrb	r3, [r7, #3]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d006      	beq.n	800456a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800455c:	491a      	ldr	r1, [pc, #104]	; (80045c8 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f002 ff4c 	bl	80073fc <VL53L0X_load_tuning_settings>
 8004564:	4603      	mov	r3, r0
 8004566:	75fb      	strb	r3, [r7, #23]
 8004568:	e027      	b.n	80045ba <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800456a:	2204      	movs	r2, #4
 800456c:	21ff      	movs	r1, #255	; 0xff
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f003 fe5e 	bl	8008230 <VL53L0X_WrByte>
 8004574:	4603      	mov	r3, r0
 8004576:	461a      	mov	r2, r3
 8004578:	7dfb      	ldrb	r3, [r7, #23]
 800457a:	4313      	orrs	r3, r2
 800457c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800457e:	2200      	movs	r2, #0
 8004580:	2170      	movs	r1, #112	; 0x70
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f003 fe54 	bl	8008230 <VL53L0X_WrByte>
 8004588:	4603      	mov	r3, r0
 800458a:	461a      	mov	r2, r3
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	4313      	orrs	r3, r2
 8004590:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004592:	2200      	movs	r2, #0
 8004594:	21ff      	movs	r1, #255	; 0xff
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f003 fe4a 	bl	8008230 <VL53L0X_WrByte>
 800459c:	4603      	mov	r3, r0
 800459e:	461a      	mov	r2, r3
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80045a6:	2200      	movs	r2, #0
 80045a8:	2180      	movs	r1, #128	; 0x80
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f003 fe40 	bl	8008230 <VL53L0X_WrByte>
 80045b0:	4603      	mov	r3, r0
 80045b2:	461a      	mov	r2, r3
 80045b4:	7dfb      	ldrb	r3, [r7, #23]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80045ba:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000110 	.word	0x20000110

080045cc <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045d4:	2300      	movs	r3, #0
 80045d6:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80045dc:	f107 030e 	add.w	r3, r7, #14
 80045e0:	4619      	mov	r1, r3
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff fb26 	bl	8003c34 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80045e8:	2201      	movs	r2, #1
 80045ea:	2180      	movs	r1, #128	; 0x80
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f003 fe1f 	bl	8008230 <VL53L0X_WrByte>
 80045f2:	4603      	mov	r3, r0
 80045f4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80045f6:	2201      	movs	r2, #1
 80045f8:	21ff      	movs	r1, #255	; 0xff
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f003 fe18 	bl	8008230 <VL53L0X_WrByte>
 8004600:	4603      	mov	r3, r0
 8004602:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004604:	2200      	movs	r2, #0
 8004606:	2100      	movs	r1, #0
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f003 fe11 	bl	8008230 <VL53L0X_WrByte>
 800460e:	4603      	mov	r3, r0
 8004610:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004618:	461a      	mov	r2, r3
 800461a:	2191      	movs	r1, #145	; 0x91
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f003 fe07 	bl	8008230 <VL53L0X_WrByte>
 8004622:	4603      	mov	r3, r0
 8004624:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004626:	2201      	movs	r2, #1
 8004628:	2100      	movs	r1, #0
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f003 fe00 	bl	8008230 <VL53L0X_WrByte>
 8004630:	4603      	mov	r3, r0
 8004632:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004634:	2200      	movs	r2, #0
 8004636:	21ff      	movs	r1, #255	; 0xff
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f003 fdf9 	bl	8008230 <VL53L0X_WrByte>
 800463e:	4603      	mov	r3, r0
 8004640:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004642:	2200      	movs	r2, #0
 8004644:	2180      	movs	r1, #128	; 0x80
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f003 fdf2 	bl	8008230 <VL53L0X_WrByte>
 800464c:	4603      	mov	r3, r0
 800464e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8004650:	7bbb      	ldrb	r3, [r7, #14]
 8004652:	2b03      	cmp	r3, #3
 8004654:	d054      	beq.n	8004700 <VL53L0X_StartMeasurement+0x134>
 8004656:	2b03      	cmp	r3, #3
 8004658:	dc6c      	bgt.n	8004734 <VL53L0X_StartMeasurement+0x168>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <VL53L0X_StartMeasurement+0x98>
 800465e:	2b01      	cmp	r3, #1
 8004660:	d034      	beq.n	80046cc <VL53L0X_StartMeasurement+0x100>
 8004662:	e067      	b.n	8004734 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8004664:	2201      	movs	r2, #1
 8004666:	2100      	movs	r1, #0
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f003 fde1 	bl	8008230 <VL53L0X_WrByte>
 800466e:	4603      	mov	r3, r0
 8004670:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8004676:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d15d      	bne.n	800473a <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800467e:	2300      	movs	r3, #0
 8004680:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8004688:	f107 030d 	add.w	r3, r7, #13
 800468c:	461a      	mov	r2, r3
 800468e:	2100      	movs	r1, #0
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f003 fe4f 	bl	8008334 <VL53L0X_RdByte>
 8004696:	4603      	mov	r3, r0
 8004698:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	3301      	adds	r3, #1
 800469e:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80046a0:	7b7a      	ldrb	r2, [r7, #13]
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	4013      	ands	r3, r2
 80046a6:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80046a8:	7bfa      	ldrb	r2, [r7, #15]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d107      	bne.n	80046be <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80046ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d103      	bne.n	80046be <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80046bc:	d3e1      	bcc.n	8004682 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80046c4:	d339      	bcc.n	800473a <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80046c6:	23f9      	movs	r3, #249	; 0xf9
 80046c8:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80046ca:	e036      	b.n	800473a <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80046cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d105      	bne.n	80046e0 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80046d4:	2101      	movs	r1, #1
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff ff12 	bl	8004500 <VL53L0X_CheckAndLoadInterruptSettings>
 80046dc:	4603      	mov	r3, r0
 80046de:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80046e0:	2202      	movs	r2, #2
 80046e2:	2100      	movs	r1, #0
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f003 fda3 	bl	8008230 <VL53L0X_WrByte>
 80046ea:	4603      	mov	r3, r0
 80046ec:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80046ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d123      	bne.n	800473e <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2204      	movs	r2, #4
 80046fa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80046fe:	e01e      	b.n	800473e <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004700:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d105      	bne.n	8004714 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004708:	2101      	movs	r1, #1
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff fef8 	bl	8004500 <VL53L0X_CheckAndLoadInterruptSettings>
 8004710:	4603      	mov	r3, r0
 8004712:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004714:	2204      	movs	r2, #4
 8004716:	2100      	movs	r1, #0
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f003 fd89 	bl	8008230 <VL53L0X_WrByte>
 800471e:	4603      	mov	r3, r0
 8004720:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8004722:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10b      	bne.n	8004742 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2204      	movs	r2, #4
 800472e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8004732:	e006      	b.n	8004742 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004734:	23f8      	movs	r3, #248	; 0xf8
 8004736:	75fb      	strb	r3, [r7, #23]
 8004738:	e004      	b.n	8004744 <VL53L0X_StartMeasurement+0x178>
		break;
 800473a:	bf00      	nop
 800473c:	e002      	b.n	8004744 <VL53L0X_StartMeasurement+0x178>
		break;
 800473e:	bf00      	nop
 8004740:	e000      	b.n	8004744 <VL53L0X_StartMeasurement+0x178>
		break;
 8004742:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004744:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800475a:	2300      	movs	r3, #0
 800475c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004764:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8004766:	7bbb      	ldrb	r3, [r7, #14]
 8004768:	2b04      	cmp	r3, #4
 800476a:	d112      	bne.n	8004792 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800476c:	f107 0308 	add.w	r3, r7, #8
 8004770:	4619      	mov	r1, r3
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fb18 	bl	8004da8 <VL53L0X_GetInterruptMaskStatus>
 8004778:	4603      	mov	r3, r0
 800477a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b04      	cmp	r3, #4
 8004780:	d103      	bne.n	800478a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	e01c      	b.n	80047c4 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]
 8004790:	e018      	b.n	80047c4 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8004792:	f107 030d 	add.w	r3, r7, #13
 8004796:	461a      	mov	r2, r3
 8004798:	2114      	movs	r1, #20
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f003 fdca 	bl	8008334 <VL53L0X_RdByte>
 80047a0:	4603      	mov	r3, r0
 80047a2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80047a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80047ac:	7b7b      	ldrb	r3, [r7, #13]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2201      	movs	r2, #1
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	e002      	b.n	80047c4 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2200      	movs	r2, #0
 80047c2:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80047c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80047d0:	b5b0      	push	{r4, r5, r7, lr}
 80047d2:	b096      	sub	sp, #88	; 0x58
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047da:	2300      	movs	r3, #0
 80047dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80047e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047e4:	230c      	movs	r3, #12
 80047e6:	2114      	movs	r1, #20
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f003 fcf5 	bl	80081d8 <VL53L0X_ReadMulti>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80047f4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f040 80d1 	bne.w	80049a0 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2200      	movs	r2, #0
 8004802:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800480a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800480e:	b29b      	uxth	r3, r3
 8004810:	021b      	lsls	r3, r3, #8
 8004812:	b29a      	uxth	r2, r3
 8004814:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004818:	b29b      	uxth	r3, r3
 800481a:	4413      	add	r3, r2
 800481c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2200      	movs	r2, #0
 8004824:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8004826:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800482a:	b29b      	uxth	r3, r3
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	b29a      	uxth	r2, r3
 8004830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004834:	b29b      	uxth	r3, r3
 8004836:	4413      	add	r3, r2
 8004838:	b29b      	uxth	r3, r3
 800483a:	025b      	lsls	r3, r3, #9
 800483c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004842:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8004844:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004848:	b29b      	uxth	r3, r3
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	b29a      	uxth	r2, r3
 800484e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004852:	b29b      	uxth	r3, r3
 8004854:	4413      	add	r3, r2
 8004856:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800485a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800485e:	025b      	lsls	r3, r3, #9
 8004860:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8004866:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	b29a      	uxth	r2, r3
 8004870:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004874:	b29b      	uxth	r3, r3
 8004876:	4413      	add	r3, r2
 8004878:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004882:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004884:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004888:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8004892:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800489a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800489e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80048a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048a4:	d046      	beq.n	8004934 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80048a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80048a8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80048ac:	fb02 f303 	mul.w	r3, r2, r3
 80048b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80048b4:	4a57      	ldr	r2, [pc, #348]	; (8004a14 <VL53L0X_GetRangingMeasurementData+0x244>)
 80048b6:	fb82 1203 	smull	r1, r2, r2, r3
 80048ba:	1192      	asrs	r2, r2, #6
 80048bc:	17db      	asrs	r3, r3, #31
 80048be:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80048c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	7f1b      	ldrb	r3, [r3, #28]
 80048ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80048d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d02c      	beq.n	8004934 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80048da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80048dc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80048e0:	fb02 f303 	mul.w	r3, r2, r3
 80048e4:	121a      	asrs	r2, r3, #8
					<= 0) {
 80048e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d10d      	bne.n	8004908 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80048ec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80048f4:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80048f8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80048fc:	e016      	b.n	800492c <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80048fe:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8004902:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004906:	e011      	b.n	800492c <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8004908:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800490c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800490e:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004912:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004914:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004918:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800491c:	121b      	asrs	r3, r3, #8
 800491e:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004922:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8004928:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800492c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004930:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8004934:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00d      	beq.n	8004958 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800493c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004940:	089b      	lsrs	r3, r3, #2
 8004942:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8004948:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800494c:	b2db      	uxtb	r3, r3
 800494e:	019b      	lsls	r3, r3, #6
 8004950:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	75da      	strb	r2, [r3, #23]
 8004956:	e006      	b.n	8004966 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800495e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2200      	movs	r2, #0
 8004964:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8004966:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800496a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800496e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004972:	9301      	str	r3, [sp, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	4613      	mov	r3, r2
 800497a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f003 f9db 	bl	8007d38 <VL53L0X_get_pal_range_status>
 8004982:	4603      	mov	r3, r0
 8004984:	461a      	mov	r2, r3
 8004986:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800498a:	4313      	orrs	r3, r2
 800498c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004990:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004994:	2b00      	cmp	r3, #0
 8004996:	d103      	bne.n	80049a0 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004998:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80049a0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d12f      	bne.n	8004a08 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f107 040c 	add.w	r4, r7, #12
 80049ae:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80049b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80049ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80049c2:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80049c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80049d0:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80049d6:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80049dc:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80049e2:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80049e8:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80049ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80049f8:	f107 050c 	add.w	r5, r7, #12
 80049fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a08:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3750      	adds	r7, #80	; 0x50
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bdb0      	pop	{r4, r5, r7, pc}
 8004a14:	10624dd3 	.word	0x10624dd3

08004a18 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004a26:	2100      	movs	r1, #0
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff f8d7 	bl	8003bdc <VL53L0X_SetDeviceMode>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d104      	bne.n	8004a44 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff fd16 	bl	800446c <VL53L0X_PerformSingleMeasurement>
 8004a40:	4603      	mov	r3, r0
 8004a42:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d105      	bne.n	8004a58 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8004a4c:	6839      	ldr	r1, [r7, #0]
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff febe 	bl	80047d0 <VL53L0X_GetRangingMeasurementData>
 8004a54:	4603      	mov	r3, r0
 8004a56:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8004a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004a60:	2100      	movs	r1, #0
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f960 	bl	8004d28 <VL53L0X_ClearInterruptMask>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8004a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	4608      	mov	r0, r1
 8004a82:	4611      	mov	r1, r2
 8004a84:	461a      	mov	r2, r3
 8004a86:	4603      	mov	r3, r0
 8004a88:	70fb      	strb	r3, [r7, #3]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	70bb      	strb	r3, [r7, #2]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a92:	2300      	movs	r3, #0
 8004a94:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004a96:	78fb      	ldrb	r3, [r7, #3]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004a9c:	23f6      	movs	r3, #246	; 0xf6
 8004a9e:	73fb      	strb	r3, [r7, #15]
 8004aa0:	e105      	b.n	8004cae <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8004aa2:	78bb      	ldrb	r3, [r7, #2]
 8004aa4:	2b14      	cmp	r3, #20
 8004aa6:	d110      	bne.n	8004aca <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004aa8:	7e3b      	ldrb	r3, [r7, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8004aae:	2310      	movs	r3, #16
 8004ab0:	73bb      	strb	r3, [r7, #14]
 8004ab2:	e001      	b.n	8004ab8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004ab8:	7bbb      	ldrb	r3, [r7, #14]
 8004aba:	461a      	mov	r2, r3
 8004abc:	2184      	movs	r1, #132	; 0x84
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f003 fbb6 	bl	8008230 <VL53L0X_WrByte>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	73fb      	strb	r3, [r7, #15]
 8004ac8:	e0f1      	b.n	8004cae <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004aca:	78bb      	ldrb	r3, [r7, #2]
 8004acc:	2b15      	cmp	r3, #21
 8004ace:	f040 8097 	bne.w	8004c00 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	21ff      	movs	r1, #255	; 0xff
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f003 fbaa 	bl	8008230 <VL53L0X_WrByte>
 8004adc:	4603      	mov	r3, r0
 8004ade:	461a      	mov	r2, r3
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2100      	movs	r1, #0
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f003 fba0 	bl	8008230 <VL53L0X_WrByte>
 8004af0:	4603      	mov	r3, r0
 8004af2:	461a      	mov	r2, r3
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004afa:	2200      	movs	r2, #0
 8004afc:	21ff      	movs	r1, #255	; 0xff
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f003 fb96 	bl	8008230 <VL53L0X_WrByte>
 8004b04:	4603      	mov	r3, r0
 8004b06:	461a      	mov	r2, r3
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004b0e:	2201      	movs	r2, #1
 8004b10:	2180      	movs	r1, #128	; 0x80
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f003 fb8c 	bl	8008230 <VL53L0X_WrByte>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8004b22:	2202      	movs	r2, #2
 8004b24:	2185      	movs	r1, #133	; 0x85
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f003 fb82 	bl	8008230 <VL53L0X_WrByte>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	461a      	mov	r2, r3
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8004b36:	2204      	movs	r2, #4
 8004b38:	21ff      	movs	r1, #255	; 0xff
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f003 fb78 	bl	8008230 <VL53L0X_WrByte>
 8004b40:	4603      	mov	r3, r0
 8004b42:	461a      	mov	r2, r3
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	21cd      	movs	r1, #205	; 0xcd
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f003 fb6e 	bl	8008230 <VL53L0X_WrByte>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461a      	mov	r2, r3
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8004b5e:	2211      	movs	r2, #17
 8004b60:	21cc      	movs	r1, #204	; 0xcc
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f003 fb64 	bl	8008230 <VL53L0X_WrByte>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8004b72:	2207      	movs	r2, #7
 8004b74:	21ff      	movs	r1, #255	; 0xff
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f003 fb5a 	bl	8008230 <VL53L0X_WrByte>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	461a      	mov	r2, r3
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8004b86:	2200      	movs	r2, #0
 8004b88:	21be      	movs	r1, #190	; 0xbe
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f003 fb50 	bl	8008230 <VL53L0X_WrByte>
 8004b90:	4603      	mov	r3, r0
 8004b92:	461a      	mov	r2, r3
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8004b9a:	2206      	movs	r2, #6
 8004b9c:	21ff      	movs	r1, #255	; 0xff
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f003 fb46 	bl	8008230 <VL53L0X_WrByte>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8004bae:	2209      	movs	r2, #9
 8004bb0:	21cc      	movs	r1, #204	; 0xcc
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f003 fb3c 	bl	8008230 <VL53L0X_WrByte>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	461a      	mov	r2, r3
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	21ff      	movs	r1, #255	; 0xff
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f003 fb32 	bl	8008230 <VL53L0X_WrByte>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	461a      	mov	r2, r3
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	21ff      	movs	r1, #255	; 0xff
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f003 fb28 	bl	8008230 <VL53L0X_WrByte>
 8004be0:	4603      	mov	r3, r0
 8004be2:	461a      	mov	r2, r3
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004bea:	2200      	movs	r2, #0
 8004bec:	2100      	movs	r1, #0
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f003 fb1e 	bl	8008230 <VL53L0X_WrByte>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	73fb      	strb	r3, [r7, #15]
 8004bfe:	e056      	b.n	8004cae <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d120      	bne.n	8004c4a <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8004c08:	787b      	ldrb	r3, [r7, #1]
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d81b      	bhi.n	8004c46 <VL53L0X_SetGpioConfig+0x1ce>
 8004c0e:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <VL53L0X_SetGpioConfig+0x19c>)
 8004c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c14:	08004c29 	.word	0x08004c29
 8004c18:	08004c2f 	.word	0x08004c2f
 8004c1c:	08004c35 	.word	0x08004c35
 8004c20:	08004c3b 	.word	0x08004c3b
 8004c24:	08004c41 	.word	0x08004c41
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	73bb      	strb	r3, [r7, #14]
				break;
 8004c2c:	e00d      	b.n	8004c4a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	73bb      	strb	r3, [r7, #14]
				break;
 8004c32:	e00a      	b.n	8004c4a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8004c34:	2302      	movs	r3, #2
 8004c36:	73bb      	strb	r3, [r7, #14]
				break;
 8004c38:	e007      	b.n	8004c4a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	73bb      	strb	r3, [r7, #14]
				break;
 8004c3e:	e004      	b.n	8004c4a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004c40:	2304      	movs	r3, #4
 8004c42:	73bb      	strb	r3, [r7, #14]
				break;
 8004c44:	e001      	b.n	8004c4a <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8004c46:	23f5      	movs	r3, #245	; 0xf5
 8004c48:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d107      	bne.n	8004c62 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8004c52:	7bbb      	ldrb	r3, [r7, #14]
 8004c54:	461a      	mov	r2, r3
 8004c56:	210a      	movs	r1, #10
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f003 fae9 	bl	8008230 <VL53L0X_WrByte>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8004c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10f      	bne.n	8004c8a <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004c6a:	7e3b      	ldrb	r3, [r7, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d102      	bne.n	8004c76 <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	73bb      	strb	r3, [r7, #14]
 8004c74:	e001      	b.n	8004c7a <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8004c76:	2310      	movs	r3, #16
 8004c78:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8004c7a:	7bbb      	ldrb	r3, [r7, #14]
 8004c7c:	22ef      	movs	r2, #239	; 0xef
 8004c7e:	2184      	movs	r1, #132	; 0x84
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f003 fb23 	bl	80082cc <VL53L0X_UpdateByte>
 8004c86:	4603      	mov	r3, r0
 8004c88:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	787a      	ldrb	r2, [r7, #1]
 8004c96:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8004c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d105      	bne.n	8004cae <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f83f 	bl	8004d28 <VL53L0X_ClearInterruptMask>
 8004caa:	4603      	mov	r3, r0
 8004cac:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop

08004cbc <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004cd0:	f107 0314 	add.w	r3, r7, #20
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	210e      	movs	r1, #14
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f003 fb55 	bl	8008388 <VL53L0X_RdWord>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004ce2:	8abb      	ldrh	r3, [r7, #20]
 8004ce4:	045b      	lsls	r3, r3, #17
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <VL53L0X_GetInterruptThresholds+0x68>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004cf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10f      	bne.n	8004d18 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004cf8:	f107 0314 	add.w	r3, r7, #20
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	210c      	movs	r1, #12
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f003 fb41 	bl	8008388 <VL53L0X_RdWord>
 8004d06:	4603      	mov	r3, r0
 8004d08:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004d0a:	8abb      	ldrh	r3, [r7, #20]
 8004d0c:	045b      	lsls	r3, r3, #17
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <VL53L0X_GetInterruptThresholds+0x68>)
 8004d12:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	1ffe0000 	.word	0x1ffe0000

08004d28 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	210b      	movs	r1, #11
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f003 fa76 	bl	8008230 <VL53L0X_WrByte>
 8004d44:	4603      	mov	r3, r0
 8004d46:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8004d48:	2200      	movs	r2, #0
 8004d4a:	210b      	movs	r1, #11
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f003 fa6f 	bl	8008230 <VL53L0X_WrByte>
 8004d52:	4603      	mov	r3, r0
 8004d54:	461a      	mov	r2, r3
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8004d5c:	f107 030d 	add.w	r3, r7, #13
 8004d60:	461a      	mov	r2, r3
 8004d62:	2113      	movs	r1, #19
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f003 fae5 	bl	8008334 <VL53L0X_RdByte>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8004d74:	7bbb      	ldrb	r3, [r7, #14]
 8004d76:	3301      	adds	r3, #1
 8004d78:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8004d7a:	7b7b      	ldrb	r3, [r7, #13]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d006      	beq.n	8004d92 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8004d84:	7bbb      	ldrb	r3, [r7, #14]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d803      	bhi.n	8004d92 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8004d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0d3      	beq.n	8004d3a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8004d92:	7bbb      	ldrb	r3, [r7, #14]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8004d98:	23f4      	movs	r3, #244	; 0xf4
 8004d9a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004db2:	2300      	movs	r3, #0
 8004db4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8004db6:	f107 030e 	add.w	r3, r7, #14
 8004dba:	461a      	mov	r2, r3
 8004dbc:	2113      	movs	r1, #19
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f003 fab8 	bl	8008334 <VL53L0X_RdByte>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8004dc8:	7bbb      	ldrb	r3, [r7, #14]
 8004dca:	f003 0207 	and.w	r2, r3, #7
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8004dd2:	7bbb      	ldrb	r3, [r7, #14]
 8004dd4:	f003 0318 	and.w	r3, r3, #24
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8004ddc:	23fa      	movs	r3, #250	; 0xfa
 8004dde:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 fa02 	bl	800520a <VL53L0X_perform_ref_spad_management>
 8004e06:	4603      	mov	r3, r0
 8004e08:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8004e0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8004e24:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004e28:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8004e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e2e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8004e30:	f107 0308 	add.w	r3, r7, #8
 8004e34:	461a      	mov	r2, r3
 8004e36:	2128      	movs	r1, #40	; 0x28
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f003 faa5 	bl	8008388 <VL53L0X_RdWord>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8004e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d11e      	bne.n	8004e88 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8004e4a:	893b      	ldrh	r3, [r7, #8]
 8004e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8004e54:	893b      	ldrh	r3, [r7, #8]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	dd0b      	ble.n	8004e78 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8004e60:	893a      	ldrh	r2, [r7, #8]
 8004e62:	897b      	ldrh	r3, [r7, #10]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	b21b      	sxth	r3, r3
 8004e6a:	461a      	mov	r2, r3
					* 250;
 8004e6c:	23fa      	movs	r3, #250	; 0xfa
 8004e6e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	e007      	b.n	8004e88 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8004e78:	893b      	ldrh	r3, [r7, #8]
 8004e7a:	b21b      	sxth	r3, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	23fa      	movs	r3, #250	; 0xfa
 8004e80:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8004e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b08b      	sub	sp, #44	; 0x2c
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eba:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ec4:	69b9      	ldr	r1, [r7, #24]
 8004ec6:	fb01 f202 	mul.w	r2, r1, r2
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed2:	e030      	b.n	8004f36 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	4413      	add	r3, r2
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8004ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d11e      	bne.n	8004f28 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8004eea:	7ffa      	ldrb	r2, [r7, #31]
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	fa42 f303 	asr.w	r3, r2, r3
 8004ef2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8004ef8:	e016      	b.n	8004f28 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8004efa:	7ffb      	ldrb	r3, [r7, #31]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00b      	beq.n	8004f1c <get_next_good_spad+0x88>
				success = 1;
 8004f04:	2301      	movs	r3, #1
 8004f06:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	fb03 f202 	mul.w	r2, r3, r2
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	4413      	add	r3, r2
 8004f14:	461a      	mov	r2, r3
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	601a      	str	r2, [r3, #0]
				break;
 8004f1a:	e009      	b.n	8004f30 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8004f1c:	7ffb      	ldrb	r3, [r7, #31]
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	3301      	adds	r3, #1
 8004f26:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8004f28:	6a3a      	ldr	r2, [r7, #32]
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d3e4      	bcc.n	8004efa <get_next_good_spad+0x66>
				coarseIndex++) {
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	3301      	adds	r3, #1
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d202      	bcs.n	8004f44 <get_next_good_spad+0xb0>
 8004f3e:	7fbb      	ldrb	r3, [r7, #30]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0c7      	beq.n	8004ed4 <get_next_good_spad+0x40>
		}
	}
}
 8004f44:	bf00      	nop
 8004f46:	372c      	adds	r7, #44	; 0x2c
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr
	...

08004f50 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	099b      	lsrs	r3, r3, #6
 8004f60:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8004f62:	4a07      	ldr	r2, [pc, #28]	; (8004f80 <is_aperture+0x30>)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <is_aperture+0x22>
		isAperture = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	200002c8 	.word	0x200002c8

08004f84 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b089      	sub	sp, #36	; 0x24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8004f94:	2308      	movs	r3, #8
 8004f96:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004faa:	69b9      	ldr	r1, [r7, #24]
 8004fac:	fb01 f202 	mul.w	r2, r1, r2
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d302      	bcc.n	8004fc2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004fbc:	23ce      	movs	r3, #206	; 0xce
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e010      	b.n	8004fe4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	b25a      	sxtb	r2, r3
 8004fcc:	2101      	movs	r1, #1
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd4:	b25b      	sxtb	r3, r3
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	b259      	sxtb	r1, r3
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	4413      	add	r3, r2
 8004fe0:	b2ca      	uxtb	r2, r1
 8004fe2:	701a      	strb	r2, [r3, #0]

	return status;
 8004fe4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3724      	adds	r7, #36	; 0x24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bc80      	pop	{r7}
 8004ff0:	4770      	bx	lr

08004ff2 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8004ffc:	2306      	movs	r3, #6
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	21b0      	movs	r1, #176	; 0xb0
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f003 f8b8 	bl	8008178 <VL53L0X_WriteMulti>
 8005008:	4603      	mov	r3, r0
 800500a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800500c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005022:	2306      	movs	r3, #6
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	21b0      	movs	r1, #176	; 0xb0
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f003 f8d5 	bl	80081d8 <VL53L0X_ReadMulti>
 800502e:	4603      	mov	r3, r0
 8005030:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8005032:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b08c      	sub	sp, #48	; 0x30
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	460b      	mov	r3, r1
 800504c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800504e:	2300      	movs	r3, #0
 8005050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8005054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005056:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8005058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800505a:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800505c:	2300      	movs	r3, #0
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005060:	e02b      	b.n	80050ba <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8005062:	f107 031c 	add.w	r3, r7, #28
 8005066:	6a3a      	ldr	r2, [r7, #32]
 8005068:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff ff12 	bl	8004e94 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d103      	bne.n	8005080 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005078:	23ce      	movs	r3, #206	; 0xce
 800507a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800507e:	e020      	b.n	80050c2 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	461a      	mov	r2, r3
 8005084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005086:	4413      	add	r3, r2
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff ff61 	bl	8004f50 <is_aperture>
 800508e:	4603      	mov	r3, r0
 8005090:	461a      	mov	r2, r3
 8005092:	7afb      	ldrb	r3, [r7, #11]
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005098:	23ce      	movs	r3, #206	; 0xce
 800509a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800509e:	e010      	b.n	80050c2 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80050a4:	6a3a      	ldr	r2, [r7, #32]
 80050a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050a8:	6838      	ldr	r0, [r7, #0]
 80050aa:	f7ff ff6b 	bl	8004f84 <enable_spad_bit>
		currentSpad++;
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	3301      	adds	r3, #1
 80050b2:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	3301      	adds	r3, #1
 80050b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050be:	429a      	cmp	r2, r3
 80050c0:	d3cf      	bcc.n	8005062 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80050c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80050c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80050d0:	6839      	ldr	r1, [r7, #0]
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff ff8d 	bl	8004ff2 <set_ref_spad_map>
 80050d8:	4603      	mov	r3, r0
 80050da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80050de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d121      	bne.n	800512a <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80050e6:	f107 0314 	add.w	r3, r7, #20
 80050ea:	4619      	mov	r1, r3
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7ff ff93 	bl	8005018 <get_ref_spad_map>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80050fc:	e011      	b.n	8005122 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	4413      	add	r3, r2
 8005104:	781a      	ldrb	r2, [r3, #0]
 8005106:	f107 0114 	add.w	r1, r7, #20
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	440b      	add	r3, r1
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d003      	beq.n	800511c <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005114:	23ce      	movs	r3, #206	; 0xce
 8005116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800511a:	e006      	b.n	800512a <enable_ref_spads+0xec>
			}
			i++;
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	3301      	adds	r3, #1
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8005122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005126:	429a      	cmp	r2, r3
 8005128:	d3e9      	bcc.n	80050fe <enable_ref_spads+0xc0>
		}
	}
	return status;
 800512a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800512e:	4618      	mov	r0, r3
 8005130:	3730      	adds	r7, #48	; 0x30
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b08a      	sub	sp, #40	; 0x28
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005140:	2300      	movs	r3, #0
 8005142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005152:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8005156:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800515a:	2b00      	cmp	r3, #0
 800515c:	d107      	bne.n	800516e <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800515e:	22c0      	movs	r2, #192	; 0xc0
 8005160:	2101      	movs	r1, #1
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f003 f864 	bl	8008230 <VL53L0X_WrByte>
 8005168:	4603      	mov	r3, r0
 800516a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800516e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005172:	2b00      	cmp	r3, #0
 8005174:	d108      	bne.n	8005188 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8005176:	f107 0308 	add.w	r3, r7, #8
 800517a:	4619      	mov	r1, r3
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff fc4b 	bl	8004a18 <VL53L0X_PerformSingleRangingMeasurement>
 8005182:	4603      	mov	r3, r0
 8005184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8005188:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800518c:	2b00      	cmp	r3, #0
 800518e:	d107      	bne.n	80051a0 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005190:	2201      	movs	r2, #1
 8005192:	21ff      	movs	r1, #255	; 0xff
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f003 f84b 	bl	8008230 <VL53L0X_WrByte>
 800519a:	4603      	mov	r3, r0
 800519c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80051a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d107      	bne.n	80051b8 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	21b6      	movs	r1, #182	; 0xb6
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f003 f8eb 	bl	8008388 <VL53L0X_RdWord>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80051b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d107      	bne.n	80051d0 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80051c0:	2200      	movs	r2, #0
 80051c2:	21ff      	movs	r1, #255	; 0xff
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f003 f833 	bl	8008230 <VL53L0X_WrByte>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80051d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d112      	bne.n	80051fe <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80051d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051dc:	461a      	mov	r2, r3
 80051de:	2101      	movs	r1, #1
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f003 f825 	bl	8008230 <VL53L0X_WrByte>
 80051e6:	4603      	mov	r3, r0
 80051e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80051ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d104      	bne.n	80051fe <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80051fa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80051fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005202:	4618      	mov	r0, r3
 8005204:	3728      	adds	r7, #40	; 0x28
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800520a:	b590      	push	{r4, r7, lr}
 800520c:	b09d      	sub	sp, #116	; 0x74
 800520e:	af06      	add	r7, sp, #24
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005216:	2300      	movs	r3, #0
 8005218:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800521c:	23b4      	movs	r3, #180	; 0xb4
 800521e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8005222:	2303      	movs	r3, #3
 8005224:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8005226:	232c      	movs	r3, #44	; 0x2c
 8005228:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800522e:	2300      	movs	r3, #0
 8005230:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8005236:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800523a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8005244:	2306      	movs	r3, #6
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800525a:	2300      	movs	r3, #0
 800525c:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800526e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8005270:	2300      	movs	r3, #0
 8005272:	64bb      	str	r3, [r7, #72]	; 0x48
 8005274:	e009      	b.n	800528a <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800527a:	4413      	add	r3, r2
 800527c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005286:	3301      	adds	r3, #1
 8005288:	64bb      	str	r3, [r7, #72]	; 0x48
 800528a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	429a      	cmp	r2, r3
 8005290:	d3f1      	bcc.n	8005276 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005292:	2201      	movs	r2, #1
 8005294:	21ff      	movs	r1, #255	; 0xff
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f002 ffca 	bl	8008230 <VL53L0X_WrByte>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80052a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d107      	bne.n	80052ba <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80052aa:	2200      	movs	r2, #0
 80052ac:	214f      	movs	r1, #79	; 0x4f
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f002 ffbe 	bl	8008230 <VL53L0X_WrByte>
 80052b4:	4603      	mov	r3, r0
 80052b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80052ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d107      	bne.n	80052d2 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80052c2:	222c      	movs	r2, #44	; 0x2c
 80052c4:	214e      	movs	r1, #78	; 0x4e
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f002 ffb2 	bl	8008230 <VL53L0X_WrByte>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80052d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d107      	bne.n	80052ea <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80052da:	2200      	movs	r2, #0
 80052dc:	21ff      	movs	r1, #255	; 0xff
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f002 ffa6 	bl	8008230 <VL53L0X_WrByte>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80052ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80052f2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80052f6:	461a      	mov	r2, r3
 80052f8:	21b6      	movs	r1, #182	; 0xb6
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f002 ff98 	bl	8008230 <VL53L0X_WrByte>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8005306:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800530a:	2b00      	cmp	r3, #0
 800530c:	d107      	bne.n	800531e <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800530e:	2200      	movs	r2, #0
 8005310:	2180      	movs	r1, #128	; 0x80
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f002 ff8c 	bl	8008230 <VL53L0X_WrByte>
 8005318:	4603      	mov	r3, r0
 800531a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800531e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8005326:	f107 0210 	add.w	r2, r7, #16
 800532a:	f107 0111 	add.w	r1, r7, #17
 800532e:	2300      	movs	r3, #0
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 fbbb 	bl	8005aac <VL53L0X_perform_ref_calibration>
 8005336:	4603      	mov	r3, r0
 8005338:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800533c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005340:	2b00      	cmp	r3, #0
 8005342:	d121      	bne.n	8005388 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8005348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800534a:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8005350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005352:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8005360:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005364:	f107 0218 	add.w	r2, r7, #24
 8005368:	9204      	str	r2, [sp, #16]
 800536a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800536c:	9203      	str	r2, [sp, #12]
 800536e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005370:	9202      	str	r2, [sp, #8]
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	4623      	mov	r3, r4
 800537a:	4602      	mov	r2, r0
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7ff fe5e 	bl	800503e <enable_ref_spads>
 8005382:	4603      	mov	r3, r0
 8005384:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005388:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800538c:	2b00      	cmp	r3, #0
 800538e:	d174      	bne.n	800547a <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8005394:	f107 0312 	add.w	r3, r7, #18
 8005398:	4619      	mov	r1, r3
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f7ff fecb 	bl	8005136 <perform_ref_signal_measurement>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80053a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d161      	bne.n	8005472 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80053ae:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80053b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d25d      	bcs.n	8005472 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80053b6:	2300      	movs	r3, #0
 80053b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ba:	e009      	b.n	80053d0 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80053ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053cc:	3301      	adds	r3, #1
 80053ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80053d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d3f1      	bcc.n	80053bc <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80053d8:	e002      	b.n	80053e0 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80053da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053dc:	3301      	adds	r3, #1
 80053de:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80053e0:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80053e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e6:	4413      	add	r3, r2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff fdb1 	bl	8004f50 <is_aperture>
 80053ee:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d103      	bne.n	80053fc <VL53L0X_perform_ref_spad_management+0x1f2>
 80053f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d3ee      	bcc.n	80053da <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80053fc:	2301      	movs	r3, #1
 80053fe:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8005400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005402:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8005410:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005414:	f107 0218 	add.w	r2, r7, #24
 8005418:	9204      	str	r2, [sp, #16]
 800541a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800541c:	9203      	str	r2, [sp, #12]
 800541e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005420:	9202      	str	r2, [sp, #8]
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	4623      	mov	r3, r4
 800542a:	4602      	mov	r2, r0
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f7ff fe06 	bl	800503e <enable_ref_spads>
 8005432:	4603      	mov	r3, r0
 8005434:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005438:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800543c:	2b00      	cmp	r3, #0
 800543e:	d11b      	bne.n	8005478 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8005444:	f107 0312 	add.w	r3, r7, #18
 8005448:	4619      	mov	r1, r3
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f7ff fe73 	bl	8005136 <perform_ref_signal_measurement>
 8005450:	4603      	mov	r3, r0
 8005452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8005456:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10c      	bne.n	8005478 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800545e:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8005460:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005462:	429a      	cmp	r2, r3
 8005464:	d208      	bcs.n	8005478 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8005466:	2301      	movs	r3, #1
 8005468:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800546c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546e:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8005470:	e002      	b.n	8005478 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005476:	e000      	b.n	800547a <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8005478:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800547a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800547e:	2b00      	cmp	r3, #0
 8005480:	f040 80af 	bne.w	80055e2 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8005484:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8005486:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005488:	429a      	cmp	r2, r3
 800548a:	f240 80aa 	bls.w	80055e2 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800548e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005490:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8005494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005496:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800549e:	f107 031c 	add.w	r3, r7, #28
 80054a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054a4:	4618      	mov	r0, r3
 80054a6:	f003 f983 	bl	80087b0 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80054aa:	8a7b      	ldrh	r3, [r7, #18]
 80054ac:	461a      	mov	r2, r3
 80054ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	bfb8      	it	lt
 80054b6:	425b      	neglt	r3, r3
 80054b8:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80054c0:	e086      	b.n	80055d0 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80054c8:	f107 0314 	add.w	r3, r7, #20
 80054cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054d0:	f7ff fce0 	bl	8004e94 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054da:	d103      	bne.n	80054e4 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80054dc:	23ce      	movs	r3, #206	; 0xce
 80054de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80054e2:	e07e      	b.n	80055e2 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80054e4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff fd2f 	bl	8004f50 <is_aperture>
 80054f2:	4603      	mov	r3, r0
 80054f4:	461a      	mov	r2, r3
 80054f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8005502:	e06e      	b.n	80055e2 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8005504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005506:	3301      	adds	r3, #1
 8005508:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8005514:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff fd33 	bl	8004f84 <enable_spad_bit>
 800551e:	4603      	mov	r3, r0
 8005520:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005524:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10c      	bne.n	8005546 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800552c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800552e:	3301      	adds	r3, #1
 8005530:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8005538:	4619      	mov	r1, r3
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f7ff fd59 	bl	8004ff2 <set_ref_spad_map>
 8005540:	4603      	mov	r3, r0
 8005542:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8005546:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800554a:	2b00      	cmp	r3, #0
 800554c:	d146      	bne.n	80055dc <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800554e:	f107 0312 	add.w	r3, r7, #18
 8005552:	4619      	mov	r1, r3
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f7ff fdee 	bl	8005136 <perform_ref_signal_measurement>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8005560:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005564:	2b00      	cmp	r3, #0
 8005566:	d13b      	bne.n	80055e0 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8005568:	8a7b      	ldrh	r3, [r7, #18]
 800556a:	461a      	mov	r2, r3
 800556c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	bfb8      	it	lt
 8005574:	425b      	neglt	r3, r3
 8005576:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8005578:	8a7b      	ldrh	r3, [r7, #18]
 800557a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800557c:	429a      	cmp	r2, r3
 800557e:	d21c      	bcs.n	80055ba <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005584:	429a      	cmp	r2, r3
 8005586:	d914      	bls.n	80055b2 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8005588:	f107 031c 	add.w	r3, r7, #28
 800558c:	4619      	mov	r1, r3
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f7ff fd2f 	bl	8004ff2 <set_ref_spad_map>
 8005594:	4603      	mov	r3, r0
 8005596:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80055a0:	f107 011c 	add.w	r1, r7, #28
 80055a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055a6:	4618      	mov	r0, r3
 80055a8:	f003 f902 	bl	80087b0 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80055ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ae:	3b01      	subs	r3, #1
 80055b0:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b8:	e00a      	b.n	80055d0 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80055c4:	f107 031c 	add.w	r3, r7, #28
 80055c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ca:	4618      	mov	r0, r3
 80055cc:	f003 f8f0 	bl	80087b0 <memcpy>
		while (!complete) {
 80055d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f43f af74 	beq.w	80054c2 <VL53L0X_perform_ref_spad_management+0x2b8>
 80055da:	e002      	b.n	80055e2 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80055dc:	bf00      	nop
 80055de:	e000      	b.n	80055e2 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80055e0:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80055e2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d115      	bne.n	8005616 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055ee:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80055f6:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	b2da      	uxtb	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	781a      	ldrb	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8005616:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800561a:	4618      	mov	r0, r3
 800561c:	375c      	adds	r7, #92	; 0x5c
 800561e:	46bd      	mov	sp, r7
 8005620:	bd90      	pop	{r4, r7, pc}

08005622 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8005622:	b590      	push	{r4, r7, lr}
 8005624:	b093      	sub	sp, #76	; 0x4c
 8005626:	af06      	add	r7, sp, #24
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	4613      	mov	r3, r2
 800562e:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005630:	2300      	movs	r3, #0
 8005632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800563a:	23b4      	movs	r3, #180	; 0xb4
 800563c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8005640:	2306      	movs	r3, #6
 8005642:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8005644:	232c      	movs	r3, #44	; 0x2c
 8005646:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005648:	2201      	movs	r2, #1
 800564a:	21ff      	movs	r1, #255	; 0xff
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f002 fdef 	bl	8008230 <VL53L0X_WrByte>
 8005652:	4603      	mov	r3, r0
 8005654:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005658:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800565c:	2b00      	cmp	r3, #0
 800565e:	d107      	bne.n	8005670 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8005660:	2200      	movs	r2, #0
 8005662:	214f      	movs	r1, #79	; 0x4f
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f002 fde3 	bl	8008230 <VL53L0X_WrByte>
 800566a:	4603      	mov	r3, r0
 800566c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005670:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005674:	2b00      	cmp	r3, #0
 8005676:	d107      	bne.n	8005688 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8005678:	222c      	movs	r2, #44	; 0x2c
 800567a:	214e      	movs	r1, #78	; 0x4e
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f002 fdd7 	bl	8008230 <VL53L0X_WrByte>
 8005682:	4603      	mov	r3, r0
 8005684:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005688:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800568c:	2b00      	cmp	r3, #0
 800568e:	d107      	bne.n	80056a0 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005690:	2200      	movs	r2, #0
 8005692:	21ff      	movs	r1, #255	; 0xff
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f002 fdcb 	bl	8008230 <VL53L0X_WrByte>
 800569a:	4603      	mov	r3, r0
 800569c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80056a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d109      	bne.n	80056bc <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80056a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056ac:	461a      	mov	r2, r3
 80056ae:	21b6      	movs	r1, #182	; 0xb6
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f002 fdbd 	bl	8008230 <VL53L0X_WrByte>
 80056b6:	4603      	mov	r3, r0
 80056b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80056bc:	2300      	movs	r3, #0
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
 80056c0:	e009      	b.n	80056d6 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80056cc:	2200      	movs	r2, #0
 80056ce:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	3301      	adds	r3, #1
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
 80056d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d3f1      	bcc.n	80056c2 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80056de:	79fb      	ldrb	r3, [r7, #7]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d011      	beq.n	8005708 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80056e4:	e002      	b.n	80056ec <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	3301      	adds	r3, #1
 80056ea:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80056ec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	4413      	add	r3, r2
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff fc2b 	bl	8004f50 <is_aperture>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d103      	bne.n	8005708 <VL53L0X_set_reference_spads+0xe6>
 8005700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	429a      	cmp	r2, r3
 8005706:	d3ee      	bcc.n	80056e6 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8005714:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005718:	79f9      	ldrb	r1, [r7, #7]
 800571a:	f107 0214 	add.w	r2, r7, #20
 800571e:	9204      	str	r2, [sp, #16]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	9203      	str	r2, [sp, #12]
 8005724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005726:	9202      	str	r2, [sp, #8]
 8005728:	9301      	str	r3, [sp, #4]
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	4623      	mov	r3, r4
 8005730:	4602      	mov	r2, r0
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f7ff fc83 	bl	800503e <enable_ref_spads>
 8005738:	4603      	mov	r3, r0
 800573a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800573e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10c      	bne.n	8005760 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	b2da      	uxtb	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	79fa      	ldrb	r2, [r7, #7]
 800575c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8005760:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005764:	4618      	mov	r0, r3
 8005766:	3734      	adds	r7, #52	; 0x34
 8005768:	46bd      	mov	sp, r7
 800576a:	bd90      	pop	{r4, r7, pc}

0800576c <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005778:	2300      	movs	r3, #0
 800577a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800577c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	f043 0301 	orr.w	r3, r3, #1
 800578a:	b2db      	uxtb	r3, r3
 800578c:	461a      	mov	r2, r3
 800578e:	2100      	movs	r1, #0
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f002 fd4d 	bl	8008230 <VL53L0X_WrByte>
 8005796:	4603      	mov	r3, r0
 8005798:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800579a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d104      	bne.n	80057ac <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f9bf 	bl	8005b26 <VL53L0X_measurement_poll_for_completion>
 80057a8:	4603      	mov	r3, r0
 80057aa:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80057ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d105      	bne.n	80057c0 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80057b4:	2100      	movs	r1, #0
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fab6 	bl	8004d28 <VL53L0X_ClearInterruptMask>
 80057bc:	4603      	mov	r3, r0
 80057be:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80057c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d106      	bne.n	80057d6 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80057c8:	2200      	movs	r2, #0
 80057ca:	2100      	movs	r1, #0
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f002 fd2f 	bl	8008230 <VL53L0X_WrByte>
 80057d2:	4603      	mov	r3, r0
 80057d4:	73fb      	strb	r3, [r7, #15]

	return Status;
 80057d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	4608      	mov	r0, r1
 80057ec:	4611      	mov	r1, r2
 80057ee:	461a      	mov	r2, r3
 80057f0:	4603      	mov	r3, r0
 80057f2:	70fb      	strb	r3, [r7, #3]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70bb      	strb	r3, [r7, #2]
 80057f8:	4613      	mov	r3, r2
 80057fa:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057fc:	2300      	movs	r3, #0
 80057fe:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005804:	2201      	movs	r2, #1
 8005806:	21ff      	movs	r1, #255	; 0xff
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f002 fd11 	bl	8008230 <VL53L0X_WrByte>
 800580e:	4603      	mov	r3, r0
 8005810:	461a      	mov	r2, r3
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	4313      	orrs	r3, r2
 8005816:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005818:	2200      	movs	r2, #0
 800581a:	2100      	movs	r1, #0
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f002 fd07 	bl	8008230 <VL53L0X_WrByte>
 8005822:	4603      	mov	r3, r0
 8005824:	461a      	mov	r2, r3
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	4313      	orrs	r3, r2
 800582a:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800582c:	2200      	movs	r2, #0
 800582e:	21ff      	movs	r1, #255	; 0xff
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f002 fcfd 	bl	8008230 <VL53L0X_WrByte>
 8005836:	4603      	mov	r3, r0
 8005838:	461a      	mov	r2, r3
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	4313      	orrs	r3, r2
 800583e:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d01e      	beq.n	8005884 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8005846:	f897 3020 	ldrb.w	r3, [r7, #32]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	21cb      	movs	r1, #203	; 0xcb
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f002 fd6e 	bl	8008334 <VL53L0X_RdByte>
 8005858:	4603      	mov	r3, r0
 800585a:	461a      	mov	r2, r3
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	4313      	orrs	r3, r2
 8005860:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005862:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005866:	2b00      	cmp	r3, #0
 8005868:	d02a      	beq.n	80058c0 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800586a:	f107 030e 	add.w	r3, r7, #14
 800586e:	461a      	mov	r2, r3
 8005870:	21ee      	movs	r1, #238	; 0xee
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f002 fd5e 	bl	8008334 <VL53L0X_RdByte>
 8005878:	4603      	mov	r3, r0
 800587a:	461a      	mov	r2, r3
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	4313      	orrs	r3, r2
 8005880:	73fb      	strb	r3, [r7, #15]
 8005882:	e01d      	b.n	80058c0 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8005884:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800588c:	78bb      	ldrb	r3, [r7, #2]
 800588e:	461a      	mov	r2, r3
 8005890:	21cb      	movs	r1, #203	; 0xcb
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f002 fccc 	bl	8008230 <VL53L0X_WrByte>
 8005898:	4603      	mov	r3, r0
 800589a:	461a      	mov	r2, r3
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	4313      	orrs	r3, r2
 80058a0:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80058a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80058aa:	787b      	ldrb	r3, [r7, #1]
 80058ac:	2280      	movs	r2, #128	; 0x80
 80058ae:	21ee      	movs	r1, #238	; 0xee
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f002 fd0b 	bl	80082cc <VL53L0X_UpdateByte>
 80058b6:	4603      	mov	r3, r0
 80058b8:	461a      	mov	r2, r3
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	4313      	orrs	r3, r2
 80058be:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80058c0:	2201      	movs	r2, #1
 80058c2:	21ff      	movs	r1, #255	; 0xff
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f002 fcb3 	bl	8008230 <VL53L0X_WrByte>
 80058ca:	4603      	mov	r3, r0
 80058cc:	461a      	mov	r2, r3
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80058d4:	2201      	movs	r2, #1
 80058d6:	2100      	movs	r1, #0
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f002 fca9 	bl	8008230 <VL53L0X_WrByte>
 80058de:	4603      	mov	r3, r0
 80058e0:	461a      	mov	r2, r3
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80058e8:	2200      	movs	r2, #0
 80058ea:	21ff      	movs	r1, #255	; 0xff
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f002 fc9f 	bl	8008230 <VL53L0X_WrByte>
 80058f2:	4603      	mov	r3, r0
 80058f4:	461a      	mov	r2, r3
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80058fc:	7bbb      	ldrb	r3, [r7, #14]
 80058fe:	f023 0310 	bic.w	r3, r3, #16
 8005902:	b2da      	uxtb	r2, r3
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	701a      	strb	r2, [r3, #0]

	return Status;
 8005908:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08a      	sub	sp, #40	; 0x28
 8005918:	af04      	add	r7, sp, #16
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	4611      	mov	r1, r2
 8005920:	461a      	mov	r2, r3
 8005922:	460b      	mov	r3, r1
 8005924:	71fb      	strb	r3, [r7, #7]
 8005926:	4613      	mov	r3, r2
 8005928:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800592a:	2300      	movs	r3, #0
 800592c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800593e:	79bb      	ldrb	r3, [r7, #6]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800594a:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800594c:	2201      	movs	r2, #1
 800594e:	2101      	movs	r1, #1
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f002 fc6d 	bl	8008230 <VL53L0X_WrByte>
 8005956:	4603      	mov	r3, r0
 8005958:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800595a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d105      	bne.n	800596e <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005962:	2140      	movs	r1, #64	; 0x40
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7ff ff01 	bl	800576c <VL53L0X_perform_single_ref_calibration>
 800596a:	4603      	mov	r3, r0
 800596c:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800596e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d115      	bne.n	80059a2 <VL53L0X_perform_vhv_calibration+0x8e>
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d112      	bne.n	80059a2 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800597c:	7d39      	ldrb	r1, [r7, #20]
 800597e:	7d7a      	ldrb	r2, [r7, #21]
 8005980:	2300      	movs	r3, #0
 8005982:	9303      	str	r3, [sp, #12]
 8005984:	2301      	movs	r3, #1
 8005986:	9302      	str	r3, [sp, #8]
 8005988:	f107 0313 	add.w	r3, r7, #19
 800598c:	9301      	str	r3, [sp, #4]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	460b      	mov	r3, r1
 8005994:	2101      	movs	r1, #1
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff ff23 	bl	80057e2 <VL53L0X_ref_calibration_io>
 800599c:	4603      	mov	r3, r0
 800599e:	75fb      	strb	r3, [r7, #23]
 80059a0:	e002      	b.n	80059a8 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80059a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d112      	bne.n	80059d6 <VL53L0X_perform_vhv_calibration+0xc2>
 80059b0:	79bb      	ldrb	r3, [r7, #6]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00f      	beq.n	80059d6 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80059b6:	7dbb      	ldrb	r3, [r7, #22]
 80059b8:	461a      	mov	r2, r3
 80059ba:	2101      	movs	r1, #1
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f002 fc37 	bl	8008230 <VL53L0X_WrByte>
 80059c2:	4603      	mov	r3, r0
 80059c4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80059c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d103      	bne.n	80059d6 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	7dba      	ldrb	r2, [r7, #22]
 80059d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80059d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b08a      	sub	sp, #40	; 0x28
 80059e6:	af04      	add	r7, sp, #16
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	4611      	mov	r1, r2
 80059ee:	461a      	mov	r2, r3
 80059f0:	460b      	mov	r3, r1
 80059f2:	71fb      	strb	r3, [r7, #7]
 80059f4:	4613      	mov	r3, r2
 80059f6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059f8:	2300      	movs	r3, #0
 80059fa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005a08:	79bb      	ldrb	r3, [r7, #6]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005a14:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005a16:	2202      	movs	r2, #2
 8005a18:	2101      	movs	r1, #1
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f002 fc08 	bl	8008230 <VL53L0X_WrByte>
 8005a20:	4603      	mov	r3, r0
 8005a22:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005a24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d105      	bne.n	8005a38 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f7ff fe9c 	bl	800576c <VL53L0X_perform_single_ref_calibration>
 8005a34:	4603      	mov	r3, r0
 8005a36:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005a38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d115      	bne.n	8005a6c <VL53L0X_perform_phase_calibration+0x8a>
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d112      	bne.n	8005a6c <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005a46:	7d39      	ldrb	r1, [r7, #20]
 8005a48:	7d7a      	ldrb	r2, [r7, #21]
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	9303      	str	r3, [sp, #12]
 8005a4e:	2300      	movs	r3, #0
 8005a50:	9302      	str	r3, [sp, #8]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	9301      	str	r3, [sp, #4]
 8005a56:	f107 0313 	add.w	r3, r7, #19
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	2101      	movs	r1, #1
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff febe 	bl	80057e2 <VL53L0X_ref_calibration_io>
 8005a66:	4603      	mov	r3, r0
 8005a68:	75fb      	strb	r3, [r7, #23]
 8005a6a:	e002      	b.n	8005a72 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005a72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d112      	bne.n	8005aa0 <VL53L0X_perform_phase_calibration+0xbe>
 8005a7a:	79bb      	ldrb	r3, [r7, #6]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00f      	beq.n	8005aa0 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005a80:	7dbb      	ldrb	r3, [r7, #22]
 8005a82:	461a      	mov	r2, r3
 8005a84:	2101      	movs	r1, #1
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f002 fbd2 	bl	8008230 <VL53L0X_WrByte>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005a90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d103      	bne.n	8005aa0 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	7dba      	ldrb	r2, [r7, #22]
 8005a9c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005aa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005ac8:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005aca:	78fa      	ldrb	r2, [r7, #3]
 8005acc:	2300      	movs	r3, #0
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff ff1f 	bl	8005914 <VL53L0X_perform_vhv_calibration>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005ada:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d107      	bne.n	8005af2 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005ae2:	78fa      	ldrb	r2, [r7, #3]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	6879      	ldr	r1, [r7, #4]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff ff7a 	bl	80059e2 <VL53L0X_perform_phase_calibration>
 8005aee:	4603      	mov	r3, r0
 8005af0:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005af2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10f      	bne.n	8005b1a <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005afa:	7dbb      	ldrb	r3, [r7, #22]
 8005afc:	461a      	mov	r2, r3
 8005afe:	2101      	movs	r1, #1
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f002 fb95 	bl	8008230 <VL53L0X_WrByte>
 8005b06:	4603      	mov	r3, r0
 8005b08:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005b0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d103      	bne.n	8005b1a <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	7dba      	ldrb	r2, [r7, #22]
 8005b16:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b086      	sub	sp, #24
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8005b36:	2300      	movs	r3, #0
 8005b38:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005b3a:	f107 030f 	add.w	r3, r7, #15
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7fe fe05 	bl	8004750 <VL53L0X_GetMeasurementDataReady>
 8005b46:	4603      	mov	r3, r0
 8005b48:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8005b4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d110      	bne.n	8005b74 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d00f      	beq.n	8005b78 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005b64:	d302      	bcc.n	8005b6c <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005b66:	23f9      	movs	r3, #249	; 0xf9
 8005b68:	75fb      	strb	r3, [r7, #23]
			break;
 8005b6a:	e006      	b.n	8005b7a <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f002 fc7f 	bl	8008470 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005b72:	e7e2      	b.n	8005b3a <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8005b74:	bf00      	nop
 8005b76:	e000      	b.n	8005b7a <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8005b78:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8005b7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b085      	sub	sp, #20
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	3301      	adds	r3, #1
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bc80      	pop	{r7}
 8005ba8:	4770      	bx	lr

08005baa <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b085      	sub	sp, #20
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8005bb8:	79fb      	ldrb	r3, [r7, #7]
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr

08005bce <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8005bda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bde:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005be0:	e002      	b.n	8005be8 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	089b      	lsrs	r3, r3, #2
 8005be6:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d8f8      	bhi.n	8005be2 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005bf0:	e017      	b.n	8005c22 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d30b      	bcc.n	8005c16 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	4413      	add	r3, r2
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	085b      	lsrs	r3, r3, #1
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	4413      	add	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	e002      	b.n	8005c1c <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	085b      	lsrs	r3, r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	089b      	lsrs	r3, r3, #2
 8005c20:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e4      	bne.n	8005bf2 <VL53L0X_isqrt+0x24>
	}

	return res;
 8005c28:	68fb      	ldr	r3, [r7, #12]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr

08005c34 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005c40:	2200      	movs	r2, #0
 8005c42:	2183      	movs	r1, #131	; 0x83
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f002 faf3 	bl	8008230 <VL53L0X_WrByte>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8005c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d11e      	bne.n	8005c9a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005c60:	f107 030f 	add.w	r3, r7, #15
 8005c64:	461a      	mov	r2, r3
 8005c66:	2183      	movs	r1, #131	; 0x83
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f002 fb63 	bl	8008334 <VL53L0X_RdByte>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <VL53L0X_device_read_strobe+0x5a>
 8005c78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d106      	bne.n	8005c8e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	3301      	adds	r3, #1
 8005c84:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c8c:	d3e8      	bcc.n	8005c60 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c94:	d301      	bcc.n	8005c9a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005c96:	23f9      	movs	r3, #249	; 0xf9
 8005c98:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	2183      	movs	r1, #131	; 0x83
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f002 fac6 	bl	8008230 <VL53L0X_WrByte>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8005cae:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b098      	sub	sp, #96	; 0x60
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005cea:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005cee:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005d02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005d06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d0a:	2b07      	cmp	r3, #7
 8005d0c:	f000 8408 	beq.w	8006520 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005d10:	2201      	movs	r2, #1
 8005d12:	2180      	movs	r1, #128	; 0x80
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f002 fa8b 	bl	8008230 <VL53L0X_WrByte>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005d28:	2201      	movs	r2, #1
 8005d2a:	21ff      	movs	r1, #255	; 0xff
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f002 fa7f 	bl	8008230 <VL53L0X_WrByte>
 8005d32:	4603      	mov	r3, r0
 8005d34:	461a      	mov	r2, r3
 8005d36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005d40:	2200      	movs	r2, #0
 8005d42:	2100      	movs	r1, #0
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f002 fa73 	bl	8008230 <VL53L0X_WrByte>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005d58:	2206      	movs	r2, #6
 8005d5a:	21ff      	movs	r1, #255	; 0xff
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f002 fa67 	bl	8008230 <VL53L0X_WrByte>
 8005d62:	4603      	mov	r3, r0
 8005d64:	461a      	mov	r2, r3
 8005d66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005d70:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005d74:	461a      	mov	r2, r3
 8005d76:	2183      	movs	r1, #131	; 0x83
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f002 fadb 	bl	8008334 <VL53L0X_RdByte>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	461a      	mov	r2, r3
 8005d82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8005d8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d90:	f043 0304 	orr.w	r3, r3, #4
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	461a      	mov	r2, r3
 8005d98:	2183      	movs	r1, #131	; 0x83
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f002 fa48 	bl	8008230 <VL53L0X_WrByte>
 8005da0:	4603      	mov	r3, r0
 8005da2:	461a      	mov	r2, r3
 8005da4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005dae:	2207      	movs	r2, #7
 8005db0:	21ff      	movs	r1, #255	; 0xff
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f002 fa3c 	bl	8008230 <VL53L0X_WrByte>
 8005db8:	4603      	mov	r3, r0
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	2181      	movs	r1, #129	; 0x81
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f002 fa30 	bl	8008230 <VL53L0X_WrByte>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f002 fb46 	bl	8008470 <VL53L0X_PollingDelay>
 8005de4:	4603      	mov	r3, r0
 8005de6:	461a      	mov	r2, r3
 8005de8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005df2:	2201      	movs	r2, #1
 8005df4:	2180      	movs	r1, #128	; 0x80
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f002 fa1a 	bl	8008230 <VL53L0X_WrByte>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 8098 	beq.w	8005f46 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005e16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e1a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f040 8091 	bne.w	8005f46 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8005e24:	226b      	movs	r2, #107	; 0x6b
 8005e26:	2194      	movs	r1, #148	; 0x94
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f002 fa01 	bl	8008230 <VL53L0X_WrByte>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	461a      	mov	r2, r3
 8005e32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff fef9 	bl	8005c34 <VL53L0X_device_read_strobe>
 8005e42:	4603      	mov	r3, r0
 8005e44:	461a      	mov	r2, r3
 8005e46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005e50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e54:	461a      	mov	r2, r3
 8005e56:	2190      	movs	r1, #144	; 0x90
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f002 facd 	bl	80083f8 <VL53L0X_RdDWord>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	461a      	mov	r2, r3
 8005e62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	0a1b      	lsrs	r3, r3, #8
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e76:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	0bdb      	lsrs	r3, r3, #15
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8005e88:	2224      	movs	r2, #36	; 0x24
 8005e8a:	2194      	movs	r1, #148	; 0x94
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f002 f9cf 	bl	8008230 <VL53L0X_WrByte>
 8005e92:	4603      	mov	r3, r0
 8005e94:	461a      	mov	r2, r3
 8005e96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff fec7 	bl	8005c34 <VL53L0X_device_read_strobe>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005eb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005eb8:	461a      	mov	r2, r3
 8005eba:	2190      	movs	r1, #144	; 0x90
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f002 fa9b 	bl	80083f8 <VL53L0X_RdDWord>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	0e1b      	lsrs	r3, r3, #24
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	0c1b      	lsrs	r3, r3, #16
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	0a1b      	lsrs	r3, r3, #8
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005eee:	2225      	movs	r2, #37	; 0x25
 8005ef0:	2194      	movs	r1, #148	; 0x94
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f002 f99c 	bl	8008230 <VL53L0X_WrByte>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	461a      	mov	r2, r3
 8005efc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7ff fe94 	bl	8005c34 <VL53L0X_device_read_strobe>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005f1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f1e:	461a      	mov	r2, r3
 8005f20:	2190      	movs	r1, #144	; 0x90
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f002 fa68 	bl	80083f8 <VL53L0X_RdDWord>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	0e1b      	lsrs	r3, r3, #24
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	0c1b      	lsrs	r3, r3, #16
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 8189 	beq.w	8006264 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005f52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f56:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f040 8182 	bne.w	8006264 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8005f60:	2202      	movs	r2, #2
 8005f62:	2194      	movs	r1, #148	; 0x94
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f002 f963 	bl	8008230 <VL53L0X_WrByte>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff fe5b 	bl	8005c34 <VL53L0X_device_read_strobe>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	461a      	mov	r2, r3
 8005f82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8005f8c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8005f90:	461a      	mov	r2, r3
 8005f92:	2190      	movs	r1, #144	; 0x90
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f002 f9cd 	bl	8008334 <VL53L0X_RdByte>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005fa8:	227b      	movs	r2, #123	; 0x7b
 8005faa:	2194      	movs	r1, #148	; 0x94
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f002 f93f 	bl	8008230 <VL53L0X_WrByte>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff fe37 	bl	8005c34 <VL53L0X_device_read_strobe>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	461a      	mov	r2, r3
 8005fca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8005fd4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8005fd8:	461a      	mov	r2, r3
 8005fda:	2190      	movs	r1, #144	; 0x90
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f002 f9a9 	bl	8008334 <VL53L0X_RdByte>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8005ff0:	2277      	movs	r2, #119	; 0x77
 8005ff2:	2194      	movs	r1, #148	; 0x94
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f002 f91b 	bl	8008230 <VL53L0X_WrByte>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006002:	4313      	orrs	r3, r2
 8006004:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff fe13 	bl	8005c34 <VL53L0X_device_read_strobe>
 800600e:	4603      	mov	r3, r0
 8006010:	461a      	mov	r2, r3
 8006012:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006016:	4313      	orrs	r3, r2
 8006018:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800601c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006020:	461a      	mov	r2, r3
 8006022:	2190      	movs	r1, #144	; 0x90
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f002 f9e7 	bl	80083f8 <VL53L0X_RdDWord>
 800602a:	4603      	mov	r3, r0
 800602c:	461a      	mov	r2, r3
 800602e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006032:	4313      	orrs	r3, r2
 8006034:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	0e5b      	lsrs	r3, r3, #25
 800603c:	b2db      	uxtb	r3, r3
 800603e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006042:	b2db      	uxtb	r3, r3
 8006044:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	0c9b      	lsrs	r3, r3, #18
 800604a:	b2db      	uxtb	r3, r3
 800604c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006050:	b2db      	uxtb	r3, r3
 8006052:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	0adb      	lsrs	r3, r3, #11
 8006058:	b2db      	uxtb	r3, r3
 800605a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800605e:	b2db      	uxtb	r3, r3
 8006060:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	091b      	lsrs	r3, r3, #4
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800606c:	b2db      	uxtb	r3, r3
 800606e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	b2db      	uxtb	r3, r3
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	b2db      	uxtb	r3, r3
 8006078:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800607c:	b2db      	uxtb	r3, r3
 800607e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006082:	2278      	movs	r2, #120	; 0x78
 8006084:	2194      	movs	r1, #148	; 0x94
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f002 f8d2 	bl	8008230 <VL53L0X_WrByte>
 800608c:	4603      	mov	r3, r0
 800608e:	461a      	mov	r2, r3
 8006090:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006094:	4313      	orrs	r3, r2
 8006096:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff fdca 	bl	8005c34 <VL53L0X_device_read_strobe>
 80060a0:	4603      	mov	r3, r0
 80060a2:	461a      	mov	r2, r3
 80060a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80060ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060b2:	461a      	mov	r2, r3
 80060b4:	2190      	movs	r1, #144	; 0x90
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f002 f99e 	bl	80083f8 <VL53L0X_RdDWord>
 80060bc:	4603      	mov	r3, r0
 80060be:	461a      	mov	r2, r3
 80060c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	0f5b      	lsrs	r3, r3, #29
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d4:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80060d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060da:	4413      	add	r3, r2
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	0d9b      	lsrs	r3, r3, #22
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	0bdb      	lsrs	r3, r3, #15
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	0a1b      	lsrs	r3, r3, #8
 8006100:	b2db      	uxtb	r3, r3
 8006102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006106:	b2db      	uxtb	r3, r3
 8006108:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	b2db      	uxtb	r3, r3
 8006110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006114:	b2db      	uxtb	r3, r3
 8006116:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	b2db      	uxtb	r3, r3
 800611c:	019b      	lsls	r3, r3, #6
 800611e:	b2db      	uxtb	r3, r3
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800612a:	2279      	movs	r2, #121	; 0x79
 800612c:	2194      	movs	r1, #148	; 0x94
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f002 f87e 	bl	8008230 <VL53L0X_WrByte>
 8006134:	4603      	mov	r3, r0
 8006136:	461a      	mov	r2, r3
 8006138:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800613c:	4313      	orrs	r3, r2
 800613e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7ff fd76 	bl	8005c34 <VL53L0X_device_read_strobe>
 8006148:	4603      	mov	r3, r0
 800614a:	461a      	mov	r2, r3
 800614c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006150:	4313      	orrs	r3, r2
 8006152:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006156:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800615a:	461a      	mov	r2, r3
 800615c:	2190      	movs	r1, #144	; 0x90
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f002 f94a 	bl	80083f8 <VL53L0X_RdDWord>
 8006164:	4603      	mov	r3, r0
 8006166:	461a      	mov	r2, r3
 8006168:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800616c:	4313      	orrs	r3, r2
 800616e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	0e9b      	lsrs	r3, r3, #26
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800617c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800617e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006182:	4413      	add	r3, r2
 8006184:	b2db      	uxtb	r3, r3
 8006186:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	0cdb      	lsrs	r3, r3, #19
 800618c:	b2db      	uxtb	r3, r3
 800618e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006192:	b2db      	uxtb	r3, r3
 8006194:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	0b1b      	lsrs	r3, r3, #12
 800619a:	b2db      	uxtb	r3, r3
 800619c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80061c4:	227a      	movs	r2, #122	; 0x7a
 80061c6:	2194      	movs	r1, #148	; 0x94
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f002 f831 	bl	8008230 <VL53L0X_WrByte>
 80061ce:	4603      	mov	r3, r0
 80061d0:	461a      	mov	r2, r3
 80061d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff fd29 	bl	8005c34 <VL53L0X_device_read_strobe>
 80061e2:	4603      	mov	r3, r0
 80061e4:	461a      	mov	r2, r3
 80061e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80061f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80061f4:	461a      	mov	r2, r3
 80061f6:	2190      	movs	r1, #144	; 0x90
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f002 f8fd 	bl	80083f8 <VL53L0X_RdDWord>
 80061fe:	4603      	mov	r3, r0
 8006200:	461a      	mov	r2, r3
 8006202:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006206:	4313      	orrs	r3, r2
 8006208:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	0f9b      	lsrs	r3, r3, #30
 8006210:	b2db      	uxtb	r3, r3
 8006212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006216:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8006218:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800621c:	4413      	add	r3, r2
 800621e:	b2db      	uxtb	r3, r3
 8006220:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	0ddb      	lsrs	r3, r3, #23
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800622c:	b2db      	uxtb	r3, r3
 800622e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	0c1b      	lsrs	r3, r3, #16
 8006234:	b2db      	uxtb	r3, r3
 8006236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800623a:	b2db      	uxtb	r3, r3
 800623c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	0a5b      	lsrs	r3, r3, #9
 8006242:	b2db      	uxtb	r3, r3
 8006244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006248:	b2db      	uxtb	r3, r3
 800624a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	089b      	lsrs	r3, r3, #2
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006258:	b2db      	uxtb	r3, r3
 800625a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800625e:	2300      	movs	r3, #0
 8006260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 80f1 	beq.w	8006452 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006270:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006274:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006278:	2b00      	cmp	r3, #0
 800627a:	f040 80ea 	bne.w	8006452 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800627e:	227b      	movs	r2, #123	; 0x7b
 8006280:	2194      	movs	r1, #148	; 0x94
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 ffd4 	bl	8008230 <VL53L0X_WrByte>
 8006288:	4603      	mov	r3, r0
 800628a:	461a      	mov	r2, r3
 800628c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006290:	4313      	orrs	r3, r2
 8006292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff fccc 	bl	8005c34 <VL53L0X_device_read_strobe>
 800629c:	4603      	mov	r3, r0
 800629e:	461a      	mov	r2, r3
 80062a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80062aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062ae:	461a      	mov	r2, r3
 80062b0:	2190      	movs	r1, #144	; 0x90
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f002 f8a0 	bl	80083f8 <VL53L0X_RdDWord>
 80062b8:	4603      	mov	r3, r0
 80062ba:	461a      	mov	r2, r3
 80062bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80062c6:	227c      	movs	r2, #124	; 0x7c
 80062c8:	2194      	movs	r1, #148	; 0x94
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 ffb0 	bl	8008230 <VL53L0X_WrByte>
 80062d0:	4603      	mov	r3, r0
 80062d2:	461a      	mov	r2, r3
 80062d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062d8:	4313      	orrs	r3, r2
 80062da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff fca8 	bl	8005c34 <VL53L0X_device_read_strobe>
 80062e4:	4603      	mov	r3, r0
 80062e6:	461a      	mov	r2, r3
 80062e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80062f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062f6:	461a      	mov	r2, r3
 80062f8:	2190      	movs	r1, #144	; 0x90
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f002 f87c 	bl	80083f8 <VL53L0X_RdDWord>
 8006300:	4603      	mov	r3, r0
 8006302:	461a      	mov	r2, r3
 8006304:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006308:	4313      	orrs	r3, r2
 800630a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800630e:	2273      	movs	r2, #115	; 0x73
 8006310:	2194      	movs	r1, #148	; 0x94
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f001 ff8c 	bl	8008230 <VL53L0X_WrByte>
 8006318:	4603      	mov	r3, r0
 800631a:	461a      	mov	r2, r3
 800631c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006320:	4313      	orrs	r3, r2
 8006322:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff fc84 	bl	8005c34 <VL53L0X_device_read_strobe>
 800632c:	4603      	mov	r3, r0
 800632e:	461a      	mov	r2, r3
 8006330:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006334:	4313      	orrs	r3, r2
 8006336:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800633a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800633e:	461a      	mov	r2, r3
 8006340:	2190      	movs	r1, #144	; 0x90
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f002 f858 	bl	80083f8 <VL53L0X_RdDWord>
 8006348:	4603      	mov	r3, r0
 800634a:	461a      	mov	r2, r3
 800634c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006350:	4313      	orrs	r3, r2
 8006352:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800635a:	b29b      	uxth	r3, r3
 800635c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800635e:	2274      	movs	r2, #116	; 0x74
 8006360:	2194      	movs	r1, #148	; 0x94
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 ff64 	bl	8008230 <VL53L0X_WrByte>
 8006368:	4603      	mov	r3, r0
 800636a:	461a      	mov	r2, r3
 800636c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006370:	4313      	orrs	r3, r2
 8006372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff fc5c 	bl	8005c34 <VL53L0X_device_read_strobe>
 800637c:	4603      	mov	r3, r0
 800637e:	461a      	mov	r2, r3
 8006380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006384:	4313      	orrs	r3, r2
 8006386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800638a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800638e:	461a      	mov	r2, r3
 8006390:	2190      	movs	r1, #144	; 0x90
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f002 f830 	bl	80083f8 <VL53L0X_RdDWord>
 8006398:	4603      	mov	r3, r0
 800639a:	461a      	mov	r2, r3
 800639c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80063aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063ac:	4313      	orrs	r3, r2
 80063ae:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80063b0:	2275      	movs	r2, #117	; 0x75
 80063b2:	2194      	movs	r1, #148	; 0x94
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 ff3b 	bl	8008230 <VL53L0X_WrByte>
 80063ba:	4603      	mov	r3, r0
 80063bc:	461a      	mov	r2, r3
 80063be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff fc33 	bl	8005c34 <VL53L0X_device_read_strobe>
 80063ce:	4603      	mov	r3, r0
 80063d0:	461a      	mov	r2, r3
 80063d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063d6:	4313      	orrs	r3, r2
 80063d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80063dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063e0:	461a      	mov	r2, r3
 80063e2:	2190      	movs	r1, #144	; 0x90
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f002 f807 	bl	80083f8 <VL53L0X_RdDWord>
 80063ea:	4603      	mov	r3, r0
 80063ec:	461a      	mov	r2, r3
 80063ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006400:	2276      	movs	r2, #118	; 0x76
 8006402:	2194      	movs	r1, #148	; 0x94
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 ff13 	bl	8008230 <VL53L0X_WrByte>
 800640a:	4603      	mov	r3, r0
 800640c:	461a      	mov	r2, r3
 800640e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006412:	4313      	orrs	r3, r2
 8006414:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff fc0b 	bl	8005c34 <VL53L0X_device_read_strobe>
 800641e:	4603      	mov	r3, r0
 8006420:	461a      	mov	r2, r3
 8006422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006426:	4313      	orrs	r3, r2
 8006428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800642c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006430:	461a      	mov	r2, r3
 8006432:	2190      	movs	r1, #144	; 0x90
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 ffdf 	bl	80083f8 <VL53L0X_RdDWord>
 800643a:	4603      	mov	r3, r0
 800643c:	461a      	mov	r2, r3
 800643e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006442:	4313      	orrs	r3, r2
 8006444:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8006448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800644c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800644e:	4313      	orrs	r3, r2
 8006450:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006452:	2200      	movs	r2, #0
 8006454:	2181      	movs	r1, #129	; 0x81
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f001 feea 	bl	8008230 <VL53L0X_WrByte>
 800645c:	4603      	mov	r3, r0
 800645e:	461a      	mov	r2, r3
 8006460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006464:	4313      	orrs	r3, r2
 8006466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800646a:	2206      	movs	r2, #6
 800646c:	21ff      	movs	r1, #255	; 0xff
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f001 fede 	bl	8008230 <VL53L0X_WrByte>
 8006474:	4603      	mov	r3, r0
 8006476:	461a      	mov	r2, r3
 8006478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800647c:	4313      	orrs	r3, r2
 800647e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006482:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006486:	461a      	mov	r2, r3
 8006488:	2183      	movs	r1, #131	; 0x83
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 ff52 	bl	8008334 <VL53L0X_RdByte>
 8006490:	4603      	mov	r3, r0
 8006492:	461a      	mov	r2, r3
 8006494:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006498:	4313      	orrs	r3, r2
 800649a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800649e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80064a2:	f023 0304 	bic.w	r3, r3, #4
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	461a      	mov	r2, r3
 80064aa:	2183      	movs	r1, #131	; 0x83
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 febf 	bl	8008230 <VL53L0X_WrByte>
 80064b2:	4603      	mov	r3, r0
 80064b4:	461a      	mov	r2, r3
 80064b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80064c0:	2201      	movs	r2, #1
 80064c2:	21ff      	movs	r1, #255	; 0xff
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f001 feb3 	bl	8008230 <VL53L0X_WrByte>
 80064ca:	4603      	mov	r3, r0
 80064cc:	461a      	mov	r2, r3
 80064ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80064d8:	2201      	movs	r2, #1
 80064da:	2100      	movs	r1, #0
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 fea7 	bl	8008230 <VL53L0X_WrByte>
 80064e2:	4603      	mov	r3, r0
 80064e4:	461a      	mov	r2, r3
 80064e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80064f0:	2200      	movs	r2, #0
 80064f2:	21ff      	movs	r1, #255	; 0xff
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f001 fe9b 	bl	8008230 <VL53L0X_WrByte>
 80064fa:	4603      	mov	r3, r0
 80064fc:	461a      	mov	r2, r3
 80064fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006502:	4313      	orrs	r3, r2
 8006504:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006508:	2200      	movs	r2, #0
 800650a:	2180      	movs	r1, #128	; 0x80
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 fe8f 	bl	8008230 <VL53L0X_WrByte>
 8006512:	4603      	mov	r3, r0
 8006514:	461a      	mov	r2, r3
 8006516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800651a:	4313      	orrs	r3, r2
 800651c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006520:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006524:	2b00      	cmp	r3, #0
 8006526:	f040 808f 	bne.w	8006648 <VL53L0X_get_info_from_device+0x98e>
 800652a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800652e:	2b07      	cmp	r3, #7
 8006530:	f000 808a 	beq.w	8006648 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d024      	beq.n	8006588 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800653e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006542:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006546:	2b00      	cmp	r3, #0
 8006548:	d11e      	bne.n	8006588 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8006550:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800655a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800655e:	2300      	movs	r3, #0
 8006560:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006562:	e00e      	b.n	8006582 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8006564:	f107 0208 	add.w	r2, r7, #8
 8006568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800656a:	4413      	add	r3, r2
 800656c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006572:	4413      	add	r3, r2
 8006574:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006578:	460a      	mov	r2, r1
 800657a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800657c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800657e:	3301      	adds	r3, #1
 8006580:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006584:	2b05      	cmp	r3, #5
 8006586:	dded      	ble.n	8006564 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d018      	beq.n	80065c4 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006592:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006596:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800659a:	2b00      	cmp	r3, #0
 800659c:	d112      	bne.n	80065c4 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800659e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80065a8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	33f3      	adds	r3, #243	; 0xf3
 80065b6:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80065b8:	f107 0310 	add.w	r3, r7, #16
 80065bc:	4619      	mov	r1, r3
 80065be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065c0:	f002 f8ee 	bl	80087a0 <strcpy>

		}

		if (((option & 4) == 4) &&
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	f003 0304 	and.w	r3, r3, #4
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d030      	beq.n	8006630 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80065ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065d2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d12a      	bne.n	8006630 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80065da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80065e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80065ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ec:	025b      	lsls	r3, r3, #9
 80065ee:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065f4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80065f8:	2300      	movs	r3, #0
 80065fa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80065fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006600:	2b00      	cmp	r3, #0
 8006602:	d011      	beq.n	8006628 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8006604:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800660c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800660e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006612:	fb02 f303 	mul.w	r3, r2, r3
 8006616:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8006618:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800661c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006620:	425b      	negs	r3, r3
 8006622:	b29b      	uxth	r3, r3
 8006624:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8006628:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8006630:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	4313      	orrs	r3, r2
 8006638:	b2db      	uxtb	r3, r3
 800663a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800663e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006648:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800664c:	4618      	mov	r0, r3
 800664e:	3760      	adds	r7, #96	; 0x60
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8006660:	f240 6277 	movw	r2, #1655	; 0x677
 8006664:	f04f 0300 	mov.w	r3, #0
 8006668:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800666c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006670:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	fb02 f303 	mul.w	r3, r2, r3
 8006680:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8006682:	68bb      	ldr	r3, [r7, #8]
}
 8006684:	4618      	mov	r0, r3
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr

0800668e <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800668e:	b480      	push	{r7}
 8006690:	b087      	sub	sp, #28
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d017      	beq.n	80066d8 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80066ae:	e005      	b.n	80066bc <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80066b6:	89fb      	ldrh	r3, [r7, #14]
 80066b8:	3301      	adds	r3, #1
 80066ba:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f4      	bne.n	80066b0 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80066c6:	89fb      	ldrh	r3, [r7, #14]
 80066c8:	021b      	lsls	r3, r3, #8
 80066ca:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80066d4:	4413      	add	r3, r2
 80066d6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80066d8:	8afb      	ldrh	r3, [r7, #22]

}
 80066da:	4618      	mov	r0, r3
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr

080066e4 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4603      	mov	r3, r0
 80066ec:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80066f2:	88fb      	ldrh	r3, [r7, #6]
 80066f4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80066f6:	88fa      	ldrh	r2, [r7, #6]
 80066f8:	0a12      	lsrs	r2, r2, #8
 80066fa:	b292      	uxth	r2, r2
 80066fc:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80066fe:	3301      	adds	r3, #1
 8006700:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8006702:	68fb      	ldr	r3, [r7, #12]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr
	...

08006710 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	4619      	mov	r1, r3
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7ff ff94 	bl	8006654 <VL53L0X_calc_macro_period_ps>
 800672c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006734:	4a0a      	ldr	r2, [pc, #40]	; (8006760 <VL53L0X_calc_timeout_mclks+0x50>)
 8006736:	fba2 2303 	umull	r2, r3, r2, r3
 800673a:	099b      	lsrs	r3, r3, #6
 800673c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006744:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	085b      	lsrs	r3, r3, #1
 800674c:	441a      	add	r2, r3
	timeout_period_mclks =
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	fbb2 f3f3 	udiv	r3, r2, r3
 8006754:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8006756:	69fb      	ldr	r3, [r7, #28]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	10624dd3 	.word	0x10624dd3

08006764 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	807b      	strh	r3, [r7, #2]
 8006770:	4613      	mov	r3, r2
 8006772:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006778:	787b      	ldrb	r3, [r7, #1]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff ff69 	bl	8006654 <VL53L0X_calc_macro_period_ps>
 8006782:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800678a:	4a0a      	ldr	r2, [pc, #40]	; (80067b4 <VL53L0X_calc_timeout_us+0x50>)
 800678c:	fba2 2303 	umull	r2, r3, r2, r3
 8006790:	099b      	lsrs	r3, r3, #6
 8006792:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8006794:	887b      	ldrh	r3, [r7, #2]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	fb02 f303 	mul.w	r3, r2, r3
 800679c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80067a0:	4a04      	ldr	r2, [pc, #16]	; (80067b4 <VL53L0X_calc_timeout_us+0x50>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	099b      	lsrs	r3, r3, #6
 80067a8:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80067aa:	697b      	ldr	r3, [r7, #20]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	10624dd3 	.word	0x10624dd3

080067b8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08c      	sub	sp, #48	; 0x30
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	460b      	mov	r3, r1
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067c6:	2300      	movs	r3, #0
 80067c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80067d6:	2300      	movs	r3, #0
 80067d8:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80067de:	7afb      	ldrb	r3, [r7, #11]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <get_sequence_step_timeout+0x38>
 80067e4:	7afb      	ldrb	r3, [r7, #11]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d002      	beq.n	80067f0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80067ea:	7afb      	ldrb	r3, [r7, #11]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d128      	bne.n	8006842 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80067f0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80067f4:	461a      	mov	r2, r3
 80067f6:	2100      	movs	r1, #0
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f7fd fa8a 	bl	8003d12 <VL53L0X_GetVcselPulsePeriod>
 80067fe:	4603      	mov	r3, r0
 8006800:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006804:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006808:	2b00      	cmp	r3, #0
 800680a:	d109      	bne.n	8006820 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800680c:	f107 0320 	add.w	r3, r7, #32
 8006810:	461a      	mov	r2, r3
 8006812:	2146      	movs	r1, #70	; 0x46
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f001 fd8d 	bl	8008334 <VL53L0X_RdByte>
 800681a:	4603      	mov	r3, r0
 800681c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006820:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006824:	b29b      	uxth	r3, r3
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff ff5c 	bl	80066e4 <VL53L0X_decode_timeout>
 800682c:	4603      	mov	r3, r0
 800682e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006830:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006834:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006836:	4619      	mov	r1, r3
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f7ff ff93 	bl	8006764 <VL53L0X_calc_timeout_us>
 800683e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006840:	e092      	b.n	8006968 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006842:	7afb      	ldrb	r3, [r7, #11]
 8006844:	2b03      	cmp	r3, #3
 8006846:	d135      	bne.n	80068b4 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006848:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800684c:	461a      	mov	r2, r3
 800684e:	2100      	movs	r1, #0
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f7fd fa5e 	bl	8003d12 <VL53L0X_GetVcselPulsePeriod>
 8006856:	4603      	mov	r3, r0
 8006858:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800685c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006860:	2b00      	cmp	r3, #0
 8006862:	f040 8081 	bne.w	8006968 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006866:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800686a:	461a      	mov	r2, r3
 800686c:	2100      	movs	r1, #0
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7fd fa4f 	bl	8003d12 <VL53L0X_GetVcselPulsePeriod>
 8006874:	4603      	mov	r3, r0
 8006876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800687a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800687e:	2b00      	cmp	r3, #0
 8006880:	d109      	bne.n	8006896 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8006882:	f107 031e 	add.w	r3, r7, #30
 8006886:	461a      	mov	r2, r3
 8006888:	2151      	movs	r1, #81	; 0x51
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f001 fd7c 	bl	8008388 <VL53L0X_RdWord>
 8006890:	4603      	mov	r3, r0
 8006892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006896:	8bfb      	ldrh	r3, [r7, #30]
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff ff23 	bl	80066e4 <VL53L0X_decode_timeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80068a2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80068a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068a8:	4619      	mov	r1, r3
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f7ff ff5a 	bl	8006764 <VL53L0X_calc_timeout_us>
 80068b0:	62b8      	str	r0, [r7, #40]	; 0x28
 80068b2:	e059      	b.n	8006968 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80068b4:	7afb      	ldrb	r3, [r7, #11]
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d156      	bne.n	8006968 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80068ba:	f107 0314 	add.w	r3, r7, #20
 80068be:	4619      	mov	r1, r3
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7fd fb2f 	bl	8003f24 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01d      	beq.n	800690c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80068d0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80068d4:	461a      	mov	r2, r3
 80068d6:	2100      	movs	r1, #0
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f7fd fa1a 	bl	8003d12 <VL53L0X_GetVcselPulsePeriod>
 80068de:	4603      	mov	r3, r0
 80068e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80068e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10f      	bne.n	800690c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80068ec:	f107 031e 	add.w	r3, r7, #30
 80068f0:	461a      	mov	r2, r3
 80068f2:	2151      	movs	r1, #81	; 0x51
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f001 fd47 	bl	8008388 <VL53L0X_RdWord>
 80068fa:	4603      	mov	r3, r0
 80068fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006900:	8bfb      	ldrh	r3, [r7, #30]
 8006902:	4618      	mov	r0, r3
 8006904:	f7ff feee 	bl	80066e4 <VL53L0X_decode_timeout>
 8006908:	4603      	mov	r3, r0
 800690a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800690c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006910:	2b00      	cmp	r3, #0
 8006912:	d109      	bne.n	8006928 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006914:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006918:	461a      	mov	r2, r3
 800691a:	2101      	movs	r1, #1
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f7fd f9f8 	bl	8003d12 <VL53L0X_GetVcselPulsePeriod>
 8006922:	4603      	mov	r3, r0
 8006924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006928:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10f      	bne.n	8006950 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8006930:	f107 031c 	add.w	r3, r7, #28
 8006934:	461a      	mov	r2, r3
 8006936:	2171      	movs	r1, #113	; 0x71
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f001 fd25 	bl	8008388 <VL53L0X_RdWord>
 800693e:	4603      	mov	r3, r0
 8006940:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006944:	8bbb      	ldrh	r3, [r7, #28]
 8006946:	4618      	mov	r0, r3
 8006948:	f7ff fecc 	bl	80066e4 <VL53L0X_decode_timeout>
 800694c:	4603      	mov	r3, r0
 800694e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006950:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006952:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006958:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800695c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800695e:	4619      	mov	r1, r3
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f7ff feff 	bl	8006764 <VL53L0X_calc_timeout_us>
 8006966:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800696c:	601a      	str	r2, [r3, #0]

	return Status;
 800696e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006972:	4618      	mov	r0, r3
 8006974:	3730      	adds	r7, #48	; 0x30
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b08a      	sub	sp, #40	; 0x28
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	460b      	mov	r3, r1
 8006984:	607a      	str	r2, [r7, #4]
 8006986:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006988:	2300      	movs	r3, #0
 800698a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800698e:	7afb      	ldrb	r3, [r7, #11]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <set_sequence_step_timeout+0x26>
 8006994:	7afb      	ldrb	r3, [r7, #11]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d002      	beq.n	80069a0 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800699a:	7afb      	ldrb	r3, [r7, #11]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d138      	bne.n	8006a12 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80069a0:	f107 031b 	add.w	r3, r7, #27
 80069a4:	461a      	mov	r2, r3
 80069a6:	2100      	movs	r1, #0
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f7fd f9b2 	bl	8003d12 <VL53L0X_GetVcselPulsePeriod>
 80069ae:	4603      	mov	r3, r0
 80069b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80069b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d11a      	bne.n	80069f2 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80069bc:	7efb      	ldrb	r3, [r7, #27]
 80069be:	461a      	mov	r2, r3
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f7ff fea4 	bl	8006710 <VL53L0X_calc_timeout_mclks>
 80069c8:	4603      	mov	r3, r0
 80069ca:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80069cc:	8bbb      	ldrh	r3, [r7, #28]
 80069ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069d2:	d903      	bls.n	80069dc <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80069d4:	23ff      	movs	r3, #255	; 0xff
 80069d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069da:	e004      	b.n	80069e6 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80069dc:	8bbb      	ldrh	r3, [r7, #28]
 80069de:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80069e0:	3b01      	subs	r3, #1
 80069e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80069e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80069f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f040 80ab 	bne.w	8006b52 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80069fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a00:	461a      	mov	r2, r3
 8006a02:	2146      	movs	r1, #70	; 0x46
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f001 fc13 	bl	8008230 <VL53L0X_WrByte>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006a10:	e09f      	b.n	8006b52 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006a12:	7afb      	ldrb	r3, [r7, #11]
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	d135      	bne.n	8006a84 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006a18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d11b      	bne.n	8006a58 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006a20:	f107 031b 	add.w	r3, r7, #27
 8006a24:	461a      	mov	r2, r3
 8006a26:	2100      	movs	r1, #0
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f7fd f972 	bl	8003d12 <VL53L0X_GetVcselPulsePeriod>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006a34:	7efb      	ldrb	r3, [r7, #27]
 8006a36:	461a      	mov	r2, r3
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f7ff fe68 	bl	8006710 <VL53L0X_calc_timeout_mclks>
 8006a40:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8006a42:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006a44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fe21 	bl	800668e <VL53L0X_encode_timeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a50:	8b3a      	ldrh	r2, [r7, #24]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006a58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d108      	bne.n	8006a72 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8006a60:	8b3b      	ldrh	r3, [r7, #24]
 8006a62:	461a      	mov	r2, r3
 8006a64:	2151      	movs	r1, #81	; 0x51
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f001 fc06 	bl	8008278 <VL53L0X_WrWord>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006a72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d16b      	bne.n	8006b52 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8006a82:	e066      	b.n	8006b52 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006a84:	7afb      	ldrb	r3, [r7, #11]
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d160      	bne.n	8006b4c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8006a8a:	f107 0310 	add.w	r3, r7, #16
 8006a8e:	4619      	mov	r1, r3
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f7fd fa47 	bl	8003f24 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006a9a:	7cfb      	ldrb	r3, [r7, #19]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d01d      	beq.n	8006adc <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006aa0:	f107 031b 	add.w	r3, r7, #27
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f7fd f932 	bl	8003d12 <VL53L0X_GetVcselPulsePeriod>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8006ab4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10f      	bne.n	8006adc <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006abc:	f107 0318 	add.w	r3, r7, #24
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	2151      	movs	r1, #81	; 0x51
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f001 fc5f 	bl	8008388 <VL53L0X_RdWord>
 8006aca:	4603      	mov	r3, r0
 8006acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006ad0:	8b3b      	ldrh	r3, [r7, #24]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff fe06 	bl	80066e4 <VL53L0X_decode_timeout>
 8006ad8:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006ada:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006adc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d109      	bne.n	8006af8 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ae4:	f107 031b 	add.w	r3, r7, #27
 8006ae8:	461a      	mov	r2, r3
 8006aea:	2101      	movs	r1, #1
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f7fd f910 	bl	8003d12 <VL53L0X_GetVcselPulsePeriod>
 8006af2:	4603      	mov	r3, r0
 8006af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006af8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d128      	bne.n	8006b52 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006b00:	7efb      	ldrb	r3, [r7, #27]
 8006b02:	461a      	mov	r2, r3
 8006b04:	6879      	ldr	r1, [r7, #4]
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7ff fe02 	bl	8006710 <VL53L0X_calc_timeout_mclks>
 8006b0c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006b0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b10:	6a3a      	ldr	r2, [r7, #32]
 8006b12:	4413      	add	r3, r2
 8006b14:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8006b16:	6a38      	ldr	r0, [r7, #32]
 8006b18:	f7ff fdb9 	bl	800668e <VL53L0X_encode_timeout>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8006b20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d108      	bne.n	8006b3a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006b28:	8bfb      	ldrh	r3, [r7, #30]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	2171      	movs	r1, #113	; 0x71
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f001 fba2 	bl	8008278 <VL53L0X_WrWord>
 8006b34:	4603      	mov	r3, r0
 8006b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8006b3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d107      	bne.n	8006b52 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006b4a:	e002      	b.n	8006b52 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b4c:	23fc      	movs	r3, #252	; 0xfc
 8006b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8006b52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3728      	adds	r7, #40	; 0x28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b08a      	sub	sp, #40	; 0x28
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	460b      	mov	r3, r1
 8006b68:	70fb      	strb	r3, [r7, #3]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8006b74:	230c      	movs	r3, #12
 8006b76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8006b7a:	2312      	movs	r3, #18
 8006b7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8006b80:	2308      	movs	r3, #8
 8006b82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8006b86:	230e      	movs	r3, #14
 8006b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006b90:	78bb      	ldrb	r3, [r7, #2]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b9c:	23fc      	movs	r3, #252	; 0xfc
 8006b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ba2:	e020      	b.n	8006be6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10d      	bne.n	8006bc6 <VL53L0X_set_vcsel_pulse_period+0x68>
 8006baa:	78ba      	ldrb	r2, [r7, #2]
 8006bac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d304      	bcc.n	8006bbe <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8006bb4:	78ba      	ldrb	r2, [r7, #2]
 8006bb6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d903      	bls.n	8006bc6 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006bbe:	23fc      	movs	r3, #252	; 0xfc
 8006bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006bc4:	e00f      	b.n	8006be6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8006bc6:	78fb      	ldrb	r3, [r7, #3]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d10c      	bne.n	8006be6 <VL53L0X_set_vcsel_pulse_period+0x88>
 8006bcc:	78ba      	ldrb	r2, [r7, #2]
 8006bce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d304      	bcc.n	8006be0 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8006bd6:	78ba      	ldrb	r2, [r7, #2]
 8006bd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d902      	bls.n	8006be6 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006be0:	23fc      	movs	r3, #252	; 0xfc
 8006be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8006be6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8006bee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bf2:	e237      	b.n	8007064 <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d150      	bne.n	8006c9c <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8006bfa:	78bb      	ldrb	r3, [r7, #2]
 8006bfc:	2b0c      	cmp	r3, #12
 8006bfe:	d110      	bne.n	8006c22 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8006c00:	2218      	movs	r2, #24
 8006c02:	2157      	movs	r1, #87	; 0x57
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 fb13 	bl	8008230 <VL53L0X_WrByte>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8006c10:	2208      	movs	r2, #8
 8006c12:	2156      	movs	r1, #86	; 0x56
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 fb0b 	bl	8008230 <VL53L0X_WrByte>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c20:	e17f      	b.n	8006f22 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006c22:	78bb      	ldrb	r3, [r7, #2]
 8006c24:	2b0e      	cmp	r3, #14
 8006c26:	d110      	bne.n	8006c4a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8006c28:	2230      	movs	r2, #48	; 0x30
 8006c2a:	2157      	movs	r1, #87	; 0x57
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f001 faff 	bl	8008230 <VL53L0X_WrByte>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8006c38:	2208      	movs	r2, #8
 8006c3a:	2156      	movs	r1, #86	; 0x56
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 faf7 	bl	8008230 <VL53L0X_WrByte>
 8006c42:	4603      	mov	r3, r0
 8006c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c48:	e16b      	b.n	8006f22 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8006c4a:	78bb      	ldrb	r3, [r7, #2]
 8006c4c:	2b10      	cmp	r3, #16
 8006c4e:	d110      	bne.n	8006c72 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8006c50:	2240      	movs	r2, #64	; 0x40
 8006c52:	2157      	movs	r1, #87	; 0x57
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 faeb 	bl	8008230 <VL53L0X_WrByte>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8006c60:	2208      	movs	r2, #8
 8006c62:	2156      	movs	r1, #86	; 0x56
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 fae3 	bl	8008230 <VL53L0X_WrByte>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c70:	e157      	b.n	8006f22 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8006c72:	78bb      	ldrb	r3, [r7, #2]
 8006c74:	2b12      	cmp	r3, #18
 8006c76:	f040 8154 	bne.w	8006f22 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006c7a:	2250      	movs	r2, #80	; 0x50
 8006c7c:	2157      	movs	r1, #87	; 0x57
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fad6 	bl	8008230 <VL53L0X_WrByte>
 8006c84:	4603      	mov	r3, r0
 8006c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8006c8a:	2208      	movs	r2, #8
 8006c8c:	2156      	movs	r1, #86	; 0x56
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 face 	bl	8008230 <VL53L0X_WrByte>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c9a:	e142      	b.n	8006f22 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	f040 813f 	bne.w	8006f22 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8006ca4:	78bb      	ldrb	r3, [r7, #2]
 8006ca6:	2b08      	cmp	r3, #8
 8006ca8:	d14c      	bne.n	8006d44 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8006caa:	2210      	movs	r2, #16
 8006cac:	2148      	movs	r1, #72	; 0x48
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f001 fabe 	bl	8008230 <VL53L0X_WrByte>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8006cba:	2208      	movs	r2, #8
 8006cbc:	2147      	movs	r1, #71	; 0x47
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 fab6 	bl	8008230 <VL53L0X_WrByte>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006cca:	2202      	movs	r2, #2
 8006ccc:	2132      	movs	r1, #50	; 0x32
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 faae 	bl	8008230 <VL53L0X_WrByte>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8006ce2:	220c      	movs	r2, #12
 8006ce4:	2130      	movs	r1, #48	; 0x30
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 faa2 	bl	8008230 <VL53L0X_WrByte>
 8006cec:	4603      	mov	r3, r0
 8006cee:	461a      	mov	r2, r3
 8006cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	21ff      	movs	r1, #255	; 0xff
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 fa96 	bl	8008230 <VL53L0X_WrByte>
 8006d04:	4603      	mov	r3, r0
 8006d06:	461a      	mov	r2, r3
 8006d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006d12:	2230      	movs	r2, #48	; 0x30
 8006d14:	2130      	movs	r1, #48	; 0x30
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f001 fa8a 	bl	8008230 <VL53L0X_WrByte>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d24:	4313      	orrs	r3, r2
 8006d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	21ff      	movs	r1, #255	; 0xff
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 fa7e 	bl	8008230 <VL53L0X_WrByte>
 8006d34:	4603      	mov	r3, r0
 8006d36:	461a      	mov	r2, r3
 8006d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d42:	e0ee      	b.n	8006f22 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8006d44:	78bb      	ldrb	r3, [r7, #2]
 8006d46:	2b0a      	cmp	r3, #10
 8006d48:	d14c      	bne.n	8006de4 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8006d4a:	2228      	movs	r2, #40	; 0x28
 8006d4c:	2148      	movs	r1, #72	; 0x48
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fa6e 	bl	8008230 <VL53L0X_WrByte>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8006d5a:	2208      	movs	r2, #8
 8006d5c:	2147      	movs	r1, #71	; 0x47
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 fa66 	bl	8008230 <VL53L0X_WrByte>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006d6a:	2203      	movs	r2, #3
 8006d6c:	2132      	movs	r1, #50	; 0x32
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 fa5e 	bl	8008230 <VL53L0X_WrByte>
 8006d74:	4603      	mov	r3, r0
 8006d76:	461a      	mov	r2, r3
 8006d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006d82:	2209      	movs	r2, #9
 8006d84:	2130      	movs	r1, #48	; 0x30
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 fa52 	bl	8008230 <VL53L0X_WrByte>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d94:	4313      	orrs	r3, r2
 8006d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	21ff      	movs	r1, #255	; 0xff
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 fa46 	bl	8008230 <VL53L0X_WrByte>
 8006da4:	4603      	mov	r3, r0
 8006da6:	461a      	mov	r2, r3
 8006da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dac:	4313      	orrs	r3, r2
 8006dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006db2:	2220      	movs	r2, #32
 8006db4:	2130      	movs	r1, #48	; 0x30
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 fa3a 	bl	8008230 <VL53L0X_WrByte>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006dca:	2200      	movs	r2, #0
 8006dcc:	21ff      	movs	r1, #255	; 0xff
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 fa2e 	bl	8008230 <VL53L0X_WrByte>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006de2:	e09e      	b.n	8006f22 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8006de4:	78bb      	ldrb	r3, [r7, #2]
 8006de6:	2b0c      	cmp	r3, #12
 8006de8:	d14c      	bne.n	8006e84 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8006dea:	2238      	movs	r2, #56	; 0x38
 8006dec:	2148      	movs	r1, #72	; 0x48
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f001 fa1e 	bl	8008230 <VL53L0X_WrByte>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8006dfa:	2208      	movs	r2, #8
 8006dfc:	2147      	movs	r1, #71	; 0x47
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 fa16 	bl	8008230 <VL53L0X_WrByte>
 8006e04:	4603      	mov	r3, r0
 8006e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	2132      	movs	r1, #50	; 0x32
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f001 fa0e 	bl	8008230 <VL53L0X_WrByte>
 8006e14:	4603      	mov	r3, r0
 8006e16:	461a      	mov	r2, r3
 8006e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006e22:	2208      	movs	r2, #8
 8006e24:	2130      	movs	r1, #48	; 0x30
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f001 fa02 	bl	8008230 <VL53L0X_WrByte>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e34:	4313      	orrs	r3, r2
 8006e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	21ff      	movs	r1, #255	; 0xff
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 f9f6 	bl	8008230 <VL53L0X_WrByte>
 8006e44:	4603      	mov	r3, r0
 8006e46:	461a      	mov	r2, r3
 8006e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006e52:	2220      	movs	r2, #32
 8006e54:	2130      	movs	r1, #48	; 0x30
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 f9ea 	bl	8008230 <VL53L0X_WrByte>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e64:	4313      	orrs	r3, r2
 8006e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	21ff      	movs	r1, #255	; 0xff
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 f9de 	bl	8008230 <VL53L0X_WrByte>
 8006e74:	4603      	mov	r3, r0
 8006e76:	461a      	mov	r2, r3
 8006e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e82:	e04e      	b.n	8006f22 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006e84:	78bb      	ldrb	r3, [r7, #2]
 8006e86:	2b0e      	cmp	r3, #14
 8006e88:	d14b      	bne.n	8006f22 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006e8a:	2248      	movs	r2, #72	; 0x48
 8006e8c:	2148      	movs	r1, #72	; 0x48
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 f9ce 	bl	8008230 <VL53L0X_WrByte>
 8006e94:	4603      	mov	r3, r0
 8006e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8006e9a:	2208      	movs	r2, #8
 8006e9c:	2147      	movs	r1, #71	; 0x47
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 f9c6 	bl	8008230 <VL53L0X_WrByte>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006eaa:	2203      	movs	r2, #3
 8006eac:	2132      	movs	r1, #50	; 0x32
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 f9be 	bl	8008230 <VL53L0X_WrByte>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006ec2:	2207      	movs	r2, #7
 8006ec4:	2130      	movs	r1, #48	; 0x30
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 f9b2 	bl	8008230 <VL53L0X_WrByte>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006eda:	2201      	movs	r2, #1
 8006edc:	21ff      	movs	r1, #255	; 0xff
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 f9a6 	bl	8008230 <VL53L0X_WrByte>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eec:	4313      	orrs	r3, r2
 8006eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	2130      	movs	r1, #48	; 0x30
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 f99a 	bl	8008230 <VL53L0X_WrByte>
 8006efc:	4603      	mov	r3, r0
 8006efe:	461a      	mov	r2, r3
 8006f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f04:	4313      	orrs	r3, r2
 8006f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	21ff      	movs	r1, #255	; 0xff
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 f98e 	bl	8008230 <VL53L0X_WrByte>
 8006f14:	4603      	mov	r3, r0
 8006f16:	461a      	mov	r2, r3
 8006f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8006f22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d17e      	bne.n	8007028 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8006f2a:	78bb      	ldrb	r3, [r7, #2]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe fe3c 	bl	8005baa <VL53L0X_encode_vcsel_period>
 8006f32:	4603      	mov	r3, r0
 8006f34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d045      	beq.n	8006fce <VL53L0X_set_vcsel_pulse_period+0x470>
 8006f42:	e06e      	b.n	8007022 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006f44:	f107 0314 	add.w	r3, r7, #20
 8006f48:	461a      	mov	r2, r3
 8006f4a:	2103      	movs	r1, #3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff fc33 	bl	80067b8 <get_sequence_step_timeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006f58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d109      	bne.n	8006f74 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8006f60:	f107 0310 	add.w	r3, r7, #16
 8006f64:	461a      	mov	r2, r3
 8006f66:	2102      	movs	r1, #2
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff fc25 	bl	80067b8 <get_sequence_step_timeout>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006f74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d109      	bne.n	8006f90 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8006f7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006f80:	461a      	mov	r2, r3
 8006f82:	2150      	movs	r1, #80	; 0x50
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 f953 	bl	8008230 <VL53L0X_WrByte>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006f90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d108      	bne.n	8006faa <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	2103      	movs	r1, #3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff fceb 	bl	800697a <set_sequence_step_timeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8006faa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d108      	bne.n	8006fc4 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	2102      	movs	r1, #2
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff fcde 	bl	800697a <set_sequence_step_timeout>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	78ba      	ldrb	r2, [r7, #2]
 8006fc8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8006fcc:	e02c      	b.n	8007028 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006fce:	f107 0318 	add.w	r3, r7, #24
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	2104      	movs	r1, #4
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff fbee 	bl	80067b8 <get_sequence_step_timeout>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006fe2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d109      	bne.n	8006ffe <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8006fea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006fee:	461a      	mov	r2, r3
 8006ff0:	2170      	movs	r1, #112	; 0x70
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 f91c 	bl	8008230 <VL53L0X_WrByte>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006ffe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007002:	2b00      	cmp	r3, #0
 8007004:	d108      	bne.n	8007018 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	461a      	mov	r2, r3
 800700a:	2104      	movs	r1, #4
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7ff fcb4 	bl	800697a <set_sequence_step_timeout>
 8007012:	4603      	mov	r3, r0
 8007014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	78ba      	ldrb	r2, [r7, #2]
 800701c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007020:	e002      	b.n	8007028 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007022:	23fc      	movs	r3, #252	; 0xfc
 8007024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8007028:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800702c:	2b00      	cmp	r3, #0
 800702e:	d109      	bne.n	8007044 <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007036:	69f9      	ldr	r1, [r7, #28]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7fc fe2c 	bl	8003c96 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800703e:	4603      	mov	r3, r0
 8007040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8007044:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007048:	2b00      	cmp	r3, #0
 800704a:	d109      	bne.n	8007060 <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 800704c:	f107 010f 	add.w	r1, r7, #15
 8007050:	2301      	movs	r3, #1
 8007052:	2200      	movs	r2, #0
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7fe fcc4 	bl	80059e2 <VL53L0X_perform_phase_calibration>
 800705a:	4603      	mov	r3, r0
 800705c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8007060:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007064:	4618      	mov	r0, r3
 8007066:	3728      	adds	r7, #40	; 0x28
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	460b      	mov	r3, r1
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800707a:	2300      	movs	r3, #0
 800707c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800707e:	7afb      	ldrb	r3, [r7, #11]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007084:	2b01      	cmp	r3, #1
 8007086:	d00a      	beq.n	800709e <VL53L0X_get_vcsel_pulse_period+0x32>
 8007088:	e013      	b.n	80070b2 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800708a:	f107 0316 	add.w	r3, r7, #22
 800708e:	461a      	mov	r2, r3
 8007090:	2150      	movs	r1, #80	; 0x50
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f001 f94e 	bl	8008334 <VL53L0X_RdByte>
 8007098:	4603      	mov	r3, r0
 800709a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800709c:	e00b      	b.n	80070b6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800709e:	f107 0316 	add.w	r3, r7, #22
 80070a2:	461a      	mov	r2, r3
 80070a4:	2170      	movs	r1, #112	; 0x70
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f001 f944 	bl	8008334 <VL53L0X_RdByte>
 80070ac:	4603      	mov	r3, r0
 80070ae:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80070b0:	e001      	b.n	80070b6 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80070b2:	23fc      	movs	r3, #252	; 0xfc
 80070b4:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80070b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d107      	bne.n	80070ce <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80070be:	7dbb      	ldrb	r3, [r7, #22]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fe fd60 	bl	8005b86 <VL53L0X_decode_vcsel_period>
 80070c6:	4603      	mov	r3, r0
 80070c8:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	701a      	strb	r2, [r3, #0]

	return Status;
 80070ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b092      	sub	sp, #72	; 0x48
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070e4:	2300      	movs	r3, #0
 80070e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80070ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80070ee:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80070f0:	f240 7376 	movw	r3, #1910	; 0x776
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80070f6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80070fa:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80070fc:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007100:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8007102:	f240 234e 	movw	r3, #590	; 0x24e
 8007106:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8007108:	f240 23b2 	movw	r3, #690	; 0x2b2
 800710c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800710e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007112:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007114:	f240 2326 	movw	r3, #550	; 0x226
 8007118:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800711a:	2300      	movs	r3, #0
 800711c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800711e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8007122:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	429a      	cmp	r2, r3
 800712e:	d205      	bcs.n	800713c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007130:	23fc      	movs	r3, #252	; 0xfc
 8007132:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8007136:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800713a:	e0aa      	b.n	8007292 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800713c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007140:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007148:	f107 0314 	add.w	r3, r7, #20
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7fc fee8 	bl	8003f24 <VL53L0X_GetSequenceStepEnables>
 8007154:	4603      	mov	r3, r0
 8007156:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800715a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800715e:	2b00      	cmp	r3, #0
 8007160:	d15b      	bne.n	800721a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8007162:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8007164:	2b00      	cmp	r3, #0
 8007166:	d105      	bne.n	8007174 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8007168:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800716a:	2b00      	cmp	r3, #0
 800716c:	d102      	bne.n	8007174 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800716e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8007170:	2b00      	cmp	r3, #0
 8007172:	d052      	beq.n	800721a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8007174:	f107 0310 	add.w	r3, r7, #16
 8007178:	461a      	mov	r2, r3
 800717a:	2102      	movs	r1, #2
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7ff fb1b 	bl	80067b8 <get_sequence_step_timeout>
 8007182:	4603      	mov	r3, r0
 8007184:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8007188:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8007190:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007194:	e07d      	b.n	8007292 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8007196:	7d3b      	ldrb	r3, [r7, #20]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00f      	beq.n	80071bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800719c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800719e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071a0:	4413      	add	r3, r2
 80071a2:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 80071a4:	69fa      	ldr	r2, [r7, #28]
 80071a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d204      	bcs.n	80071b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80071ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	643b      	str	r3, [r7, #64]	; 0x40
 80071b4:	e002      	b.n	80071bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80071b6:	23fc      	movs	r3, #252	; 0xfc
 80071b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80071bc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 80071c4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80071c8:	e063      	b.n	8007292 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80071ca:	7dbb      	ldrb	r3, [r7, #22]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d011      	beq.n	80071f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	4413      	add	r3, r2
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071de:	429a      	cmp	r2, r3
 80071e0:	d204      	bcs.n	80071ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80071e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	643b      	str	r3, [r7, #64]	; 0x40
 80071ea:	e016      	b.n	800721a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80071ec:	23fc      	movs	r3, #252	; 0xfc
 80071ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80071f2:	e012      	b.n	800721a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80071f4:	7d7b      	ldrb	r3, [r7, #21]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00f      	beq.n	800721a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071fe:	4413      	add	r3, r2
 8007200:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007202:	69fa      	ldr	r2, [r7, #28]
 8007204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007206:	429a      	cmp	r2, r3
 8007208:	d204      	bcs.n	8007214 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800720a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	643b      	str	r3, [r7, #64]	; 0x40
 8007212:	e002      	b.n	800721a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007214:	23fc      	movs	r3, #252	; 0xfc
 8007216:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800721a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007222:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007226:	e034      	b.n	8007292 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d019      	beq.n	8007262 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800722e:	f107 030c 	add.w	r3, r7, #12
 8007232:	461a      	mov	r2, r3
 8007234:	2103      	movs	r1, #3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff fabe 	bl	80067b8 <get_sequence_step_timeout>
 800723c:	4603      	mov	r3, r0
 800723e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007246:	4413      	add	r3, r2
 8007248:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800724e:	429a      	cmp	r2, r3
 8007250:	d204      	bcs.n	800725c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007252:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	643b      	str	r3, [r7, #64]	; 0x40
 800725a:	e002      	b.n	8007262 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800725c:	23fc      	movs	r3, #252	; 0xfc
 800725e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8007262:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007266:	2b00      	cmp	r3, #0
 8007268:	d111      	bne.n	800728e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800726a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00e      	beq.n	800728e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8007270:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8007278:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800727a:	2104      	movs	r1, #4
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7ff fb7c 	bl	800697a <set_sequence_step_timeout>
 8007282:	4603      	mov	r3, r0
 8007284:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800728e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8007292:	4618      	mov	r0, r3
 8007294:	3748      	adds	r7, #72	; 0x48
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b090      	sub	sp, #64	; 0x40
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072a4:	2300      	movs	r3, #0
 80072a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80072aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80072ae:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80072b0:	f240 7376 	movw	r3, #1910	; 0x776
 80072b4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80072b6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80072ba:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80072bc:	f44f 7325 	mov.w	r3, #660	; 0x294
 80072c0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80072c2:	f240 234e 	movw	r3, #590	; 0x24e
 80072c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80072c8:	f240 23b2 	movw	r3, #690	; 0x2b2
 80072cc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80072ce:	f44f 7325 	mov.w	r3, #660	; 0x294
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80072d4:	f240 2326 	movw	r3, #550	; 0x226
 80072d8:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80072de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e2:	441a      	add	r2, r3
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80072e8:	f107 0318 	add.w	r3, r7, #24
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fc fe18 	bl	8003f24 <VL53L0X_GetSequenceStepEnables>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80072fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007302:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007306:	e075      	b.n	80073f4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8007308:	7e3b      	ldrb	r3, [r7, #24]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d105      	bne.n	800731a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800730e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8007310:	2b00      	cmp	r3, #0
 8007312:	d102      	bne.n	800731a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8007314:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8007316:	2b00      	cmp	r3, #0
 8007318:	d030      	beq.n	800737c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800731a:	f107 0310 	add.w	r3, r7, #16
 800731e:	461a      	mov	r2, r3
 8007320:	2102      	movs	r1, #2
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff fa48 	bl	80067b8 <get_sequence_step_timeout>
 8007328:	4603      	mov	r3, r0
 800732a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800732e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007332:	2b00      	cmp	r3, #0
 8007334:	d122      	bne.n	800737c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8007336:	7e3b      	ldrb	r3, [r7, #24]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d007      	beq.n	800734c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007340:	6939      	ldr	r1, [r7, #16]
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007346:	441a      	add	r2, r3
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800734c:	7ebb      	ldrb	r3, [r7, #26]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d009      	beq.n	8007366 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8007356:	6939      	ldr	r1, [r7, #16]
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	440b      	add	r3, r1
 800735c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800735e:	441a      	add	r2, r3
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	e00a      	b.n	800737c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007366:	7e7b      	ldrb	r3, [r7, #25]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d007      	beq.n	800737c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007370:	6939      	ldr	r1, [r7, #16]
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007376:	441a      	add	r2, r3
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800737c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007380:	2b00      	cmp	r3, #0
 8007382:	d114      	bne.n	80073ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007384:	7efb      	ldrb	r3, [r7, #27]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d011      	beq.n	80073ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800738a:	f107 030c 	add.w	r3, r7, #12
 800738e:	461a      	mov	r2, r3
 8007390:	2103      	movs	r1, #3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff fa10 	bl	80067b8 <get_sequence_step_timeout>
 8007398:	4603      	mov	r3, r0
 800739a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80073a2:	68f9      	ldr	r1, [r7, #12]
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80073a8:	441a      	add	r2, r3
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80073ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d114      	bne.n	80073e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80073b6:	7f3b      	ldrb	r3, [r7, #28]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d011      	beq.n	80073e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80073bc:	f107 0314 	add.w	r3, r7, #20
 80073c0:	461a      	mov	r2, r3
 80073c2:	2104      	movs	r1, #4
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7ff f9f7 	bl	80067b8 <get_sequence_step_timeout>
 80073ca:	4603      	mov	r3, r0
 80073cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80073d4:	6979      	ldr	r1, [r7, #20]
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80073da:	441a      	add	r2, r3
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80073e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d103      	bne.n	80073f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80073f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3740      	adds	r7, #64	; 0x40
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b088      	sub	sp, #32
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007406:	2300      	movs	r3, #0
 8007408:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800740e:	e0c6      	b.n	800759e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	4413      	add	r3, r2
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	74fb      	strb	r3, [r7, #19]
		Index++;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	3301      	adds	r3, #1
 800741e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8007420:	7cfb      	ldrb	r3, [r7, #19]
 8007422:	2bff      	cmp	r3, #255	; 0xff
 8007424:	f040 808d 	bne.w	8007542 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	4413      	add	r3, r2
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	747b      	strb	r3, [r7, #17]
			Index++;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	3301      	adds	r3, #1
 8007436:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8007438:	7c7b      	ldrb	r3, [r7, #17]
 800743a:	2b03      	cmp	r3, #3
 800743c:	d87e      	bhi.n	800753c <VL53L0X_load_tuning_settings+0x140>
 800743e:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <VL53L0X_load_tuning_settings+0x48>)
 8007440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007444:	08007455 	.word	0x08007455
 8007448:	0800748f 	.word	0x0800748f
 800744c:	080074c9 	.word	0x080074c9
 8007450:	08007503 	.word	0x08007503
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	4413      	add	r3, r2
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	743b      	strb	r3, [r7, #16]
				Index++;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	3301      	adds	r3, #1
 8007462:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	4413      	add	r3, r2
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	3301      	adds	r3, #1
 8007472:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007474:	7c3b      	ldrb	r3, [r7, #16]
 8007476:	b29b      	uxth	r3, r3
 8007478:	021b      	lsls	r3, r3, #8
 800747a:	b29a      	uxth	r2, r3
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	b29b      	uxth	r3, r3
 8007480:	4413      	add	r3, r2
 8007482:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	89ba      	ldrh	r2, [r7, #12]
 8007488:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800748c:	e087      	b.n	800759e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	4413      	add	r3, r2
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	743b      	strb	r3, [r7, #16]
				Index++;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	3301      	adds	r3, #1
 800749c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	4413      	add	r3, r2
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	73fb      	strb	r3, [r7, #15]
				Index++;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	3301      	adds	r3, #1
 80074ac:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80074ae:	7c3b      	ldrb	r3, [r7, #16]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	4413      	add	r3, r2
 80074bc:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	89ba      	ldrh	r2, [r7, #12]
 80074c2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 80074c6:	e06a      	b.n	800759e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	4413      	add	r3, r2
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	743b      	strb	r3, [r7, #16]
				Index++;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	3301      	adds	r3, #1
 80074d6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	4413      	add	r3, r2
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	73fb      	strb	r3, [r7, #15]
				Index++;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	3301      	adds	r3, #1
 80074e6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80074e8:	7c3b      	ldrb	r3, [r7, #16]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	021b      	lsls	r3, r3, #8
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	4413      	add	r3, r2
 80074f6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	89ba      	ldrh	r2, [r7, #12]
 80074fc:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8007500:	e04d      	b.n	800759e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	4413      	add	r3, r2
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	743b      	strb	r3, [r7, #16]
				Index++;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	3301      	adds	r3, #1
 8007510:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	4413      	add	r3, r2
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	3301      	adds	r3, #1
 8007520:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007522:	7c3b      	ldrb	r3, [r7, #16]
 8007524:	b29b      	uxth	r3, r3
 8007526:	021b      	lsls	r3, r3, #8
 8007528:	b29a      	uxth	r2, r3
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	b29b      	uxth	r3, r3
 800752e:	4413      	add	r3, r2
 8007530:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	89ba      	ldrh	r2, [r7, #12]
 8007536:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800753a:	e030      	b.n	800759e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800753c:	23fc      	movs	r3, #252	; 0xfc
 800753e:	77fb      	strb	r3, [r7, #31]
 8007540:	e02d      	b.n	800759e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8007542:	7cfb      	ldrb	r3, [r7, #19]
 8007544:	2b04      	cmp	r3, #4
 8007546:	d828      	bhi.n	800759a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	4413      	add	r3, r2
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	74bb      	strb	r3, [r7, #18]
			Index++;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	3301      	adds	r3, #1
 8007556:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8007558:	2300      	movs	r3, #0
 800755a:	61bb      	str	r3, [r7, #24]
 800755c:	e00f      	b.n	800757e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	4413      	add	r3, r2
 8007564:	7819      	ldrb	r1, [r3, #0]
 8007566:	f107 0208 	add.w	r2, r7, #8
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	4413      	add	r3, r2
 800756e:	460a      	mov	r2, r1
 8007570:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	3301      	adds	r3, #1
 8007576:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	3301      	adds	r3, #1
 800757c:	61bb      	str	r3, [r7, #24]
 800757e:	7cfb      	ldrb	r3, [r7, #19]
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	429a      	cmp	r2, r3
 8007584:	dbeb      	blt.n	800755e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8007586:	7cfb      	ldrb	r3, [r7, #19]
 8007588:	f107 0208 	add.w	r2, r7, #8
 800758c:	7cb9      	ldrb	r1, [r7, #18]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fdf2 	bl	8008178 <VL53L0X_WriteMulti>
 8007594:	4603      	mov	r3, r0
 8007596:	77fb      	strb	r3, [r7, #31]
 8007598:	e001      	b.n	800759e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800759a:	23fc      	movs	r3, #252	; 0xfc
 800759c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	4413      	add	r3, r2
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d004      	beq.n	80075b4 <VL53L0X_load_tuning_settings+0x1b8>
 80075aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f43f af2e 	beq.w	8007410 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80075b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3720      	adds	r7, #32
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075cc:	2300      	movs	r3, #0
 80075ce:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80075d6:	f107 0313 	add.w	r3, r7, #19
 80075da:	4619      	mov	r1, r3
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f7fc fd2d 	bl	800403c <VL53L0X_GetXTalkCompensationEnable>
 80075e2:	4603      	mov	r3, r0
 80075e4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80075e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d111      	bne.n	8007612 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80075ee:	7cfb      	ldrb	r3, [r7, #19]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00e      	beq.n	8007612 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	8a9b      	ldrh	r3, [r3, #20]
 80075fe:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	fb02 f303 	mul.w	r3, r2, r3
 8007606:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	3380      	adds	r3, #128	; 0x80
 800760c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8007612:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3720      	adds	r7, #32
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b086      	sub	sp, #24
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800762a:	2300      	movs	r3, #0
 800762c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8007636:	f107 0310 	add.w	r3, r7, #16
 800763a:	461a      	mov	r2, r3
 800763c:	68b9      	ldr	r1, [r7, #8]
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f7ff ffbe 	bl	80075c0 <VL53L0X_get_total_xtalk_rate>
 8007644:	4603      	mov	r3, r0
 8007646:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007648:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d105      	bne.n	800765c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	441a      	add	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	601a      	str	r2, [r3, #0]

	return Status;
 800765c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b09a      	sub	sp, #104	; 0x68
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
 8007674:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8007676:	2312      	movs	r3, #18
 8007678:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800767a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800767e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007680:	2342      	movs	r3, #66	; 0x42
 8007682:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8007684:	2306      	movs	r3, #6
 8007686:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8007688:	2307      	movs	r3, #7
 800768a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800768c:	2300      	movs	r3, #0
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8007698:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80076a0:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80076a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076a6:	fb02 f303 	mul.w	r3, r2, r3
 80076aa:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80076ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ae:	3380      	adds	r3, #128	; 0x80
 80076b0:	0a1b      	lsrs	r3, r3, #8
 80076b2:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 80076b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076b8:	fb02 f303 	mul.w	r3, r2, r3
 80076bc:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d01a      	beq.n	80076fe <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	029b      	lsls	r3, r3, #10
 80076cc:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80076d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d4:	4413      	add	r3, r2
 80076d6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80076d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e0:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80076e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80076e4:	4613      	mov	r3, r2
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	4413      	add	r3, r2
 80076ea:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80076ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076ee:	fb03 f303 	mul.w	r3, r3, r3
 80076f2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80076f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80076fa:	0c1b      	lsrs	r3, r3, #16
 80076fc:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007702:	fb02 f303 	mul.w	r3, r2, r3
 8007706:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800770e:	0c1b      	lsrs	r3, r3, #16
 8007710:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8007712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007714:	fb03 f303 	mul.w	r3, r3, r3
 8007718:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800771a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800771c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007720:	0c1b      	lsrs	r3, r3, #16
 8007722:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8007724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007726:	085a      	lsrs	r2, r3, #1
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	441a      	add	r2, r3
 800772c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800772e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007732:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007738:	fb02 f303 	mul.w	r3, r2, r3
 800773c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007744:	d302      	bcc.n	800774c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8007746:	4b54      	ldr	r3, [pc, #336]	; (8007898 <VL53L0X_calc_dmax+0x230>)
 8007748:	663b      	str	r3, [r7, #96]	; 0x60
 800774a:	e015      	b.n	8007778 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800774c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800774e:	085a      	lsrs	r2, r3, #1
 8007750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007752:	441a      	add	r2, r3
 8007754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007756:	fbb2 f3f3 	udiv	r3, r2, r3
 800775a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800775c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800775e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007760:	fb02 f303 	mul.w	r3, r2, r3
 8007764:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8007766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007768:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800776c:	0c1b      	lsrs	r3, r3, #16
 800776e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007772:	fb03 f303 	mul.w	r3, r3, r3
 8007776:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8007778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800777a:	039b      	lsls	r3, r3, #14
 800777c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007780:	4a46      	ldr	r2, [pc, #280]	; (800789c <VL53L0X_calc_dmax+0x234>)
 8007782:	fba2 2303 	umull	r2, r3, r2, r3
 8007786:	099b      	lsrs	r3, r3, #6
 8007788:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	fb03 f303 	mul.w	r3, r3, r3
 8007790:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8007792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007794:	fb03 f303 	mul.w	r3, r3, r3
 8007798:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	3308      	adds	r3, #8
 800779e:	091b      	lsrs	r3, r3, #4
 80077a0:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80077a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80077aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ac:	4613      	mov	r3, r2
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	4413      	add	r3, r2
 80077b2:	011b      	lsls	r3, r3, #4
 80077b4:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80077bc:	0b9b      	lsrs	r3, r3, #14
 80077be:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 80077c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077c4:	4413      	add	r3, r2
 80077c6:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80077c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ca:	085b      	lsrs	r3, r3, #1
 80077cc:	69ba      	ldr	r2, [r7, #24]
 80077ce:	4413      	add	r3, r2
 80077d0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077da:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	039b      	lsls	r3, r3, #14
 80077e0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	085b      	lsrs	r3, r3, #1
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	4413      	add	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80077fa:	fb02 f303 	mul.w	r3, r2, r3
 80077fe:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007806:	4a25      	ldr	r2, [pc, #148]	; (800789c <VL53L0X_calc_dmax+0x234>)
 8007808:	fba2 2303 	umull	r2, r3, r2, r3
 800780c:	099b      	lsrs	r3, r3, #6
 800780e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800781c:	4a1f      	ldr	r2, [pc, #124]	; (800789c <VL53L0X_calc_dmax+0x234>)
 800781e:	fba2 2303 	umull	r2, r3, r2, r3
 8007822:	099b      	lsrs	r3, r3, #6
 8007824:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8007826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007828:	3380      	adds	r3, #128	; 0x80
 800782a:	0a1b      	lsrs	r3, r3, #8
 800782c:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d008      	beq.n	8007846 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	085a      	lsrs	r2, r3, #1
 8007838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783a:	441a      	add	r2, r3
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007842:	65bb      	str	r3, [r7, #88]	; 0x58
 8007844:	e001      	b.n	800784a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8007846:	2300      	movs	r3, #0
 8007848:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800784a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800784c:	f7fe f9bf 	bl	8005bce <VL53L0X_isqrt>
 8007850:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d008      	beq.n	800786a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	085a      	lsrs	r2, r3, #1
 800785c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785e:	441a      	add	r2, r3
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	fbb2 f3f3 	udiv	r3, r2, r3
 8007866:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007868:	e001      	b.n	800786e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800786e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007870:	f7fe f9ad 	bl	8005bce <VL53L0X_isqrt>
 8007874:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8007876:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007880:	429a      	cmp	r2, r3
 8007882:	d902      	bls.n	800788a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8007884:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007886:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007888:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800788a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800788e:	4618      	mov	r0, r3
 8007890:	3768      	adds	r7, #104	; 0x68
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	fff00000 	.word	0xfff00000
 800789c:	10624dd3 	.word	0x10624dd3

080078a0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b0b4      	sub	sp, #208	; 0xd0
 80078a4:	af04      	add	r7, sp, #16
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80078ae:	f44f 7348 	mov.w	r3, #800	; 0x320
 80078b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80078b6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80078ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 80078be:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 80078c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80078c6:	f241 235c 	movw	r3, #4700	; 0x125c
 80078ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80078ce:	4b9e      	ldr	r3, [pc, #632]	; (8007b48 <VL53L0X_calc_sigma_estimate+0x2a8>)
 80078d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80078d4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80078d8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80078da:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80078de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80078e8:	4b98      	ldr	r3, [pc, #608]	; (8007b4c <VL53L0X_calc_sigma_estimate+0x2ac>)
 80078ea:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80078ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078f0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80078f2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80078f6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80078f8:	f240 6377 	movw	r3, #1655	; 0x677
 80078fc:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078fe:	2300      	movs	r3, #0
 8007900:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007912:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8007916:	0c1b      	lsrs	r3, r3, #16
 8007918:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007920:	f107 0310 	add.w	r3, r7, #16
 8007924:	461a      	mov	r2, r3
 8007926:	68b9      	ldr	r1, [r7, #8]
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f7ff fe78 	bl	800761e <VL53L0X_get_total_signal_rate>
 800792e:	4603      	mov	r3, r0
 8007930:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007934:	f107 0314 	add.w	r3, r7, #20
 8007938:	461a      	mov	r2, r3
 800793a:	68b9      	ldr	r1, [r7, #8]
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff fe3f 	bl	80075c0 <VL53L0X_get_total_xtalk_rate>
 8007942:	4603      	mov	r3, r0
 8007944:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800794e:	fb02 f303 	mul.w	r3, r2, r3
 8007952:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007956:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800795a:	0c1b      	lsrs	r3, r3, #16
 800795c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007964:	fb02 f303 	mul.w	r3, r2, r3
 8007968:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800796c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007972:	429a      	cmp	r2, r3
 8007974:	d902      	bls.n	800797c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007978:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800797c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007980:	2b00      	cmp	r3, #0
 8007982:	d168      	bne.n	8007a56 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800798a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007994:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007998:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800799c:	461a      	mov	r2, r3
 800799e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f7fe feb4 	bl	8006710 <VL53L0X_calc_timeout_mclks>
 80079a8:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80079b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80079ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80079be:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80079c2:	461a      	mov	r2, r3
 80079c4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f7fe fea1 	bl	8006710 <VL53L0X_calc_timeout_mclks>
 80079ce:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80079d0:	2303      	movs	r3, #3
 80079d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80079d6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80079da:	2b08      	cmp	r3, #8
 80079dc:	d102      	bne.n	80079e4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 80079de:	2302      	movs	r3, #2
 80079e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80079e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079e8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80079ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80079ee:	fb02 f303 	mul.w	r3, r2, r3
 80079f2:	02db      	lsls	r3, r3, #11
 80079f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80079f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079fc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007a00:	4a53      	ldr	r2, [pc, #332]	; (8007b50 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007a02:	fba2 2303 	umull	r2, r3, r2, r3
 8007a06:	099b      	lsrs	r3, r3, #6
 8007a08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8007a0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a12:	fb02 f303 	mul.w	r3, r2, r3
 8007a16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007a1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a1e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007a22:	4a4b      	ldr	r2, [pc, #300]	; (8007b50 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007a24:	fba2 2303 	umull	r2, r3, r2, r3
 8007a28:	099b      	lsrs	r3, r3, #6
 8007a2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	3380      	adds	r3, #128	; 0x80
 8007a32:	0a1b      	lsrs	r3, r3, #8
 8007a34:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a3c:	fb02 f303 	mul.w	r3, r2, r3
 8007a40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007a44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a48:	3380      	adds	r3, #128	; 0x80
 8007a4a:	0a1b      	lsrs	r3, r3, #8
 8007a4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	021b      	lsls	r3, r3, #8
 8007a54:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007a56:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d002      	beq.n	8007a64 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8007a5e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007a62:	e15e      	b.n	8007d22 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8007a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10c      	bne.n	8007a84 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a70:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a78:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	e14c      	b.n	8007d1e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8007a84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d102      	bne.n	8007a92 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007a92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a96:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a9a:	041a      	lsls	r2, r3, #16
 8007a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007aa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d902      	bls.n	8007ab6 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007ab6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007aba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007abe:	fb02 f303 	mul.w	r3, r2, r3
 8007ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007ac6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007aca:	4613      	mov	r3, r2
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fe f87b 	bl	8005bce <VL53L0X_isqrt>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	891b      	ldrh	r3, [r3, #8]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ae6:	fb02 f303 	mul.w	r3, r2, r3
 8007aea:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aee:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007af0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007af4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007af6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007af8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007afc:	4a14      	ldr	r2, [pc, #80]	; (8007b50 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007afe:	fba2 2303 	umull	r2, r3, r2, r3
 8007b02:	099b      	lsrs	r3, r3, #6
 8007b04:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8007b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b08:	041b      	lsls	r3, r3, #16
 8007b0a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007b0e:	4a10      	ldr	r2, [pc, #64]	; (8007b50 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007b10:	fba2 2303 	umull	r2, r3, r2, r3
 8007b14:	099b      	lsrs	r3, r3, #6
 8007b16:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8007b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007b1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	bfb8      	it	lt
 8007b2a:	425b      	neglt	r3, r3
 8007b2c:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b30:	021b      	lsls	r3, r3, #8
 8007b32:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	7e1b      	ldrb	r3, [r3, #24]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00b      	beq.n	8007b54 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8007b3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b44:	e033      	b.n	8007bae <VL53L0X_calc_sigma_estimate+0x30e>
 8007b46:	bf00      	nop
 8007b48:	028f87ae 	.word	0x028f87ae
 8007b4c:	0006999a 	.word	0x0006999a
 8007b50:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8007b54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8007b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b64:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8007b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b6c:	fb02 f303 	mul.w	r3, r2, r3
 8007b70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007b74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b7a:	4413      	add	r3, r2
 8007b7c:	0c1b      	lsrs	r3, r3, #16
 8007b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8007b82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b86:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8007b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b92:	085b      	lsrs	r3, r3, #1
 8007b94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8007b98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b9c:	fb03 f303 	mul.w	r3, r3, r3
 8007ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8007ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ba8:	0b9b      	lsrs	r3, r3, #14
 8007baa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8007bae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bb4:	fb02 f303 	mul.w	r3, r2, r3
 8007bb8:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007bc0:	0c1b      	lsrs	r3, r3, #16
 8007bc2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc6:	fb03 f303 	mul.w	r3, r3, r3
 8007bca:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8007bcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007bd8:	0c1b      	lsrs	r3, r3, #16
 8007bda:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8007bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bde:	fb03 f303 	mul.w	r3, r3, r3
 8007be2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8007be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	4413      	add	r3, r2
 8007bea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bee:	f7fd ffee 	bl	8005bce <VL53L0X_isqrt>
 8007bf2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	041b      	lsls	r3, r3, #16
 8007bf8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfc:	3332      	adds	r3, #50	; 0x32
 8007bfe:	4a4b      	ldr	r2, [pc, #300]	; (8007d2c <VL53L0X_calc_sigma_estimate+0x48c>)
 8007c00:	fba2 2303 	umull	r2, r3, r2, r3
 8007c04:	095a      	lsrs	r2, r3, #5
 8007c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007c10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c14:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8007c18:	fb02 f303 	mul.w	r3, r2, r3
 8007c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8007c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c24:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8007c28:	3308      	adds	r3, #8
 8007c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8007c2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c32:	4a3f      	ldr	r2, [pc, #252]	; (8007d30 <VL53L0X_calc_sigma_estimate+0x490>)
 8007c34:	fba2 2303 	umull	r2, r3, r2, r3
 8007c38:	0b5b      	lsrs	r3, r3, #13
 8007c3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8007c3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d902      	bls.n	8007c4e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8007c48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8007c4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8007c5c:	4a35      	ldr	r2, [pc, #212]	; (8007d34 <VL53L0X_calc_sigma_estimate+0x494>)
 8007c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c62:	099b      	lsrs	r3, r3, #6
 8007c64:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8007c6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c6e:	441a      	add	r2, r3
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fd ffa9 	bl	8005bce <VL53L0X_isqrt>
 8007c7c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	021b      	lsls	r3, r3, #8
 8007c82:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007c8a:	4a2a      	ldr	r2, [pc, #168]	; (8007d34 <VL53L0X_calc_sigma_estimate+0x494>)
 8007c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c90:	099b      	lsrs	r3, r3, #6
 8007c92:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007c94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c98:	fb03 f303 	mul.w	r3, r3, r3
 8007c9c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	fb03 f303 	mul.w	r3, r3, r3
 8007ca4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	4413      	add	r3, r2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fd ff8e 	bl	8005bce <VL53L0X_isqrt>
 8007cb2:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cba:	fb02 f303 	mul.w	r3, r2, r3
 8007cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8007cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d009      	beq.n	8007cdc <VL53L0X_calc_sigma_estimate+0x43c>
 8007cc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d005      	beq.n	8007cdc <VL53L0X_calc_sigma_estimate+0x43c>
 8007cd0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007cd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d903      	bls.n	8007ce4 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8007cdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007cea:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8007cf6:	6939      	ldr	r1, [r7, #16]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	9303      	str	r3, [sp, #12]
 8007cfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d00:	9302      	str	r3, [sp, #8]
 8007d02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007d06:	9301      	str	r3, [sp, #4]
 8007d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f7ff fca8 	bl	8007668 <VL53L0X_calc_dmax>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d1e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	37c0      	adds	r7, #192	; 0xc0
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	51eb851f 	.word	0x51eb851f
 8007d30:	d1b71759 	.word	0xd1b71759
 8007d34:	10624dd3 	.word	0x10624dd3

08007d38 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b090      	sub	sp, #64	; 0x40
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	607a      	str	r2, [r7, #4]
 8007d42:	461a      	mov	r2, r3
 8007d44:	460b      	mov	r3, r1
 8007d46:	72fb      	strb	r3, [r7, #11]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8007d82:	2300      	movs	r3, #0
 8007d84:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007d8a:	7afb      	ldrb	r3, [r7, #11]
 8007d8c:	10db      	asrs	r3, r3, #3
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f003 030f 	and.w	r3, r3, #15
 8007d94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007d98:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d017      	beq.n	8007dd0 <VL53L0X_get_pal_range_status+0x98>
 8007da0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007da4:	2b05      	cmp	r3, #5
 8007da6:	d013      	beq.n	8007dd0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8007da8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007dac:	2b07      	cmp	r3, #7
 8007dae:	d00f      	beq.n	8007dd0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007db0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007db4:	2b0c      	cmp	r3, #12
 8007db6:	d00b      	beq.n	8007dd0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8007db8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007dbc:	2b0d      	cmp	r3, #13
 8007dbe:	d007      	beq.n	8007dd0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007dc0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007dc4:	2b0e      	cmp	r3, #14
 8007dc6:	d003      	beq.n	8007dd0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8007dc8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007dcc:	2b0f      	cmp	r3, #15
 8007dce:	d103      	bne.n	8007dd8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007dd6:	e002      	b.n	8007dde <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007dde:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d109      	bne.n	8007dfa <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007de6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8007dea:	461a      	mov	r2, r3
 8007dec:	2100      	movs	r1, #0
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f7fc f9f8 	bl	80041e4 <VL53L0X_GetLimitCheckEnable>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007dfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d02e      	beq.n	8007e60 <VL53L0X_get_pal_range_status+0x128>
 8007e02:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d12a      	bne.n	8007e60 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007e0a:	f107 0310 	add.w	r3, r7, #16
 8007e0e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007e12:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f7ff fd43 	bl	80078a0 <VL53L0X_calc_sigma_estimate>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007e20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d103      	bne.n	8007e30 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e2e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8007e30:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d113      	bne.n	8007e60 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8007e38:	f107 0320 	add.w	r3, r7, #32
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	2100      	movs	r1, #0
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f7fc fa53 	bl	80042ec <VL53L0X_GetLimitCheckValue>
 8007e46:	4603      	mov	r3, r0
 8007e48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d006      	beq.n	8007e60 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8007e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e54:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d902      	bls.n	8007e60 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007e60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d109      	bne.n	8007e7c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007e68:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	2102      	movs	r1, #2
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f7fc f9b7 	bl	80041e4 <VL53L0X_GetLimitCheckEnable>
 8007e76:	4603      	mov	r3, r0
 8007e78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007e7c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d044      	beq.n	8007f0e <VL53L0X_get_pal_range_status+0x1d6>
 8007e84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d140      	bne.n	8007f0e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007e8c:	f107 031c 	add.w	r3, r7, #28
 8007e90:	461a      	mov	r2, r3
 8007e92:	2102      	movs	r1, #2
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f7fc fa29 	bl	80042ec <VL53L0X_GetLimitCheckValue>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8007ea0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d107      	bne.n	8007eb8 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	21ff      	movs	r1, #255	; 0xff
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f9bf 	bl	8008230 <VL53L0X_WrByte>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8007eb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d109      	bne.n	8007ed4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8007ec0:	f107 0316 	add.w	r3, r7, #22
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	21b6      	movs	r1, #182	; 0xb6
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 fa5d 	bl	8008388 <VL53L0X_RdWord>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8007ed4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d107      	bne.n	8007eec <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007edc:	2200      	movs	r2, #0
 8007ede:	21ff      	movs	r1, #255	; 0xff
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 f9a5 	bl	8008230 <VL53L0X_WrByte>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007eec:	8afb      	ldrh	r3, [r7, #22]
 8007eee:	025b      	lsls	r3, r3, #9
 8007ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ef6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d006      	beq.n	8007f0e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007f00:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8007f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d902      	bls.n	8007f0e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007f0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d109      	bne.n	8007f2a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007f16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	2103      	movs	r1, #3
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f7fc f960 	bl	80041e4 <VL53L0X_GetLimitCheckEnable>
 8007f24:	4603      	mov	r3, r0
 8007f26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007f2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d023      	beq.n	8007f7a <VL53L0X_get_pal_range_status+0x242>
 8007f32:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d11f      	bne.n	8007f7a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8007f3a:	893b      	ldrh	r3, [r7, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d102      	bne.n	8007f46 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8007f40:	2300      	movs	r3, #0
 8007f42:	637b      	str	r3, [r7, #52]	; 0x34
 8007f44:	e005      	b.n	8007f52 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	021a      	lsls	r2, r3, #8
 8007f4a:	893b      	ldrh	r3, [r7, #8]
 8007f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f50:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007f52:	f107 0318 	add.w	r3, r7, #24
 8007f56:	461a      	mov	r2, r3
 8007f58:	2103      	movs	r1, #3
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f7fc f9c6 	bl	80042ec <VL53L0X_GetLimitCheckValue>
 8007f60:	4603      	mov	r3, r0
 8007f62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d006      	beq.n	8007f7a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8007f6c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8007f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d202      	bcs.n	8007f7a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8007f74:	2301      	movs	r3, #1
 8007f76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007f7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d14a      	bne.n	8008018 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8007f82:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d103      	bne.n	8007f92 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8007f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f8c:	22ff      	movs	r2, #255	; 0xff
 8007f8e:	701a      	strb	r2, [r3, #0]
 8007f90:	e042      	b.n	8008018 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007f92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d007      	beq.n	8007faa <VL53L0X_get_pal_range_status+0x272>
 8007f9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d003      	beq.n	8007faa <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8007fa2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d103      	bne.n	8007fb2 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8007faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fac:	2205      	movs	r2, #5
 8007fae:	701a      	strb	r2, [r3, #0]
 8007fb0:	e032      	b.n	8008018 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007fb2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007fb6:	2b06      	cmp	r3, #6
 8007fb8:	d003      	beq.n	8007fc2 <VL53L0X_get_pal_range_status+0x28a>
 8007fba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007fbe:	2b09      	cmp	r3, #9
 8007fc0:	d103      	bne.n	8007fca <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8007fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc4:	2204      	movs	r2, #4
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	e026      	b.n	8008018 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007fca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007fce:	2b08      	cmp	r3, #8
 8007fd0:	d007      	beq.n	8007fe2 <VL53L0X_get_pal_range_status+0x2aa>
 8007fd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007fd6:	2b0a      	cmp	r3, #10
 8007fd8:	d003      	beq.n	8007fe2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8007fda:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d103      	bne.n	8007fea <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8007fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe4:	2203      	movs	r2, #3
 8007fe6:	701a      	strb	r2, [r3, #0]
 8007fe8:	e016      	b.n	8008018 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007fea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d003      	beq.n	8007ffa <VL53L0X_get_pal_range_status+0x2c2>
 8007ff2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d103      	bne.n	8008002 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	701a      	strb	r2, [r3, #0]
 8008000:	e00a      	b.n	8008018 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8008002:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008006:	2b01      	cmp	r3, #1
 8008008:	d103      	bne.n	8008012 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800800a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800800c:	2201      	movs	r2, #1
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	e002      	b.n	8008018 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8008012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008014:	2200      	movs	r2, #0
 8008016:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8008018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d102      	bne.n	8008026 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8008020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008022:	2200      	movs	r2, #0
 8008024:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008026:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800802a:	461a      	mov	r2, r3
 800802c:	2101      	movs	r1, #1
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f7fc f8d8 	bl	80041e4 <VL53L0X_GetLimitCheckEnable>
 8008034:	4603      	mov	r3, r0
 8008036:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800803a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800803e:	2b00      	cmp	r3, #0
 8008040:	d14f      	bne.n	80080e2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8008042:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <VL53L0X_get_pal_range_status+0x31a>
 800804a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800804e:	2b01      	cmp	r3, #1
 8008050:	d103      	bne.n	800805a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8008052:	2301      	movs	r3, #1
 8008054:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008058:	e002      	b.n	8008060 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008066:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800806a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800806e:	2b04      	cmp	r3, #4
 8008070:	d003      	beq.n	800807a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008072:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8008076:	2b00      	cmp	r3, #0
 8008078:	d103      	bne.n	8008082 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800807a:	2301      	movs	r3, #1
 800807c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008080:	e002      	b.n	8008088 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800808e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8008092:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <VL53L0X_get_pal_range_status+0x36a>
 800809a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d103      	bne.n	80080aa <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 80080a2:	2301      	movs	r3, #1
 80080a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080a8:	e002      	b.n	80080b0 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 80080aa:	2300      	movs	r3, #0
 80080ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80080b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80080ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <VL53L0X_get_pal_range_status+0x392>
 80080c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d103      	bne.n	80080d2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080d0:	e002      	b.n	80080d8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80080de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80080e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3740      	adds	r7, #64	; 0x40
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b088      	sub	sp, #32
 80080f2:	af02      	add	r7, sp, #8
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	60b9      	str	r1, [r7, #8]
 80080f8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	330a      	adds	r3, #10
 80080fe:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr << 1, pdata, count, i2c_time_out);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800810c:	b29b      	uxth	r3, r3
 800810e:	005b      	lsls	r3, r3, #1
 8008110:	b299      	uxth	r1, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	b29a      	uxth	r2, r3
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	4613      	mov	r3, r2
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	f7f9 fdcd 	bl	8001cbc <HAL_I2C_Master_Transmit>
 8008122:	4603      	mov	r3, r0
 8008124:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008126:	693b      	ldr	r3, [r7, #16]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008130:	b580      	push	{r7, lr}
 8008132:	b088      	sub	sp, #32
 8008134:	af02      	add	r7, sp, #8
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	330a      	adds	r3, #10
 8008140:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr<<1|1, pdata, count, i2c_time_out);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	b21b      	sxth	r3, r3
 8008152:	f043 0301 	orr.w	r3, r3, #1
 8008156:	b21b      	sxth	r3, r3
 8008158:	b299      	uxth	r1, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	b29a      	uxth	r2, r3
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	4613      	mov	r3, r2
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	f7f9 fea7 	bl	8001eb8 <HAL_I2C_Master_Receive>
 800816a:	4603      	mov	r3, r0
 800816c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800816e:	693b      	ldr	r3, [r7, #16]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	607a      	str	r2, [r7, #4]
 8008182:	603b      	str	r3, [r7, #0]
 8008184:	460b      	mov	r3, r1
 8008186:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008188:	2300      	movs	r3, #0
 800818a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2b3f      	cmp	r3, #63	; 0x3f
 8008190:	d902      	bls.n	8008198 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8008192:	f06f 0303 	mvn.w	r3, #3
 8008196:	e016      	b.n	80081c6 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8008198:	4a0d      	ldr	r2, [pc, #52]	; (80081d0 <VL53L0X_WriteMulti+0x58>)
 800819a:	7afb      	ldrb	r3, [r7, #11]
 800819c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	480c      	ldr	r0, [pc, #48]	; (80081d4 <VL53L0X_WriteMulti+0x5c>)
 80081a4:	f000 fb04 	bl	80087b0 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	3301      	adds	r3, #1
 80081ac:	461a      	mov	r2, r3
 80081ae:	4908      	ldr	r1, [pc, #32]	; (80081d0 <VL53L0X_WriteMulti+0x58>)
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f7ff ff9c 	bl	80080ee <_I2CWrite>
 80081b6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80081be:	23ec      	movs	r3, #236	; 0xec
 80081c0:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80081c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20000788 	.word	0x20000788
 80081d4:	20000789 	.word	0x20000789

080081d8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	607a      	str	r2, [r7, #4]
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	460b      	mov	r3, r1
 80081e6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081e8:	2300      	movs	r3, #0
 80081ea:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80081ec:	f107 030b 	add.w	r3, r7, #11
 80081f0:	2201      	movs	r2, #1
 80081f2:	4619      	mov	r1, r3
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f7ff ff7a 	bl	80080ee <_I2CWrite>
 80081fa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d002      	beq.n	8008208 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008202:	23ec      	movs	r3, #236	; 0xec
 8008204:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008206:	e00c      	b.n	8008222 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7ff ff8f 	bl	8008130 <_I2CRead>
 8008212:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d002      	beq.n	8008220 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800821a:	23ec      	movs	r3, #236	; 0xec
 800821c:	75fb      	strb	r3, [r7, #23]
 800821e:	e000      	b.n	8008222 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8008220:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008222:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
	...

08008230 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	460b      	mov	r3, r1
 800823a:	70fb      	strb	r3, [r7, #3]
 800823c:	4613      	mov	r3, r2
 800823e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008244:	4a0b      	ldr	r2, [pc, #44]	; (8008274 <VL53L0X_WrByte+0x44>)
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800824a:	4a0a      	ldr	r2, [pc, #40]	; (8008274 <VL53L0X_WrByte+0x44>)
 800824c:	78bb      	ldrb	r3, [r7, #2]
 800824e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008250:	2202      	movs	r2, #2
 8008252:	4908      	ldr	r1, [pc, #32]	; (8008274 <VL53L0X_WrByte+0x44>)
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7ff ff4a 	bl	80080ee <_I2CWrite>
 800825a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008262:	23ec      	movs	r3, #236	; 0xec
 8008264:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008266:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20000788 	.word	0x20000788

08008278 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	70fb      	strb	r3, [r7, #3]
 8008284:	4613      	mov	r3, r2
 8008286:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008288:	2300      	movs	r3, #0
 800828a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800828c:	4a0e      	ldr	r2, [pc, #56]	; (80082c8 <VL53L0X_WrWord+0x50>)
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8008292:	883b      	ldrh	r3, [r7, #0]
 8008294:	0a1b      	lsrs	r3, r3, #8
 8008296:	b29b      	uxth	r3, r3
 8008298:	b2da      	uxtb	r2, r3
 800829a:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <VL53L0X_WrWord+0x50>)
 800829c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800829e:	883b      	ldrh	r3, [r7, #0]
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	4b09      	ldr	r3, [pc, #36]	; (80082c8 <VL53L0X_WrWord+0x50>)
 80082a4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80082a6:	2203      	movs	r2, #3
 80082a8:	4907      	ldr	r1, [pc, #28]	; (80082c8 <VL53L0X_WrWord+0x50>)
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff ff1f 	bl	80080ee <_I2CWrite>
 80082b0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80082b8:	23ec      	movs	r3, #236	; 0xec
 80082ba:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80082bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	20000788 	.word	0x20000788

080082cc <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	4608      	mov	r0, r1
 80082d6:	4611      	mov	r1, r2
 80082d8:	461a      	mov	r2, r3
 80082da:	4603      	mov	r3, r0
 80082dc:	70fb      	strb	r3, [r7, #3]
 80082de:	460b      	mov	r3, r1
 80082e0:	70bb      	strb	r3, [r7, #2]
 80082e2:	4613      	mov	r3, r2
 80082e4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082e6:	2300      	movs	r3, #0
 80082e8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80082ea:	f107 020e 	add.w	r2, r7, #14
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f81e 	bl	8008334 <VL53L0X_RdByte>
 80082f8:	4603      	mov	r3, r0
 80082fa:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80082fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d110      	bne.n	8008326 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8008304:	7bba      	ldrb	r2, [r7, #14]
 8008306:	78bb      	ldrb	r3, [r7, #2]
 8008308:	4013      	ands	r3, r2
 800830a:	b2da      	uxtb	r2, r3
 800830c:	787b      	ldrb	r3, [r7, #1]
 800830e:	4313      	orrs	r3, r2
 8008310:	b2db      	uxtb	r3, r3
 8008312:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8008314:	7bba      	ldrb	r2, [r7, #14]
 8008316:	78fb      	ldrb	r3, [r7, #3]
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7ff ff88 	bl	8008230 <VL53L0X_WrByte>
 8008320:	4603      	mov	r3, r0
 8008322:	73fb      	strb	r3, [r7, #15]
 8008324:	e000      	b.n	8008328 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8008326:	bf00      	nop
done:
    return Status;
 8008328:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	460b      	mov	r3, r1
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008342:	2300      	movs	r3, #0
 8008344:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008346:	f107 030b 	add.w	r3, r7, #11
 800834a:	2201      	movs	r2, #1
 800834c:	4619      	mov	r1, r3
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f7ff fecd 	bl	80080ee <_I2CWrite>
 8008354:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800835c:	23ec      	movs	r3, #236	; 0xec
 800835e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008360:	e00c      	b.n	800837c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008362:	2201      	movs	r2, #1
 8008364:	6879      	ldr	r1, [r7, #4]
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7ff fee2 	bl	8008130 <_I2CRead>
 800836c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008374:	23ec      	movs	r3, #236	; 0xec
 8008376:	75fb      	strb	r3, [r7, #23]
 8008378:	e000      	b.n	800837c <VL53L0X_RdByte+0x48>
    }
done:
 800837a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800837c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008380:	4618      	mov	r0, r3
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	460b      	mov	r3, r1
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008396:	2300      	movs	r3, #0
 8008398:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800839a:	f107 030b 	add.w	r3, r7, #11
 800839e:	2201      	movs	r2, #1
 80083a0:	4619      	mov	r1, r3
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f7ff fea3 	bl	80080ee <_I2CWrite>
 80083a8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d002      	beq.n	80083b6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80083b0:	23ec      	movs	r3, #236	; 0xec
 80083b2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80083b4:	e017      	b.n	80083e6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80083b6:	2202      	movs	r2, #2
 80083b8:	490e      	ldr	r1, [pc, #56]	; (80083f4 <VL53L0X_RdWord+0x6c>)
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f7ff feb8 	bl	8008130 <_I2CRead>
 80083c0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80083c8:	23ec      	movs	r3, #236	; 0xec
 80083ca:	75fb      	strb	r3, [r7, #23]
        goto done;
 80083cc:	e00b      	b.n	80083e6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80083ce:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <VL53L0X_RdWord+0x6c>)
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	021b      	lsls	r3, r3, #8
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	4b06      	ldr	r3, [pc, #24]	; (80083f4 <VL53L0X_RdWord+0x6c>)
 80083da:	785b      	ldrb	r3, [r3, #1]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	4413      	add	r3, r2
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80083e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20000788 	.word	0x20000788

080083f8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	460b      	mov	r3, r1
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008406:	2300      	movs	r3, #0
 8008408:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800840a:	f107 030b 	add.w	r3, r7, #11
 800840e:	2201      	movs	r2, #1
 8008410:	4619      	mov	r1, r3
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f7ff fe6b 	bl	80080ee <_I2CWrite>
 8008418:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008420:	23ec      	movs	r3, #236	; 0xec
 8008422:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008424:	e01b      	b.n	800845e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8008426:	2204      	movs	r2, #4
 8008428:	4910      	ldr	r1, [pc, #64]	; (800846c <VL53L0X_RdDWord+0x74>)
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7ff fe80 	bl	8008130 <_I2CRead>
 8008430:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008438:	23ec      	movs	r3, #236	; 0xec
 800843a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800843c:	e00f      	b.n	800845e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800843e:	4b0b      	ldr	r3, [pc, #44]	; (800846c <VL53L0X_RdDWord+0x74>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	061a      	lsls	r2, r3, #24
 8008444:	4b09      	ldr	r3, [pc, #36]	; (800846c <VL53L0X_RdDWord+0x74>)
 8008446:	785b      	ldrb	r3, [r3, #1]
 8008448:	041b      	lsls	r3, r3, #16
 800844a:	441a      	add	r2, r3
 800844c:	4b07      	ldr	r3, [pc, #28]	; (800846c <VL53L0X_RdDWord+0x74>)
 800844e:	789b      	ldrb	r3, [r3, #2]
 8008450:	021b      	lsls	r3, r3, #8
 8008452:	4413      	add	r3, r2
 8008454:	4a05      	ldr	r2, [pc, #20]	; (800846c <VL53L0X_RdDWord+0x74>)
 8008456:	78d2      	ldrb	r2, [r2, #3]
 8008458:	441a      	add	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800845e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20000788 	.word	0x20000788

08008470 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800847c:	2002      	movs	r0, #2
 800847e:	f7f8 fae3 	bl	8000a48 <HAL_Delay>
    return status;
 8008482:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <Vl53l0x_Init>:

#include "VL53_Handler.h"
//#include "cmsis_os.h"

VL53L0X_Error Vl53l0x_Init(Vl53l0x_HandlerStruct *Dev_t, I2C_HandleTypeDef *i2c,
		uint8_t Adress, GPIO_HandlerStruct xShutPin) {
 800848e:	b082      	sub	sp, #8
 8008490:	b580      	push	{r7, lr}
 8008492:	b088      	sub	sp, #32
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800849c:	4613      	mov	r3, r2
 800849e:	71fb      	strb	r3, [r7, #7]
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;

	Dev_t->XshutPin = xShutPin;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	461a      	mov	r2, r3
 80084a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80084ac:	e882 0003 	stmia.w	r2, {r0, r1}
	Dev_t->Address = Adress;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	79fa      	ldrb	r2, [r7, #7]
 80084b4:	721a      	strb	r2, [r3, #8]
	Dev_t->Dev.I2cHandle = i2c;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	Dev_t->Dev.I2cDevAddr = VL53L0X_DEFAULT_ADDRESS;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2229      	movs	r2, #41	; 0x29
 80084c2:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188

	GPIO_WritePin(Dev_t->XshutPin, GPIO_PIN_RESET); // Disable XSHUT
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80084ce:	f7fa ffd3 	bl	8003478 <GPIO_WritePin>
	HAL_Delay(100);
 80084d2:	2064      	movs	r0, #100	; 0x64
 80084d4:	f7f8 fab8 	bl	8000a48 <HAL_Delay>
	GPIO_WritePin(Dev_t->XshutPin, GPIO_PIN_SET); // Enable XSHUT
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2201      	movs	r2, #1
 80084dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80084e0:	f7fa ffca 	bl	8003478 <GPIO_WritePin>
	HAL_Delay(1000);
 80084e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084e8:	f7f8 faae 	bl	8000a48 <HAL_Delay>

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084ec:	2300      	movs	r3, #0
 80084ee:	77fb      	strb	r3, [r7, #31]

	Status = VL53L0X_DataInit(&Dev_t->Dev);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3328      	adds	r3, #40	; 0x28
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fa fffb 	bl	80034f0 <VL53L0X_DataInit>
 80084fa:	4603      	mov	r3, r0
 80084fc:	77fb      	strb	r3, [r7, #31]
	if (Status != VL53L0X_ERROR_NONE)
 80084fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <Vl53l0x_Init+0x7e>
		return Status;
 8008506:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800850a:	e0d2      	b.n	80086b2 <Vl53l0x_Init+0x224>
	Status = VL53L0X_StaticInit(&Dev_t->Dev);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3328      	adds	r3, #40	; 0x28
 8008510:	4618      	mov	r0, r3
 8008512:	f7fb f951 	bl	80037b8 <VL53L0X_StaticInit>
 8008516:	4603      	mov	r3, r0
 8008518:	77fb      	strb	r3, [r7, #31]
	if (Status != VL53L0X_ERROR_NONE)
 800851a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d002      	beq.n	8008528 <Vl53l0x_Init+0x9a>
		return Status;
 8008522:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008526:	e0c4      	b.n	80086b2 <Vl53l0x_Init+0x224>
	Status = VL53L0X_PerformRefCalibration(&Dev_t->Dev, &VhvSettings,
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3328      	adds	r3, #40	; 0x28
 800852c:	f107 0215 	add.w	r2, r7, #21
 8008530:	f107 0116 	add.w	r1, r7, #22
 8008534:	4618      	mov	r0, r3
 8008536:	f7fb ffcd 	bl	80044d4 <VL53L0X_PerformRefCalibration>
 800853a:	4603      	mov	r3, r0
 800853c:	77fb      	strb	r3, [r7, #31]
			&PhaseCal);
	if (Status != VL53L0X_ERROR_NONE)
 800853e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d002      	beq.n	800854c <Vl53l0x_Init+0xbe>
		return Status;
 8008546:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800854a:	e0b2      	b.n	80086b2 <Vl53l0x_Init+0x224>
	Status = VL53L0X_PerformRefSpadManagement(&Dev_t->Dev,&refSpadCount, &isApertureSpads);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3328      	adds	r3, #40	; 0x28
 8008550:	f107 0217 	add.w	r2, r7, #23
 8008554:	f107 0118 	add.w	r1, r7, #24
 8008558:	4618      	mov	r0, r3
 800855a:	f7fc fc47 	bl	8004dec <VL53L0X_PerformRefSpadManagement>
 800855e:	4603      	mov	r3, r0
 8008560:	77fb      	strb	r3, [r7, #31]
	if (Status != VL53L0X_ERROR_NONE)
 8008562:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <Vl53l0x_Init+0xe2>
		return Status;
 800856a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800856e:	e0a0      	b.n	80086b2 <Vl53l0x_Init+0x224>

	Status = VL53L0X_SetDeviceMode(&Dev_t->Dev,
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	3328      	adds	r3, #40	; 0x28
 8008574:	2100      	movs	r1, #0
 8008576:	4618      	mov	r0, r3
 8008578:	f7fb fb30 	bl	8003bdc <VL53L0X_SetDeviceMode>
 800857c:	4603      	mov	r3, r0
 800857e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_DEVICEMODE_SINGLE_RANGING);
	if (Status != VL53L0X_ERROR_NONE)
 8008580:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <Vl53l0x_Init+0x100>
		return Status;
 8008588:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800858c:	e091      	b.n	80086b2 <Vl53l0x_Init+0x224>

	// Enable/Disable Sigma and Signal check
	Status = VL53L0X_SetLimitCheckEnable(&Dev_t->Dev,
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3328      	adds	r3, #40	; 0x28
 8008592:	2201      	movs	r2, #1
 8008594:	2100      	movs	r1, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f7fb fd98 	bl	80040cc <VL53L0X_SetLimitCheckEnable>
 800859c:	4603      	mov	r3, r0
 800859e:	77fb      	strb	r3, [r7, #31]
	VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
	if (Status != VL53L0X_ERROR_NONE)
 80085a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <Vl53l0x_Init+0x120>
		return Status;
 80085a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80085ac:	e081      	b.n	80086b2 <Vl53l0x_Init+0x224>
	Status = VL53L0X_SetLimitCheckEnable(&Dev_t->Dev,
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3328      	adds	r3, #40	; 0x28
 80085b2:	2201      	movs	r2, #1
 80085b4:	2101      	movs	r1, #1
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fb fd88 	bl	80040cc <VL53L0X_SetLimitCheckEnable>
 80085bc:	4603      	mov	r3, r0
 80085be:	77fb      	strb	r3, [r7, #31]
	VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
	if (Status != VL53L0X_ERROR_NONE)
 80085c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <Vl53l0x_Init+0x140>
		return Status;
 80085c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80085cc:	e071      	b.n	80086b2 <Vl53l0x_Init+0x224>
	Status = VL53L0X_SetLimitCheckValue(&Dev_t->Dev,
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3328      	adds	r3, #40	; 0x28
 80085d2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80085d6:	2100      	movs	r1, #0
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fb fe25 	bl	8004228 <VL53L0X_SetLimitCheckValue>
 80085de:	4603      	mov	r3, r0
 80085e0:	77fb      	strb	r3, [r7, #31]
	VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t) (60 * 65536));
	if (Status != VL53L0X_ERROR_NONE)
 80085e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <Vl53l0x_Init+0x162>
		return Status;
 80085ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80085ee:	e060      	b.n	80086b2 <Vl53l0x_Init+0x224>
	Status = VL53L0X_SetLimitCheckValue(&Dev_t->Dev,
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3328      	adds	r3, #40	; 0x28
 80085f4:	f641 1299 	movw	r2, #6553	; 0x1999
 80085f8:	2101      	movs	r1, #1
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fb fe14 	bl	8004228 <VL53L0X_SetLimitCheckValue>
 8008600:	4603      	mov	r3, r0
 8008602:	77fb      	strb	r3, [r7, #31]
	VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			(FixPoint1616_t) (0.1 * 65536));
	if (Status != VL53L0X_ERROR_NONE)
 8008604:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <Vl53l0x_Init+0x184>
		return Status;
 800860c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008610:	e04f      	b.n	80086b2 <Vl53l0x_Init+0x224>
	Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&Dev_t->Dev, 33000);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3328      	adds	r3, #40	; 0x28
 8008616:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800861a:	4618      	mov	r0, r3
 800861c:	f7fb fb3b 	bl	8003c96 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8008620:	4603      	mov	r3, r0
 8008622:	77fb      	strb	r3, [r7, #31]
	if (Status != VL53L0X_ERROR_NONE)
 8008624:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <Vl53l0x_Init+0x1a4>
		return Status;
 800862c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008630:	e03f      	b.n	80086b2 <Vl53l0x_Init+0x224>

	Status = VL53L0X_SetVcselPulsePeriod(&Dev_t->Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3328      	adds	r3, #40	; 0x28
 8008636:	2212      	movs	r2, #18
 8008638:	2100      	movs	r1, #0
 800863a:	4618      	mov	r0, r3
 800863c:	f7fb fb51 	bl	8003ce2 <VL53L0X_SetVcselPulsePeriod>
 8008640:	4603      	mov	r3, r0
 8008642:	77fb      	strb	r3, [r7, #31]
			18);
	if (Status != VL53L0X_ERROR_NONE)
 8008644:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <Vl53l0x_Init+0x1c4>
		return Status;
 800864c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008650:	e02f      	b.n	80086b2 <Vl53l0x_Init+0x224>
	Status = VL53L0X_SetVcselPulsePeriod(&Dev_t->Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3328      	adds	r3, #40	; 0x28
 8008656:	220e      	movs	r2, #14
 8008658:	2101      	movs	r1, #1
 800865a:	4618      	mov	r0, r3
 800865c:	f7fb fb41 	bl	8003ce2 <VL53L0X_SetVcselPulsePeriod>
 8008660:	4603      	mov	r3, r0
 8008662:	77fb      	strb	r3, [r7, #31]
			14);
	if (Status != VL53L0X_ERROR_NONE)
 8008664:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <Vl53l0x_Init+0x1e4>
		return Status;
 800866c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008670:	e01f      	b.n	80086b2 <Vl53l0x_Init+0x224>
//	Status = VL53L0X_SetInterMeasurementPeriodMilliSeconds(&Dev_t->Dev, 500);

//	if (Status != VL53L0X_ERROR_NONE)
//		return Status;
	Status = VL53L0X_SetDeviceAddress(&Dev_t->Dev, Dev_t->Address);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	7a1b      	ldrb	r3, [r3, #8]
 800867c:	4619      	mov	r1, r3
 800867e:	4610      	mov	r0, r2
 8008680:	f7fa ff20 	bl	80034c4 <VL53L0X_SetDeviceAddress>
 8008684:	4603      	mov	r3, r0
 8008686:	77fb      	strb	r3, [r7, #31]
	Dev_t->Dev.I2cDevAddr = Dev_t->Address;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	7a1a      	ldrb	r2, [r3, #8]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	HAL_Delay(10);
 8008692:	200a      	movs	r0, #10
 8008694:	f7f8 f9d8 	bl	8000a48 <HAL_Delay>
	if (Status != VL53L0X_ERROR_NONE)
 8008698:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <Vl53l0x_Init+0x218>
		return Status;
 80086a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80086a4:	e005      	b.n	80086b2 <Vl53l0x_Init+0x224>
//		return Status;
//    Status = VL53L0X_SetVcselPulsePeriod(&Dev_t->Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);

//    Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&Dev_t->Dev, 33000);

	Dev_t->isInit = 1;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
	return Status;
 80086ae:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3720      	adds	r7, #32
 80086b6:	46bd      	mov	sp, r7
 80086b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086bc:	b002      	add	sp, #8
 80086be:	4770      	bx	lr

080086c0 <Vl53l0x_ReadMeasure>:
;

uint16_t Vl53l0x_ReadMeasure(Vl53l0x_HandlerStruct *Dev_t) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
//		{
//			return -1;
//		}
//        VL53L0X_PerformSingleRangingMeasurement(&Dev_t->Dev, &Dev_t->RangingData);
//	VL53L0X_WaitMeasurementDataReady(&Dev_t->Dev);
	VL53L0X_PerformSingleRangingMeasurement(&Dev_t->Dev, &Dev_t->RangingData);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	330c      	adds	r3, #12
 80086d2:	4619      	mov	r1, r3
 80086d4:	4610      	mov	r0, r2
 80086d6:	f7fc f99f 	bl	8004a18 <VL53L0X_PerformSingleRangingMeasurement>
	if (Dev_t->RangingData.RangeStatus == 0) {
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d102      	bne.n	80086ea <Vl53l0x_ReadMeasure+0x2a>
		return Dev_t->RangingData.RangeMilliMeter;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	8a9b      	ldrh	r3, [r3, #20]
 80086e8:	e001      	b.n	80086ee <Vl53l0x_ReadMeasure+0x2e>
	} else
		return -1;
 80086ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <siprintf>:
 80086f8:	b40e      	push	{r1, r2, r3}
 80086fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086fe:	b500      	push	{lr}
 8008700:	b09c      	sub	sp, #112	; 0x70
 8008702:	ab1d      	add	r3, sp, #116	; 0x74
 8008704:	9002      	str	r0, [sp, #8]
 8008706:	9006      	str	r0, [sp, #24]
 8008708:	9107      	str	r1, [sp, #28]
 800870a:	9104      	str	r1, [sp, #16]
 800870c:	4808      	ldr	r0, [pc, #32]	; (8008730 <siprintf+0x38>)
 800870e:	4909      	ldr	r1, [pc, #36]	; (8008734 <siprintf+0x3c>)
 8008710:	f853 2b04 	ldr.w	r2, [r3], #4
 8008714:	9105      	str	r1, [sp, #20]
 8008716:	6800      	ldr	r0, [r0, #0]
 8008718:	a902      	add	r1, sp, #8
 800871a:	9301      	str	r3, [sp, #4]
 800871c:	f000 f9a4 	bl	8008a68 <_svfiprintf_r>
 8008720:	2200      	movs	r2, #0
 8008722:	9b02      	ldr	r3, [sp, #8]
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	b01c      	add	sp, #112	; 0x70
 8008728:	f85d eb04 	ldr.w	lr, [sp], #4
 800872c:	b003      	add	sp, #12
 800872e:	4770      	bx	lr
 8008730:	20000324 	.word	0x20000324
 8008734:	ffff0208 	.word	0xffff0208

08008738 <memset>:
 8008738:	4603      	mov	r3, r0
 800873a:	4402      	add	r2, r0
 800873c:	4293      	cmp	r3, r2
 800873e:	d100      	bne.n	8008742 <memset+0xa>
 8008740:	4770      	bx	lr
 8008742:	f803 1b01 	strb.w	r1, [r3], #1
 8008746:	e7f9      	b.n	800873c <memset+0x4>

08008748 <__errno>:
 8008748:	4b01      	ldr	r3, [pc, #4]	; (8008750 <__errno+0x8>)
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	20000324 	.word	0x20000324

08008754 <__libc_init_array>:
 8008754:	b570      	push	{r4, r5, r6, lr}
 8008756:	2600      	movs	r6, #0
 8008758:	4d0c      	ldr	r5, [pc, #48]	; (800878c <__libc_init_array+0x38>)
 800875a:	4c0d      	ldr	r4, [pc, #52]	; (8008790 <__libc_init_array+0x3c>)
 800875c:	1b64      	subs	r4, r4, r5
 800875e:	10a4      	asrs	r4, r4, #2
 8008760:	42a6      	cmp	r6, r4
 8008762:	d109      	bne.n	8008778 <__libc_init_array+0x24>
 8008764:	f000 fc82 	bl	800906c <_init>
 8008768:	2600      	movs	r6, #0
 800876a:	4d0a      	ldr	r5, [pc, #40]	; (8008794 <__libc_init_array+0x40>)
 800876c:	4c0a      	ldr	r4, [pc, #40]	; (8008798 <__libc_init_array+0x44>)
 800876e:	1b64      	subs	r4, r4, r5
 8008770:	10a4      	asrs	r4, r4, #2
 8008772:	42a6      	cmp	r6, r4
 8008774:	d105      	bne.n	8008782 <__libc_init_array+0x2e>
 8008776:	bd70      	pop	{r4, r5, r6, pc}
 8008778:	f855 3b04 	ldr.w	r3, [r5], #4
 800877c:	4798      	blx	r3
 800877e:	3601      	adds	r6, #1
 8008780:	e7ee      	b.n	8008760 <__libc_init_array+0xc>
 8008782:	f855 3b04 	ldr.w	r3, [r5], #4
 8008786:	4798      	blx	r3
 8008788:	3601      	adds	r6, #1
 800878a:	e7f2      	b.n	8008772 <__libc_init_array+0x1e>
 800878c:	080090ec 	.word	0x080090ec
 8008790:	080090ec 	.word	0x080090ec
 8008794:	080090ec 	.word	0x080090ec
 8008798:	080090f0 	.word	0x080090f0

0800879c <__retarget_lock_acquire_recursive>:
 800879c:	4770      	bx	lr

0800879e <__retarget_lock_release_recursive>:
 800879e:	4770      	bx	lr

080087a0 <strcpy>:
 80087a0:	4603      	mov	r3, r0
 80087a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087a6:	f803 2b01 	strb.w	r2, [r3], #1
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	d1f9      	bne.n	80087a2 <strcpy+0x2>
 80087ae:	4770      	bx	lr

080087b0 <memcpy>:
 80087b0:	440a      	add	r2, r1
 80087b2:	4291      	cmp	r1, r2
 80087b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80087b8:	d100      	bne.n	80087bc <memcpy+0xc>
 80087ba:	4770      	bx	lr
 80087bc:	b510      	push	{r4, lr}
 80087be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087c2:	4291      	cmp	r1, r2
 80087c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087c8:	d1f9      	bne.n	80087be <memcpy+0xe>
 80087ca:	bd10      	pop	{r4, pc}

080087cc <_free_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4605      	mov	r5, r0
 80087d0:	2900      	cmp	r1, #0
 80087d2:	d040      	beq.n	8008856 <_free_r+0x8a>
 80087d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d8:	1f0c      	subs	r4, r1, #4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	bfb8      	it	lt
 80087de:	18e4      	addlt	r4, r4, r3
 80087e0:	f000 f8dc 	bl	800899c <__malloc_lock>
 80087e4:	4a1c      	ldr	r2, [pc, #112]	; (8008858 <_free_r+0x8c>)
 80087e6:	6813      	ldr	r3, [r2, #0]
 80087e8:	b933      	cbnz	r3, 80087f8 <_free_r+0x2c>
 80087ea:	6063      	str	r3, [r4, #4]
 80087ec:	6014      	str	r4, [r2, #0]
 80087ee:	4628      	mov	r0, r5
 80087f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087f4:	f000 b8d8 	b.w	80089a8 <__malloc_unlock>
 80087f8:	42a3      	cmp	r3, r4
 80087fa:	d908      	bls.n	800880e <_free_r+0x42>
 80087fc:	6820      	ldr	r0, [r4, #0]
 80087fe:	1821      	adds	r1, r4, r0
 8008800:	428b      	cmp	r3, r1
 8008802:	bf01      	itttt	eq
 8008804:	6819      	ldreq	r1, [r3, #0]
 8008806:	685b      	ldreq	r3, [r3, #4]
 8008808:	1809      	addeq	r1, r1, r0
 800880a:	6021      	streq	r1, [r4, #0]
 800880c:	e7ed      	b.n	80087ea <_free_r+0x1e>
 800880e:	461a      	mov	r2, r3
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	b10b      	cbz	r3, 8008818 <_free_r+0x4c>
 8008814:	42a3      	cmp	r3, r4
 8008816:	d9fa      	bls.n	800880e <_free_r+0x42>
 8008818:	6811      	ldr	r1, [r2, #0]
 800881a:	1850      	adds	r0, r2, r1
 800881c:	42a0      	cmp	r0, r4
 800881e:	d10b      	bne.n	8008838 <_free_r+0x6c>
 8008820:	6820      	ldr	r0, [r4, #0]
 8008822:	4401      	add	r1, r0
 8008824:	1850      	adds	r0, r2, r1
 8008826:	4283      	cmp	r3, r0
 8008828:	6011      	str	r1, [r2, #0]
 800882a:	d1e0      	bne.n	80087ee <_free_r+0x22>
 800882c:	6818      	ldr	r0, [r3, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	4408      	add	r0, r1
 8008832:	6010      	str	r0, [r2, #0]
 8008834:	6053      	str	r3, [r2, #4]
 8008836:	e7da      	b.n	80087ee <_free_r+0x22>
 8008838:	d902      	bls.n	8008840 <_free_r+0x74>
 800883a:	230c      	movs	r3, #12
 800883c:	602b      	str	r3, [r5, #0]
 800883e:	e7d6      	b.n	80087ee <_free_r+0x22>
 8008840:	6820      	ldr	r0, [r4, #0]
 8008842:	1821      	adds	r1, r4, r0
 8008844:	428b      	cmp	r3, r1
 8008846:	bf01      	itttt	eq
 8008848:	6819      	ldreq	r1, [r3, #0]
 800884a:	685b      	ldreq	r3, [r3, #4]
 800884c:	1809      	addeq	r1, r1, r0
 800884e:	6021      	streq	r1, [r4, #0]
 8008850:	6063      	str	r3, [r4, #4]
 8008852:	6054      	str	r4, [r2, #4]
 8008854:	e7cb      	b.n	80087ee <_free_r+0x22>
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	20000908 	.word	0x20000908

0800885c <sbrk_aligned>:
 800885c:	b570      	push	{r4, r5, r6, lr}
 800885e:	4e0e      	ldr	r6, [pc, #56]	; (8008898 <sbrk_aligned+0x3c>)
 8008860:	460c      	mov	r4, r1
 8008862:	6831      	ldr	r1, [r6, #0]
 8008864:	4605      	mov	r5, r0
 8008866:	b911      	cbnz	r1, 800886e <sbrk_aligned+0x12>
 8008868:	f000 fbaa 	bl	8008fc0 <_sbrk_r>
 800886c:	6030      	str	r0, [r6, #0]
 800886e:	4621      	mov	r1, r4
 8008870:	4628      	mov	r0, r5
 8008872:	f000 fba5 	bl	8008fc0 <_sbrk_r>
 8008876:	1c43      	adds	r3, r0, #1
 8008878:	d00a      	beq.n	8008890 <sbrk_aligned+0x34>
 800887a:	1cc4      	adds	r4, r0, #3
 800887c:	f024 0403 	bic.w	r4, r4, #3
 8008880:	42a0      	cmp	r0, r4
 8008882:	d007      	beq.n	8008894 <sbrk_aligned+0x38>
 8008884:	1a21      	subs	r1, r4, r0
 8008886:	4628      	mov	r0, r5
 8008888:	f000 fb9a 	bl	8008fc0 <_sbrk_r>
 800888c:	3001      	adds	r0, #1
 800888e:	d101      	bne.n	8008894 <sbrk_aligned+0x38>
 8008890:	f04f 34ff 	mov.w	r4, #4294967295
 8008894:	4620      	mov	r0, r4
 8008896:	bd70      	pop	{r4, r5, r6, pc}
 8008898:	2000090c 	.word	0x2000090c

0800889c <_malloc_r>:
 800889c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088a0:	1ccd      	adds	r5, r1, #3
 80088a2:	f025 0503 	bic.w	r5, r5, #3
 80088a6:	3508      	adds	r5, #8
 80088a8:	2d0c      	cmp	r5, #12
 80088aa:	bf38      	it	cc
 80088ac:	250c      	movcc	r5, #12
 80088ae:	2d00      	cmp	r5, #0
 80088b0:	4607      	mov	r7, r0
 80088b2:	db01      	blt.n	80088b8 <_malloc_r+0x1c>
 80088b4:	42a9      	cmp	r1, r5
 80088b6:	d905      	bls.n	80088c4 <_malloc_r+0x28>
 80088b8:	230c      	movs	r3, #12
 80088ba:	2600      	movs	r6, #0
 80088bc:	603b      	str	r3, [r7, #0]
 80088be:	4630      	mov	r0, r6
 80088c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008998 <_malloc_r+0xfc>
 80088c8:	f000 f868 	bl	800899c <__malloc_lock>
 80088cc:	f8d8 3000 	ldr.w	r3, [r8]
 80088d0:	461c      	mov	r4, r3
 80088d2:	bb5c      	cbnz	r4, 800892c <_malloc_r+0x90>
 80088d4:	4629      	mov	r1, r5
 80088d6:	4638      	mov	r0, r7
 80088d8:	f7ff ffc0 	bl	800885c <sbrk_aligned>
 80088dc:	1c43      	adds	r3, r0, #1
 80088de:	4604      	mov	r4, r0
 80088e0:	d155      	bne.n	800898e <_malloc_r+0xf2>
 80088e2:	f8d8 4000 	ldr.w	r4, [r8]
 80088e6:	4626      	mov	r6, r4
 80088e8:	2e00      	cmp	r6, #0
 80088ea:	d145      	bne.n	8008978 <_malloc_r+0xdc>
 80088ec:	2c00      	cmp	r4, #0
 80088ee:	d048      	beq.n	8008982 <_malloc_r+0xe6>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	4631      	mov	r1, r6
 80088f4:	4638      	mov	r0, r7
 80088f6:	eb04 0903 	add.w	r9, r4, r3
 80088fa:	f000 fb61 	bl	8008fc0 <_sbrk_r>
 80088fe:	4581      	cmp	r9, r0
 8008900:	d13f      	bne.n	8008982 <_malloc_r+0xe6>
 8008902:	6821      	ldr	r1, [r4, #0]
 8008904:	4638      	mov	r0, r7
 8008906:	1a6d      	subs	r5, r5, r1
 8008908:	4629      	mov	r1, r5
 800890a:	f7ff ffa7 	bl	800885c <sbrk_aligned>
 800890e:	3001      	adds	r0, #1
 8008910:	d037      	beq.n	8008982 <_malloc_r+0xe6>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	442b      	add	r3, r5
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	f8d8 3000 	ldr.w	r3, [r8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d038      	beq.n	8008992 <_malloc_r+0xf6>
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	42a2      	cmp	r2, r4
 8008924:	d12b      	bne.n	800897e <_malloc_r+0xe2>
 8008926:	2200      	movs	r2, #0
 8008928:	605a      	str	r2, [r3, #4]
 800892a:	e00f      	b.n	800894c <_malloc_r+0xb0>
 800892c:	6822      	ldr	r2, [r4, #0]
 800892e:	1b52      	subs	r2, r2, r5
 8008930:	d41f      	bmi.n	8008972 <_malloc_r+0xd6>
 8008932:	2a0b      	cmp	r2, #11
 8008934:	d917      	bls.n	8008966 <_malloc_r+0xca>
 8008936:	1961      	adds	r1, r4, r5
 8008938:	42a3      	cmp	r3, r4
 800893a:	6025      	str	r5, [r4, #0]
 800893c:	bf18      	it	ne
 800893e:	6059      	strne	r1, [r3, #4]
 8008940:	6863      	ldr	r3, [r4, #4]
 8008942:	bf08      	it	eq
 8008944:	f8c8 1000 	streq.w	r1, [r8]
 8008948:	5162      	str	r2, [r4, r5]
 800894a:	604b      	str	r3, [r1, #4]
 800894c:	4638      	mov	r0, r7
 800894e:	f104 060b 	add.w	r6, r4, #11
 8008952:	f000 f829 	bl	80089a8 <__malloc_unlock>
 8008956:	f026 0607 	bic.w	r6, r6, #7
 800895a:	1d23      	adds	r3, r4, #4
 800895c:	1af2      	subs	r2, r6, r3
 800895e:	d0ae      	beq.n	80088be <_malloc_r+0x22>
 8008960:	1b9b      	subs	r3, r3, r6
 8008962:	50a3      	str	r3, [r4, r2]
 8008964:	e7ab      	b.n	80088be <_malloc_r+0x22>
 8008966:	42a3      	cmp	r3, r4
 8008968:	6862      	ldr	r2, [r4, #4]
 800896a:	d1dd      	bne.n	8008928 <_malloc_r+0x8c>
 800896c:	f8c8 2000 	str.w	r2, [r8]
 8008970:	e7ec      	b.n	800894c <_malloc_r+0xb0>
 8008972:	4623      	mov	r3, r4
 8008974:	6864      	ldr	r4, [r4, #4]
 8008976:	e7ac      	b.n	80088d2 <_malloc_r+0x36>
 8008978:	4634      	mov	r4, r6
 800897a:	6876      	ldr	r6, [r6, #4]
 800897c:	e7b4      	b.n	80088e8 <_malloc_r+0x4c>
 800897e:	4613      	mov	r3, r2
 8008980:	e7cc      	b.n	800891c <_malloc_r+0x80>
 8008982:	230c      	movs	r3, #12
 8008984:	4638      	mov	r0, r7
 8008986:	603b      	str	r3, [r7, #0]
 8008988:	f000 f80e 	bl	80089a8 <__malloc_unlock>
 800898c:	e797      	b.n	80088be <_malloc_r+0x22>
 800898e:	6025      	str	r5, [r4, #0]
 8008990:	e7dc      	b.n	800894c <_malloc_r+0xb0>
 8008992:	605b      	str	r3, [r3, #4]
 8008994:	deff      	udf	#255	; 0xff
 8008996:	bf00      	nop
 8008998:	20000908 	.word	0x20000908

0800899c <__malloc_lock>:
 800899c:	4801      	ldr	r0, [pc, #4]	; (80089a4 <__malloc_lock+0x8>)
 800899e:	f7ff befd 	b.w	800879c <__retarget_lock_acquire_recursive>
 80089a2:	bf00      	nop
 80089a4:	20000904 	.word	0x20000904

080089a8 <__malloc_unlock>:
 80089a8:	4801      	ldr	r0, [pc, #4]	; (80089b0 <__malloc_unlock+0x8>)
 80089aa:	f7ff bef8 	b.w	800879e <__retarget_lock_release_recursive>
 80089ae:	bf00      	nop
 80089b0:	20000904 	.word	0x20000904

080089b4 <__ssputs_r>:
 80089b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b8:	461f      	mov	r7, r3
 80089ba:	688e      	ldr	r6, [r1, #8]
 80089bc:	4682      	mov	sl, r0
 80089be:	42be      	cmp	r6, r7
 80089c0:	460c      	mov	r4, r1
 80089c2:	4690      	mov	r8, r2
 80089c4:	680b      	ldr	r3, [r1, #0]
 80089c6:	d82c      	bhi.n	8008a22 <__ssputs_r+0x6e>
 80089c8:	898a      	ldrh	r2, [r1, #12]
 80089ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089ce:	d026      	beq.n	8008a1e <__ssputs_r+0x6a>
 80089d0:	6965      	ldr	r5, [r4, #20]
 80089d2:	6909      	ldr	r1, [r1, #16]
 80089d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089d8:	eba3 0901 	sub.w	r9, r3, r1
 80089dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089e0:	1c7b      	adds	r3, r7, #1
 80089e2:	444b      	add	r3, r9
 80089e4:	106d      	asrs	r5, r5, #1
 80089e6:	429d      	cmp	r5, r3
 80089e8:	bf38      	it	cc
 80089ea:	461d      	movcc	r5, r3
 80089ec:	0553      	lsls	r3, r2, #21
 80089ee:	d527      	bpl.n	8008a40 <__ssputs_r+0x8c>
 80089f0:	4629      	mov	r1, r5
 80089f2:	f7ff ff53 	bl	800889c <_malloc_r>
 80089f6:	4606      	mov	r6, r0
 80089f8:	b360      	cbz	r0, 8008a54 <__ssputs_r+0xa0>
 80089fa:	464a      	mov	r2, r9
 80089fc:	6921      	ldr	r1, [r4, #16]
 80089fe:	f7ff fed7 	bl	80087b0 <memcpy>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a0c:	81a3      	strh	r3, [r4, #12]
 8008a0e:	6126      	str	r6, [r4, #16]
 8008a10:	444e      	add	r6, r9
 8008a12:	6026      	str	r6, [r4, #0]
 8008a14:	463e      	mov	r6, r7
 8008a16:	6165      	str	r5, [r4, #20]
 8008a18:	eba5 0509 	sub.w	r5, r5, r9
 8008a1c:	60a5      	str	r5, [r4, #8]
 8008a1e:	42be      	cmp	r6, r7
 8008a20:	d900      	bls.n	8008a24 <__ssputs_r+0x70>
 8008a22:	463e      	mov	r6, r7
 8008a24:	4632      	mov	r2, r6
 8008a26:	4641      	mov	r1, r8
 8008a28:	6820      	ldr	r0, [r4, #0]
 8008a2a:	f000 faaf 	bl	8008f8c <memmove>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	68a3      	ldr	r3, [r4, #8]
 8008a32:	1b9b      	subs	r3, r3, r6
 8008a34:	60a3      	str	r3, [r4, #8]
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	4433      	add	r3, r6
 8008a3a:	6023      	str	r3, [r4, #0]
 8008a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a40:	462a      	mov	r2, r5
 8008a42:	f000 fadb 	bl	8008ffc <_realloc_r>
 8008a46:	4606      	mov	r6, r0
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d1e0      	bne.n	8008a0e <__ssputs_r+0x5a>
 8008a4c:	4650      	mov	r0, sl
 8008a4e:	6921      	ldr	r1, [r4, #16]
 8008a50:	f7ff febc 	bl	80087cc <_free_r>
 8008a54:	230c      	movs	r3, #12
 8008a56:	f8ca 3000 	str.w	r3, [sl]
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a64:	81a3      	strh	r3, [r4, #12]
 8008a66:	e7e9      	b.n	8008a3c <__ssputs_r+0x88>

08008a68 <_svfiprintf_r>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	4698      	mov	r8, r3
 8008a6e:	898b      	ldrh	r3, [r1, #12]
 8008a70:	4607      	mov	r7, r0
 8008a72:	061b      	lsls	r3, r3, #24
 8008a74:	460d      	mov	r5, r1
 8008a76:	4614      	mov	r4, r2
 8008a78:	b09d      	sub	sp, #116	; 0x74
 8008a7a:	d50e      	bpl.n	8008a9a <_svfiprintf_r+0x32>
 8008a7c:	690b      	ldr	r3, [r1, #16]
 8008a7e:	b963      	cbnz	r3, 8008a9a <_svfiprintf_r+0x32>
 8008a80:	2140      	movs	r1, #64	; 0x40
 8008a82:	f7ff ff0b 	bl	800889c <_malloc_r>
 8008a86:	6028      	str	r0, [r5, #0]
 8008a88:	6128      	str	r0, [r5, #16]
 8008a8a:	b920      	cbnz	r0, 8008a96 <_svfiprintf_r+0x2e>
 8008a8c:	230c      	movs	r3, #12
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	f04f 30ff 	mov.w	r0, #4294967295
 8008a94:	e0d0      	b.n	8008c38 <_svfiprintf_r+0x1d0>
 8008a96:	2340      	movs	r3, #64	; 0x40
 8008a98:	616b      	str	r3, [r5, #20]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9e:	2320      	movs	r3, #32
 8008aa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aa4:	2330      	movs	r3, #48	; 0x30
 8008aa6:	f04f 0901 	mov.w	r9, #1
 8008aaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aae:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008c50 <_svfiprintf_r+0x1e8>
 8008ab2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ab6:	4623      	mov	r3, r4
 8008ab8:	469a      	mov	sl, r3
 8008aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008abe:	b10a      	cbz	r2, 8008ac4 <_svfiprintf_r+0x5c>
 8008ac0:	2a25      	cmp	r2, #37	; 0x25
 8008ac2:	d1f9      	bne.n	8008ab8 <_svfiprintf_r+0x50>
 8008ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ac8:	d00b      	beq.n	8008ae2 <_svfiprintf_r+0x7a>
 8008aca:	465b      	mov	r3, fp
 8008acc:	4622      	mov	r2, r4
 8008ace:	4629      	mov	r1, r5
 8008ad0:	4638      	mov	r0, r7
 8008ad2:	f7ff ff6f 	bl	80089b4 <__ssputs_r>
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	f000 80a9 	beq.w	8008c2e <_svfiprintf_r+0x1c6>
 8008adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ade:	445a      	add	r2, fp
 8008ae0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f000 80a1 	beq.w	8008c2e <_svfiprintf_r+0x1c6>
 8008aec:	2300      	movs	r3, #0
 8008aee:	f04f 32ff 	mov.w	r2, #4294967295
 8008af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008af6:	f10a 0a01 	add.w	sl, sl, #1
 8008afa:	9304      	str	r3, [sp, #16]
 8008afc:	9307      	str	r3, [sp, #28]
 8008afe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b02:	931a      	str	r3, [sp, #104]	; 0x68
 8008b04:	4654      	mov	r4, sl
 8008b06:	2205      	movs	r2, #5
 8008b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b0c:	4850      	ldr	r0, [pc, #320]	; (8008c50 <_svfiprintf_r+0x1e8>)
 8008b0e:	f000 fa67 	bl	8008fe0 <memchr>
 8008b12:	9a04      	ldr	r2, [sp, #16]
 8008b14:	b9d8      	cbnz	r0, 8008b4e <_svfiprintf_r+0xe6>
 8008b16:	06d0      	lsls	r0, r2, #27
 8008b18:	bf44      	itt	mi
 8008b1a:	2320      	movmi	r3, #32
 8008b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b20:	0711      	lsls	r1, r2, #28
 8008b22:	bf44      	itt	mi
 8008b24:	232b      	movmi	r3, #43	; 0x2b
 8008b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b30:	d015      	beq.n	8008b5e <_svfiprintf_r+0xf6>
 8008b32:	4654      	mov	r4, sl
 8008b34:	2000      	movs	r0, #0
 8008b36:	f04f 0c0a 	mov.w	ip, #10
 8008b3a:	9a07      	ldr	r2, [sp, #28]
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b42:	3b30      	subs	r3, #48	; 0x30
 8008b44:	2b09      	cmp	r3, #9
 8008b46:	d94d      	bls.n	8008be4 <_svfiprintf_r+0x17c>
 8008b48:	b1b0      	cbz	r0, 8008b78 <_svfiprintf_r+0x110>
 8008b4a:	9207      	str	r2, [sp, #28]
 8008b4c:	e014      	b.n	8008b78 <_svfiprintf_r+0x110>
 8008b4e:	eba0 0308 	sub.w	r3, r0, r8
 8008b52:	fa09 f303 	lsl.w	r3, r9, r3
 8008b56:	4313      	orrs	r3, r2
 8008b58:	46a2      	mov	sl, r4
 8008b5a:	9304      	str	r3, [sp, #16]
 8008b5c:	e7d2      	b.n	8008b04 <_svfiprintf_r+0x9c>
 8008b5e:	9b03      	ldr	r3, [sp, #12]
 8008b60:	1d19      	adds	r1, r3, #4
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	9103      	str	r1, [sp, #12]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	bfbb      	ittet	lt
 8008b6a:	425b      	neglt	r3, r3
 8008b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8008b70:	9307      	strge	r3, [sp, #28]
 8008b72:	9307      	strlt	r3, [sp, #28]
 8008b74:	bfb8      	it	lt
 8008b76:	9204      	strlt	r2, [sp, #16]
 8008b78:	7823      	ldrb	r3, [r4, #0]
 8008b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b7c:	d10c      	bne.n	8008b98 <_svfiprintf_r+0x130>
 8008b7e:	7863      	ldrb	r3, [r4, #1]
 8008b80:	2b2a      	cmp	r3, #42	; 0x2a
 8008b82:	d134      	bne.n	8008bee <_svfiprintf_r+0x186>
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	3402      	adds	r4, #2
 8008b88:	1d1a      	adds	r2, r3, #4
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	9203      	str	r2, [sp, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	bfb8      	it	lt
 8008b92:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b96:	9305      	str	r3, [sp, #20]
 8008b98:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008c54 <_svfiprintf_r+0x1ec>
 8008b9c:	2203      	movs	r2, #3
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	7821      	ldrb	r1, [r4, #0]
 8008ba2:	f000 fa1d 	bl	8008fe0 <memchr>
 8008ba6:	b138      	cbz	r0, 8008bb8 <_svfiprintf_r+0x150>
 8008ba8:	2240      	movs	r2, #64	; 0x40
 8008baa:	9b04      	ldr	r3, [sp, #16]
 8008bac:	eba0 000a 	sub.w	r0, r0, sl
 8008bb0:	4082      	lsls	r2, r0
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	3401      	adds	r4, #1
 8008bb6:	9304      	str	r3, [sp, #16]
 8008bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bbc:	2206      	movs	r2, #6
 8008bbe:	4826      	ldr	r0, [pc, #152]	; (8008c58 <_svfiprintf_r+0x1f0>)
 8008bc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bc4:	f000 fa0c 	bl	8008fe0 <memchr>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d038      	beq.n	8008c3e <_svfiprintf_r+0x1d6>
 8008bcc:	4b23      	ldr	r3, [pc, #140]	; (8008c5c <_svfiprintf_r+0x1f4>)
 8008bce:	bb1b      	cbnz	r3, 8008c18 <_svfiprintf_r+0x1b0>
 8008bd0:	9b03      	ldr	r3, [sp, #12]
 8008bd2:	3307      	adds	r3, #7
 8008bd4:	f023 0307 	bic.w	r3, r3, #7
 8008bd8:	3308      	adds	r3, #8
 8008bda:	9303      	str	r3, [sp, #12]
 8008bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bde:	4433      	add	r3, r6
 8008be0:	9309      	str	r3, [sp, #36]	; 0x24
 8008be2:	e768      	b.n	8008ab6 <_svfiprintf_r+0x4e>
 8008be4:	460c      	mov	r4, r1
 8008be6:	2001      	movs	r0, #1
 8008be8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bec:	e7a6      	b.n	8008b3c <_svfiprintf_r+0xd4>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f04f 0c0a 	mov.w	ip, #10
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	3401      	adds	r4, #1
 8008bf8:	9305      	str	r3, [sp, #20]
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c00:	3a30      	subs	r2, #48	; 0x30
 8008c02:	2a09      	cmp	r2, #9
 8008c04:	d903      	bls.n	8008c0e <_svfiprintf_r+0x1a6>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d0c6      	beq.n	8008b98 <_svfiprintf_r+0x130>
 8008c0a:	9105      	str	r1, [sp, #20]
 8008c0c:	e7c4      	b.n	8008b98 <_svfiprintf_r+0x130>
 8008c0e:	4604      	mov	r4, r0
 8008c10:	2301      	movs	r3, #1
 8008c12:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c16:	e7f0      	b.n	8008bfa <_svfiprintf_r+0x192>
 8008c18:	ab03      	add	r3, sp, #12
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	462a      	mov	r2, r5
 8008c1e:	4638      	mov	r0, r7
 8008c20:	4b0f      	ldr	r3, [pc, #60]	; (8008c60 <_svfiprintf_r+0x1f8>)
 8008c22:	a904      	add	r1, sp, #16
 8008c24:	f3af 8000 	nop.w
 8008c28:	1c42      	adds	r2, r0, #1
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	d1d6      	bne.n	8008bdc <_svfiprintf_r+0x174>
 8008c2e:	89ab      	ldrh	r3, [r5, #12]
 8008c30:	065b      	lsls	r3, r3, #25
 8008c32:	f53f af2d 	bmi.w	8008a90 <_svfiprintf_r+0x28>
 8008c36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c38:	b01d      	add	sp, #116	; 0x74
 8008c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c3e:	ab03      	add	r3, sp, #12
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	462a      	mov	r2, r5
 8008c44:	4638      	mov	r0, r7
 8008c46:	4b06      	ldr	r3, [pc, #24]	; (8008c60 <_svfiprintf_r+0x1f8>)
 8008c48:	a904      	add	r1, sp, #16
 8008c4a:	f000 f87d 	bl	8008d48 <_printf_i>
 8008c4e:	e7eb      	b.n	8008c28 <_svfiprintf_r+0x1c0>
 8008c50:	080090b6 	.word	0x080090b6
 8008c54:	080090bc 	.word	0x080090bc
 8008c58:	080090c0 	.word	0x080090c0
 8008c5c:	00000000 	.word	0x00000000
 8008c60:	080089b5 	.word	0x080089b5

08008c64 <_printf_common>:
 8008c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c68:	4616      	mov	r6, r2
 8008c6a:	4699      	mov	r9, r3
 8008c6c:	688a      	ldr	r2, [r1, #8]
 8008c6e:	690b      	ldr	r3, [r1, #16]
 8008c70:	4607      	mov	r7, r0
 8008c72:	4293      	cmp	r3, r2
 8008c74:	bfb8      	it	lt
 8008c76:	4613      	movlt	r3, r2
 8008c78:	6033      	str	r3, [r6, #0]
 8008c7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c7e:	460c      	mov	r4, r1
 8008c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c84:	b10a      	cbz	r2, 8008c8a <_printf_common+0x26>
 8008c86:	3301      	adds	r3, #1
 8008c88:	6033      	str	r3, [r6, #0]
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	0699      	lsls	r1, r3, #26
 8008c8e:	bf42      	ittt	mi
 8008c90:	6833      	ldrmi	r3, [r6, #0]
 8008c92:	3302      	addmi	r3, #2
 8008c94:	6033      	strmi	r3, [r6, #0]
 8008c96:	6825      	ldr	r5, [r4, #0]
 8008c98:	f015 0506 	ands.w	r5, r5, #6
 8008c9c:	d106      	bne.n	8008cac <_printf_common+0x48>
 8008c9e:	f104 0a19 	add.w	sl, r4, #25
 8008ca2:	68e3      	ldr	r3, [r4, #12]
 8008ca4:	6832      	ldr	r2, [r6, #0]
 8008ca6:	1a9b      	subs	r3, r3, r2
 8008ca8:	42ab      	cmp	r3, r5
 8008caa:	dc2b      	bgt.n	8008d04 <_printf_common+0xa0>
 8008cac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008cb0:	1e13      	subs	r3, r2, #0
 8008cb2:	6822      	ldr	r2, [r4, #0]
 8008cb4:	bf18      	it	ne
 8008cb6:	2301      	movne	r3, #1
 8008cb8:	0692      	lsls	r2, r2, #26
 8008cba:	d430      	bmi.n	8008d1e <_printf_common+0xba>
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cc4:	47c0      	blx	r8
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	d023      	beq.n	8008d12 <_printf_common+0xae>
 8008cca:	6823      	ldr	r3, [r4, #0]
 8008ccc:	6922      	ldr	r2, [r4, #16]
 8008cce:	f003 0306 	and.w	r3, r3, #6
 8008cd2:	2b04      	cmp	r3, #4
 8008cd4:	bf14      	ite	ne
 8008cd6:	2500      	movne	r5, #0
 8008cd8:	6833      	ldreq	r3, [r6, #0]
 8008cda:	f04f 0600 	mov.w	r6, #0
 8008cde:	bf08      	it	eq
 8008ce0:	68e5      	ldreq	r5, [r4, #12]
 8008ce2:	f104 041a 	add.w	r4, r4, #26
 8008ce6:	bf08      	it	eq
 8008ce8:	1aed      	subeq	r5, r5, r3
 8008cea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008cee:	bf08      	it	eq
 8008cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	bfc4      	itt	gt
 8008cf8:	1a9b      	subgt	r3, r3, r2
 8008cfa:	18ed      	addgt	r5, r5, r3
 8008cfc:	42b5      	cmp	r5, r6
 8008cfe:	d11a      	bne.n	8008d36 <_printf_common+0xd2>
 8008d00:	2000      	movs	r0, #0
 8008d02:	e008      	b.n	8008d16 <_printf_common+0xb2>
 8008d04:	2301      	movs	r3, #1
 8008d06:	4652      	mov	r2, sl
 8008d08:	4649      	mov	r1, r9
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	47c0      	blx	r8
 8008d0e:	3001      	adds	r0, #1
 8008d10:	d103      	bne.n	8008d1a <_printf_common+0xb6>
 8008d12:	f04f 30ff 	mov.w	r0, #4294967295
 8008d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1a:	3501      	adds	r5, #1
 8008d1c:	e7c1      	b.n	8008ca2 <_printf_common+0x3e>
 8008d1e:	2030      	movs	r0, #48	; 0x30
 8008d20:	18e1      	adds	r1, r4, r3
 8008d22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d26:	1c5a      	adds	r2, r3, #1
 8008d28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d2c:	4422      	add	r2, r4
 8008d2e:	3302      	adds	r3, #2
 8008d30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d34:	e7c2      	b.n	8008cbc <_printf_common+0x58>
 8008d36:	2301      	movs	r3, #1
 8008d38:	4622      	mov	r2, r4
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	4638      	mov	r0, r7
 8008d3e:	47c0      	blx	r8
 8008d40:	3001      	adds	r0, #1
 8008d42:	d0e6      	beq.n	8008d12 <_printf_common+0xae>
 8008d44:	3601      	adds	r6, #1
 8008d46:	e7d9      	b.n	8008cfc <_printf_common+0x98>

08008d48 <_printf_i>:
 8008d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d4c:	7e0f      	ldrb	r7, [r1, #24]
 8008d4e:	4691      	mov	r9, r2
 8008d50:	2f78      	cmp	r7, #120	; 0x78
 8008d52:	4680      	mov	r8, r0
 8008d54:	460c      	mov	r4, r1
 8008d56:	469a      	mov	sl, r3
 8008d58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d5e:	d807      	bhi.n	8008d70 <_printf_i+0x28>
 8008d60:	2f62      	cmp	r7, #98	; 0x62
 8008d62:	d80a      	bhi.n	8008d7a <_printf_i+0x32>
 8008d64:	2f00      	cmp	r7, #0
 8008d66:	f000 80d5 	beq.w	8008f14 <_printf_i+0x1cc>
 8008d6a:	2f58      	cmp	r7, #88	; 0x58
 8008d6c:	f000 80c1 	beq.w	8008ef2 <_printf_i+0x1aa>
 8008d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d78:	e03a      	b.n	8008df0 <_printf_i+0xa8>
 8008d7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d7e:	2b15      	cmp	r3, #21
 8008d80:	d8f6      	bhi.n	8008d70 <_printf_i+0x28>
 8008d82:	a101      	add	r1, pc, #4	; (adr r1, 8008d88 <_printf_i+0x40>)
 8008d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d88:	08008de1 	.word	0x08008de1
 8008d8c:	08008df5 	.word	0x08008df5
 8008d90:	08008d71 	.word	0x08008d71
 8008d94:	08008d71 	.word	0x08008d71
 8008d98:	08008d71 	.word	0x08008d71
 8008d9c:	08008d71 	.word	0x08008d71
 8008da0:	08008df5 	.word	0x08008df5
 8008da4:	08008d71 	.word	0x08008d71
 8008da8:	08008d71 	.word	0x08008d71
 8008dac:	08008d71 	.word	0x08008d71
 8008db0:	08008d71 	.word	0x08008d71
 8008db4:	08008efb 	.word	0x08008efb
 8008db8:	08008e21 	.word	0x08008e21
 8008dbc:	08008eb5 	.word	0x08008eb5
 8008dc0:	08008d71 	.word	0x08008d71
 8008dc4:	08008d71 	.word	0x08008d71
 8008dc8:	08008f1d 	.word	0x08008f1d
 8008dcc:	08008d71 	.word	0x08008d71
 8008dd0:	08008e21 	.word	0x08008e21
 8008dd4:	08008d71 	.word	0x08008d71
 8008dd8:	08008d71 	.word	0x08008d71
 8008ddc:	08008ebd 	.word	0x08008ebd
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	1d1a      	adds	r2, r3, #4
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	602a      	str	r2, [r5, #0]
 8008de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008df0:	2301      	movs	r3, #1
 8008df2:	e0a0      	b.n	8008f36 <_printf_i+0x1ee>
 8008df4:	6820      	ldr	r0, [r4, #0]
 8008df6:	682b      	ldr	r3, [r5, #0]
 8008df8:	0607      	lsls	r7, r0, #24
 8008dfa:	f103 0104 	add.w	r1, r3, #4
 8008dfe:	6029      	str	r1, [r5, #0]
 8008e00:	d501      	bpl.n	8008e06 <_printf_i+0xbe>
 8008e02:	681e      	ldr	r6, [r3, #0]
 8008e04:	e003      	b.n	8008e0e <_printf_i+0xc6>
 8008e06:	0646      	lsls	r6, r0, #25
 8008e08:	d5fb      	bpl.n	8008e02 <_printf_i+0xba>
 8008e0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008e0e:	2e00      	cmp	r6, #0
 8008e10:	da03      	bge.n	8008e1a <_printf_i+0xd2>
 8008e12:	232d      	movs	r3, #45	; 0x2d
 8008e14:	4276      	negs	r6, r6
 8008e16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e1a:	230a      	movs	r3, #10
 8008e1c:	4859      	ldr	r0, [pc, #356]	; (8008f84 <_printf_i+0x23c>)
 8008e1e:	e012      	b.n	8008e46 <_printf_i+0xfe>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	6820      	ldr	r0, [r4, #0]
 8008e24:	1d19      	adds	r1, r3, #4
 8008e26:	6029      	str	r1, [r5, #0]
 8008e28:	0605      	lsls	r5, r0, #24
 8008e2a:	d501      	bpl.n	8008e30 <_printf_i+0xe8>
 8008e2c:	681e      	ldr	r6, [r3, #0]
 8008e2e:	e002      	b.n	8008e36 <_printf_i+0xee>
 8008e30:	0641      	lsls	r1, r0, #25
 8008e32:	d5fb      	bpl.n	8008e2c <_printf_i+0xe4>
 8008e34:	881e      	ldrh	r6, [r3, #0]
 8008e36:	2f6f      	cmp	r7, #111	; 0x6f
 8008e38:	bf0c      	ite	eq
 8008e3a:	2308      	moveq	r3, #8
 8008e3c:	230a      	movne	r3, #10
 8008e3e:	4851      	ldr	r0, [pc, #324]	; (8008f84 <_printf_i+0x23c>)
 8008e40:	2100      	movs	r1, #0
 8008e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e46:	6865      	ldr	r5, [r4, #4]
 8008e48:	2d00      	cmp	r5, #0
 8008e4a:	bfa8      	it	ge
 8008e4c:	6821      	ldrge	r1, [r4, #0]
 8008e4e:	60a5      	str	r5, [r4, #8]
 8008e50:	bfa4      	itt	ge
 8008e52:	f021 0104 	bicge.w	r1, r1, #4
 8008e56:	6021      	strge	r1, [r4, #0]
 8008e58:	b90e      	cbnz	r6, 8008e5e <_printf_i+0x116>
 8008e5a:	2d00      	cmp	r5, #0
 8008e5c:	d04b      	beq.n	8008ef6 <_printf_i+0x1ae>
 8008e5e:	4615      	mov	r5, r2
 8008e60:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e64:	fb03 6711 	mls	r7, r3, r1, r6
 8008e68:	5dc7      	ldrb	r7, [r0, r7]
 8008e6a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e6e:	4637      	mov	r7, r6
 8008e70:	42bb      	cmp	r3, r7
 8008e72:	460e      	mov	r6, r1
 8008e74:	d9f4      	bls.n	8008e60 <_printf_i+0x118>
 8008e76:	2b08      	cmp	r3, #8
 8008e78:	d10b      	bne.n	8008e92 <_printf_i+0x14a>
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	07de      	lsls	r6, r3, #31
 8008e7e:	d508      	bpl.n	8008e92 <_printf_i+0x14a>
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	6861      	ldr	r1, [r4, #4]
 8008e84:	4299      	cmp	r1, r3
 8008e86:	bfde      	ittt	le
 8008e88:	2330      	movle	r3, #48	; 0x30
 8008e8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e92:	1b52      	subs	r2, r2, r5
 8008e94:	6122      	str	r2, [r4, #16]
 8008e96:	464b      	mov	r3, r9
 8008e98:	4621      	mov	r1, r4
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	f8cd a000 	str.w	sl, [sp]
 8008ea0:	aa03      	add	r2, sp, #12
 8008ea2:	f7ff fedf 	bl	8008c64 <_printf_common>
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d14a      	bne.n	8008f40 <_printf_i+0x1f8>
 8008eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8008eae:	b004      	add	sp, #16
 8008eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	f043 0320 	orr.w	r3, r3, #32
 8008eba:	6023      	str	r3, [r4, #0]
 8008ebc:	2778      	movs	r7, #120	; 0x78
 8008ebe:	4832      	ldr	r0, [pc, #200]	; (8008f88 <_printf_i+0x240>)
 8008ec0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	6829      	ldr	r1, [r5, #0]
 8008ec8:	061f      	lsls	r7, r3, #24
 8008eca:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ece:	d402      	bmi.n	8008ed6 <_printf_i+0x18e>
 8008ed0:	065f      	lsls	r7, r3, #25
 8008ed2:	bf48      	it	mi
 8008ed4:	b2b6      	uxthmi	r6, r6
 8008ed6:	07df      	lsls	r7, r3, #31
 8008ed8:	bf48      	it	mi
 8008eda:	f043 0320 	orrmi.w	r3, r3, #32
 8008ede:	6029      	str	r1, [r5, #0]
 8008ee0:	bf48      	it	mi
 8008ee2:	6023      	strmi	r3, [r4, #0]
 8008ee4:	b91e      	cbnz	r6, 8008eee <_printf_i+0x1a6>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	f023 0320 	bic.w	r3, r3, #32
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	2310      	movs	r3, #16
 8008ef0:	e7a6      	b.n	8008e40 <_printf_i+0xf8>
 8008ef2:	4824      	ldr	r0, [pc, #144]	; (8008f84 <_printf_i+0x23c>)
 8008ef4:	e7e4      	b.n	8008ec0 <_printf_i+0x178>
 8008ef6:	4615      	mov	r5, r2
 8008ef8:	e7bd      	b.n	8008e76 <_printf_i+0x12e>
 8008efa:	682b      	ldr	r3, [r5, #0]
 8008efc:	6826      	ldr	r6, [r4, #0]
 8008efe:	1d18      	adds	r0, r3, #4
 8008f00:	6961      	ldr	r1, [r4, #20]
 8008f02:	6028      	str	r0, [r5, #0]
 8008f04:	0635      	lsls	r5, r6, #24
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	d501      	bpl.n	8008f0e <_printf_i+0x1c6>
 8008f0a:	6019      	str	r1, [r3, #0]
 8008f0c:	e002      	b.n	8008f14 <_printf_i+0x1cc>
 8008f0e:	0670      	lsls	r0, r6, #25
 8008f10:	d5fb      	bpl.n	8008f0a <_printf_i+0x1c2>
 8008f12:	8019      	strh	r1, [r3, #0]
 8008f14:	2300      	movs	r3, #0
 8008f16:	4615      	mov	r5, r2
 8008f18:	6123      	str	r3, [r4, #16]
 8008f1a:	e7bc      	b.n	8008e96 <_printf_i+0x14e>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	2100      	movs	r1, #0
 8008f20:	1d1a      	adds	r2, r3, #4
 8008f22:	602a      	str	r2, [r5, #0]
 8008f24:	681d      	ldr	r5, [r3, #0]
 8008f26:	6862      	ldr	r2, [r4, #4]
 8008f28:	4628      	mov	r0, r5
 8008f2a:	f000 f859 	bl	8008fe0 <memchr>
 8008f2e:	b108      	cbz	r0, 8008f34 <_printf_i+0x1ec>
 8008f30:	1b40      	subs	r0, r0, r5
 8008f32:	6060      	str	r0, [r4, #4]
 8008f34:	6863      	ldr	r3, [r4, #4]
 8008f36:	6123      	str	r3, [r4, #16]
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f3e:	e7aa      	b.n	8008e96 <_printf_i+0x14e>
 8008f40:	462a      	mov	r2, r5
 8008f42:	4649      	mov	r1, r9
 8008f44:	4640      	mov	r0, r8
 8008f46:	6923      	ldr	r3, [r4, #16]
 8008f48:	47d0      	blx	sl
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	d0ad      	beq.n	8008eaa <_printf_i+0x162>
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	079b      	lsls	r3, r3, #30
 8008f52:	d413      	bmi.n	8008f7c <_printf_i+0x234>
 8008f54:	68e0      	ldr	r0, [r4, #12]
 8008f56:	9b03      	ldr	r3, [sp, #12]
 8008f58:	4298      	cmp	r0, r3
 8008f5a:	bfb8      	it	lt
 8008f5c:	4618      	movlt	r0, r3
 8008f5e:	e7a6      	b.n	8008eae <_printf_i+0x166>
 8008f60:	2301      	movs	r3, #1
 8008f62:	4632      	mov	r2, r6
 8008f64:	4649      	mov	r1, r9
 8008f66:	4640      	mov	r0, r8
 8008f68:	47d0      	blx	sl
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d09d      	beq.n	8008eaa <_printf_i+0x162>
 8008f6e:	3501      	adds	r5, #1
 8008f70:	68e3      	ldr	r3, [r4, #12]
 8008f72:	9903      	ldr	r1, [sp, #12]
 8008f74:	1a5b      	subs	r3, r3, r1
 8008f76:	42ab      	cmp	r3, r5
 8008f78:	dcf2      	bgt.n	8008f60 <_printf_i+0x218>
 8008f7a:	e7eb      	b.n	8008f54 <_printf_i+0x20c>
 8008f7c:	2500      	movs	r5, #0
 8008f7e:	f104 0619 	add.w	r6, r4, #25
 8008f82:	e7f5      	b.n	8008f70 <_printf_i+0x228>
 8008f84:	080090c7 	.word	0x080090c7
 8008f88:	080090d8 	.word	0x080090d8

08008f8c <memmove>:
 8008f8c:	4288      	cmp	r0, r1
 8008f8e:	b510      	push	{r4, lr}
 8008f90:	eb01 0402 	add.w	r4, r1, r2
 8008f94:	d902      	bls.n	8008f9c <memmove+0x10>
 8008f96:	4284      	cmp	r4, r0
 8008f98:	4623      	mov	r3, r4
 8008f9a:	d807      	bhi.n	8008fac <memmove+0x20>
 8008f9c:	1e43      	subs	r3, r0, #1
 8008f9e:	42a1      	cmp	r1, r4
 8008fa0:	d008      	beq.n	8008fb4 <memmove+0x28>
 8008fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008faa:	e7f8      	b.n	8008f9e <memmove+0x12>
 8008fac:	4601      	mov	r1, r0
 8008fae:	4402      	add	r2, r0
 8008fb0:	428a      	cmp	r2, r1
 8008fb2:	d100      	bne.n	8008fb6 <memmove+0x2a>
 8008fb4:	bd10      	pop	{r4, pc}
 8008fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fbe:	e7f7      	b.n	8008fb0 <memmove+0x24>

08008fc0 <_sbrk_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	4d05      	ldr	r5, [pc, #20]	; (8008fdc <_sbrk_r+0x1c>)
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	4608      	mov	r0, r1
 8008fca:	602b      	str	r3, [r5, #0]
 8008fcc:	f7f7 fc78 	bl	80008c0 <_sbrk>
 8008fd0:	1c43      	adds	r3, r0, #1
 8008fd2:	d102      	bne.n	8008fda <_sbrk_r+0x1a>
 8008fd4:	682b      	ldr	r3, [r5, #0]
 8008fd6:	b103      	cbz	r3, 8008fda <_sbrk_r+0x1a>
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	bd38      	pop	{r3, r4, r5, pc}
 8008fdc:	20000900 	.word	0x20000900

08008fe0 <memchr>:
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	b510      	push	{r4, lr}
 8008fe4:	b2c9      	uxtb	r1, r1
 8008fe6:	4402      	add	r2, r0
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	4618      	mov	r0, r3
 8008fec:	d101      	bne.n	8008ff2 <memchr+0x12>
 8008fee:	2000      	movs	r0, #0
 8008ff0:	e003      	b.n	8008ffa <memchr+0x1a>
 8008ff2:	7804      	ldrb	r4, [r0, #0]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	428c      	cmp	r4, r1
 8008ff8:	d1f6      	bne.n	8008fe8 <memchr+0x8>
 8008ffa:	bd10      	pop	{r4, pc}

08008ffc <_realloc_r>:
 8008ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009000:	4680      	mov	r8, r0
 8009002:	4614      	mov	r4, r2
 8009004:	460e      	mov	r6, r1
 8009006:	b921      	cbnz	r1, 8009012 <_realloc_r+0x16>
 8009008:	4611      	mov	r1, r2
 800900a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800900e:	f7ff bc45 	b.w	800889c <_malloc_r>
 8009012:	b92a      	cbnz	r2, 8009020 <_realloc_r+0x24>
 8009014:	f7ff fbda 	bl	80087cc <_free_r>
 8009018:	4625      	mov	r5, r4
 800901a:	4628      	mov	r0, r5
 800901c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009020:	f000 f81b 	bl	800905a <_malloc_usable_size_r>
 8009024:	4284      	cmp	r4, r0
 8009026:	4607      	mov	r7, r0
 8009028:	d802      	bhi.n	8009030 <_realloc_r+0x34>
 800902a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800902e:	d812      	bhi.n	8009056 <_realloc_r+0x5a>
 8009030:	4621      	mov	r1, r4
 8009032:	4640      	mov	r0, r8
 8009034:	f7ff fc32 	bl	800889c <_malloc_r>
 8009038:	4605      	mov	r5, r0
 800903a:	2800      	cmp	r0, #0
 800903c:	d0ed      	beq.n	800901a <_realloc_r+0x1e>
 800903e:	42bc      	cmp	r4, r7
 8009040:	4622      	mov	r2, r4
 8009042:	4631      	mov	r1, r6
 8009044:	bf28      	it	cs
 8009046:	463a      	movcs	r2, r7
 8009048:	f7ff fbb2 	bl	80087b0 <memcpy>
 800904c:	4631      	mov	r1, r6
 800904e:	4640      	mov	r0, r8
 8009050:	f7ff fbbc 	bl	80087cc <_free_r>
 8009054:	e7e1      	b.n	800901a <_realloc_r+0x1e>
 8009056:	4635      	mov	r5, r6
 8009058:	e7df      	b.n	800901a <_realloc_r+0x1e>

0800905a <_malloc_usable_size_r>:
 800905a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800905e:	1f18      	subs	r0, r3, #4
 8009060:	2b00      	cmp	r3, #0
 8009062:	bfbc      	itt	lt
 8009064:	580b      	ldrlt	r3, [r1, r0]
 8009066:	18c0      	addlt	r0, r0, r3
 8009068:	4770      	bx	lr
	...

0800906c <_init>:
 800906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906e:	bf00      	nop
 8009070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009072:	bc08      	pop	{r3}
 8009074:	469e      	mov	lr, r3
 8009076:	4770      	bx	lr

08009078 <_fini>:
 8009078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907a:	bf00      	nop
 800907c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907e:	bc08      	pop	{r3}
 8009080:	469e      	mov	lr, r3
 8009082:	4770      	bx	lr


Encoder_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba34  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800bb48  0800bb48  0001bb48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf80  0800bf80  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf80  0800bf80  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf80  0800bf80  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf80  0800bf80  0001bf80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf84  0800bf84  0001bf84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800bf88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d20  20000220  0800c1a8  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  20001f40  0800c1a8  00021f40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b76e  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004241  00000000  00000000  0003b9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0003fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011d5  00000000  00000000  00041368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b7c5  00000000  00000000  0004253d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b0f3  00000000  00000000  0005dd02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098b4e  00000000  00000000  00078df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007550  00000000  00000000  00111944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00118e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bb2c 	.word	0x0800bb2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	0800bb2c 	.word	0x0800bb2c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <CANCom_Init>:

extern CAN_HandleTypeDef hcan;
extern uint8_t SendBuf[8];
extern uint8_t MsgCounter;

void CANCom_Init() {
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef RxFilter = {0 };
 8001162:	463b      	mov	r3, r7
 8001164:	2228      	movs	r2, #40	; 0x28
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f007 ff6e 	bl	800904a <memset>
		RxFilter.FilterActivation = CAN_FILTER_ENABLE;
 800116e:	2301      	movs	r3, #1
 8001170:	623b      	str	r3, [r7, #32]
		RxFilter.FilterBank = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
		RxFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
		RxFilter.FilterIdHigh = RX_ID << 5;
 800117a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800117e:	603b      	str	r3, [r7, #0]
		RxFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 8001180:	2301      	movs	r3, #1
 8001182:	61bb      	str	r3, [r7, #24]
		RxFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
	HAL_CAN_ConfigFilter(&hcan, &RxFilter);
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4806      	ldr	r0, [pc, #24]	; (80011a8 <CANCom_Init+0x4c>)
 800118e:	f001 f9f0 	bl	8002572 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001192:	2102      	movs	r1, #2
 8001194:	4804      	ldr	r0, [pc, #16]	; (80011a8 <CANCom_Init+0x4c>)
 8001196:	f001 fc1a 	bl	80029ce <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan);
 800119a:	4803      	ldr	r0, [pc, #12]	; (80011a8 <CANCom_Init+0x4c>)
 800119c:	f001 fab2 	bl	8002704 <HAL_CAN_Start>
}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000023c 	.word	0x2000023c

080011ac <PID_tunning>:
 */

#include "PID_Control/PID_Control.h"

void PID_tunning(PID_HandleStruct* Controller,float Kp,float Ki,float Kd,float dt)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	603b      	str	r3, [r7, #0]
	Controller->Kp = Kp;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	601a      	str	r2, [r3, #0]
	Controller->Ki = Ki;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	605a      	str	r2, [r3, #4]
	Controller->Kd = Kd;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	609a      	str	r2, [r3, #8]
	Controller->dt = dt;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	611a      	str	r2, [r3, #16]
	Controller->Intergration_Err = 0;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
	Controller->Prev_Error = 0;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <PID_calc>:
float PID_calc(PID_HandleStruct *Controller,float input)
{
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	float Error = Controller->SetPoint - input;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	6839      	ldr	r1, [r7, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fc97 	bl	8000b30 <__aeabi_fsub>
 8001202:	4603      	mov	r3, r0
 8001204:	60fb      	str	r3, [r7, #12]
	Controller->Intergration_Err += Error * Controller->dt;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699c      	ldr	r4, [r3, #24]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fd97 	bl	8000d44 <__aeabi_fmul>
 8001216:	4603      	mov	r3, r0
 8001218:	4619      	mov	r1, r3
 800121a:	4620      	mov	r0, r4
 800121c:	f7ff fc8a 	bl	8000b34 <__addsf3>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
	float duty = Controller->Kp * Error + Controller->Ki * Controller->Intergration_Err + Controller->Kd * (Error - Controller->Prev_Error) / Controller->dt;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68f9      	ldr	r1, [r7, #12]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fd88 	bl	8000d44 <__aeabi_fmul>
 8001234:	4603      	mov	r3, r0
 8001236:	461c      	mov	r4, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4619      	mov	r1, r3
 8001242:	4610      	mov	r0, r2
 8001244:	f7ff fd7e 	bl	8000d44 <__aeabi_fmul>
 8001248:	4603      	mov	r3, r0
 800124a:	4619      	mov	r1, r3
 800124c:	4620      	mov	r0, r4
 800124e:	f7ff fc71 	bl	8000b34 <__addsf3>
 8001252:	4603      	mov	r3, r0
 8001254:	461d      	mov	r5, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689c      	ldr	r4, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	4619      	mov	r1, r3
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f7ff fc65 	bl	8000b30 <__aeabi_fsub>
 8001266:	4603      	mov	r3, r0
 8001268:	4619      	mov	r1, r3
 800126a:	4620      	mov	r0, r4
 800126c:	f7ff fd6a 	bl	8000d44 <__aeabi_fmul>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f7ff fe16 	bl	8000eac <__aeabi_fdiv>
 8001280:	4603      	mov	r3, r0
 8001282:	4619      	mov	r1, r3
 8001284:	4628      	mov	r0, r5
 8001286:	f7ff fc55 	bl	8000b34 <__addsf3>
 800128a:	4603      	mov	r3, r0
 800128c:	60bb      	str	r3, [r7, #8]
	Controller->Prev_Error = Error;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	615a      	str	r2, [r3, #20]
	return duty;
 8001294:	68bb      	ldr	r3, [r7, #8]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bdb0      	pop	{r4, r5, r7, pc}

0800129e <PID_ClearErr>:

void PID_ClearErr(PID_HandleStruct *Controller)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
	Controller->Prev_Error = 0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
	Controller->Intergration_Err = 0;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <PID_setSetPoint>:
void PID_setSetPoint(PID_HandleStruct *Controller,float SetPoint)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	Controller->SetPoint = SetPoint;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	60da      	str	r2, [r3, #12]
	PID_ClearErr(Controller);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ffe4 	bl	800129e <PID_ClearErr>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <SpeedControl_Thread>:
		.stack_size = 128 * 4,
		.priority = osPriorityHigh,
};

static void SpeedControl_Thread(void *arguments)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	SpeedControl_HandleStruct *Controller = (SpeedControl_HandleStruct *)arguments;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	617b      	str	r3, [r7, #20]
	uint32_t startTime = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
	int delayTime;
	while (1)
	{
		if (!Controller->EnThr) {
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	7c1b      	ldrb	r3, [r3, #16]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d104      	bne.n	8001302 <SpeedControl_Thread+0x22>
			osThreadSuspend(Controller->runThread);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f004 fba9 	bl	8005a54 <osThreadSuspend>
		}
		startTime = osKernelGetTickCount();
 8001302:	f004 fad5 	bl	80058b0 <osKernelGetTickCount>
 8001306:	6138      	str	r0, [r7, #16]
		float duty = PID_calc(Controller->PID, Encoder_GetSpeed_RPS(Controller->Encoder));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	689c      	ldr	r4, [r3, #8]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f004 f845 	bl	80053a0 <Encoder_GetSpeed_RPS>
 8001316:	4603      	mov	r3, r0
 8001318:	4619      	mov	r1, r3
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff ff66 	bl	80011ec <PID_calc>
 8001320:	60f8      	str	r0, [r7, #12]
		Motor_setPWM(Controller->Motor, duty);
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	68f9      	ldr	r1, [r7, #12]
 8001328:	4618      	mov	r0, r3
 800132a:	f004 f88d 	bl	8005448 <Motor_setPWM>
		delayTime = Controller->PID->dt * 1000 - (osKernelGetTickCount() - startTime);
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	490f      	ldr	r1, [pc, #60]	; (8001374 <SpeedControl_Thread+0x94>)
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fd04 	bl	8000d44 <__aeabi_fmul>
 800133c:	4603      	mov	r3, r0
 800133e:	461c      	mov	r4, r3
 8001340:	f004 fab6 	bl	80058b0 <osKernelGetTickCount>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fca2 	bl	8000c94 <__aeabi_ui2f>
 8001350:	4603      	mov	r3, r0
 8001352:	4619      	mov	r1, r3
 8001354:	4620      	mov	r0, r4
 8001356:	f7ff fbeb 	bl	8000b30 <__aeabi_fsub>
 800135a:	4603      	mov	r3, r0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff feb7 	bl	80010d0 <__aeabi_f2iz>
 8001362:	4603      	mov	r3, r0
 8001364:	60bb      	str	r3, [r7, #8]
		osDelay(delayTime > 0? delayTime : 0);
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800136c:	4618      	mov	r0, r3
 800136e:	f004 fbd9 	bl	8005b24 <osDelay>
	{
 8001372:	e7bd      	b.n	80012f0 <SpeedControl_Thread+0x10>
 8001374:	447a0000 	.word	0x447a0000

08001378 <SpeedControl_Init>:
	}
}

void SpeedControl_Init(SpeedControl_HandleStruct *Controller,
		Encoder_HandlerStruct *Encoder, Motor_HandlerStruct *Motor,
		PID_HandleStruct *PID) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	603b      	str	r3, [r7, #0]
	Controller->Encoder = Encoder;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	601a      	str	r2, [r3, #0]
	Controller->Motor = Motor;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	605a      	str	r2, [r3, #4]
	Controller->PID = PID;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	609a      	str	r2, [r3, #8]

	Controller->runThread = osThreadNew(SpeedControl_Thread, Controller, &SpeedController_attr);
 8001398:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <SpeedControl_Init+0x40>)
 800139a:	68f9      	ldr	r1, [r7, #12]
 800139c:	4807      	ldr	r0, [pc, #28]	; (80013bc <SpeedControl_Init+0x44>)
 800139e:	f004 faaf 	bl	8005900 <osThreadNew>
 80013a2:	4602      	mov	r2, r0
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	60da      	str	r2, [r3, #12]
//	osThreadSuspend(Controller->runThread);
	Controller->EnThr = 0;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2200      	movs	r2, #0
 80013ac:	741a      	strb	r2, [r3, #16]
}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000000 	.word	0x20000000
 80013bc:	080012e1 	.word	0x080012e1

080013c0 <SpeedControl_Start>:
void SpeedControl_setInterval(SpeedControl_HandleStruct *Controller,
		float Interval) {
	Controller->PID->dt = Interval;
}

void SpeedControl_Start(SpeedControl_HandleStruct *Controller) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	Controller->EnThr = 1;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	741a      	strb	r2, [r3, #16]
	osThreadResume(Controller->runThread);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 fb72 	bl	8005abc <osThreadResume>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <SpeedControl_setSpeed>:
	Controller->EnThr = 0;
	PID_ClearErr(Controller->PID);
	osThreadSuspend(Controller->runThread);
}
void SpeedControl_setSpeed(SpeedControl_HandleStruct *Controller, float speed)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
	PID_ClearErr(Controller->PID);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff55 	bl	800129e <PID_ClearErr>
	PID_setSetPoint(Controller->PID, speed);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	6839      	ldr	r1, [r7, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff60 	bl	80012c0 <PID_setSetPoint>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <SpeedControl_setTuning>:

float SpeedControl_getSpeed(SpeedControl_HandleStruct *Controller) {
//	Encoder_GetTotalCount(Encoder)
}
void SpeedControl_setTuning(SpeedControl_HandleStruct *Controller, float Kp,
		float Ki, float Kd, float dt) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af02      	add	r7, sp, #8
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	603b      	str	r3, [r7, #0]
	PID_tunning(Controller->PID, Kp, Ki, Kd, dt);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6898      	ldr	r0, [r3, #8]
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	68b9      	ldr	r1, [r7, #8]
 8001424:	f7ff fec2 	bl	80011ac <PID_tunning>
}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <__io_putchar>:

uint8_t RxBuffer[8] = {0};
CAN_RxHeaderTypeDef RxHeader;
uint8_t Turn = 0;
/* USER CODE BEGIN PV */
PUTCHAR_PROTOTYPE {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8001438:	1d39      	adds	r1, r7, #4
 800143a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800143e:	2201      	movs	r2, #1
 8001440:	4803      	ldr	r0, [pc, #12]	; (8001450 <__io_putchar+0x20>)
 8001442:	f003 fd1a 	bl	8004e7a <HAL_UART_Transmit>

	return ch;
 8001446:	687b      	ldr	r3, [r7, #4]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000033c 	.word	0x2000033c

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145a:	f000 ff39 	bl	80022d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145e:	f000 f883 	bl	8001568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001462:	f000 fa9f 	bl	80019a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001466:	f000 f9a9 	bl	80017bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800146a:	f000 fa71 	bl	8001950 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800146e:	f000 f8f9 	bl	8001664 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001472:	f000 f9f7 	bl	8001864 <MX_TIM4_Init>
  MX_CAN_Init();
 8001476:	f000 f8bd 	bl	80015f4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
	CANCom_Init();
 800147a:	f7ff fe6f 	bl	800115c <CANCom_Init>
	Motor_Init(&Motor, &htim1, TIM_CHANNEL_4, TIM_CHANNEL_1);
 800147e:	2300      	movs	r3, #0
 8001480:	220c      	movs	r2, #12
 8001482:	4927      	ldr	r1, [pc, #156]	; (8001520 <main+0xcc>)
 8001484:	4827      	ldr	r0, [pc, #156]	; (8001524 <main+0xd0>)
 8001486:	f003 ffb3 	bl	80053f0 <Motor_Init>
	Motor_start(&Motor);
 800148a:	4826      	ldr	r0, [pc, #152]	; (8001524 <main+0xd0>)
 800148c:	f004 f8cc 	bl	8005628 <Motor_start>
	Encoder_Init(&Encoder, &htim2, TIM_CHANNEL_1, 4, 3, 5, 0.8);
 8001490:	4b25      	ldr	r3, [pc, #148]	; (8001528 <main+0xd4>)
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2305      	movs	r3, #5
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	2303      	movs	r3, #3
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2304      	movs	r3, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	4922      	ldr	r1, [pc, #136]	; (800152c <main+0xd8>)
 80014a2:	4823      	ldr	r0, [pc, #140]	; (8001530 <main+0xdc>)
 80014a4:	f003 fea4 	bl	80051f0 <Encoder_Init>
	Encoder_Start(&Encoder);
 80014a8:	4821      	ldr	r0, [pc, #132]	; (8001530 <main+0xdc>)
 80014aa:	f003 fecf 	bl	800524c <Encoder_Start>
	Servo_Init(&Servo, &htim4, TIM_CHANNEL_1, 38, 8);
 80014ae:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <main+0xe0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	491f      	ldr	r1, [pc, #124]	; (8001538 <main+0xe4>)
 80014ba:	4820      	ldr	r0, [pc, #128]	; (800153c <main+0xe8>)
 80014bc:	f004 f8da 	bl	8005674 <Servo_Init>
	HAL_StatusTypeDef state = Servo_Start(&Servo);
 80014c0:	481e      	ldr	r0, [pc, #120]	; (800153c <main+0xe8>)
 80014c2:	f004 f8ef 	bl	80056a4 <Servo_Start>
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	if (state != HAL_OK)
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <main+0x86>
		HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2120      	movs	r1, #32
 80014d4:	481a      	ldr	r0, [pc, #104]	; (8001540 <main+0xec>)
 80014d6:	f001 ff27 	bl	8003328 <HAL_GPIO_WritePin>
	/*
	 * PID : 160, 8,8854, 0.04
	 */
	SpeedControl_Init(&SpeedController, &Encoder, &Motor, &PID);
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <main+0xf0>)
 80014dc:	4a11      	ldr	r2, [pc, #68]	; (8001524 <main+0xd0>)
 80014de:	4914      	ldr	r1, [pc, #80]	; (8001530 <main+0xdc>)
 80014e0:	4819      	ldr	r0, [pc, #100]	; (8001548 <main+0xf4>)
 80014e2:	f7ff ff49 	bl	8001378 <SpeedControl_Init>
	SpeedControl_setTuning(&SpeedController, 160, 8.8854, 0.045, 0.005);
 80014e6:	4b19      	ldr	r3, [pc, #100]	; (800154c <main+0xf8>)
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <main+0xfc>)
 80014ec:	4a19      	ldr	r2, [pc, #100]	; (8001554 <main+0x100>)
 80014ee:	491a      	ldr	r1, [pc, #104]	; (8001558 <main+0x104>)
 80014f0:	4815      	ldr	r0, [pc, #84]	; (8001548 <main+0xf4>)
 80014f2:	f7ff ff89 	bl	8001408 <SpeedControl_setTuning>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014f6:	f004 f975 	bl	80057e4 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014fa:	4a18      	ldr	r2, [pc, #96]	; (800155c <main+0x108>)
 80014fc:	2100      	movs	r1, #0
 80014fe:	4818      	ldr	r0, [pc, #96]	; (8001560 <main+0x10c>)
 8001500:	f004 f9fe 	bl	8005900 <osThreadNew>
 8001504:	4603      	mov	r3, r0
 8001506:	4a17      	ldr	r2, [pc, #92]	; (8001564 <main+0x110>)
 8001508:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800150a:	f004 f99d 	bl	8005848 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  char buffer[30] = {0};
	while (1) {
		HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
 800150e:	2120      	movs	r1, #32
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <main+0xec>)
 8001512:	f001 ff21 	bl	8003358 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001516:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800151a:	f000 ff0b 	bl	8002334 <HAL_Delay>
		HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
 800151e:	e7f6      	b.n	800150e <main+0xba>
 8001520:	20000264 	.word	0x20000264
 8001524:	200003dc 	.word	0x200003dc
 8001528:	3f4ccccd 	.word	0x3f4ccccd
 800152c:	200002ac 	.word	0x200002ac
 8001530:	200003b0 	.word	0x200003b0
 8001534:	42180000 	.word	0x42180000
 8001538:	200002f4 	.word	0x200002f4
 800153c:	200003fc 	.word	0x200003fc
 8001540:	40010c00 	.word	0x40010c00
 8001544:	2000040c 	.word	0x2000040c
 8001548:	20000428 	.word	0x20000428
 800154c:	3ba3d70a 	.word	0x3ba3d70a
 8001550:	3d3851ec 	.word	0x3d3851ec
 8001554:	410e2a99 	.word	0x410e2a99
 8001558:	43200000 	.word	0x43200000
 800155c:	0800bba4 	.word	0x0800bba4
 8001560:	08001add 	.word	0x08001add
 8001564:	20000384 	.word	0x20000384

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b090      	sub	sp, #64	; 0x40
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	2228      	movs	r2, #40	; 0x28
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f007 fd67 	bl	800904a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800158a:	2301      	movs	r3, #1
 800158c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800158e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001598:	2301      	movs	r3, #1
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159c:	2302      	movs	r3, #2
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 feeb 	bl	800338c <HAL_RCC_OscConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015bc:	f000 faf6 	bl	8001bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c0:	230f      	movs	r3, #15
 80015c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c4:	2302      	movs	r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2102      	movs	r1, #2
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 f958 	bl	8003890 <HAL_RCC_ClockConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015e6:	f000 fae1 	bl	8001bac <Error_Handler>
  }
}
 80015ea:	bf00      	nop
 80015ec:	3740      	adds	r7, #64	; 0x40
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_CAN_Init+0x68>)
 80015fa:	4a19      	ldr	r2, [pc, #100]	; (8001660 <MX_CAN_Init+0x6c>)
 80015fc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <MX_CAN_Init+0x68>)
 8001600:	2204      	movs	r2, #4
 8001602:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_CAN_Init+0x68>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_CAN_Init+0x68>)
 800160c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001610:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <MX_CAN_Init+0x68>)
 8001614:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001618:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <MX_CAN_Init+0x68>)
 800161c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001620:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <MX_CAN_Init+0x68>)
 8001624:	2200      	movs	r2, #0
 8001626:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_CAN_Init+0x68>)
 800162a:	2200      	movs	r2, #0
 800162c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <MX_CAN_Init+0x68>)
 8001630:	2200      	movs	r2, #0
 8001632:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_CAN_Init+0x68>)
 8001636:	2200      	movs	r2, #0
 8001638:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <MX_CAN_Init+0x68>)
 800163c:	2200      	movs	r2, #0
 800163e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <MX_CAN_Init+0x68>)
 8001642:	2200      	movs	r2, #0
 8001644:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_CAN_Init+0x68>)
 8001648:	f000 fe98 	bl	800237c <HAL_CAN_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001652:	f000 faab 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000023c 	.word	0x2000023c
 8001660:	40006400 	.word	0x40006400

08001664 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b096      	sub	sp, #88	; 0x58
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]
 8001692:	615a      	str	r2, [r3, #20]
 8001694:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2220      	movs	r2, #32
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f007 fcd4 	bl	800904a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016a2:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <MX_TIM1_Init+0x150>)
 80016a4:	4a44      	ldr	r2, [pc, #272]	; (80017b8 <MX_TIM1_Init+0x154>)
 80016a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80016a8:	4b42      	ldr	r3, [pc, #264]	; (80017b4 <MX_TIM1_Init+0x150>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ae:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <MX_TIM1_Init+0x150>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7200-1;
 80016b4:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <MX_TIM1_Init+0x150>)
 80016b6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80016ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016bc:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <MX_TIM1_Init+0x150>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016c2:	4b3c      	ldr	r3, [pc, #240]	; (80017b4 <MX_TIM1_Init+0x150>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c8:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <MX_TIM1_Init+0x150>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016ce:	4839      	ldr	r0, [pc, #228]	; (80017b4 <MX_TIM1_Init+0x150>)
 80016d0:	f002 fa9c 	bl	8003c0c <HAL_TIM_Base_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016da:	f000 fa67 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016e8:	4619      	mov	r1, r3
 80016ea:	4832      	ldr	r0, [pc, #200]	; (80017b4 <MX_TIM1_Init+0x150>)
 80016ec:	f002 ff24 	bl	8004538 <HAL_TIM_ConfigClockSource>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016f6:	f000 fa59 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016fa:	482e      	ldr	r0, [pc, #184]	; (80017b4 <MX_TIM1_Init+0x150>)
 80016fc:	f002 fb28 	bl	8003d50 <HAL_TIM_PWM_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001706:	f000 fa51 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001712:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001716:	4619      	mov	r1, r3
 8001718:	4826      	ldr	r0, [pc, #152]	; (80017b4 <MX_TIM1_Init+0x150>)
 800171a:	f003 fa9d 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001724:	f000 fa42 	bl	8001bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001728:	2360      	movs	r3, #96	; 0x60
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001734:	2300      	movs	r3, #0
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001748:	2200      	movs	r2, #0
 800174a:	4619      	mov	r1, r3
 800174c:	4819      	ldr	r0, [pc, #100]	; (80017b4 <MX_TIM1_Init+0x150>)
 800174e:	f002 fe31 	bl	80043b4 <HAL_TIM_PWM_ConfigChannel>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001758:	f000 fa28 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	220c      	movs	r2, #12
 8001762:	4619      	mov	r1, r3
 8001764:	4813      	ldr	r0, [pc, #76]	; (80017b4 <MX_TIM1_Init+0x150>)
 8001766:	f002 fe25 	bl	80043b4 <HAL_TIM_PWM_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001770:	f000 fa1c 	bl	8001bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800178c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	4619      	mov	r1, r3
 8001796:	4807      	ldr	r0, [pc, #28]	; (80017b4 <MX_TIM1_Init+0x150>)
 8001798:	f003 fabc 	bl	8004d14 <HAL_TIMEx_ConfigBreakDeadTime>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80017a2:	f000 fa03 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017a6:	4803      	ldr	r0, [pc, #12]	; (80017b4 <MX_TIM1_Init+0x150>)
 80017a8:	f000 fb34 	bl	8001e14 <HAL_TIM_MspPostInit>

}
 80017ac:	bf00      	nop
 80017ae:	3758      	adds	r7, #88	; 0x58
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000264 	.word	0x20000264
 80017b8:	40012c00 	.word	0x40012c00

080017bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08c      	sub	sp, #48	; 0x30
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2224      	movs	r2, #36	; 0x24
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f007 fc3d 	bl	800904a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017d8:	4b21      	ldr	r3, [pc, #132]	; (8001860 <MX_TIM2_Init+0xa4>)
 80017da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <MX_TIM2_Init+0xa4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <MX_TIM2_Init+0xa4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80017ec:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <MX_TIM2_Init+0xa4>)
 80017ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_TIM2_Init+0xa4>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <MX_TIM2_Init+0xa4>)
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001800:	2303      	movs	r3, #3
 8001802:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001808:	2301      	movs	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001818:	2301      	movs	r3, #1
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800181c:	2300      	movs	r3, #0
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4619      	mov	r1, r3
 800182a:	480d      	ldr	r0, [pc, #52]	; (8001860 <MX_TIM2_Init+0xa4>)
 800182c:	f002 fb8a 	bl	8003f44 <HAL_TIM_Encoder_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001836:	f000 f9b9 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	4619      	mov	r1, r3
 8001846:	4806      	ldr	r0, [pc, #24]	; (8001860 <MX_TIM2_Init+0xa4>)
 8001848:	f003 fa06 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001852:	f000 f9ab 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	3730      	adds	r7, #48	; 0x30
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200002ac 	.word	0x200002ac

08001864 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	; 0x38
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	f107 0320 	add.w	r3, r7, #32
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
 8001890:	615a      	str	r2, [r3, #20]
 8001892:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <MX_TIM4_Init+0xe4>)
 8001896:	4a2d      	ldr	r2, [pc, #180]	; (800194c <MX_TIM4_Init+0xe8>)
 8001898:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800189a:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <MX_TIM4_Init+0xe4>)
 800189c:	2247      	movs	r2, #71	; 0x47
 800189e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b29      	ldr	r3, [pc, #164]	; (8001948 <MX_TIM4_Init+0xe4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80018a6:	4b28      	ldr	r3, [pc, #160]	; (8001948 <MX_TIM4_Init+0xe4>)
 80018a8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80018ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <MX_TIM4_Init+0xe4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b4:	4b24      	ldr	r3, [pc, #144]	; (8001948 <MX_TIM4_Init+0xe4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018ba:	4823      	ldr	r0, [pc, #140]	; (8001948 <MX_TIM4_Init+0xe4>)
 80018bc:	f002 f9a6 	bl	8003c0c <HAL_TIM_Base_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80018c6:	f000 f971 	bl	8001bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d4:	4619      	mov	r1, r3
 80018d6:	481c      	ldr	r0, [pc, #112]	; (8001948 <MX_TIM4_Init+0xe4>)
 80018d8:	f002 fe2e 	bl	8004538 <HAL_TIM_ConfigClockSource>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80018e2:	f000 f963 	bl	8001bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018e6:	4818      	ldr	r0, [pc, #96]	; (8001948 <MX_TIM4_Init+0xe4>)
 80018e8:	f002 fa32 	bl	8003d50 <HAL_TIM_PWM_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80018f2:	f000 f95b 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018fe:	f107 0320 	add.w	r3, r7, #32
 8001902:	4619      	mov	r1, r3
 8001904:	4810      	ldr	r0, [pc, #64]	; (8001948 <MX_TIM4_Init+0xe4>)
 8001906:	f003 f9a7 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001910:	f000 f94c 	bl	8001bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001914:	2360      	movs	r3, #96	; 0x60
 8001916:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2200      	movs	r2, #0
 8001928:	4619      	mov	r1, r3
 800192a:	4807      	ldr	r0, [pc, #28]	; (8001948 <MX_TIM4_Init+0xe4>)
 800192c:	f002 fd42 	bl	80043b4 <HAL_TIM_PWM_ConfigChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001936:	f000 f939 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800193a:	4803      	ldr	r0, [pc, #12]	; (8001948 <MX_TIM4_Init+0xe4>)
 800193c:	f000 fa6a 	bl	8001e14 <HAL_TIM_MspPostInit>

}
 8001940:	bf00      	nop
 8001942:	3738      	adds	r7, #56	; 0x38
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200002f4 	.word	0x200002f4
 800194c:	40000800 	.word	0x40000800

08001950 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <MX_USART1_UART_Init+0x50>)
 8001958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <MX_USART1_UART_Init+0x4c>)
 800195c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001960:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_USART1_UART_Init+0x4c>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001976:	220c      	movs	r2, #12
 8001978:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <MX_USART1_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001988:	f003 fa27 	bl	8004dda <HAL_UART_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001992:	f000 f90b 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2000033c 	.word	0x2000033c
 80019a0:	40013800 	.word	0x40013800

080019a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b8:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <MX_GPIO_Init+0xd0>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a2d      	ldr	r2, [pc, #180]	; (8001a74 <MX_GPIO_Init+0xd0>)
 80019be:	f043 0310 	orr.w	r3, r3, #16
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <MX_GPIO_Init+0xd0>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <MX_GPIO_Init+0xd0>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a27      	ldr	r2, [pc, #156]	; (8001a74 <MX_GPIO_Init+0xd0>)
 80019d6:	f043 0320 	orr.w	r3, r3, #32
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <MX_GPIO_Init+0xd0>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0320 	and.w	r3, r3, #32
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <MX_GPIO_Init+0xd0>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a21      	ldr	r2, [pc, #132]	; (8001a74 <MX_GPIO_Init+0xd0>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <MX_GPIO_Init+0xd0>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <MX_GPIO_Init+0xd0>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <MX_GPIO_Init+0xd0>)
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <MX_GPIO_Init+0xd0>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDIn_GPIO_Port, LEDIn_Pin, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a1e:	4816      	ldr	r0, [pc, #88]	; (8001a78 <MX_GPIO_Init+0xd4>)
 8001a20:	f001 fc82 	bl	8003328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_EN_Pin|L_EN_Pin|GPIO_PIN_3|LEDG_Pin
 8001a24:	2200      	movs	r2, #0
 8001a26:	f24c 0138 	movw	r1, #49208	; 0xc038
 8001a2a:	4814      	ldr	r0, [pc, #80]	; (8001a7c <MX_GPIO_Init+0xd8>)
 8001a2c:	f001 fc7c 	bl	8003328 <HAL_GPIO_WritePin>
                          |LEDB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LEDIn_Pin */
  GPIO_InitStruct.Pin = LEDIn_Pin;
 8001a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDIn_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	4619      	mov	r1, r3
 8001a48:	480b      	ldr	r0, [pc, #44]	; (8001a78 <MX_GPIO_Init+0xd4>)
 8001a4a:	f001 fae9 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_EN_Pin L_EN_Pin PB3 LEDG_Pin
                           LEDB_Pin */
  GPIO_InitStruct.Pin = R_EN_Pin|L_EN_Pin|GPIO_PIN_3|LEDG_Pin
 8001a4e:	f24c 0338 	movw	r3, #49208	; 0xc038
 8001a52:	613b      	str	r3, [r7, #16]
                          |LEDB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	4619      	mov	r1, r3
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_GPIO_Init+0xd8>)
 8001a68:	f001 fada 	bl	8003020 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a6c:	bf00      	nop
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40011000 	.word	0x40011000
 8001a7c:	40010c00 	.word	0x40010c00

08001a80 <HAL_CAN_RxFifo0FullCallback>:
////		Encoder_Handle(&Encoder);
////	}
//}

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &RxHeader, RxBuffer);
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_CAN_RxFifo0FullCallback+0x4c>)
 8001a8a:	4a11      	ldr	r2, [pc, #68]	; (8001ad0 <HAL_CAN_RxFifo0FullCallback+0x50>)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fe7c 	bl	800278c <HAL_CAN_GetRxMessage>
  int16_t d0,d1;
  sscanf(RxBuffer,"0:%d;1:%d",&d0,&d1);
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	f107 020e 	add.w	r2, r7, #14
 8001a9c:	490d      	ldr	r1, [pc, #52]	; (8001ad4 <HAL_CAN_RxFifo0FullCallback+0x54>)
 8001a9e:	480b      	ldr	r0, [pc, #44]	; (8001acc <HAL_CAN_RxFifo0FullCallback+0x4c>)
 8001aa0:	f007 fa64 	bl	8008f6c <siscanf>
  if (!Turn && d0 < 100 && d1 < 100) {
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <HAL_CAN_RxFifo0FullCallback+0x58>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10a      	bne.n	8001ac2 <HAL_CAN_RxFifo0FullCallback+0x42>
 8001aac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ab0:	2b63      	cmp	r3, #99	; 0x63
 8001ab2:	dc06      	bgt.n	8001ac2 <HAL_CAN_RxFifo0FullCallback+0x42>
 8001ab4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ab8:	2b63      	cmp	r3, #99	; 0x63
 8001aba:	dc02      	bgt.n	8001ac2 <HAL_CAN_RxFifo0FullCallback+0x42>
	  Turn = 1;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_CAN_RxFifo0FullCallback+0x58>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000388 	.word	0x20000388
 8001ad0:	20000390 	.word	0x20000390
 8001ad4:	0800bb5c 	.word	0x0800bb5c
 8001ad8:	200003ac 	.word	0x200003ac

08001adc <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08e      	sub	sp, #56	; 0x38
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t speed = 7;
 8001ae4:	2307      	movs	r3, #7
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
	SpeedControl_setSpeed(&SpeedController, speed);
 8001ae8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001aea:	f7ff f8d3 	bl	8000c94 <__aeabi_ui2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4619      	mov	r1, r3
 8001af2:	481d      	ldr	r0, [pc, #116]	; (8001b68 <StartDefaultTask+0x8c>)
 8001af4:	f7ff fc74 	bl	80013e0 <SpeedControl_setSpeed>
	Servo_setAngle(&Servo, -38);
 8001af8:	491c      	ldr	r1, [pc, #112]	; (8001b6c <StartDefaultTask+0x90>)
 8001afa:	481d      	ldr	r0, [pc, #116]	; (8001b70 <StartDefaultTask+0x94>)
 8001afc:	f003 fe39 	bl	8005772 <Servo_setAngle>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8001b00:	2201      	movs	r2, #1
 8001b02:	2120      	movs	r1, #32
 8001b04:	481b      	ldr	r0, [pc, #108]	; (8001b74 <StartDefaultTask+0x98>)
 8001b06:	f001 fc0f 	bl	8003328 <HAL_GPIO_WritePin>
	char buf[30] = "";
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]
 8001b1e:	615a      	str	r2, [r3, #20]
 8001b20:	831a      	strh	r2, [r3, #24]
	uint32_t count = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
	int len = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	62fb      	str	r3, [r7, #44]	; 0x2c
	len = sprintf(buf, "Start task\r\n");
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	4912      	ldr	r1, [pc, #72]	; (8001b78 <StartDefaultTask+0x9c>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f007 f9fb 	bl	8008f2c <siprintf>
 8001b36:	62f8      	str	r0, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, len, 100);
 8001b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	f107 010c 	add.w	r1, r7, #12
 8001b40:	2364      	movs	r3, #100	; 0x64
 8001b42:	480e      	ldr	r0, [pc, #56]	; (8001b7c <StartDefaultTask+0xa0>)
 8001b44:	f003 f999 	bl	8004e7a <HAL_UART_Transmit>
	SpeedControl_Start(&SpeedController);
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <StartDefaultTask+0x8c>)
 8001b4a:	f7ff fc39 	bl	80013c0 <SpeedControl_Start>
		HAL_GPIO_TogglePin(LEDIn_GPIO_Port, LEDIn_Pin);
		len = sprintf(buf, "Enc:%ld/%ld\r\n", count, speed * 100);
		HAL_UART_Transmit(&huart1, (uint8_t*) buf, len, 100);
		osDelay(200);
#endif
		if (Turn) {
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <StartDefaultTask+0xa4>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0fb      	beq.n	8001b4e <StartDefaultTask+0x72>
			Servo_setAngle(&Servo, 20);
 8001b56:	490b      	ldr	r1, [pc, #44]	; (8001b84 <StartDefaultTask+0xa8>)
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <StartDefaultTask+0x94>)
 8001b5a:	f003 fe0a 	bl	8005772 <Servo_setAngle>
			Turn = 0;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <StartDefaultTask+0xa4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
		if (Turn) {
 8001b64:	e7f3      	b.n	8001b4e <StartDefaultTask+0x72>
 8001b66:	bf00      	nop
 8001b68:	20000428 	.word	0x20000428
 8001b6c:	c2180000 	.word	0xc2180000
 8001b70:	200003fc 	.word	0x200003fc
 8001b74:	40010c00 	.word	0x40010c00
 8001b78:	0800bb68 	.word	0x0800bb68
 8001b7c:	2000033c 	.word	0x2000033c
 8001b80:	200003ac 	.word	0x200003ac
 8001b84:	41a00000 	.word	0x41a00000

08001b88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b9a:	f000 fbaf 	bl	80022fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40000400 	.word	0x40000400

08001bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb0:	b672      	cpsid	i
}
 8001bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
//  printf("Error");
	while (1) {
 8001bb4:	e7fe      	b.n	8001bb4 <Error_Handler+0x8>
	...

08001bb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_MspInit+0x68>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <HAL_MspInit+0x68>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6193      	str	r3, [r2, #24]
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_MspInit+0x68>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_MspInit+0x68>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <HAL_MspInit+0x68>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_MspInit+0x68>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	210f      	movs	r1, #15
 8001bf2:	f06f 0001 	mvn.w	r0, #1
 8001bf6:	f001 f9e8 	bl	8002fca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_MspInit+0x6c>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <HAL_MspInit+0x6c>)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40010000 	.word	0x40010000

08001c28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a35      	ldr	r2, [pc, #212]	; (8001d18 <HAL_CAN_MspInit+0xf0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d163      	bne.n	8001d10 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c48:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_CAN_MspInit+0xf4>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	4a33      	ldr	r2, [pc, #204]	; (8001d1c <HAL_CAN_MspInit+0xf4>)
 8001c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c52:	61d3      	str	r3, [r2, #28]
 8001c54:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <HAL_CAN_MspInit+0xf4>)
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c60:	4b2e      	ldr	r3, [pc, #184]	; (8001d1c <HAL_CAN_MspInit+0xf4>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	4a2d      	ldr	r2, [pc, #180]	; (8001d1c <HAL_CAN_MspInit+0xf4>)
 8001c66:	f043 0308 	orr.w	r3, r3, #8
 8001c6a:	6193      	str	r3, [r2, #24]
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_CAN_MspInit+0xf4>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4824      	ldr	r0, [pc, #144]	; (8001d20 <HAL_CAN_MspInit+0xf8>)
 8001c8e:	f001 f9c7 	bl	8003020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	481e      	ldr	r0, [pc, #120]	; (8001d20 <HAL_CAN_MspInit+0xf8>)
 8001ca8:	f001 f9ba 	bl	8003020 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_CAN_MspInit+0xfc>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cca:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <HAL_CAN_MspInit+0xfc>)
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2105      	movs	r1, #5
 8001cd4:	2013      	movs	r0, #19
 8001cd6:	f001 f978 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001cda:	2013      	movs	r0, #19
 8001cdc:	f001 f991 	bl	8003002 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2105      	movs	r1, #5
 8001ce4:	2014      	movs	r0, #20
 8001ce6:	f001 f970 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001cea:	2014      	movs	r0, #20
 8001cec:	f001 f989 	bl	8003002 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2105      	movs	r1, #5
 8001cf4:	2015      	movs	r0, #21
 8001cf6:	f001 f968 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001cfa:	2015      	movs	r0, #21
 8001cfc:	f001 f981 	bl	8003002 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2105      	movs	r1, #5
 8001d04:	2016      	movs	r0, #22
 8001d06:	f001 f960 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001d0a:	2016      	movs	r0, #22
 8001d0c:	f001 f979 	bl	8003002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d10:	bf00      	nop
 8001d12:	3728      	adds	r7, #40	; 0x28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40006400 	.word	0x40006400
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010c00 	.word	0x40010c00
 8001d24:	40010000 	.word	0x40010000

08001d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a16      	ldr	r2, [pc, #88]	; (8001d90 <HAL_TIM_Base_MspInit+0x68>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d10c      	bne.n	8001d54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <HAL_TIM_Base_MspInit+0x6c>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <HAL_TIM_Base_MspInit+0x6c>)
 8001d40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d44:	6193      	str	r3, [r2, #24]
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <HAL_TIM_Base_MspInit+0x6c>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d52:	e018      	b.n	8001d86 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <HAL_TIM_Base_MspInit+0x70>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d113      	bne.n	8001d86 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_TIM_Base_MspInit+0x6c>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <HAL_TIM_Base_MspInit+0x6c>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	61d3      	str	r3, [r2, #28]
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_TIM_Base_MspInit+0x6c>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2105      	movs	r1, #5
 8001d7a:	201e      	movs	r0, #30
 8001d7c:	f001 f925 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d80:	201e      	movs	r0, #30
 8001d82:	f001 f93e 	bl	8003002 <HAL_NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40012c00 	.word	0x40012c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40000800 	.word	0x40000800

08001d9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dba:	d123      	bne.n	8001e04 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x70>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x70>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	61d3      	str	r3, [r2, #28]
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x70>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x70>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x70>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_TIM_Encoder_MspInit+0x70>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dec:	2303      	movs	r3, #3
 8001dee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4804      	ldr	r0, [pc, #16]	; (8001e10 <HAL_TIM_Encoder_MspInit+0x74>)
 8001e00:	f001 f90e 	bl	8003020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e04:	bf00      	nop
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40010800 	.word	0x40010800

08001e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <HAL_TIM_MspPostInit+0x98>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d119      	bne.n	8001e68 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e34:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_TIM_MspPostInit+0x9c>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <HAL_TIM_MspPostInit+0x9c>)
 8001e3a:	f043 0304 	orr.w	r3, r3, #4
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_TIM_MspPostInit+0x9c>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8001e4c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001e50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2302      	movs	r3, #2
 8001e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4814      	ldr	r0, [pc, #80]	; (8001eb4 <HAL_TIM_MspPostInit+0xa0>)
 8001e62:	f001 f8dd 	bl	8003020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e66:	e01c      	b.n	8001ea2 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <HAL_TIM_MspPostInit+0xa4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d117      	bne.n	8001ea2 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <HAL_TIM_MspPostInit+0x9c>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <HAL_TIM_MspPostInit+0x9c>)
 8001e78:	f043 0308 	orr.w	r3, r3, #8
 8001e7c:	6193      	str	r3, [r2, #24]
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_TIM_MspPostInit+0x9c>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e8a:	2340      	movs	r3, #64	; 0x40
 8001e8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e96:	f107 0310 	add.w	r3, r7, #16
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4807      	ldr	r0, [pc, #28]	; (8001ebc <HAL_TIM_MspPostInit+0xa8>)
 8001e9e:	f001 f8bf 	bl	8003020 <HAL_GPIO_Init>
}
 8001ea2:	bf00      	nop
 8001ea4:	3720      	adds	r7, #32
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40012c00 	.word	0x40012c00
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010800 	.word	0x40010800
 8001eb8:	40000800 	.word	0x40000800
 8001ebc:	40010c00 	.word	0x40010c00

08001ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0310 	add.w	r3, r7, #16
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <HAL_UART_MspInit+0x8c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d131      	bne.n	8001f44 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_UART_MspInit+0x90>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4a1a      	ldr	r2, [pc, #104]	; (8001f50 <HAL_UART_MspInit+0x90>)
 8001ee6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eea:	6193      	str	r3, [r2, #24]
 8001eec:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <HAL_UART_MspInit+0x90>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_UART_MspInit+0x90>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <HAL_UART_MspInit+0x90>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_UART_MspInit+0x90>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	4619      	mov	r1, r3
 8001f24:	480b      	ldr	r0, [pc, #44]	; (8001f54 <HAL_UART_MspInit+0x94>)
 8001f26:	f001 f87b 	bl	8003020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4805      	ldr	r0, [pc, #20]	; (8001f54 <HAL_UART_MspInit+0x94>)
 8001f40:	f001 f86e 	bl	8003020 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f44:	bf00      	nop
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40013800 	.word	0x40013800
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010800 	.word	0x40010800

08001f58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08e      	sub	sp, #56	; 0x38
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001f6e:	4b34      	ldr	r3, [pc, #208]	; (8002040 <HAL_InitTick+0xe8>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a33      	ldr	r2, [pc, #204]	; (8002040 <HAL_InitTick+0xe8>)
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	61d3      	str	r3, [r2, #28]
 8001f7a:	4b31      	ldr	r3, [pc, #196]	; (8002040 <HAL_InitTick+0xe8>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f86:	f107 0210 	add.w	r2, r7, #16
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 fded 	bl	8003b70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d103      	bne.n	8001fa8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fa0:	f001 fdbe 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8001fa4:	6378      	str	r0, [r7, #52]	; 0x34
 8001fa6:	e004      	b.n	8001fb2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fa8:	f001 fdba 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8001fac:	4603      	mov	r3, r0
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb4:	4a23      	ldr	r2, [pc, #140]	; (8002044 <HAL_InitTick+0xec>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0c9b      	lsrs	r3, r3, #18
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_InitTick+0xf0>)
 8001fc2:	4a22      	ldr	r2, [pc, #136]	; (800204c <HAL_InitTick+0xf4>)
 8001fc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_InitTick+0xf0>)
 8001fc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fcc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001fce:	4a1e      	ldr	r2, [pc, #120]	; (8002048 <HAL_InitTick+0xf0>)
 8001fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001fd4:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <HAL_InitTick+0xf0>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fda:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_InitTick+0xf0>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_InitTick+0xf0>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001fe6:	4818      	ldr	r0, [pc, #96]	; (8002048 <HAL_InitTick+0xf0>)
 8001fe8:	f001 fe10 	bl	8003c0c <HAL_TIM_Base_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ff2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d11b      	bne.n	8002032 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001ffa:	4813      	ldr	r0, [pc, #76]	; (8002048 <HAL_InitTick+0xf0>)
 8001ffc:	f001 fe56 	bl	8003cac <HAL_TIM_Base_Start_IT>
 8002000:	4603      	mov	r3, r0
 8002002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002006:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800200a:	2b00      	cmp	r3, #0
 800200c:	d111      	bne.n	8002032 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800200e:	201d      	movs	r0, #29
 8002010:	f000 fff7 	bl	8003002 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b0f      	cmp	r3, #15
 8002018:	d808      	bhi.n	800202c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800201a:	2200      	movs	r2, #0
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	201d      	movs	r0, #29
 8002020:	f000 ffd3 	bl	8002fca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002024:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <HAL_InitTick+0xf8>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e002      	b.n	8002032 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002032:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002036:	4618      	mov	r0, r3
 8002038:	3738      	adds	r7, #56	; 0x38
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	431bde83 	.word	0x431bde83
 8002048:	2000043c 	.word	0x2000043c
 800204c:	40000400 	.word	0x40000400
 8002050:	20000028 	.word	0x20000028

08002054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <NMI_Handler+0x4>

0800205a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <HardFault_Handler+0x4>

08002060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <MemManage_Handler+0x4>

08002066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <BusFault_Handler+0x4>

0800206c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <UsageFault_Handler+0x4>

08002072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
	...

08002080 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8002086:	f000 fcc7 	bl	8002a18 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000023c 	.word	0x2000023c

08002094 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800209a:	f000 fcbd 	bl	8002a18 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000023c 	.word	0x2000023c

080020a8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <CAN1_RX1_IRQHandler+0x10>)
 80020ae:	f000 fcb3 	bl	8002a18 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000023c 	.word	0x2000023c

080020bc <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <CAN1_SCE_IRQHandler+0x10>)
 80020c2:	f000 fca9 	bl	8002a18 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000023c 	.word	0x2000023c

080020d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <TIM3_IRQHandler+0x10>)
 80020d6:	f002 f865 	bl	80041a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000043c 	.word	0x2000043c

080020e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <TIM4_IRQHandler+0x10>)
 80020ea:	f002 f85b 	bl	80041a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200002f4 	.word	0x200002f4

080020f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return 1;
 80020fc:	2301      	movs	r3, #1
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <_kill>:

int _kill(int pid, int sig)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002110:	f006 ffee 	bl	80090f0 <__errno>
 8002114:	4603      	mov	r3, r0
 8002116:	2216      	movs	r2, #22
 8002118:	601a      	str	r2, [r3, #0]
  return -1;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <_exit>:

void _exit (int status)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800212e:	f04f 31ff 	mov.w	r1, #4294967295
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ffe7 	bl	8002106 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002138:	e7fe      	b.n	8002138 <_exit+0x12>

0800213a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	e00a      	b.n	8002162 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800214c:	f3af 8000 	nop.w
 8002150:	4601      	mov	r1, r0
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	60ba      	str	r2, [r7, #8]
 8002158:	b2ca      	uxtb	r2, r1
 800215a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	3301      	adds	r3, #1
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	429a      	cmp	r2, r3
 8002168:	dbf0      	blt.n	800214c <_read+0x12>
  }

  return len;
 800216a:	687b      	ldr	r3, [r7, #4]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e009      	b.n	800219a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	60ba      	str	r2, [r7, #8]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff f94e 	bl	8001430 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	3301      	adds	r3, #1
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	429a      	cmp	r2, r3
 80021a0:	dbf1      	blt.n	8002186 <_write+0x12>
  }
  return len;
 80021a2:	687b      	ldr	r3, [r7, #4]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <_close>:

int _close(int file)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr

080021c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d2:	605a      	str	r2, [r3, #4]
  return 0;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <_isatty>:

int _isatty(int file)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021e8:	2301      	movs	r3, #1
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <_sbrk+0x5c>)
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <_sbrk+0x60>)
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <_sbrk+0x64>)
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <_sbrk+0x68>)
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d207      	bcs.n	800224c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800223c:	f006 ff58 	bl	80090f0 <__errno>
 8002240:	4603      	mov	r3, r0
 8002242:	220c      	movs	r2, #12
 8002244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	e009      	b.n	8002260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <_sbrk+0x64>)
 800225c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225e:	68fb      	ldr	r3, [r7, #12]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20005000 	.word	0x20005000
 800226c:	00000400 	.word	0x00000400
 8002270:	20000484 	.word	0x20000484
 8002274:	20001f40 	.word	0x20001f40

08002278 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002284:	f7ff fff8 	bl	8002278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002288:	480b      	ldr	r0, [pc, #44]	; (80022b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800228a:	490c      	ldr	r1, [pc, #48]	; (80022bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800228c:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002290:	e002      	b.n	8002298 <LoopCopyDataInit>

08002292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002296:	3304      	adds	r3, #4

08002298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800229a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800229c:	d3f9      	bcc.n	8002292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229e:	4a09      	ldr	r2, [pc, #36]	; (80022c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022a0:	4c09      	ldr	r4, [pc, #36]	; (80022c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a4:	e001      	b.n	80022aa <LoopFillZerobss>

080022a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a8:	3204      	adds	r2, #4

080022aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022ac:	d3fb      	bcc.n	80022a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ae:	f006 ff25 	bl	80090fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022b2:	f7ff f8cf 	bl	8001454 <main>
  bx lr
 80022b6:	4770      	bx	lr
  ldr r0, =_sdata
 80022b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022bc:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80022c0:	0800bf88 	.word	0x0800bf88
  ldr r2, =_sbss
 80022c4:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80022c8:	20001f40 	.word	0x20001f40

080022cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022cc:	e7fe      	b.n	80022cc <ADC1_2_IRQHandler>
	...

080022d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <HAL_Init+0x28>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <HAL_Init+0x28>)
 80022da:	f043 0310 	orr.w	r3, r3, #16
 80022de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e0:	2003      	movs	r0, #3
 80022e2:	f000 fe67 	bl	8002fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022e6:	200f      	movs	r0, #15
 80022e8:	f7ff fe36 	bl	8001f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022ec:	f7ff fc64 	bl	8001bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40022000 	.word	0x40022000

080022fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_IncTick+0x1c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_IncTick+0x20>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4413      	add	r3, r2
 800230c:	4a03      	ldr	r2, [pc, #12]	; (800231c <HAL_IncTick+0x20>)
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	2000002c 	.word	0x2000002c
 800231c:	20000488 	.word	0x20000488

08002320 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return uwTick;
 8002324:	4b02      	ldr	r3, [pc, #8]	; (8002330 <HAL_GetTick+0x10>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	20000488 	.word	0x20000488

08002334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff fff0 	bl	8002320 <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d005      	beq.n	800235a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_Delay+0x44>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800235a:	bf00      	nop
 800235c:	f7ff ffe0 	bl	8002320 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d8f7      	bhi.n	800235c <HAL_Delay+0x28>
  {
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000002c 	.word	0x2000002c

0800237c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0ed      	b.n	800256a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fc44 	bl	8001c28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b0:	f7ff ffb6 	bl	8002320 <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023b6:	e012      	b.n	80023de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023b8:	f7ff ffb2 	bl	8002320 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b0a      	cmp	r3, #10
 80023c4:	d90b      	bls.n	80023de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2205      	movs	r2, #5
 80023d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0c5      	b.n	800256a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0e5      	beq.n	80023b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0202 	bic.w	r2, r2, #2
 80023fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023fc:	f7ff ff90 	bl	8002320 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002402:	e012      	b.n	800242a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002404:	f7ff ff8c 	bl	8002320 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b0a      	cmp	r3, #10
 8002410:	d90b      	bls.n	800242a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2205      	movs	r2, #5
 8002422:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e09f      	b.n	800256a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1e5      	bne.n	8002404 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7e1b      	ldrb	r3, [r3, #24]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d108      	bne.n	8002452 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e007      	b.n	8002462 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	7e5b      	ldrb	r3, [r3, #25]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d108      	bne.n	800247c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	e007      	b.n	800248c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800248a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7e9b      	ldrb	r3, [r3, #26]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d108      	bne.n	80024a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0220 	orr.w	r2, r2, #32
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e007      	b.n	80024b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0220 	bic.w	r2, r2, #32
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7edb      	ldrb	r3, [r3, #27]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d108      	bne.n	80024d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0210 	bic.w	r2, r2, #16
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	e007      	b.n	80024e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0210 	orr.w	r2, r2, #16
 80024de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7f1b      	ldrb	r3, [r3, #28]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d108      	bne.n	80024fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0208 	orr.w	r2, r2, #8
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	e007      	b.n	800250a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0208 	bic.w	r2, r2, #8
 8002508:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7f5b      	ldrb	r3, [r3, #29]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d108      	bne.n	8002524 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0204 	orr.w	r2, r2, #4
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	e007      	b.n	8002534 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0204 	bic.w	r2, r2, #4
 8002532:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	ea42 0103 	orr.w	r1, r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	1e5a      	subs	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002572:	b480      	push	{r7}
 8002574:	b087      	sub	sp, #28
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002588:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800258a:	7cfb      	ldrb	r3, [r7, #19]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d003      	beq.n	8002598 <HAL_CAN_ConfigFilter+0x26>
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	2b02      	cmp	r3, #2
 8002594:	f040 80aa 	bne.w	80026ec <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800259e:	f043 0201 	orr.w	r2, r3, #1
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	2201      	movs	r2, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	401a      	ands	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d123      	bne.n	800261a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	401a      	ands	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3248      	adds	r2, #72	; 0x48
 80025fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800260e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002610:	6979      	ldr	r1, [r7, #20]
 8002612:	3348      	adds	r3, #72	; 0x48
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	440b      	add	r3, r1
 8002618:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d122      	bne.n	8002668 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	431a      	orrs	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002642:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3248      	adds	r2, #72	; 0x48
 8002648:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800265c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800265e:	6979      	ldr	r1, [r7, #20]
 8002660:	3348      	adds	r3, #72	; 0x48
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	43db      	mvns	r3, r3
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002682:	e007      	b.n	8002694 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	431a      	orrs	r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d109      	bne.n	80026b0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	401a      	ands	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80026ae:	e007      	b.n	80026c0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d107      	bne.n	80026d8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026de:	f023 0201 	bic.w	r2, r3, #1
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e006      	b.n	80026fa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
  }
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b01      	cmp	r3, #1
 8002716:	d12e      	bne.n	8002776 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0201 	bic.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002730:	f7ff fdf6 	bl	8002320 <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002736:	e012      	b.n	800275e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002738:	f7ff fdf2 	bl	8002320 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b0a      	cmp	r3, #10
 8002744:	d90b      	bls.n	800275e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2205      	movs	r2, #5
 8002756:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e012      	b.n	8002784 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e5      	bne.n	8002738 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	e006      	b.n	8002784 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
  }
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d003      	beq.n	80027b0 <HAL_CAN_GetRxMessage+0x24>
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	f040 8103 	bne.w	80029b6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10e      	bne.n	80027d4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d116      	bne.n	80027f2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0f7      	b.n	80029c4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d107      	bne.n	80027f2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0e8      	b.n	80029c4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	331b      	adds	r3, #27
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	4413      	add	r3, r2
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0204 	and.w	r2, r3, #4
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10c      	bne.n	800282a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	331b      	adds	r3, #27
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	4413      	add	r3, r2
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	0d5b      	lsrs	r3, r3, #21
 8002820:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e00b      	b.n	8002842 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	331b      	adds	r3, #27
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	4413      	add	r3, r2
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	08db      	lsrs	r3, r3, #3
 800283a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	331b      	adds	r3, #27
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	4413      	add	r3, r2
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0202 	and.w	r2, r3, #2
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	331b      	adds	r3, #27
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	4413      	add	r3, r2
 8002864:	3304      	adds	r3, #4
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2208      	movs	r2, #8
 8002874:	611a      	str	r2, [r3, #16]
 8002876:	e00b      	b.n	8002890 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	331b      	adds	r3, #27
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	4413      	add	r3, r2
 8002884:	3304      	adds	r3, #4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 020f 	and.w	r2, r3, #15
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	331b      	adds	r3, #27
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	4413      	add	r3, r2
 800289c:	3304      	adds	r3, #4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	331b      	adds	r3, #27
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	4413      	add	r3, r2
 80028b4:	3304      	adds	r3, #4
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	4413      	add	r3, r2
 80028e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	0a1a      	lsrs	r2, r3, #8
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	3301      	adds	r3, #1
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0c1a      	lsrs	r2, r3, #16
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	3302      	adds	r3, #2
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	4413      	add	r3, r2
 8002914:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	0e1a      	lsrs	r2, r3, #24
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	3303      	adds	r3, #3
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	4413      	add	r3, r2
 800292e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	3304      	adds	r3, #4
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	4413      	add	r3, r2
 8002946:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0a1a      	lsrs	r2, r3, #8
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	3305      	adds	r3, #5
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	4413      	add	r3, r2
 8002960:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	0c1a      	lsrs	r2, r3, #16
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	3306      	adds	r3, #6
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	4413      	add	r3, r2
 800297a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0e1a      	lsrs	r2, r3, #24
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	3307      	adds	r3, #7
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d108      	bne.n	80029a2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0220 	orr.w	r2, r2, #32
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	e007      	b.n	80029b2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0220 	orr.w	r2, r2, #32
 80029b0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e006      	b.n	80029c4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	371c      	adds	r7, #28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d002      	beq.n	80029ec <HAL_CAN_ActivateNotification+0x1e>
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d109      	bne.n	8002a00 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6959      	ldr	r1, [r3, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	e006      	b.n	8002a0e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
  }
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d07c      	beq.n	8002b58 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d023      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f983 	bl	8002d86 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a80:	e016      	b.n	8002ab0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d004      	beq.n	8002a96 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
 8002a94:	e00c      	b.n	8002ab0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d004      	beq.n	8002aaa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa8:	e002      	b.n	8002ab0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f986 	bl	8002dbc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d024      	beq.n	8002b04 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ac2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f962 	bl	8002d98 <HAL_CAN_TxMailbox1CompleteCallback>
 8002ad4:	e016      	b.n	8002b04 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae8:	e00c      	b.n	8002b04 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d004      	beq.n	8002afe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
 8002afc:	e002      	b.n	8002b04 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f965 	bl	8002dce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d024      	beq.n	8002b58 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f941 	bl	8002daa <HAL_CAN_TxMailbox2CompleteCallback>
 8002b28:	e016      	b.n	8002b58 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d004      	beq.n	8002b3e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3c:	e00c      	b.n	8002b58 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d004      	beq.n	8002b52 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b50:	e002      	b.n	8002b58 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f944 	bl	8002de0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00c      	beq.n	8002b7c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2210      	movs	r2, #16
 8002b7a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d006      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2208      	movs	r2, #8
 8002b96:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7fe ff71 	bl	8001a80 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d009      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f91b 	bl	8002df2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00c      	beq.n	8002be0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2210      	movs	r2, #16
 8002bde:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d006      	beq.n	8002c02 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2208      	movs	r2, #8
 8002bfa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f90a 	bl	8002e16 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d009      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f8f2 	bl	8002e04 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00b      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d006      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2210      	movs	r2, #16
 8002c3a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f8f3 	bl	8002e28 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00b      	beq.n	8002c64 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2208      	movs	r2, #8
 8002c5c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f8eb 	bl	8002e3a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d07b      	beq.n	8002d66 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d072      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	f043 0302 	orr.w	r3, r3, #2
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d008      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	f043 0304 	orr.w	r3, r3, #4
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d043      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d03e      	beq.n	8002d5e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ce6:	2b60      	cmp	r3, #96	; 0x60
 8002ce8:	d02b      	beq.n	8002d42 <HAL_CAN_IRQHandler+0x32a>
 8002cea:	2b60      	cmp	r3, #96	; 0x60
 8002cec:	d82e      	bhi.n	8002d4c <HAL_CAN_IRQHandler+0x334>
 8002cee:	2b50      	cmp	r3, #80	; 0x50
 8002cf0:	d022      	beq.n	8002d38 <HAL_CAN_IRQHandler+0x320>
 8002cf2:	2b50      	cmp	r3, #80	; 0x50
 8002cf4:	d82a      	bhi.n	8002d4c <HAL_CAN_IRQHandler+0x334>
 8002cf6:	2b40      	cmp	r3, #64	; 0x40
 8002cf8:	d019      	beq.n	8002d2e <HAL_CAN_IRQHandler+0x316>
 8002cfa:	2b40      	cmp	r3, #64	; 0x40
 8002cfc:	d826      	bhi.n	8002d4c <HAL_CAN_IRQHandler+0x334>
 8002cfe:	2b30      	cmp	r3, #48	; 0x30
 8002d00:	d010      	beq.n	8002d24 <HAL_CAN_IRQHandler+0x30c>
 8002d02:	2b30      	cmp	r3, #48	; 0x30
 8002d04:	d822      	bhi.n	8002d4c <HAL_CAN_IRQHandler+0x334>
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	d002      	beq.n	8002d10 <HAL_CAN_IRQHandler+0x2f8>
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	d005      	beq.n	8002d1a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d0e:	e01d      	b.n	8002d4c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	f043 0308 	orr.w	r3, r3, #8
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d18:	e019      	b.n	8002d4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	f043 0310 	orr.w	r3, r3, #16
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d22:	e014      	b.n	8002d4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	f043 0320 	orr.w	r3, r3, #32
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d2c:	e00f      	b.n	8002d4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d36:	e00a      	b.n	8002d4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d40:	e005      	b.n	8002d4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d4a:	e000      	b.n	8002d4e <HAL_CAN_IRQHandler+0x336>
            break;
 8002d4c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d5c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2204      	movs	r2, #4
 8002d64:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f867 	bl	8002e4c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3728      	adds	r7, #40	; 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
	...

08002e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e92:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	60d3      	str	r3, [r2, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	f003 0307 	and.w	r3, r3, #7
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	db0b      	blt.n	8002eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	4906      	ldr	r1, [pc, #24]	; (8002ef8 <__NVIC_EnableIRQ+0x34>)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	e000e100 	.word	0xe000e100

08002efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	6039      	str	r1, [r7, #0]
 8002f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	db0a      	blt.n	8002f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	490c      	ldr	r1, [pc, #48]	; (8002f48 <__NVIC_SetPriority+0x4c>)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	0112      	lsls	r2, r2, #4
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	440b      	add	r3, r1
 8002f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f24:	e00a      	b.n	8002f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4908      	ldr	r1, [pc, #32]	; (8002f4c <__NVIC_SetPriority+0x50>)
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	3b04      	subs	r3, #4
 8002f34:	0112      	lsls	r2, r2, #4
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	440b      	add	r3, r1
 8002f3a:	761a      	strb	r2, [r3, #24]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000e100 	.word	0xe000e100
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	; 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f1c3 0307 	rsb	r3, r3, #7
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	bf28      	it	cs
 8002f6e:	2304      	movcs	r3, #4
 8002f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3304      	adds	r3, #4
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d902      	bls.n	8002f80 <NVIC_EncodePriority+0x30>
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3b03      	subs	r3, #3
 8002f7e:	e000      	b.n	8002f82 <NVIC_EncodePriority+0x32>
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	f04f 32ff 	mov.w	r2, #4294967295
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	401a      	ands	r2, r3
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f98:	f04f 31ff 	mov.w	r1, #4294967295
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	43d9      	mvns	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa8:	4313      	orrs	r3, r2
         );
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3724      	adds	r7, #36	; 0x24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff ff4f 	bl	8002e60 <__NVIC_SetPriorityGrouping>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fdc:	f7ff ff64 	bl	8002ea8 <__NVIC_GetPriorityGrouping>
 8002fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	6978      	ldr	r0, [r7, #20]
 8002fe8:	f7ff ffb2 	bl	8002f50 <NVIC_EncodePriority>
 8002fec:	4602      	mov	r2, r0
 8002fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff ff81 	bl	8002efc <__NVIC_SetPriority>
}
 8002ffa:	bf00      	nop
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800300c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff57 	bl	8002ec4 <__NVIC_EnableIRQ>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003020:	b480      	push	{r7}
 8003022:	b08b      	sub	sp, #44	; 0x2c
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800302a:	2300      	movs	r3, #0
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003032:	e169      	b.n	8003308 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003034:	2201      	movs	r2, #1
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	429a      	cmp	r2, r3
 800304e:	f040 8158 	bne.w	8003302 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4a9a      	ldr	r2, [pc, #616]	; (80032c0 <HAL_GPIO_Init+0x2a0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d05e      	beq.n	800311a <HAL_GPIO_Init+0xfa>
 800305c:	4a98      	ldr	r2, [pc, #608]	; (80032c0 <HAL_GPIO_Init+0x2a0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d875      	bhi.n	800314e <HAL_GPIO_Init+0x12e>
 8003062:	4a98      	ldr	r2, [pc, #608]	; (80032c4 <HAL_GPIO_Init+0x2a4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d058      	beq.n	800311a <HAL_GPIO_Init+0xfa>
 8003068:	4a96      	ldr	r2, [pc, #600]	; (80032c4 <HAL_GPIO_Init+0x2a4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d86f      	bhi.n	800314e <HAL_GPIO_Init+0x12e>
 800306e:	4a96      	ldr	r2, [pc, #600]	; (80032c8 <HAL_GPIO_Init+0x2a8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d052      	beq.n	800311a <HAL_GPIO_Init+0xfa>
 8003074:	4a94      	ldr	r2, [pc, #592]	; (80032c8 <HAL_GPIO_Init+0x2a8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d869      	bhi.n	800314e <HAL_GPIO_Init+0x12e>
 800307a:	4a94      	ldr	r2, [pc, #592]	; (80032cc <HAL_GPIO_Init+0x2ac>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d04c      	beq.n	800311a <HAL_GPIO_Init+0xfa>
 8003080:	4a92      	ldr	r2, [pc, #584]	; (80032cc <HAL_GPIO_Init+0x2ac>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d863      	bhi.n	800314e <HAL_GPIO_Init+0x12e>
 8003086:	4a92      	ldr	r2, [pc, #584]	; (80032d0 <HAL_GPIO_Init+0x2b0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d046      	beq.n	800311a <HAL_GPIO_Init+0xfa>
 800308c:	4a90      	ldr	r2, [pc, #576]	; (80032d0 <HAL_GPIO_Init+0x2b0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d85d      	bhi.n	800314e <HAL_GPIO_Init+0x12e>
 8003092:	2b12      	cmp	r3, #18
 8003094:	d82a      	bhi.n	80030ec <HAL_GPIO_Init+0xcc>
 8003096:	2b12      	cmp	r3, #18
 8003098:	d859      	bhi.n	800314e <HAL_GPIO_Init+0x12e>
 800309a:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <HAL_GPIO_Init+0x80>)
 800309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a0:	0800311b 	.word	0x0800311b
 80030a4:	080030f5 	.word	0x080030f5
 80030a8:	08003107 	.word	0x08003107
 80030ac:	08003149 	.word	0x08003149
 80030b0:	0800314f 	.word	0x0800314f
 80030b4:	0800314f 	.word	0x0800314f
 80030b8:	0800314f 	.word	0x0800314f
 80030bc:	0800314f 	.word	0x0800314f
 80030c0:	0800314f 	.word	0x0800314f
 80030c4:	0800314f 	.word	0x0800314f
 80030c8:	0800314f 	.word	0x0800314f
 80030cc:	0800314f 	.word	0x0800314f
 80030d0:	0800314f 	.word	0x0800314f
 80030d4:	0800314f 	.word	0x0800314f
 80030d8:	0800314f 	.word	0x0800314f
 80030dc:	0800314f 	.word	0x0800314f
 80030e0:	0800314f 	.word	0x0800314f
 80030e4:	080030fd 	.word	0x080030fd
 80030e8:	08003111 	.word	0x08003111
 80030ec:	4a79      	ldr	r2, [pc, #484]	; (80032d4 <HAL_GPIO_Init+0x2b4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030f2:	e02c      	b.n	800314e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	623b      	str	r3, [r7, #32]
          break;
 80030fa:	e029      	b.n	8003150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	3304      	adds	r3, #4
 8003102:	623b      	str	r3, [r7, #32]
          break;
 8003104:	e024      	b.n	8003150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	3308      	adds	r3, #8
 800310c:	623b      	str	r3, [r7, #32]
          break;
 800310e:	e01f      	b.n	8003150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	330c      	adds	r3, #12
 8003116:	623b      	str	r3, [r7, #32]
          break;
 8003118:	e01a      	b.n	8003150 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d102      	bne.n	8003128 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003122:	2304      	movs	r3, #4
 8003124:	623b      	str	r3, [r7, #32]
          break;
 8003126:	e013      	b.n	8003150 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003130:	2308      	movs	r3, #8
 8003132:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	611a      	str	r2, [r3, #16]
          break;
 800313a:	e009      	b.n	8003150 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800313c:	2308      	movs	r3, #8
 800313e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	615a      	str	r2, [r3, #20]
          break;
 8003146:	e003      	b.n	8003150 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003148:	2300      	movs	r3, #0
 800314a:	623b      	str	r3, [r7, #32]
          break;
 800314c:	e000      	b.n	8003150 <HAL_GPIO_Init+0x130>
          break;
 800314e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2bff      	cmp	r3, #255	; 0xff
 8003154:	d801      	bhi.n	800315a <HAL_GPIO_Init+0x13a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	e001      	b.n	800315e <HAL_GPIO_Init+0x13e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3304      	adds	r3, #4
 800315e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2bff      	cmp	r3, #255	; 0xff
 8003164:	d802      	bhi.n	800316c <HAL_GPIO_Init+0x14c>
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	e002      	b.n	8003172 <HAL_GPIO_Init+0x152>
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	3b08      	subs	r3, #8
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	210f      	movs	r1, #15
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	fa01 f303 	lsl.w	r3, r1, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	401a      	ands	r2, r3
 8003184:	6a39      	ldr	r1, [r7, #32]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	431a      	orrs	r2, r3
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80b1 	beq.w	8003302 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031a0:	4b4d      	ldr	r3, [pc, #308]	; (80032d8 <HAL_GPIO_Init+0x2b8>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	4a4c      	ldr	r2, [pc, #304]	; (80032d8 <HAL_GPIO_Init+0x2b8>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6193      	str	r3, [r2, #24]
 80031ac:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <HAL_GPIO_Init+0x2b8>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031b8:	4a48      	ldr	r2, [pc, #288]	; (80032dc <HAL_GPIO_Init+0x2bc>)
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	3302      	adds	r3, #2
 80031c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	220f      	movs	r2, #15
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a40      	ldr	r2, [pc, #256]	; (80032e0 <HAL_GPIO_Init+0x2c0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d013      	beq.n	800320c <HAL_GPIO_Init+0x1ec>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a3f      	ldr	r2, [pc, #252]	; (80032e4 <HAL_GPIO_Init+0x2c4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00d      	beq.n	8003208 <HAL_GPIO_Init+0x1e8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a3e      	ldr	r2, [pc, #248]	; (80032e8 <HAL_GPIO_Init+0x2c8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d007      	beq.n	8003204 <HAL_GPIO_Init+0x1e4>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a3d      	ldr	r2, [pc, #244]	; (80032ec <HAL_GPIO_Init+0x2cc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d101      	bne.n	8003200 <HAL_GPIO_Init+0x1e0>
 80031fc:	2303      	movs	r3, #3
 80031fe:	e006      	b.n	800320e <HAL_GPIO_Init+0x1ee>
 8003200:	2304      	movs	r3, #4
 8003202:	e004      	b.n	800320e <HAL_GPIO_Init+0x1ee>
 8003204:	2302      	movs	r3, #2
 8003206:	e002      	b.n	800320e <HAL_GPIO_Init+0x1ee>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_GPIO_Init+0x1ee>
 800320c:	2300      	movs	r3, #0
 800320e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003210:	f002 0203 	and.w	r2, r2, #3
 8003214:	0092      	lsls	r2, r2, #2
 8003216:	4093      	lsls	r3, r2
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800321e:	492f      	ldr	r1, [pc, #188]	; (80032dc <HAL_GPIO_Init+0x2bc>)
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	089b      	lsrs	r3, r3, #2
 8003224:	3302      	adds	r3, #2
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d006      	beq.n	8003246 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003238:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	492c      	ldr	r1, [pc, #176]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	4313      	orrs	r3, r2
 8003242:	608b      	str	r3, [r1, #8]
 8003244:	e006      	b.n	8003254 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003246:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	43db      	mvns	r3, r3
 800324e:	4928      	ldr	r1, [pc, #160]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 8003250:	4013      	ands	r3, r2
 8003252:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d006      	beq.n	800326e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003260:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	4922      	ldr	r1, [pc, #136]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	4313      	orrs	r3, r2
 800326a:	60cb      	str	r3, [r1, #12]
 800326c:	e006      	b.n	800327c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	43db      	mvns	r3, r3
 8003276:	491e      	ldr	r1, [pc, #120]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 8003278:	4013      	ands	r3, r2
 800327a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d006      	beq.n	8003296 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	4918      	ldr	r1, [pc, #96]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
 8003294:	e006      	b.n	80032a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003296:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	43db      	mvns	r3, r3
 800329e:	4914      	ldr	r1, [pc, #80]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d021      	beq.n	80032f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032b0:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	490e      	ldr	r1, [pc, #56]	; (80032f0 <HAL_GPIO_Init+0x2d0>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]
 80032bc:	e021      	b.n	8003302 <HAL_GPIO_Init+0x2e2>
 80032be:	bf00      	nop
 80032c0:	10320000 	.word	0x10320000
 80032c4:	10310000 	.word	0x10310000
 80032c8:	10220000 	.word	0x10220000
 80032cc:	10210000 	.word	0x10210000
 80032d0:	10120000 	.word	0x10120000
 80032d4:	10110000 	.word	0x10110000
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40010800 	.word	0x40010800
 80032e4:	40010c00 	.word	0x40010c00
 80032e8:	40011000 	.word	0x40011000
 80032ec:	40011400 	.word	0x40011400
 80032f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_GPIO_Init+0x304>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	4909      	ldr	r1, [pc, #36]	; (8003324 <HAL_GPIO_Init+0x304>)
 80032fe:	4013      	ands	r3, r2
 8003300:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	3301      	adds	r3, #1
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	fa22 f303 	lsr.w	r3, r2, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	f47f ae8e 	bne.w	8003034 <HAL_GPIO_Init+0x14>
  }
}
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	372c      	adds	r7, #44	; 0x2c
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	40010400 	.word	0x40010400

08003328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	807b      	strh	r3, [r7, #2]
 8003334:	4613      	mov	r3, r2
 8003336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003338:	787b      	ldrb	r3, [r7, #1]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800333e:	887a      	ldrh	r2, [r7, #2]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003344:	e003      	b.n	800334e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003346:	887b      	ldrh	r3, [r7, #2]
 8003348:	041a      	lsls	r2, r3, #16
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	611a      	str	r2, [r3, #16]
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800336a:	887a      	ldrh	r2, [r7, #2]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4013      	ands	r3, r2
 8003370:	041a      	lsls	r2, r3, #16
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	43d9      	mvns	r1, r3
 8003376:	887b      	ldrh	r3, [r7, #2]
 8003378:	400b      	ands	r3, r1
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	611a      	str	r2, [r3, #16]
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr
	...

0800338c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e272      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8087 	beq.w	80034ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033ac:	4b92      	ldr	r3, [pc, #584]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 030c 	and.w	r3, r3, #12
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d00c      	beq.n	80033d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033b8:	4b8f      	ldr	r3, [pc, #572]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d112      	bne.n	80033ea <HAL_RCC_OscConfig+0x5e>
 80033c4:	4b8c      	ldr	r3, [pc, #560]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d0:	d10b      	bne.n	80033ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d2:	4b89      	ldr	r3, [pc, #548]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d06c      	beq.n	80034b8 <HAL_RCC_OscConfig+0x12c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d168      	bne.n	80034b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e24c      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f2:	d106      	bne.n	8003402 <HAL_RCC_OscConfig+0x76>
 80033f4:	4b80      	ldr	r3, [pc, #512]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a7f      	ldr	r2, [pc, #508]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80033fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	e02e      	b.n	8003460 <HAL_RCC_OscConfig+0xd4>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x98>
 800340a:	4b7b      	ldr	r3, [pc, #492]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a7a      	ldr	r2, [pc, #488]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	4b78      	ldr	r3, [pc, #480]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a77      	ldr	r2, [pc, #476]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800341c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e01d      	b.n	8003460 <HAL_RCC_OscConfig+0xd4>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0xbc>
 800342e:	4b72      	ldr	r3, [pc, #456]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a71      	ldr	r2, [pc, #452]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b6f      	ldr	r3, [pc, #444]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a6e      	ldr	r2, [pc, #440]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e00b      	b.n	8003460 <HAL_RCC_OscConfig+0xd4>
 8003448:	4b6b      	ldr	r3, [pc, #428]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a6a      	ldr	r2, [pc, #424]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800344e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	4b68      	ldr	r3, [pc, #416]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a67      	ldr	r2, [pc, #412]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800345a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d013      	beq.n	8003490 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fe ff5a 	bl	8002320 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003470:	f7fe ff56 	bl	8002320 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	; 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e200      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	4b5d      	ldr	r3, [pc, #372]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0xe4>
 800348e:	e014      	b.n	80034ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fe ff46 	bl	8002320 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003498:	f7fe ff42 	bl	8002320 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	; 0x64
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e1ec      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034aa:	4b53      	ldr	r3, [pc, #332]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x10c>
 80034b6:	e000      	b.n	80034ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d063      	beq.n	800358e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034c6:	4b4c      	ldr	r3, [pc, #304]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034d2:	4b49      	ldr	r3, [pc, #292]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d11c      	bne.n	8003518 <HAL_RCC_OscConfig+0x18c>
 80034de:	4b46      	ldr	r3, [pc, #280]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d116      	bne.n	8003518 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ea:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_RCC_OscConfig+0x176>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d001      	beq.n	8003502 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e1c0      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003502:	4b3d      	ldr	r3, [pc, #244]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4939      	ldr	r1, [pc, #228]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003516:	e03a      	b.n	800358e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003520:	4b36      	ldr	r3, [pc, #216]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003526:	f7fe fefb 	bl	8002320 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352e:	f7fe fef7 	bl	8002320 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e1a1      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003540:	4b2d      	ldr	r3, [pc, #180]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f0      	beq.n	800352e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354c:	4b2a      	ldr	r3, [pc, #168]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4927      	ldr	r1, [pc, #156]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]
 8003560:	e015      	b.n	800358e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003562:	4b26      	ldr	r3, [pc, #152]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe feda 	bl	8002320 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003570:	f7fe fed6 	bl	8002320 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e180      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003582:	4b1d      	ldr	r3, [pc, #116]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d03a      	beq.n	8003610 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d019      	beq.n	80035d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035a2:	4b17      	ldr	r3, [pc, #92]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a8:	f7fe feba 	bl	8002320 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b0:	f7fe feb6 	bl	8002320 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e160      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c2:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035ce:	2001      	movs	r0, #1
 80035d0:	f000 fafe 	bl	8003bd0 <RCC_Delay>
 80035d4:	e01c      	b.n	8003610 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d6:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035dc:	f7fe fea0 	bl	8002320 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e2:	e00f      	b.n	8003604 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fe fe9c 	bl	8002320 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d908      	bls.n	8003604 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e146      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
 80035fc:	42420000 	.word	0x42420000
 8003600:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003604:	4b92      	ldr	r3, [pc, #584]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e9      	bne.n	80035e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80a6 	beq.w	800376a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361e:	2300      	movs	r3, #0
 8003620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003622:	4b8b      	ldr	r3, [pc, #556]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10d      	bne.n	800364a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362e:	4b88      	ldr	r3, [pc, #544]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	4a87      	ldr	r2, [pc, #540]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003638:	61d3      	str	r3, [r2, #28]
 800363a:	4b85      	ldr	r3, [pc, #532]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003646:	2301      	movs	r3, #1
 8003648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364a:	4b82      	ldr	r3, [pc, #520]	; (8003854 <HAL_RCC_OscConfig+0x4c8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d118      	bne.n	8003688 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003656:	4b7f      	ldr	r3, [pc, #508]	; (8003854 <HAL_RCC_OscConfig+0x4c8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a7e      	ldr	r2, [pc, #504]	; (8003854 <HAL_RCC_OscConfig+0x4c8>)
 800365c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003662:	f7fe fe5d 	bl	8002320 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366a:	f7fe fe59 	bl	8002320 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b64      	cmp	r3, #100	; 0x64
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e103      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	4b75      	ldr	r3, [pc, #468]	; (8003854 <HAL_RCC_OscConfig+0x4c8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x312>
 8003690:	4b6f      	ldr	r3, [pc, #444]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4a6e      	ldr	r2, [pc, #440]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6213      	str	r3, [r2, #32]
 800369c:	e02d      	b.n	80036fa <HAL_RCC_OscConfig+0x36e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x334>
 80036a6:	4b6a      	ldr	r3, [pc, #424]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	4a69      	ldr	r2, [pc, #420]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6213      	str	r3, [r2, #32]
 80036b2:	4b67      	ldr	r3, [pc, #412]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4a66      	ldr	r2, [pc, #408]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	f023 0304 	bic.w	r3, r3, #4
 80036bc:	6213      	str	r3, [r2, #32]
 80036be:	e01c      	b.n	80036fa <HAL_RCC_OscConfig+0x36e>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2b05      	cmp	r3, #5
 80036c6:	d10c      	bne.n	80036e2 <HAL_RCC_OscConfig+0x356>
 80036c8:	4b61      	ldr	r3, [pc, #388]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	4a60      	ldr	r2, [pc, #384]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80036ce:	f043 0304 	orr.w	r3, r3, #4
 80036d2:	6213      	str	r3, [r2, #32]
 80036d4:	4b5e      	ldr	r3, [pc, #376]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	4a5d      	ldr	r2, [pc, #372]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6213      	str	r3, [r2, #32]
 80036e0:	e00b      	b.n	80036fa <HAL_RCC_OscConfig+0x36e>
 80036e2:	4b5b      	ldr	r3, [pc, #364]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	4a5a      	ldr	r2, [pc, #360]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	6213      	str	r3, [r2, #32]
 80036ee:	4b58      	ldr	r3, [pc, #352]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	4a57      	ldr	r2, [pc, #348]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	f023 0304 	bic.w	r3, r3, #4
 80036f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d015      	beq.n	800372e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003702:	f7fe fe0d 	bl	8002320 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003708:	e00a      	b.n	8003720 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fe fe09 	bl	8002320 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	; 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e0b1      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003720:	4b4b      	ldr	r3, [pc, #300]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ee      	beq.n	800370a <HAL_RCC_OscConfig+0x37e>
 800372c:	e014      	b.n	8003758 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372e:	f7fe fdf7 	bl	8002320 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003734:	e00a      	b.n	800374c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f7fe fdf3 	bl	8002320 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f241 3288 	movw	r2, #5000	; 0x1388
 8003744:	4293      	cmp	r3, r2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e09b      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374c:	4b40      	ldr	r3, [pc, #256]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ee      	bne.n	8003736 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d105      	bne.n	800376a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375e:	4b3c      	ldr	r3, [pc, #240]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	4a3b      	ldr	r2, [pc, #236]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003768:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 8087 	beq.w	8003882 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003774:	4b36      	ldr	r3, [pc, #216]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	2b08      	cmp	r3, #8
 800377e:	d061      	beq.n	8003844 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d146      	bne.n	8003816 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003788:	4b33      	ldr	r3, [pc, #204]	; (8003858 <HAL_RCC_OscConfig+0x4cc>)
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378e:	f7fe fdc7 	bl	8002320 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003796:	f7fe fdc3 	bl	8002320 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e06d      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a8:	4b29      	ldr	r3, [pc, #164]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f0      	bne.n	8003796 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037bc:	d108      	bne.n	80037d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	4921      	ldr	r1, [pc, #132]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d0:	4b1f      	ldr	r3, [pc, #124]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a19      	ldr	r1, [r3, #32]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	430b      	orrs	r3, r1
 80037e2:	491b      	ldr	r1, [pc, #108]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ee:	f7fe fd97 	bl	8002320 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f6:	f7fe fd93 	bl	8002320 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e03d      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x46a>
 8003814:	e035      	b.n	8003882 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <HAL_RCC_OscConfig+0x4cc>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe fd80 	bl	8002320 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003824:	f7fe fd7c 	bl	8002320 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e026      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003836:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_RCC_OscConfig+0x4c4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x498>
 8003842:	e01e      	b.n	8003882 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d107      	bne.n	800385c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e019      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
 8003850:	40021000 	.word	0x40021000
 8003854:	40007000 	.word	0x40007000
 8003858:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_OscConfig+0x500>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	429a      	cmp	r2, r3
 800386e:	d106      	bne.n	800387e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d001      	beq.n	8003882 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40021000 	.word	0x40021000

08003890 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0d0      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a4:	4b6a      	ldr	r3, [pc, #424]	; (8003a50 <HAL_RCC_ClockConfig+0x1c0>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d910      	bls.n	80038d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b2:	4b67      	ldr	r3, [pc, #412]	; (8003a50 <HAL_RCC_ClockConfig+0x1c0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 0207 	bic.w	r2, r3, #7
 80038ba:	4965      	ldr	r1, [pc, #404]	; (8003a50 <HAL_RCC_ClockConfig+0x1c0>)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	4313      	orrs	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b63      	ldr	r3, [pc, #396]	; (8003a50 <HAL_RCC_ClockConfig+0x1c0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0b8      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d020      	beq.n	8003922 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ec:	4b59      	ldr	r3, [pc, #356]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4a58      	ldr	r2, [pc, #352]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003904:	4b53      	ldr	r3, [pc, #332]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4a52      	ldr	r2, [pc, #328]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800390e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003910:	4b50      	ldr	r3, [pc, #320]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	494d      	ldr	r1, [pc, #308]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d040      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d107      	bne.n	8003946 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d115      	bne.n	800396e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e07f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d107      	bne.n	800395e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394e:	4b41      	ldr	r3, [pc, #260]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e073      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395e:	4b3d      	ldr	r3, [pc, #244]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e06b      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800396e:	4b39      	ldr	r3, [pc, #228]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f023 0203 	bic.w	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4936      	ldr	r1, [pc, #216]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	4313      	orrs	r3, r2
 800397e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003980:	f7fe fcce 	bl	8002320 <HAL_GetTick>
 8003984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003986:	e00a      	b.n	800399e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003988:	f7fe fcca 	bl	8002320 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e053      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399e:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f003 020c 	and.w	r2, r3, #12
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d1eb      	bne.n	8003988 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039b0:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <HAL_RCC_ClockConfig+0x1c0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d210      	bcs.n	80039e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_RCC_ClockConfig+0x1c0>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 0207 	bic.w	r2, r3, #7
 80039c6:	4922      	ldr	r1, [pc, #136]	; (8003a50 <HAL_RCC_ClockConfig+0x1c0>)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <HAL_RCC_ClockConfig+0x1c0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e032      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4916      	ldr	r1, [pc, #88]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a0a:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	490e      	ldr	r1, [pc, #56]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a1e:	f000 f821 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 8003a22:	4602      	mov	r2, r0
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_RCC_ClockConfig+0x1c4>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	490a      	ldr	r1, [pc, #40]	; (8003a58 <HAL_RCC_ClockConfig+0x1c8>)
 8003a30:	5ccb      	ldrb	r3, [r1, r3]
 8003a32:	fa22 f303 	lsr.w	r3, r2, r3
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <HAL_RCC_ClockConfig+0x1cc>)
 8003a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a3a:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <HAL_RCC_ClockConfig+0x1d0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fa8a 	bl	8001f58 <HAL_InitTick>

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40022000 	.word	0x40022000
 8003a54:	40021000 	.word	0x40021000
 8003a58:	0800bbc8 	.word	0x0800bbc8
 8003a5c:	20000024 	.word	0x20000024
 8003a60:	20000028 	.word	0x20000028

08003a64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	2300      	movs	r3, #0
 8003a78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d002      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0x30>
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d003      	beq.n	8003a9a <HAL_RCC_GetSysClockFreq+0x36>
 8003a92:	e027      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a94:	4b19      	ldr	r3, [pc, #100]	; (8003afc <HAL_RCC_GetSysClockFreq+0x98>)
 8003a96:	613b      	str	r3, [r7, #16]
      break;
 8003a98:	e027      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	0c9b      	lsrs	r3, r3, #18
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	4a17      	ldr	r2, [pc, #92]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003aa4:	5cd3      	ldrb	r3, [r2, r3]
 8003aa6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d010      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ab2:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	0c5b      	lsrs	r3, r3, #17
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	4a11      	ldr	r2, [pc, #68]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003abe:	5cd3      	ldrb	r3, [r2, r3]
 8003ac0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a0d      	ldr	r2, [pc, #52]	; (8003afc <HAL_RCC_GetSysClockFreq+0x98>)
 8003ac6:	fb03 f202 	mul.w	r2, r3, r2
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e004      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a0c      	ldr	r2, [pc, #48]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ad8:	fb02 f303 	mul.w	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	613b      	str	r3, [r7, #16]
      break;
 8003ae2:	e002      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCC_GetSysClockFreq+0x98>)
 8003ae6:	613b      	str	r3, [r7, #16]
      break;
 8003ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aea:	693b      	ldr	r3, [r7, #16]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	007a1200 	.word	0x007a1200
 8003b00:	0800bbe0 	.word	0x0800bbe0
 8003b04:	0800bbf0 	.word	0x0800bbf0
 8003b08:	003d0900 	.word	0x003d0900

08003b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b10:	4b02      	ldr	r3, [pc, #8]	; (8003b1c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b12:	681b      	ldr	r3, [r3, #0]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr
 8003b1c:	20000024 	.word	0x20000024

08003b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b24:	f7ff fff2 	bl	8003b0c <HAL_RCC_GetHCLKFreq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4903      	ldr	r1, [pc, #12]	; (8003b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	0800bbd8 	.word	0x0800bbd8

08003b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b4c:	f7ff ffde 	bl	8003b0c <HAL_RCC_GetHCLKFreq>
 8003b50:	4602      	mov	r2, r0
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	0adb      	lsrs	r3, r3, #11
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	4903      	ldr	r1, [pc, #12]	; (8003b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b5e:	5ccb      	ldrb	r3, [r1, r3]
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	0800bbd8 	.word	0x0800bbd8

08003b70 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b80:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <HAL_RCC_GetClockConfig+0x58>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 0203 	and.w	r2, r3, #3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <HAL_RCC_GetClockConfig+0x58>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_RCC_GetClockConfig+0x58>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ba4:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <HAL_RCC_GetClockConfig+0x58>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	08db      	lsrs	r3, r3, #3
 8003baa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_RCC_GetClockConfig+0x5c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0207 	and.w	r2, r3, #7
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40022000 	.word	0x40022000

08003bd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <RCC_Delay+0x34>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <RCC_Delay+0x38>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	0a5b      	lsrs	r3, r3, #9
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bec:	bf00      	nop
  }
  while (Delay --);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1e5a      	subs	r2, r3, #1
 8003bf2:	60fa      	str	r2, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f9      	bne.n	8003bec <RCC_Delay+0x1c>
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr
 8003c04:	20000024 	.word	0x20000024
 8003c08:	10624dd3 	.word	0x10624dd3

08003c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e041      	b.n	8003ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fe f878 	bl	8001d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f000 fd60 	bl	8004710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d001      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e03a      	b.n	8003d3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a18      	ldr	r2, [pc, #96]	; (8003d44 <HAL_TIM_Base_Start_IT+0x98>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00e      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0x58>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cee:	d009      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0x58>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <HAL_TIM_Base_Start_IT+0x9c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0x58>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a13      	ldr	r2, [pc, #76]	; (8003d4c <HAL_TIM_Base_Start_IT+0xa0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d111      	bne.n	8003d28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b06      	cmp	r3, #6
 8003d14:	d010      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0201 	orr.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d26:	e007      	b.n	8003d38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40000400 	.word	0x40000400
 8003d4c:	40000800 	.word	0x40000800

08003d50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e041      	b.n	8003de6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f839 	bl	8003dee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	f000 fcbe 	bl	8004710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <HAL_TIM_PWM_Start+0x24>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	bf14      	ite	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	2300      	moveq	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e022      	b.n	8003e6a <HAL_TIM_PWM_Start+0x6a>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d109      	bne.n	8003e3e <HAL_TIM_PWM_Start+0x3e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	bf14      	ite	ne
 8003e36:	2301      	movne	r3, #1
 8003e38:	2300      	moveq	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	e015      	b.n	8003e6a <HAL_TIM_PWM_Start+0x6a>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d109      	bne.n	8003e58 <HAL_TIM_PWM_Start+0x58>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	bf14      	ite	ne
 8003e50:	2301      	movne	r3, #1
 8003e52:	2300      	moveq	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	e008      	b.n	8003e6a <HAL_TIM_PWM_Start+0x6a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e05e      	b.n	8003f30 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d104      	bne.n	8003e82 <HAL_TIM_PWM_Start+0x82>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e80:	e013      	b.n	8003eaa <HAL_TIM_PWM_Start+0xaa>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d104      	bne.n	8003e92 <HAL_TIM_PWM_Start+0x92>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e90:	e00b      	b.n	8003eaa <HAL_TIM_PWM_Start+0xaa>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d104      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0xa2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea0:	e003      	b.n	8003eaa <HAL_TIM_PWM_Start+0xaa>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	6839      	ldr	r1, [r7, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 feac 	bl	8004c10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <HAL_TIM_PWM_Start+0x138>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d107      	bne.n	8003ed2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a18      	ldr	r2, [pc, #96]	; (8003f38 <HAL_TIM_PWM_Start+0x138>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00e      	beq.n	8003efa <HAL_TIM_PWM_Start+0xfa>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee4:	d009      	beq.n	8003efa <HAL_TIM_PWM_Start+0xfa>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <HAL_TIM_PWM_Start+0x13c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d004      	beq.n	8003efa <HAL_TIM_PWM_Start+0xfa>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a12      	ldr	r2, [pc, #72]	; (8003f40 <HAL_TIM_PWM_Start+0x140>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d111      	bne.n	8003f1e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b06      	cmp	r3, #6
 8003f0a:	d010      	beq.n	8003f2e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1c:	e007      	b.n	8003f2e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0201 	orr.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40000800 	.word	0x40000800

08003f44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e093      	b.n	8004080 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d106      	bne.n	8003f72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7fd ff15 	bl	8001d9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2202      	movs	r2, #2
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f88:	f023 0307 	bic.w	r3, r3, #7
 8003f8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3304      	adds	r3, #4
 8003f96:	4619      	mov	r1, r3
 8003f98:	4610      	mov	r0, r2
 8003f9a:	f000 fbb9 	bl	8004710 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc6:	f023 0303 	bic.w	r3, r3, #3
 8003fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	021b      	lsls	r3, r3, #8
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003fe4:	f023 030c 	bic.w	r3, r3, #12
 8003fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ff0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	4313      	orrs	r3, r2
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	011a      	lsls	r2, r3, #4
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	031b      	lsls	r3, r3, #12
 8004014:	4313      	orrs	r3, r2
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004022:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	4313      	orrs	r3, r2
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004098:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d110      	bne.n	80040da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d102      	bne.n	80040c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80040be:	7b7b      	ldrb	r3, [r7, #13]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d001      	beq.n	80040c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e069      	b.n	800419c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d8:	e031      	b.n	800413e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d110      	bne.n	8004102 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80040e0:	7bbb      	ldrb	r3, [r7, #14]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d102      	bne.n	80040ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80040e6:	7b3b      	ldrb	r3, [r7, #12]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d001      	beq.n	80040f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e055      	b.n	800419c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004100:	e01d      	b.n	800413e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d108      	bne.n	800411a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004108:	7bbb      	ldrb	r3, [r7, #14]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d105      	bne.n	800411a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800410e:	7b7b      	ldrb	r3, [r7, #13]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d102      	bne.n	800411a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004114:	7b3b      	ldrb	r3, [r7, #12]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d001      	beq.n	800411e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e03e      	b.n	800419c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2202      	movs	r2, #2
 8004122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2202      	movs	r2, #2
 800412a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2202      	movs	r2, #2
 8004132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2202      	movs	r2, #2
 800413a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_TIM_Encoder_Start+0xc4>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b04      	cmp	r3, #4
 8004148:	d008      	beq.n	800415c <HAL_TIM_Encoder_Start+0xd4>
 800414a:	e00f      	b.n	800416c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2201      	movs	r2, #1
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fd5b 	bl	8004c10 <TIM_CCxChannelCmd>
      break;
 800415a:	e016      	b.n	800418a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2201      	movs	r2, #1
 8004162:	2104      	movs	r1, #4
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fd53 	bl	8004c10 <TIM_CCxChannelCmd>
      break;
 800416a:	e00e      	b.n	800418a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2201      	movs	r2, #1
 8004172:	2100      	movs	r1, #0
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fd4b 	bl	8004c10 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2201      	movs	r2, #1
 8004180:	2104      	movs	r1, #4
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fd44 	bl	8004c10 <TIM_CCxChannelCmd>
      break;
 8004188:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0201 	orr.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d122      	bne.n	8004200 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d11b      	bne.n	8004200 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0202 	mvn.w	r2, #2
 80041d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fa76 	bl	80046d8 <HAL_TIM_IC_CaptureCallback>
 80041ec:	e005      	b.n	80041fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fa69 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fa78 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b04      	cmp	r3, #4
 800420c:	d122      	bne.n	8004254 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b04      	cmp	r3, #4
 800421a:	d11b      	bne.n	8004254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0204 	mvn.w	r2, #4
 8004224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2202      	movs	r2, #2
 800422a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fa4c 	bl	80046d8 <HAL_TIM_IC_CaptureCallback>
 8004240:	e005      	b.n	800424e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fa3f 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fa4e 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b08      	cmp	r3, #8
 8004260:	d122      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b08      	cmp	r3, #8
 800426e:	d11b      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0208 	mvn.w	r2, #8
 8004278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2204      	movs	r2, #4
 800427e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fa22 	bl	80046d8 <HAL_TIM_IC_CaptureCallback>
 8004294:	e005      	b.n	80042a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fa15 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fa24 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b10      	cmp	r3, #16
 80042b4:	d122      	bne.n	80042fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d11b      	bne.n	80042fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0210 	mvn.w	r2, #16
 80042cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2208      	movs	r2, #8
 80042d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f9f8 	bl	80046d8 <HAL_TIM_IC_CaptureCallback>
 80042e8:	e005      	b.n	80042f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f9eb 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f9fa 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b01      	cmp	r3, #1
 8004308:	d10e      	bne.n	8004328 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b01      	cmp	r3, #1
 8004316:	d107      	bne.n	8004328 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0201 	mvn.w	r2, #1
 8004320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fd fc30 	bl	8001b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004332:	2b80      	cmp	r3, #128	; 0x80
 8004334:	d10e      	bne.n	8004354 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004340:	2b80      	cmp	r3, #128	; 0x80
 8004342:	d107      	bne.n	8004354 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800434c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fd3a 	bl	8004dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435e:	2b40      	cmp	r3, #64	; 0x40
 8004360:	d10e      	bne.n	8004380 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436c:	2b40      	cmp	r3, #64	; 0x40
 800436e:	d107      	bne.n	8004380 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f9be 	bl	80046fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b20      	cmp	r3, #32
 800438c:	d10e      	bne.n	80043ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	2b20      	cmp	r3, #32
 800439a:	d107      	bne.n	80043ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0220 	mvn.w	r2, #32
 80043a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fd05 	bl	8004db6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043ac:	bf00      	nop
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e0ae      	b.n	8004530 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b0c      	cmp	r3, #12
 80043de:	f200 809f 	bhi.w	8004520 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043e2:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	0800441d 	.word	0x0800441d
 80043ec:	08004521 	.word	0x08004521
 80043f0:	08004521 	.word	0x08004521
 80043f4:	08004521 	.word	0x08004521
 80043f8:	0800445d 	.word	0x0800445d
 80043fc:	08004521 	.word	0x08004521
 8004400:	08004521 	.word	0x08004521
 8004404:	08004521 	.word	0x08004521
 8004408:	0800449f 	.word	0x0800449f
 800440c:	08004521 	.word	0x08004521
 8004410:	08004521 	.word	0x08004521
 8004414:	08004521 	.word	0x08004521
 8004418:	080044df 	.word	0x080044df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f9d6 	bl	80047d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699a      	ldr	r2, [r3, #24]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0208 	orr.w	r2, r2, #8
 8004436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699a      	ldr	r2, [r3, #24]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0204 	bic.w	r2, r2, #4
 8004446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6999      	ldr	r1, [r3, #24]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	619a      	str	r2, [r3, #24]
      break;
 800445a:	e064      	b.n	8004526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68b9      	ldr	r1, [r7, #8]
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fa1c 	bl	80048a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6999      	ldr	r1, [r3, #24]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	021a      	lsls	r2, r3, #8
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	619a      	str	r2, [r3, #24]
      break;
 800449c:	e043      	b.n	8004526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68b9      	ldr	r1, [r7, #8]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fa65 	bl	8004974 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69da      	ldr	r2, [r3, #28]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0208 	orr.w	r2, r2, #8
 80044b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0204 	bic.w	r2, r2, #4
 80044c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69d9      	ldr	r1, [r3, #28]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	61da      	str	r2, [r3, #28]
      break;
 80044dc:	e023      	b.n	8004526 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 faaf 	bl	8004a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69da      	ldr	r2, [r3, #28]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69da      	ldr	r2, [r3, #28]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69d9      	ldr	r1, [r3, #28]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	021a      	lsls	r2, r3, #8
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	61da      	str	r2, [r3, #28]
      break;
 800451e:	e002      	b.n	8004526 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	75fb      	strb	r3, [r7, #23]
      break;
 8004524:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800452e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_TIM_ConfigClockSource+0x1c>
 8004550:	2302      	movs	r3, #2
 8004552:	e0b4      	b.n	80046be <HAL_TIM_ConfigClockSource+0x186>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800457a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458c:	d03e      	beq.n	800460c <HAL_TIM_ConfigClockSource+0xd4>
 800458e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004592:	f200 8087 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459a:	f000 8086 	beq.w	80046aa <HAL_TIM_ConfigClockSource+0x172>
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a2:	d87f      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045a4:	2b70      	cmp	r3, #112	; 0x70
 80045a6:	d01a      	beq.n	80045de <HAL_TIM_ConfigClockSource+0xa6>
 80045a8:	2b70      	cmp	r3, #112	; 0x70
 80045aa:	d87b      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045ac:	2b60      	cmp	r3, #96	; 0x60
 80045ae:	d050      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x11a>
 80045b0:	2b60      	cmp	r3, #96	; 0x60
 80045b2:	d877      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045b4:	2b50      	cmp	r3, #80	; 0x50
 80045b6:	d03c      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0xfa>
 80045b8:	2b50      	cmp	r3, #80	; 0x50
 80045ba:	d873      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	d058      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x13a>
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d86f      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045c4:	2b30      	cmp	r3, #48	; 0x30
 80045c6:	d064      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x15a>
 80045c8:	2b30      	cmp	r3, #48	; 0x30
 80045ca:	d86b      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d060      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x15a>
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d867      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d05c      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x15a>
 80045d8:	2b10      	cmp	r3, #16
 80045da:	d05a      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x15a>
 80045dc:	e062      	b.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ee:	f000 faf0 	bl	8004bd2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	609a      	str	r2, [r3, #8]
      break;
 800460a:	e04f      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800461c:	f000 fad9 	bl	8004bd2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800462e:	609a      	str	r2, [r3, #8]
      break;
 8004630:	e03c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800463e:	461a      	mov	r2, r3
 8004640:	f000 fa50 	bl	8004ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2150      	movs	r1, #80	; 0x50
 800464a:	4618      	mov	r0, r3
 800464c:	f000 faa7 	bl	8004b9e <TIM_ITRx_SetConfig>
      break;
 8004650:	e02c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800465e:	461a      	mov	r2, r3
 8004660:	f000 fa6e 	bl	8004b40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2160      	movs	r1, #96	; 0x60
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fa97 	bl	8004b9e <TIM_ITRx_SetConfig>
      break;
 8004670:	e01c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800467e:	461a      	mov	r2, r3
 8004680:	f000 fa30 	bl	8004ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2140      	movs	r1, #64	; 0x40
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fa87 	bl	8004b9e <TIM_ITRx_SetConfig>
      break;
 8004690:	e00c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f000 fa7e 	bl	8004b9e <TIM_ITRx_SetConfig>
      break;
 80046a2:	e003      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
      break;
 80046a8:	e000      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr

080046d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr

080046ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
	...

08004710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a29      	ldr	r2, [pc, #164]	; (80047c8 <TIM_Base_SetConfig+0xb8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00b      	beq.n	8004740 <TIM_Base_SetConfig+0x30>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472e:	d007      	beq.n	8004740 <TIM_Base_SetConfig+0x30>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a26      	ldr	r2, [pc, #152]	; (80047cc <TIM_Base_SetConfig+0xbc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <TIM_Base_SetConfig+0x30>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a25      	ldr	r2, [pc, #148]	; (80047d0 <TIM_Base_SetConfig+0xc0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d108      	bne.n	8004752 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <TIM_Base_SetConfig+0xb8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00b      	beq.n	8004772 <TIM_Base_SetConfig+0x62>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004760:	d007      	beq.n	8004772 <TIM_Base_SetConfig+0x62>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a19      	ldr	r2, [pc, #100]	; (80047cc <TIM_Base_SetConfig+0xbc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d003      	beq.n	8004772 <TIM_Base_SetConfig+0x62>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <TIM_Base_SetConfig+0xc0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d108      	bne.n	8004784 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a07      	ldr	r2, [pc, #28]	; (80047c8 <TIM_Base_SetConfig+0xb8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d103      	bne.n	80047b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	615a      	str	r2, [r3, #20]
}
 80047be:	bf00      	nop
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40000800 	.word	0x40000800

080047d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	f023 0201 	bic.w	r2, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0303 	bic.w	r3, r3, #3
 800480a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f023 0302 	bic.w	r3, r3, #2
 800481c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a1c      	ldr	r2, [pc, #112]	; (800489c <TIM_OC1_SetConfig+0xc8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d10c      	bne.n	800484a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f023 0308 	bic.w	r3, r3, #8
 8004836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 0304 	bic.w	r3, r3, #4
 8004848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a13      	ldr	r2, [pc, #76]	; (800489c <TIM_OC1_SetConfig+0xc8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d111      	bne.n	8004876 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	621a      	str	r2, [r3, #32]
}
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40012c00 	.word	0x40012c00

080048a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f023 0210 	bic.w	r2, r3, #16
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f023 0320 	bic.w	r3, r3, #32
 80048ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a1d      	ldr	r2, [pc, #116]	; (8004970 <TIM_OC2_SetConfig+0xd0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d10d      	bne.n	800491c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800491a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a14      	ldr	r2, [pc, #80]	; (8004970 <TIM_OC2_SetConfig+0xd0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d113      	bne.n	800494c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800492a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	621a      	str	r2, [r3, #32]
}
 8004966:	bf00      	nop
 8004968:	371c      	adds	r7, #28
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr
 8004970:	40012c00 	.word	0x40012c00

08004974 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1d      	ldr	r2, [pc, #116]	; (8004a44 <TIM_OC3_SetConfig+0xd0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d10d      	bne.n	80049ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a14      	ldr	r2, [pc, #80]	; (8004a44 <TIM_OC3_SetConfig+0xd0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d113      	bne.n	8004a1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	621a      	str	r2, [r3, #32]
}
 8004a38:	bf00      	nop
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40012c00 	.word	0x40012c00

08004a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	031b      	lsls	r3, r3, #12
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a0f      	ldr	r2, [pc, #60]	; (8004ae0 <TIM_OC4_SetConfig+0x98>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d109      	bne.n	8004abc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	019b      	lsls	r3, r3, #6
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	621a      	str	r2, [r3, #32]
}
 8004ad6:	bf00      	nop
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr
 8004ae0:	40012c00 	.word	0x40012c00

08004ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	f023 0201 	bic.w	r2, r3, #1
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f023 030a 	bic.w	r3, r3, #10
 8004b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	621a      	str	r2, [r3, #32]
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr

08004b40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f023 0210 	bic.w	r2, r3, #16
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	031b      	lsls	r3, r3, #12
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	621a      	str	r2, [r3, #32]
}
 8004b94:	bf00      	nop
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr

08004b9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b085      	sub	sp, #20
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f043 0307 	orr.w	r3, r3, #7
 8004bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	609a      	str	r2, [r3, #8]
}
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b087      	sub	sp, #28
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	021a      	lsls	r2, r3, #8
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	609a      	str	r2, [r3, #8]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 031f 	and.w	r3, r3, #31
 8004c22:	2201      	movs	r2, #1
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1a      	ldr	r2, [r3, #32]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	43db      	mvns	r3, r3
 8004c32:	401a      	ands	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a1a      	ldr	r2, [r3, #32]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 031f 	and.w	r3, r3, #31
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	fa01 f303 	lsl.w	r3, r1, r3
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr

08004c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e046      	b.n	8004cfe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00e      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbc:	d009      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a12      	ldr	r2, [pc, #72]	; (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a10      	ldr	r2, [pc, #64]	; (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d10c      	bne.n	8004cec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bc80      	pop	{r7}
 8004d06:	4770      	bx	lr
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40000400 	.word	0x40000400
 8004d10:	40000800 	.word	0x40000800

08004d14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e03d      	b.n	8004dac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr

08004dda <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e042      	b.n	8004e72 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7fd f85d 	bl	8001ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2224      	movs	r2, #36	; 0x24
 8004e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e1c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f91c 	bl	800505c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695a      	ldr	r2, [r3, #20]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e42:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e52:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b08a      	sub	sp, #40	; 0x28
 8004e7e:	af02      	add	r7, sp, #8
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	4613      	mov	r3, r2
 8004e88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	d16d      	bne.n	8004f76 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_UART_Transmit+0x2c>
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e066      	b.n	8004f78 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2221      	movs	r2, #33	; 0x21
 8004eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eb8:	f7fd fa32 	bl	8002320 <HAL_GetTick>
 8004ebc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	88fa      	ldrh	r2, [r7, #6]
 8004ec2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed2:	d108      	bne.n	8004ee6 <HAL_UART_Transmit+0x6c>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d104      	bne.n	8004ee6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	e003      	b.n	8004eee <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004eee:	e02a      	b.n	8004f46 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f840 	bl	8004f80 <UART_WaitOnFlagUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e036      	b.n	8004f78 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10b      	bne.n	8004f28 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f1e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	3302      	adds	r3, #2
 8004f24:	61bb      	str	r3, [r7, #24]
 8004f26:	e007      	b.n	8004f38 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	781a      	ldrb	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	3301      	adds	r3, #1
 8004f36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1cf      	bne.n	8004ef0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2200      	movs	r2, #0
 8004f58:	2140      	movs	r1, #64	; 0x40
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 f810 	bl	8004f80 <UART_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e006      	b.n	8004f78 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	e000      	b.n	8004f78 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004f76:	2302      	movs	r3, #2
  }
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3720      	adds	r7, #32
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b090      	sub	sp, #64	; 0x40
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f90:	e050      	b.n	8005034 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f98:	d04c      	beq.n	8005034 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d007      	beq.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fa0:	f7fd f9be 	bl	8002320 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d241      	bcs.n	8005034 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	330c      	adds	r3, #12
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fd0:	637a      	str	r2, [r7, #52]	; 0x34
 8004fd2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e5      	bne.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3314      	adds	r3, #20
 8004fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	e853 3f00 	ldrex	r3, [r3]
 8004ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f023 0301 	bic.w	r3, r3, #1
 8004ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3314      	adds	r3, #20
 8005002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005004:	623a      	str	r2, [r7, #32]
 8005006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	69f9      	ldr	r1, [r7, #28]
 800500a:	6a3a      	ldr	r2, [r7, #32]
 800500c:	e841 2300 	strex	r3, r2, [r1]
 8005010:	61bb      	str	r3, [r7, #24]
   return(result);
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e5      	bne.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e00f      	b.n	8005054 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4013      	ands	r3, r2
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	429a      	cmp	r2, r3
 8005042:	bf0c      	ite	eq
 8005044:	2301      	moveq	r3, #1
 8005046:	2300      	movne	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	429a      	cmp	r2, r3
 8005050:	d09f      	beq.n	8004f92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3740      	adds	r7, #64	; 0x40
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005096:	f023 030c 	bic.w	r3, r3, #12
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6812      	ldr	r2, [r2, #0]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	430b      	orrs	r3, r1
 80050a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a2c      	ldr	r2, [pc, #176]	; (8005170 <UART_SetConfig+0x114>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d103      	bne.n	80050cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050c4:	f7fe fd40 	bl	8003b48 <HAL_RCC_GetPCLK2Freq>
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	e002      	b.n	80050d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80050cc:	f7fe fd28 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 80050d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009a      	lsls	r2, r3, #2
 80050dc:	441a      	add	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	4a22      	ldr	r2, [pc, #136]	; (8005174 <UART_SetConfig+0x118>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	0119      	lsls	r1, r3, #4
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	009a      	lsls	r2, r3, #2
 80050fc:	441a      	add	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	fbb2 f2f3 	udiv	r2, r2, r3
 8005108:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <UART_SetConfig+0x118>)
 800510a:	fba3 0302 	umull	r0, r3, r3, r2
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	2064      	movs	r0, #100	; 0x64
 8005112:	fb00 f303 	mul.w	r3, r0, r3
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	3332      	adds	r3, #50	; 0x32
 800511c:	4a15      	ldr	r2, [pc, #84]	; (8005174 <UART_SetConfig+0x118>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005128:	4419      	add	r1, r3
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009a      	lsls	r2, r3, #2
 8005134:	441a      	add	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <UART_SetConfig+0x118>)
 8005142:	fba3 0302 	umull	r0, r3, r3, r2
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	2064      	movs	r0, #100	; 0x64
 800514a:	fb00 f303 	mul.w	r3, r0, r3
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	3332      	adds	r3, #50	; 0x32
 8005154:	4a07      	ldr	r2, [pc, #28]	; (8005174 <UART_SetConfig+0x118>)
 8005156:	fba2 2303 	umull	r2, r3, r2, r3
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	f003 020f 	and.w	r2, r3, #15
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	440a      	add	r2, r1
 8005166:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005168:	bf00      	nop
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40013800 	.word	0x40013800
 8005174:	51eb851f 	.word	0x51eb851f

08005178 <Encoder_Thread>:
		.stack_size = 64 * 4,
		.priority = osPriorityHigh3,
};

void Encoder_Thread(void *arg)
{
 8005178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800517c:	b088      	sub	sp, #32
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
	Encoder_HandlerStruct *Encoder = (Encoder_HandlerStruct *)arg;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	61fb      	str	r3, [r7, #28]
	uint64_t startTime = 0;
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int delayTime = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		if (!Encoder->ThrEn)
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800519c:	2b00      	cmp	r3, #0
 800519e:	d104      	bne.n	80051aa <Encoder_Thread+0x32>
		{
//			hal_encod
			osThreadSuspend(Encoder->runThread);
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fc55 	bl	8005a54 <osThreadSuspend>
//			Encoder_Stop(Encoder);
		}
		startTime = osKernelGetTickCount();
 80051aa:	f000 fb81 	bl	80058b0 <osKernelGetTickCount>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2200      	movs	r2, #0
 80051b2:	461c      	mov	r4, r3
 80051b4:	4615      	mov	r5, r2
 80051b6:	e9c7 4504 	strd	r4, r5, [r7, #16]
//		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
		HAL_GPIO_TogglePin(LEDG_GPIO_Port, LEDG_Pin);
 80051ba:	2110      	movs	r1, #16
 80051bc:	480b      	ldr	r0, [pc, #44]	; (80051ec <Encoder_Thread+0x74>)
 80051be:	f7fe f8cb 	bl	8003358 <HAL_GPIO_TogglePin>
		Encoder_Handle(Encoder);
 80051c2:	69f8      	ldr	r0, [r7, #28]
 80051c4:	f000 f865 	bl	8005292 <Encoder_Handle>
		delayTime = Encoder->Interval - (osKernelGetTickCount() - startTime);
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ce:	4698      	mov	r8, r3
 80051d0:	693e      	ldr	r6, [r7, #16]
 80051d2:	f000 fb6d 	bl	80058b0 <osKernelGetTickCount>
 80051d6:	4603      	mov	r3, r0
 80051d8:	1af3      	subs	r3, r6, r3
 80051da:	4443      	add	r3, r8
 80051dc:	60fb      	str	r3, [r7, #12]
		osDelay(delayTime > 0? delayTime : 0);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fc9d 	bl	8005b24 <osDelay>
		if (!Encoder->ThrEn)
 80051ea:	e7d4      	b.n	8005196 <Encoder_Thread+0x1e>
 80051ec:	40010c00 	.word	0x40010c00

080051f0 <Encoder_Init>:
	}
}

void Encoder_Init(Encoder_HandlerStruct *Encoder,TIM_HandleTypeDef *Enc_htim,uint32_t Channel,uint32_t PulsePerRound,uint32_t PulsePerMeter,uint8_t Interval,float LPF_Alp)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
	Encoder->Enc_htim = Enc_htim;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	601a      	str	r2, [r3, #0]
//	Encoder->Read_htim = Read_htim;
	Encoder->Channel = Channel;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	605a      	str	r2, [r3, #4]
	Encoder->PulsepPerMeter = PulsePerMeter;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	615a      	str	r2, [r3, #20]
	Encoder->Interval = Interval;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	7f3a      	ldrb	r2, [r7, #28]
 8005214:	f883 2020 	strb.w	r2, [r3, #32]
	Encoder->LPF_Alp = LPF_Alp;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a3a      	ldr	r2, [r7, #32]
 800521c:	61da      	str	r2, [r3, #28]
	Encoder->PulsePerRound = PulsePerRound;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	619a      	str	r2, [r3, #24]
	Encoder->ThrEn = 0;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Encoder->runThread = osThreadNew(Encoder_Thread, Encoder, &Encoder_attr);
 800522c:	4a05      	ldr	r2, [pc, #20]	; (8005244 <Encoder_Init+0x54>)
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	4805      	ldr	r0, [pc, #20]	; (8005248 <Encoder_Init+0x58>)
 8005232:	f000 fb65 	bl	8005900 <osThreadNew>
 8005236:	4602      	mov	r2, r0
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	20000030 	.word	0x20000030
 8005248:	08005179 	.word	0x08005179

0800524c <Encoder_Start>:

void Encoder_Start(Encoder_HandlerStruct *Encoder)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	Encoder->Current_Count = 0;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	609a      	str	r2, [r3, #8]
	Encoder->Current_Speed = 0;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	60da      	str	r2, [r3, #12]
	Encoder->TotalCount = 0;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	611a      	str	r2, [r3, #16]
	HAL_TIM_Encoder_Start(Encoder->Enc_htim, Encoder->Channel);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f7fe ff08 	bl	8004088 <HAL_TIM_Encoder_Start>
	Encoder->ThrEn = 1;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	osThreadResume(Encoder->runThread);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fc19 	bl	8005abc <osThreadResume>
//	__HAL_TIM_SET_AUTORELOAD(Encoder->Read_htim,Encoder->Interval*1000 - 1);
//	HAL_TIM_Base_Start_IT(Encoder->Read_htim);
}
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <Encoder_Handle>:
//	HAL_TIM_Base_Stop(Encoder->Read_htim);
}


void Encoder_Handle(Encoder_HandlerStruct *Encoder)
{
 8005292:	b5b0      	push	{r4, r5, r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
	Encoder->Current_Count = __HAL_TIM_GET_COUNTER(Encoder->Enc_htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	609a      	str	r2, [r3, #8]
	Encoder->Dir = 0;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(Encoder->Enc_htim))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	2b10      	cmp	r3, #16
 80052bc:	d10a      	bne.n	80052d4 <Encoder_Handle+0x42>
	{
		Encoder->Current_Count = 65535 - Encoder->Current_Count;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80052c6:	33ff      	adds	r3, #255	; 0xff
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6093      	str	r3, [r2, #8]
		Encoder->Dir = 1;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}
	Encoder->Current_Speed = (1 - Encoder->LPF_Alp) * Encoder->Current_Speed + Encoder->LPF_Alp * Encoder->Current_Count / Encoder->Interval;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	4619      	mov	r1, r3
 80052da:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80052de:	f7fb fc27 	bl	8000b30 <__aeabi_fsub>
 80052e2:	4603      	mov	r3, r0
 80052e4:	461a      	mov	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f7fb fd29 	bl	8000d44 <__aeabi_fmul>
 80052f2:	4603      	mov	r3, r0
 80052f4:	461d      	mov	r5, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69dc      	ldr	r4, [r3, #28]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fb fcc8 	bl	8000c94 <__aeabi_ui2f>
 8005304:	4603      	mov	r3, r0
 8005306:	4619      	mov	r1, r3
 8005308:	4620      	mov	r0, r4
 800530a:	f7fb fd1b 	bl	8000d44 <__aeabi_fmul>
 800530e:	4603      	mov	r3, r0
 8005310:	461c      	mov	r4, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005318:	4618      	mov	r0, r3
 800531a:	f7fb fcbf 	bl	8000c9c <__aeabi_i2f>
 800531e:	4603      	mov	r3, r0
 8005320:	4619      	mov	r1, r3
 8005322:	4620      	mov	r0, r4
 8005324:	f7fb fdc2 	bl	8000eac <__aeabi_fdiv>
 8005328:	4603      	mov	r3, r0
 800532a:	4619      	mov	r1, r3
 800532c:	4628      	mov	r0, r5
 800532e:	f7fb fc01 	bl	8000b34 <__addsf3>
 8005332:	4603      	mov	r3, r0
 8005334:	461a      	mov	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(Encoder->Enc_htim,0);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2200      	movs	r2, #0
 8005342:	625a      	str	r2, [r3, #36]	; 0x24
	Encoder->TotalCount += Encoder->Current_Count;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	441a      	add	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	611a      	str	r2, [r3, #16]
}
 8005352:	bf00      	nop
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800535c <Encoder_GetSpeed_PPS>:
	float Speed_PPS = Encoder->Current_Count / Encoder->Interval * 1000;
	return Speed_PPS / Encoder->PulsepPerMeter;
}

float Encoder_GetSpeed_PPS(Encoder_HandlerStruct *Encoder)
{
 800535c:	b590      	push	{r4, r7, lr}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
	return (float)Encoder->Current_Count / Encoder->Interval * 1000;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4618      	mov	r0, r3
 800536a:	f7fb fc93 	bl	8000c94 <__aeabi_ui2f>
 800536e:	4604      	mov	r4, r0
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005376:	4618      	mov	r0, r3
 8005378:	f7fb fc90 	bl	8000c9c <__aeabi_i2f>
 800537c:	4603      	mov	r3, r0
 800537e:	4619      	mov	r1, r3
 8005380:	4620      	mov	r0, r4
 8005382:	f7fb fd93 	bl	8000eac <__aeabi_fdiv>
 8005386:	4603      	mov	r3, r0
 8005388:	4904      	ldr	r1, [pc, #16]	; (800539c <Encoder_GetSpeed_PPS+0x40>)
 800538a:	4618      	mov	r0, r3
 800538c:	f7fb fcda 	bl	8000d44 <__aeabi_fmul>
 8005390:	4603      	mov	r3, r0
//	return Encoder->Current_Speed;
}
 8005392:	4618      	mov	r0, r3
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	bd90      	pop	{r4, r7, pc}
 800539a:	bf00      	nop
 800539c:	447a0000 	.word	0x447a0000

080053a0 <Encoder_GetSpeed_RPS>:

float Encoder_GetSpeed_RPS(Encoder_HandlerStruct *Encoder)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
	return (float)1.0 * Encoder_GetSpeed_PPS(Encoder)/PPR;
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff ffd7 	bl	800535c <Encoder_GetSpeed_PPS>
 80053ae:	4603      	mov	r3, r0
 80053b0:	4904      	ldr	r1, [pc, #16]	; (80053c4 <Encoder_GetSpeed_RPS+0x24>)
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fb fd7a 	bl	8000eac <__aeabi_fdiv>
 80053b8:	4603      	mov	r3, r0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	44250000 	.word	0x44250000

080053c8 <GPIO_WritePin>:
{
	return HAL_GPIO_TogglePin(GPIO.Port, GPIO.Pin);
}

void GPIO_WritePin(GPIO_HandlerStruct GPIO, uint32_t PinState)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	f107 0308 	add.w	r3, r7, #8
 80053d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80053d6:	607a      	str	r2, [r7, #4]
	return HAL_GPIO_WritePin(GPIO.Port, GPIO.Pin, PinState);
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	b291      	uxth	r1, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fd ffa0 	bl	8003328 <HAL_GPIO_WritePin>
}
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <Motor_Init>:
 */

#include "../Motor/MotorControl.h"

void Motor_Init(Motor_HandlerStruct *Motor, TIM_HandleTypeDef *htim, uint32_t F_channel, uint32_t B_channel)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
	Motor->htim = htim;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	601a      	str	r2, [r3, #0]
	Motor->Forward_channel = F_channel;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	605a      	str	r2, [r3, #4]
	Motor->Backward_channel = B_channel;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	609a      	str	r2, [r3, #8]
	Motor->L_En.Port = L_EN_GPIO_Port;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4a0c      	ldr	r2, [pc, #48]	; (8005444 <Motor_Init+0x54>)
 8005414:	615a      	str	r2, [r3, #20]
	Motor->L_En.Pin = L_EN_Pin;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800541c:	619a      	str	r2, [r3, #24]
	Motor->R_En.Port = R_EN_GPIO_Port;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4a08      	ldr	r2, [pc, #32]	; (8005444 <Motor_Init+0x54>)
 8005422:	60da      	str	r2, [r3, #12]
	Motor->R_En.Pin = R_EN_Pin;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800542a:	611a      	str	r2, [r3, #16]
	Motor->PosLimit = 100;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2264      	movs	r2, #100	; 0x64
 8005430:	771a      	strb	r2, [r3, #28]
	Motor->NegLimit = -100;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	229c      	movs	r2, #156	; 0x9c
 8005436:	775a      	strb	r2, [r3, #29]
}
 8005438:	bf00      	nop
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40010c00 	.word	0x40010c00

08005448 <Motor_setPWM>:
void Motor_setPWM(Motor_HandlerStruct *Motor,float PWM)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
	PWM = (PWM > Motor->PosLimit)? Motor->PosLimit : PWM;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8005458:	4618      	mov	r0, r3
 800545a:	f7fb fc1f 	bl	8000c9c <__aeabi_i2f>
 800545e:	4603      	mov	r3, r0
 8005460:	4619      	mov	r1, r3
 8005462:	6838      	ldr	r0, [r7, #0]
 8005464:	f7fb fe2a 	bl	80010bc <__aeabi_fcmpgt>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <Motor_setPWM+0x36>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8005474:	4618      	mov	r0, r3
 8005476:	f7fb fc11 	bl	8000c9c <__aeabi_i2f>
 800547a:	4603      	mov	r3, r0
 800547c:	e000      	b.n	8005480 <Motor_setPWM+0x38>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	603b      	str	r3, [r7, #0]
	PWM = (PWM < Motor->NegLimit)? Motor->NegLimit : PWM;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8005488:	4618      	mov	r0, r3
 800548a:	f7fb fc07 	bl	8000c9c <__aeabi_i2f>
 800548e:	4603      	mov	r3, r0
 8005490:	4619      	mov	r1, r3
 8005492:	6838      	ldr	r0, [r7, #0]
 8005494:	f7fb fdf4 	bl	8001080 <__aeabi_fcmplt>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d007      	beq.n	80054ae <Motor_setPWM+0x66>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fb fbf9 	bl	8000c9c <__aeabi_i2f>
 80054aa:	4603      	mov	r3, r0
 80054ac:	e000      	b.n	80054b0 <Motor_setPWM+0x68>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	603b      	str	r3, [r7, #0]

	float pulse = PWM > 0? PWM : -PWM;
 80054b2:	f04f 0100 	mov.w	r1, #0
 80054b6:	6838      	ldr	r0, [r7, #0]
 80054b8:	f7fb fe00 	bl	80010bc <__aeabi_fcmpgt>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <Motor_setPWM+0x7e>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	e002      	b.n	80054cc <Motor_setPWM+0x84>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80054cc:	60fb      	str	r3, [r7, #12]
	uint32_t Val = pulse * 7200 / 100;
 80054ce:	4954      	ldr	r1, [pc, #336]	; (8005620 <Motor_setPWM+0x1d8>)
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7fb fc37 	bl	8000d44 <__aeabi_fmul>
 80054d6:	4603      	mov	r3, r0
 80054d8:	4952      	ldr	r1, [pc, #328]	; (8005624 <Motor_setPWM+0x1dc>)
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fb fce6 	bl	8000eac <__aeabi_fdiv>
 80054e0:	4603      	mov	r3, r0
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fb fe1a 	bl	800111c <__aeabi_f2uiz>
 80054e8:	4603      	mov	r3, r0
 80054ea:	60bb      	str	r3, [r7, #8]
	if (PWM > 0)
 80054ec:	f04f 0100 	mov.w	r1, #0
 80054f0:	6838      	ldr	r0, [r7, #0]
 80054f2:	f7fb fde3 	bl	80010bc <__aeabi_fcmpgt>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d046      	beq.n	800558a <Motor_setPWM+0x142>
	{
		__HAL_TIM_SET_COMPARE(Motor->htim,Motor->Forward_channel,Val);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d105      	bne.n	8005510 <Motor_setPWM+0xc8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	635a      	str	r2, [r3, #52]	; 0x34
 800550e:	e018      	b.n	8005542 <Motor_setPWM+0xfa>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b04      	cmp	r3, #4
 8005516:	d105      	bne.n	8005524 <Motor_setPWM+0xdc>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	6393      	str	r3, [r2, #56]	; 0x38
 8005522:	e00e      	b.n	8005542 <Motor_setPWM+0xfa>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b08      	cmp	r3, #8
 800552a:	d105      	bne.n	8005538 <Motor_setPWM+0xf0>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005536:	e004      	b.n	8005542 <Motor_setPWM+0xfa>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(Motor->htim,Motor->Backward_channel,0);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d105      	bne.n	8005556 <Motor_setPWM+0x10e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2200      	movs	r2, #0
 8005552:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		__HAL_TIM_SET_COMPARE(Motor->htim,Motor->Forward_channel,0);
		__HAL_TIM_SET_COMPARE(Motor->htim,Motor->Backward_channel,Val);
	}
}
 8005554:	e060      	b.n	8005618 <Motor_setPWM+0x1d0>
		__HAL_TIM_SET_COMPARE(Motor->htim,Motor->Backward_channel,0);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b04      	cmp	r3, #4
 800555c:	d105      	bne.n	800556a <Motor_setPWM+0x122>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	2300      	movs	r3, #0
 8005566:	6393      	str	r3, [r2, #56]	; 0x38
 8005568:	e056      	b.n	8005618 <Motor_setPWM+0x1d0>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	2b08      	cmp	r3, #8
 8005570:	d105      	bne.n	800557e <Motor_setPWM+0x136>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	2300      	movs	r3, #0
 800557a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800557c:	e04c      	b.n	8005618 <Motor_setPWM+0x1d0>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	2300      	movs	r3, #0
 8005586:	6413      	str	r3, [r2, #64]	; 0x40
}
 8005588:	e046      	b.n	8005618 <Motor_setPWM+0x1d0>
		__HAL_TIM_SET_COMPARE(Motor->htim,Motor->Forward_channel,0);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d105      	bne.n	800559e <Motor_setPWM+0x156>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2200      	movs	r2, #0
 800559a:	635a      	str	r2, [r3, #52]	; 0x34
 800559c:	e018      	b.n	80055d0 <Motor_setPWM+0x188>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d105      	bne.n	80055b2 <Motor_setPWM+0x16a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	2300      	movs	r3, #0
 80055ae:	6393      	str	r3, [r2, #56]	; 0x38
 80055b0:	e00e      	b.n	80055d0 <Motor_setPWM+0x188>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d105      	bne.n	80055c6 <Motor_setPWM+0x17e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	2300      	movs	r3, #0
 80055c2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80055c4:	e004      	b.n	80055d0 <Motor_setPWM+0x188>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	2300      	movs	r3, #0
 80055ce:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(Motor->htim,Motor->Backward_channel,Val);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d105      	bne.n	80055e4 <Motor_setPWM+0x19c>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80055e2:	e019      	b.n	8005618 <Motor_setPWM+0x1d0>
		__HAL_TIM_SET_COMPARE(Motor->htim,Motor->Backward_channel,Val);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d105      	bne.n	80055f8 <Motor_setPWM+0x1b0>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80055f6:	e00f      	b.n	8005618 <Motor_setPWM+0x1d0>
		__HAL_TIM_SET_COMPARE(Motor->htim,Motor->Backward_channel,Val);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d105      	bne.n	800560c <Motor_setPWM+0x1c4>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800560a:	e005      	b.n	8005618 <Motor_setPWM+0x1d0>
		__HAL_TIM_SET_COMPARE(Motor->htim,Motor->Backward_channel,Val);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	6413      	str	r3, [r2, #64]	; 0x40
}
 8005616:	e7ff      	b.n	8005618 <Motor_setPWM+0x1d0>
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	45e10000 	.word	0x45e10000
 8005624:	42c80000 	.word	0x42c80000

08005628 <Motor_start>:

void Motor_start(Motor_HandlerStruct *Motor)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	GPIO_WritePin(Motor->L_En, GPIO_PIN_SET);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	3314      	adds	r3, #20
 8005636:	e893 0003 	ldmia.w	r3, {r0, r1}
 800563a:	f7ff fec5 	bl	80053c8 <GPIO_WritePin>
	GPIO_WritePin(Motor->R_En, GPIO_PIN_SET);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	330c      	adds	r3, #12
 8005644:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005648:	f7ff febe 	bl	80053c8 <GPIO_WritePin>
	HAL_TIM_PWM_Start(Motor->htim, Motor->Forward_channel);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f7fe fbd2 	bl	8003e00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor->htim, Motor->Backward_channel);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f7fe fbca 	bl	8003e00 <HAL_TIM_PWM_Start>
}
 800566c:	bf00      	nop
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <Servo_Init>:
 *      Author: nhakh
 */
#include "Servo/Servo.h"

void Servo_Init(Servo_HandleStruct *Servo,TIM_HandleTypeDef *htim,uint32_t Channel,float Limit,float Offset)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
	Servo->htim = htim;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	601a      	str	r2, [r3, #0]
	Servo->Channel = Channel;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	605a      	str	r2, [r3, #4]
	Servo->Limit = Limit;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	609a      	str	r2, [r3, #8]
	Servo->Offset = Offset;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	60da      	str	r2, [r3, #12]
}
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr

080056a4 <Servo_Start>:

HAL_StatusTypeDef Servo_Start(Servo_HandleStruct *Servo)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
	return HAL_TIM_PWM_Start(Servo->htim, Servo->Channel);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f7fe fba2 	bl	8003e00 <HAL_TIM_PWM_Start>
 80056bc:	4603      	mov	r3, r0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <Angle2PWM>:

static float Angle2PWM(float Angle)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	return 1500 + Angle / 0.045;
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7fa fea9 	bl	8000428 <__aeabi_f2d>
 80056d6:	a30c      	add	r3, pc, #48	; (adr r3, 8005708 <Angle2PWM+0x40>)
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	f7fb f826 	bl	800072c <__aeabi_ddiv>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4610      	mov	r0, r2
 80056e6:	4619      	mov	r1, r3
 80056e8:	a309      	add	r3, pc, #36	; (adr r3, 8005710 <Angle2PWM+0x48>)
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	f7fa fd3d 	bl	800016c <__adddf3>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4610      	mov	r0, r2
 80056f8:	4619      	mov	r1, r3
 80056fa:	f7fb f9c5 	bl	8000a88 <__aeabi_d2f>
 80056fe:	4603      	mov	r3, r0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	70a3d70a 	.word	0x70a3d70a
 800570c:	3fa70a3d 	.word	0x3fa70a3d
 8005710:	00000000 	.word	0x00000000
 8005714:	40977000 	.word	0x40977000

08005718 <Servo_setPWM>:

void Servo_setPWM(Servo_HandleStruct *Servo,uint32_t PWM)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,PWM);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d105      	bne.n	8005736 <Servo_setPWM+0x1e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005734:	e018      	b.n	8005768 <Servo_setPWM+0x50>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,PWM);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b04      	cmp	r3, #4
 800573c:	d105      	bne.n	800574a <Servo_setPWM+0x32>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005748:	e00e      	b.n	8005768 <Servo_setPWM+0x50>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,PWM);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b08      	cmp	r3, #8
 8005750:	d105      	bne.n	800575e <Servo_setPWM+0x46>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800575c:	e004      	b.n	8005768 <Servo_setPWM+0x50>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,PWM);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	6413      	str	r3, [r2, #64]	; 0x40
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr

08005772 <Servo_setAngle>:
void Servo_setAngle(Servo_HandleStruct* Servo,float Angle)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
	if (Angle > Servo->Limit) Angle = Servo->Limit;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	4619      	mov	r1, r3
 8005782:	6838      	ldr	r0, [r7, #0]
 8005784:	f7fb fc9a 	bl	80010bc <__aeabi_fcmpgt>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <Servo_setAngle+0x24>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	e00f      	b.n	80057b6 <Servo_setAngle+0x44>
	else if (Angle < -Servo->Limit) Angle = -Servo->Limit;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800579e:	4619      	mov	r1, r3
 80057a0:	6838      	ldr	r0, [r7, #0]
 80057a2:	f7fb fc6d 	bl	8001080 <__aeabi_fcmplt>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d004      	beq.n	80057b6 <Servo_setAngle+0x44>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80057b4:	603b      	str	r3, [r7, #0]

	Servo_setPWM(Servo, Angle2PWM(Angle + Servo->Offset));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	6839      	ldr	r1, [r7, #0]
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fb f9b9 	bl	8000b34 <__addsf3>
 80057c2:	4603      	mov	r3, r0
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff ff7f 	bl	80056c8 <Angle2PWM>
 80057ca:	4603      	mov	r3, r0
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fb fca5 	bl	800111c <__aeabi_f2uiz>
 80057d2:	4603      	mov	r3, r0
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7ff ff9e 	bl	8005718 <Servo_setPWM>
}
 80057dc:	bf00      	nop
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057ea:	f3ef 8305 	mrs	r3, IPSR
 80057ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80057f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10f      	bne.n	8005816 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f6:	f3ef 8310 	mrs	r3, PRIMASK
 80057fa:	607b      	str	r3, [r7, #4]
  return(result);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d109      	bne.n	8005816 <osKernelInitialize+0x32>
 8005802:	4b10      	ldr	r3, [pc, #64]	; (8005844 <osKernelInitialize+0x60>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d109      	bne.n	800581e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800580a:	f3ef 8311 	mrs	r3, BASEPRI
 800580e:	603b      	str	r3, [r7, #0]
  return(result);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005816:	f06f 0305 	mvn.w	r3, #5
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	e00c      	b.n	8005838 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800581e:	4b09      	ldr	r3, [pc, #36]	; (8005844 <osKernelInitialize+0x60>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d105      	bne.n	8005832 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005826:	4b07      	ldr	r3, [pc, #28]	; (8005844 <osKernelInitialize+0x60>)
 8005828:	2201      	movs	r2, #1
 800582a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	e002      	b.n	8005838 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005832:	f04f 33ff 	mov.w	r3, #4294967295
 8005836:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005838:	68fb      	ldr	r3, [r7, #12]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr
 8005844:	2000048c 	.word	0x2000048c

08005848 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800584e:	f3ef 8305 	mrs	r3, IPSR
 8005852:	60bb      	str	r3, [r7, #8]
  return(result);
 8005854:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10f      	bne.n	800587a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800585a:	f3ef 8310 	mrs	r3, PRIMASK
 800585e:	607b      	str	r3, [r7, #4]
  return(result);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d109      	bne.n	800587a <osKernelStart+0x32>
 8005866:	4b11      	ldr	r3, [pc, #68]	; (80058ac <osKernelStart+0x64>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d109      	bne.n	8005882 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800586e:	f3ef 8311 	mrs	r3, BASEPRI
 8005872:	603b      	str	r3, [r7, #0]
  return(result);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <osKernelStart+0x3a>
    stat = osErrorISR;
 800587a:	f06f 0305 	mvn.w	r3, #5
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	e00e      	b.n	80058a0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005882:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <osKernelStart+0x64>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d107      	bne.n	800589a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800588a:	4b08      	ldr	r3, [pc, #32]	; (80058ac <osKernelStart+0x64>)
 800588c:	2202      	movs	r2, #2
 800588e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005890:	f001 fa16 	bl	8006cc0 <vTaskStartScheduler>
      stat = osOK;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	e002      	b.n	80058a0 <osKernelStart+0x58>
    } else {
      stat = osError;
 800589a:	f04f 33ff 	mov.w	r3, #4294967295
 800589e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80058a0:	68fb      	ldr	r3, [r7, #12]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	2000048c 	.word	0x2000048c

080058b0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058b6:	f3ef 8305 	mrs	r3, IPSR
 80058ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80058bc:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10f      	bne.n	80058e2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058c2:	f3ef 8310 	mrs	r3, PRIMASK
 80058c6:	607b      	str	r3, [r7, #4]
  return(result);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <osKernelGetTickCount+0x32>
 80058ce:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <osKernelGetTickCount+0x4c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d109      	bne.n	80058ea <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058d6:	f3ef 8311 	mrs	r3, BASEPRI
 80058da:	603b      	str	r3, [r7, #0]
  return(result);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80058e2:	f001 fb0d 	bl	8006f00 <xTaskGetTickCountFromISR>
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	e002      	b.n	80058f0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80058ea:	f001 fafb 	bl	8006ee4 <xTaskGetTickCount>
 80058ee:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80058f0:	68fb      	ldr	r3, [r7, #12]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	2000048c 	.word	0x2000048c

08005900 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005900:	b580      	push	{r7, lr}
 8005902:	b092      	sub	sp, #72	; 0x48
 8005904:	af04      	add	r7, sp, #16
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005910:	f3ef 8305 	mrs	r3, IPSR
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005918:	2b00      	cmp	r3, #0
 800591a:	f040 8094 	bne.w	8005a46 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800591e:	f3ef 8310 	mrs	r3, PRIMASK
 8005922:	623b      	str	r3, [r7, #32]
  return(result);
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f040 808d 	bne.w	8005a46 <osThreadNew+0x146>
 800592c:	4b48      	ldr	r3, [pc, #288]	; (8005a50 <osThreadNew+0x150>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d106      	bne.n	8005942 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005934:	f3ef 8311 	mrs	r3, BASEPRI
 8005938:	61fb      	str	r3, [r7, #28]
  return(result);
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	2b00      	cmp	r3, #0
 800593e:	f040 8082 	bne.w	8005a46 <osThreadNew+0x146>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d07e      	beq.n	8005a46 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005948:	2380      	movs	r3, #128	; 0x80
 800594a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800594c:	2318      	movs	r3, #24
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005950:	2300      	movs	r3, #0
 8005952:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005954:	f107 031b 	add.w	r3, r7, #27
 8005958:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800595a:	f04f 33ff 	mov.w	r3, #4294967295
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d045      	beq.n	80059f2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <osThreadNew+0x74>
        name = attr->name;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <osThreadNew+0x9a>
 8005988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598a:	2b38      	cmp	r3, #56	; 0x38
 800598c:	d805      	bhi.n	800599a <osThreadNew+0x9a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <osThreadNew+0x9e>
        return (NULL);
 800599a:	2300      	movs	r3, #0
 800599c:	e054      	b.n	8005a48 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	089b      	lsrs	r3, r3, #2
 80059ac:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00e      	beq.n	80059d4 <osThreadNew+0xd4>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	2b6b      	cmp	r3, #107	; 0x6b
 80059bc:	d90a      	bls.n	80059d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d006      	beq.n	80059d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <osThreadNew+0xd4>
        mem = 1;
 80059ce:	2301      	movs	r3, #1
 80059d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d2:	e010      	b.n	80059f6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10c      	bne.n	80059f6 <osThreadNew+0xf6>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d108      	bne.n	80059f6 <osThreadNew+0xf6>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d104      	bne.n	80059f6 <osThreadNew+0xf6>
          mem = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80059f0:	e001      	b.n	80059f6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d110      	bne.n	8005a1e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a04:	9202      	str	r2, [sp, #8]
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 fe7a 	bl	800670c <xTaskCreateStatic>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	e013      	b.n	8005a46 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d110      	bne.n	8005a46 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	f107 0314 	add.w	r3, r7, #20
 8005a2c:	9301      	str	r3, [sp, #4]
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 fec4 	bl	80067c4 <xTaskCreate>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d001      	beq.n	8005a46 <osThreadNew+0x146>
          hTask = NULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a46:	697b      	ldr	r3, [r7, #20]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3738      	adds	r7, #56	; 0x38
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	2000048c 	.word	0x2000048c

08005a54 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a60:	f3ef 8305 	mrs	r3, IPSR
 8005a64:	617b      	str	r3, [r7, #20]
  return(result);
 8005a66:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10f      	bne.n	8005a8c <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a70:	613b      	str	r3, [r7, #16]
  return(result);
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d109      	bne.n	8005a8c <osThreadSuspend+0x38>
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <osThreadSuspend+0x64>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d109      	bne.n	8005a94 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a80:	f3ef 8311 	mrs	r3, BASEPRI
 8005a84:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8005a8c:	f06f 0305 	mvn.w	r3, #5
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	e00b      	b.n	8005aac <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d103      	bne.n	8005aa2 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8005a9a:	f06f 0303 	mvn.w	r3, #3
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	e004      	b.n	8005aac <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8005aa6:	69b8      	ldr	r0, [r7, #24]
 8005aa8:	f000 fffc 	bl	8006aa4 <vTaskSuspend>
  }

  return (stat);
 8005aac:	69fb      	ldr	r3, [r7, #28]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	2000048c 	.word	0x2000048c

08005abc <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ac8:	f3ef 8305 	mrs	r3, IPSR
 8005acc:	617b      	str	r3, [r7, #20]
  return(result);
 8005ace:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10f      	bne.n	8005af4 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ad8:	613b      	str	r3, [r7, #16]
  return(result);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d109      	bne.n	8005af4 <osThreadResume+0x38>
 8005ae0:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <osThreadResume+0x64>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d109      	bne.n	8005afc <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ae8:	f3ef 8311 	mrs	r3, BASEPRI
 8005aec:	60fb      	str	r3, [r7, #12]
  return(result);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <osThreadResume+0x40>
    stat = osErrorISR;
 8005af4:	f06f 0305 	mvn.w	r3, #5
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	e00b      	b.n	8005b14 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d103      	bne.n	8005b0a <osThreadResume+0x4e>
    stat = osErrorParameter;
 8005b02:	f06f 0303 	mvn.w	r3, #3
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	e004      	b.n	8005b14 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8005b0e:	69b8      	ldr	r0, [r7, #24]
 8005b10:	f001 f878 	bl	8006c04 <vTaskResume>
  }

  return (stat);
 8005b14:	69fb      	ldr	r3, [r7, #28]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3720      	adds	r7, #32
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	2000048c 	.word	0x2000048c

08005b24 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b2c:	f3ef 8305 	mrs	r3, IPSR
 8005b30:	613b      	str	r3, [r7, #16]
  return(result);
 8005b32:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10f      	bne.n	8005b58 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b38:	f3ef 8310 	mrs	r3, PRIMASK
 8005b3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d109      	bne.n	8005b58 <osDelay+0x34>
 8005b44:	4b0d      	ldr	r3, [pc, #52]	; (8005b7c <osDelay+0x58>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d109      	bne.n	8005b60 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b50:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <osDelay+0x3c>
    stat = osErrorISR;
 8005b58:	f06f 0305 	mvn.w	r3, #5
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	e007      	b.n	8005b70 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 ff66 	bl	8006a3c <vTaskDelay>
    }
  }

  return (stat);
 8005b70:	697b      	ldr	r3, [r7, #20]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	2000048c 	.word	0x2000048c

08005b80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4a06      	ldr	r2, [pc, #24]	; (8005ba8 <vApplicationGetIdleTaskMemory+0x28>)
 8005b90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	4a05      	ldr	r2, [pc, #20]	; (8005bac <vApplicationGetIdleTaskMemory+0x2c>)
 8005b96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2280      	movs	r2, #128	; 0x80
 8005b9c:	601a      	str	r2, [r3, #0]
}
 8005b9e:	bf00      	nop
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr
 8005ba8:	20000490 	.word	0x20000490
 8005bac:	200004fc 	.word	0x200004fc

08005bb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4a07      	ldr	r2, [pc, #28]	; (8005bdc <vApplicationGetTimerTaskMemory+0x2c>)
 8005bc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	4a06      	ldr	r2, [pc, #24]	; (8005be0 <vApplicationGetTimerTaskMemory+0x30>)
 8005bc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bce:	601a      	str	r2, [r3, #0]
}
 8005bd0:	bf00      	nop
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	200006fc 	.word	0x200006fc
 8005be0:	20000768 	.word	0x20000768

08005be4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f103 0208 	add.w	r2, r3, #8
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f103 0208 	add.w	r2, r3, #8
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f103 0208 	add.w	r2, r3, #8
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr

08005c22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc80      	pop	{r7}
 8005c38:	4770      	bx	lr

08005c3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	601a      	str	r2, [r3, #0]
}
 8005c76:	bf00      	nop
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr

08005c80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d103      	bne.n	8005ca0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	e00c      	b.n	8005cba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	e002      	b.n	8005cae <vListInsert+0x2e>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	60fb      	str	r3, [r7, #12]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d2f6      	bcs.n	8005ca8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	601a      	str	r2, [r3, #0]
}
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr

08005cf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6892      	ldr	r2, [r2, #8]
 8005d06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6852      	ldr	r2, [r2, #4]
 8005d10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d103      	bne.n	8005d24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	1e5a      	subs	r2, r3, #1
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr
	...

08005d44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10a      	bne.n	8005d6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d6a:	bf00      	nop
 8005d6c:	e7fe      	b.n	8005d6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d6e:	f002 f8e5 	bl	8007f3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7a:	68f9      	ldr	r1, [r7, #12]
 8005d7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d7e:	fb01 f303 	mul.w	r3, r1, r3
 8005d82:	441a      	add	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	68f9      	ldr	r1, [r7, #12]
 8005da2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005da4:	fb01 f303 	mul.w	r3, r1, r3
 8005da8:	441a      	add	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	22ff      	movs	r2, #255	; 0xff
 8005db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	22ff      	movs	r2, #255	; 0xff
 8005dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d114      	bne.n	8005dee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01a      	beq.n	8005e02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3310      	adds	r3, #16
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f001 fa11 	bl	80071f8 <xTaskRemoveFromEventList>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d012      	beq.n	8005e02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <xQueueGenericReset+0xcc>)
 8005dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	e009      	b.n	8005e02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3310      	adds	r3, #16
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff fef6 	bl	8005be4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3324      	adds	r3, #36	; 0x24
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff fef1 	bl	8005be4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e02:	f002 f8cb 	bl	8007f9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e06:	2301      	movs	r3, #1
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	e000ed04 	.word	0xe000ed04

08005e14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08e      	sub	sp, #56	; 0x38
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <xQueueGenericCreateStatic+0x52>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <xQueueGenericCreateStatic+0x56>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <xQueueGenericCreateStatic+0x58>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10a      	bne.n	8005e86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	623b      	str	r3, [r7, #32]
}
 8005e82:	bf00      	nop
 8005e84:	e7fe      	b.n	8005e84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d102      	bne.n	8005e92 <xQueueGenericCreateStatic+0x7e>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <xQueueGenericCreateStatic+0x82>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e000      	b.n	8005e98 <xQueueGenericCreateStatic+0x84>
 8005e96:	2300      	movs	r3, #0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	61fb      	str	r3, [r7, #28]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005eb2:	2350      	movs	r3, #80	; 0x50
 8005eb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b50      	cmp	r3, #80	; 0x50
 8005eba:	d00a      	beq.n	8005ed2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	61bb      	str	r3, [r7, #24]
}
 8005ece:	bf00      	nop
 8005ed0:	e7fe      	b.n	8005ed0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00d      	beq.n	8005ef8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ee4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	4613      	mov	r3, r2
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f805 	bl	8005f02 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3730      	adds	r7, #48	; 0x30
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b084      	sub	sp, #16
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	607a      	str	r2, [r7, #4]
 8005f0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d103      	bne.n	8005f1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	e002      	b.n	8005f24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f30:	2101      	movs	r1, #1
 8005f32:	69b8      	ldr	r0, [r7, #24]
 8005f34:	f7ff ff06 	bl	8005d44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	78fa      	ldrb	r2, [r7, #3]
 8005f3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f40:	bf00      	nop
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08e      	sub	sp, #56	; 0x38
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f56:	2300      	movs	r3, #0
 8005f58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <xQueueGenericSend+0x32>
	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f76:	bf00      	nop
 8005f78:	e7fe      	b.n	8005f78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d103      	bne.n	8005f88 <xQueueGenericSend+0x40>
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <xQueueGenericSend+0x44>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <xQueueGenericSend+0x46>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <xQueueGenericSend+0x60>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fa4:	bf00      	nop
 8005fa6:	e7fe      	b.n	8005fa6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d103      	bne.n	8005fb6 <xQueueGenericSend+0x6e>
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <xQueueGenericSend+0x72>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e000      	b.n	8005fbc <xQueueGenericSend+0x74>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <xQueueGenericSend+0x8e>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	623b      	str	r3, [r7, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fd6:	f001 fad1 	bl	800757c <xTaskGetSchedulerState>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d102      	bne.n	8005fe6 <xQueueGenericSend+0x9e>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <xQueueGenericSend+0xa2>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e000      	b.n	8005fec <xQueueGenericSend+0xa4>
 8005fea:	2300      	movs	r3, #0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10a      	bne.n	8006006 <xQueueGenericSend+0xbe>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	61fb      	str	r3, [r7, #28]
}
 8006002:	bf00      	nop
 8006004:	e7fe      	b.n	8006004 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006006:	f001 ff99 	bl	8007f3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006012:	429a      	cmp	r2, r3
 8006014:	d302      	bcc.n	800601c <xQueueGenericSend+0xd4>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b02      	cmp	r3, #2
 800601a:	d129      	bne.n	8006070 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006022:	f000 fa07 	bl	8006434 <prvCopyDataToQueue>
 8006026:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	2b00      	cmp	r3, #0
 800602e:	d010      	beq.n	8006052 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	3324      	adds	r3, #36	; 0x24
 8006034:	4618      	mov	r0, r3
 8006036:	f001 f8df 	bl	80071f8 <xTaskRemoveFromEventList>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d013      	beq.n	8006068 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006040:	4b3f      	ldr	r3, [pc, #252]	; (8006140 <xQueueGenericSend+0x1f8>)
 8006042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	e00a      	b.n	8006068 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006058:	4b39      	ldr	r3, [pc, #228]	; (8006140 <xQueueGenericSend+0x1f8>)
 800605a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006068:	f001 ff98 	bl	8007f9c <vPortExitCritical>
				return pdPASS;
 800606c:	2301      	movs	r3, #1
 800606e:	e063      	b.n	8006138 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d103      	bne.n	800607e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006076:	f001 ff91 	bl	8007f9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800607a:	2300      	movs	r3, #0
 800607c:	e05c      	b.n	8006138 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006080:	2b00      	cmp	r3, #0
 8006082:	d106      	bne.n	8006092 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006084:	f107 0314 	add.w	r3, r7, #20
 8006088:	4618      	mov	r0, r3
 800608a:	f001 f919 	bl	80072c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800608e:	2301      	movs	r3, #1
 8006090:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006092:	f001 ff83 	bl	8007f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006096:	f000 fe79 	bl	8006d8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800609a:	f001 ff4f 	bl	8007f3c <vPortEnterCritical>
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060a4:	b25b      	sxtb	r3, r3
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060aa:	d103      	bne.n	80060b4 <xQueueGenericSend+0x16c>
 80060ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060ba:	b25b      	sxtb	r3, r3
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d103      	bne.n	80060ca <xQueueGenericSend+0x182>
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060ca:	f001 ff67 	bl	8007f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060ce:	1d3a      	adds	r2, r7, #4
 80060d0:	f107 0314 	add.w	r3, r7, #20
 80060d4:	4611      	mov	r1, r2
 80060d6:	4618      	mov	r0, r3
 80060d8:	f001 f908 	bl	80072ec <xTaskCheckForTimeOut>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d124      	bne.n	800612c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060e4:	f000 fa9e 	bl	8006624 <prvIsQueueFull>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d018      	beq.n	8006120 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	3310      	adds	r3, #16
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	4611      	mov	r1, r2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 f82e 	bl	8007158 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80060fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060fe:	f000 fa29 	bl	8006554 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006102:	f000 fe51 	bl	8006da8 <xTaskResumeAll>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	f47f af7c 	bne.w	8006006 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800610e:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <xQueueGenericSend+0x1f8>)
 8006110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	e772      	b.n	8006006 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006122:	f000 fa17 	bl	8006554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006126:	f000 fe3f 	bl	8006da8 <xTaskResumeAll>
 800612a:	e76c      	b.n	8006006 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800612c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800612e:	f000 fa11 	bl	8006554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006132:	f000 fe39 	bl	8006da8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006136:	2300      	movs	r3, #0
		}
	}
}
 8006138:	4618      	mov	r0, r3
 800613a:	3738      	adds	r7, #56	; 0x38
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	e000ed04 	.word	0xe000ed04

08006144 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08e      	sub	sp, #56	; 0x38
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d103      	bne.n	8006180 <xQueueGenericSendFromISR+0x3c>
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <xQueueGenericSendFromISR+0x40>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <xQueueGenericSendFromISR+0x42>
 8006184:	2300      	movs	r3, #0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	623b      	str	r3, [r7, #32]
}
 800619c:	bf00      	nop
 800619e:	e7fe      	b.n	800619e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d103      	bne.n	80061ae <xQueueGenericSendFromISR+0x6a>
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <xQueueGenericSendFromISR+0x6e>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e000      	b.n	80061b4 <xQueueGenericSendFromISR+0x70>
 80061b2:	2300      	movs	r3, #0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	61fb      	str	r3, [r7, #28]
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061ce:	f001 ff77 	bl	80080c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061d2:	f3ef 8211 	mrs	r2, BASEPRI
 80061d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	61ba      	str	r2, [r7, #24]
 80061e8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80061ea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d302      	bcc.n	8006200 <xQueueGenericSendFromISR+0xbc>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d12c      	bne.n	800625a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006210:	f000 f910 	bl	8006434 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006214:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621c:	d112      	bne.n	8006244 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	2b00      	cmp	r3, #0
 8006224:	d016      	beq.n	8006254 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	3324      	adds	r3, #36	; 0x24
 800622a:	4618      	mov	r0, r3
 800622c:	f000 ffe4 	bl	80071f8 <xTaskRemoveFromEventList>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00e      	beq.n	8006254 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00b      	beq.n	8006254 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	e007      	b.n	8006254 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006244:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006248:	3301      	adds	r3, #1
 800624a:	b2db      	uxtb	r3, r3
 800624c:	b25a      	sxtb	r2, r3
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006254:	2301      	movs	r3, #1
 8006256:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006258:	e001      	b.n	800625e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800625a:	2300      	movs	r3, #0
 800625c:	637b      	str	r3, [r7, #52]	; 0x34
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006268:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800626a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800626c:	4618      	mov	r0, r3
 800626e:	3738      	adds	r7, #56	; 0x38
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08c      	sub	sp, #48	; 0x30
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006280:	2300      	movs	r3, #0
 8006282:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10a      	bne.n	80062a4 <xQueueReceive+0x30>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	623b      	str	r3, [r7, #32]
}
 80062a0:	bf00      	nop
 80062a2:	e7fe      	b.n	80062a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d103      	bne.n	80062b2 <xQueueReceive+0x3e>
 80062aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <xQueueReceive+0x42>
 80062b2:	2301      	movs	r3, #1
 80062b4:	e000      	b.n	80062b8 <xQueueReceive+0x44>
 80062b6:	2300      	movs	r3, #0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <xQueueReceive+0x5e>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	61fb      	str	r3, [r7, #28]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062d2:	f001 f953 	bl	800757c <xTaskGetSchedulerState>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d102      	bne.n	80062e2 <xQueueReceive+0x6e>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <xQueueReceive+0x72>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <xQueueReceive+0x74>
 80062e6:	2300      	movs	r3, #0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10a      	bne.n	8006302 <xQueueReceive+0x8e>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	61bb      	str	r3, [r7, #24]
}
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006302:	f001 fe1b 	bl	8007f3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	2b00      	cmp	r3, #0
 8006310:	d01f      	beq.n	8006352 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006312:	68b9      	ldr	r1, [r7, #8]
 8006314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006316:	f000 f8f7 	bl	8006508 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	1e5a      	subs	r2, r3, #1
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00f      	beq.n	800634a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	3310      	adds	r3, #16
 800632e:	4618      	mov	r0, r3
 8006330:	f000 ff62 	bl	80071f8 <xTaskRemoveFromEventList>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d007      	beq.n	800634a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800633a:	4b3d      	ldr	r3, [pc, #244]	; (8006430 <xQueueReceive+0x1bc>)
 800633c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800634a:	f001 fe27 	bl	8007f9c <vPortExitCritical>
				return pdPASS;
 800634e:	2301      	movs	r3, #1
 8006350:	e069      	b.n	8006426 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d103      	bne.n	8006360 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006358:	f001 fe20 	bl	8007f9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800635c:	2300      	movs	r3, #0
 800635e:	e062      	b.n	8006426 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006366:	f107 0310 	add.w	r3, r7, #16
 800636a:	4618      	mov	r0, r3
 800636c:	f000 ffa8 	bl	80072c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006370:	2301      	movs	r3, #1
 8006372:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006374:	f001 fe12 	bl	8007f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006378:	f000 fd08 	bl	8006d8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800637c:	f001 fdde 	bl	8007f3c <vPortEnterCritical>
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006386:	b25b      	sxtb	r3, r3
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638c:	d103      	bne.n	8006396 <xQueueReceive+0x122>
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800639c:	b25b      	sxtb	r3, r3
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a2:	d103      	bne.n	80063ac <xQueueReceive+0x138>
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063ac:	f001 fdf6 	bl	8007f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063b0:	1d3a      	adds	r2, r7, #4
 80063b2:	f107 0310 	add.w	r3, r7, #16
 80063b6:	4611      	mov	r1, r2
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 ff97 	bl	80072ec <xTaskCheckForTimeOut>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d123      	bne.n	800640c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063c6:	f000 f917 	bl	80065f8 <prvIsQueueEmpty>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d017      	beq.n	8006400 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	3324      	adds	r3, #36	; 0x24
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	4611      	mov	r1, r2
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 febd 	bl	8007158 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063e0:	f000 f8b8 	bl	8006554 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063e4:	f000 fce0 	bl	8006da8 <xTaskResumeAll>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d189      	bne.n	8006302 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80063ee:	4b10      	ldr	r3, [pc, #64]	; (8006430 <xQueueReceive+0x1bc>)
 80063f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	e780      	b.n	8006302 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006402:	f000 f8a7 	bl	8006554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006406:	f000 fccf 	bl	8006da8 <xTaskResumeAll>
 800640a:	e77a      	b.n	8006302 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800640c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800640e:	f000 f8a1 	bl	8006554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006412:	f000 fcc9 	bl	8006da8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006418:	f000 f8ee 	bl	80065f8 <prvIsQueueEmpty>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	f43f af6f 	beq.w	8006302 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006426:	4618      	mov	r0, r3
 8006428:	3730      	adds	r7, #48	; 0x30
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	e000ed04 	.word	0xe000ed04

08006434 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006440:	2300      	movs	r3, #0
 8006442:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10d      	bne.n	800646e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d14d      	bne.n	80064f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	4618      	mov	r0, r3
 8006460:	f001 f8aa 	bl	80075b8 <xTaskPriorityDisinherit>
 8006464:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	605a      	str	r2, [r3, #4]
 800646c:	e043      	b.n	80064f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d119      	bne.n	80064a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6898      	ldr	r0, [r3, #8]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	461a      	mov	r2, r3
 800647e:	68b9      	ldr	r1, [r7, #8]
 8006480:	f002 fe71 	bl	8009166 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	441a      	add	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	429a      	cmp	r2, r3
 800649c:	d32b      	bcc.n	80064f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	609a      	str	r2, [r3, #8]
 80064a6:	e026      	b.n	80064f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	68d8      	ldr	r0, [r3, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b0:	461a      	mov	r2, r3
 80064b2:	68b9      	ldr	r1, [r7, #8]
 80064b4:	f002 fe57 	bl	8009166 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	425b      	negs	r3, r3
 80064c2:	441a      	add	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d207      	bcs.n	80064e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064dc:	425b      	negs	r3, r3
 80064de:	441a      	add	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d105      	bne.n	80064f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064fe:	697b      	ldr	r3, [r7, #20]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	d018      	beq.n	800654c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	441a      	add	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d303      	bcc.n	800653c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68d9      	ldr	r1, [r3, #12]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006544:	461a      	mov	r2, r3
 8006546:	6838      	ldr	r0, [r7, #0]
 8006548:	f002 fe0d 	bl	8009166 <memcpy>
	}
}
 800654c:	bf00      	nop
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800655c:	f001 fcee 	bl	8007f3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006566:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006568:	e011      	b.n	800658e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	2b00      	cmp	r3, #0
 8006570:	d012      	beq.n	8006598 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3324      	adds	r3, #36	; 0x24
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fe3e 	bl	80071f8 <xTaskRemoveFromEventList>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006582:	f000 ff15 	bl	80073b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	3b01      	subs	r3, #1
 800658a:	b2db      	uxtb	r3, r3
 800658c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800658e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006592:	2b00      	cmp	r3, #0
 8006594:	dce9      	bgt.n	800656a <prvUnlockQueue+0x16>
 8006596:	e000      	b.n	800659a <prvUnlockQueue+0x46>
					break;
 8006598:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	22ff      	movs	r2, #255	; 0xff
 800659e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80065a2:	f001 fcfb 	bl	8007f9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80065a6:	f001 fcc9 	bl	8007f3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065b2:	e011      	b.n	80065d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d012      	beq.n	80065e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3310      	adds	r3, #16
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fe19 	bl	80071f8 <xTaskRemoveFromEventList>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065cc:	f000 fef0 	bl	80073b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065d0:	7bbb      	ldrb	r3, [r7, #14]
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	dce9      	bgt.n	80065b4 <prvUnlockQueue+0x60>
 80065e0:	e000      	b.n	80065e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	22ff      	movs	r2, #255	; 0xff
 80065e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80065ec:	f001 fcd6 	bl	8007f9c <vPortExitCritical>
}
 80065f0:	bf00      	nop
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006600:	f001 fc9c 	bl	8007f3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006608:	2b00      	cmp	r3, #0
 800660a:	d102      	bne.n	8006612 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800660c:	2301      	movs	r3, #1
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	e001      	b.n	8006616 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006612:	2300      	movs	r3, #0
 8006614:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006616:	f001 fcc1 	bl	8007f9c <vPortExitCritical>

	return xReturn;
 800661a:	68fb      	ldr	r3, [r7, #12]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800662c:	f001 fc86 	bl	8007f3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006638:	429a      	cmp	r2, r3
 800663a:	d102      	bne.n	8006642 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800663c:	2301      	movs	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e001      	b.n	8006646 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006646:	f001 fca9 	bl	8007f9c <vPortExitCritical>

	return xReturn;
 800664a:	68fb      	ldr	r3, [r7, #12]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	e014      	b.n	800668e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006664:	4a0e      	ldr	r2, [pc, #56]	; (80066a0 <vQueueAddToRegistry+0x4c>)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10b      	bne.n	8006688 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006670:	490b      	ldr	r1, [pc, #44]	; (80066a0 <vQueueAddToRegistry+0x4c>)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800667a:	4a09      	ldr	r2, [pc, #36]	; (80066a0 <vQueueAddToRegistry+0x4c>)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	4413      	add	r3, r2
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006686:	e006      	b.n	8006696 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3301      	adds	r3, #1
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b07      	cmp	r3, #7
 8006692:	d9e7      	bls.n	8006664 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	bc80      	pop	{r7}
 800669e:	4770      	bx	lr
 80066a0:	20000b68 	.word	0x20000b68

080066a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80066b4:	f001 fc42 	bl	8007f3c <vPortEnterCritical>
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066be:	b25b      	sxtb	r3, r3
 80066c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c4:	d103      	bne.n	80066ce <vQueueWaitForMessageRestricted+0x2a>
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066d4:	b25b      	sxtb	r3, r3
 80066d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066da:	d103      	bne.n	80066e4 <vQueueWaitForMessageRestricted+0x40>
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066e4:	f001 fc5a 	bl	8007f9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d106      	bne.n	80066fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	3324      	adds	r3, #36	; 0x24
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fd51 	bl	80071a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80066fe:	6978      	ldr	r0, [r7, #20]
 8006700:	f7ff ff28 	bl	8006554 <prvUnlockQueue>
	}
 8006704:	bf00      	nop
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08e      	sub	sp, #56	; 0x38
 8006710:	af04      	add	r7, sp, #16
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800671a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	623b      	str	r3, [r7, #32]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <xTaskCreateStatic+0x46>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	61fb      	str	r3, [r7, #28]
}
 800674e:	bf00      	nop
 8006750:	e7fe      	b.n	8006750 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006752:	236c      	movs	r3, #108	; 0x6c
 8006754:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b6c      	cmp	r3, #108	; 0x6c
 800675a:	d00a      	beq.n	8006772 <xTaskCreateStatic+0x66>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	61bb      	str	r3, [r7, #24]
}
 800676e:	bf00      	nop
 8006770:	e7fe      	b.n	8006770 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01e      	beq.n	80067b6 <xTaskCreateStatic+0xaa>
 8006778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677a:	2b00      	cmp	r3, #0
 800677c:	d01b      	beq.n	80067b6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006786:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	2202      	movs	r2, #2
 800678c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006790:	2300      	movs	r3, #0
 8006792:	9303      	str	r3, [sp, #12]
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	9302      	str	r3, [sp, #8]
 8006798:	f107 0314 	add.w	r3, r7, #20
 800679c:	9301      	str	r3, [sp, #4]
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f850 	bl	800684e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067b0:	f000 f8d4 	bl	800695c <prvAddNewTaskToReadyList>
 80067b4:	e001      	b.n	80067ba <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067ba:	697b      	ldr	r3, [r7, #20]
	}
 80067bc:	4618      	mov	r0, r3
 80067be:	3728      	adds	r7, #40	; 0x28
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08c      	sub	sp, #48	; 0x30
 80067c8:	af04      	add	r7, sp, #16
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	4613      	mov	r3, r2
 80067d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d4:	88fb      	ldrh	r3, [r7, #6]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4618      	mov	r0, r3
 80067da:	f001 fcaf 	bl	800813c <pvPortMalloc>
 80067de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00e      	beq.n	8006804 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80067e6:	206c      	movs	r0, #108	; 0x6c
 80067e8:	f001 fca8 	bl	800813c <pvPortMalloc>
 80067ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30
 80067fa:	e005      	b.n	8006808 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067fc:	6978      	ldr	r0, [r7, #20]
 80067fe:	f001 fd61 	bl	80082c4 <vPortFree>
 8006802:	e001      	b.n	8006808 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006804:	2300      	movs	r3, #0
 8006806:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d017      	beq.n	800683e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006816:	88fa      	ldrh	r2, [r7, #6]
 8006818:	2300      	movs	r3, #0
 800681a:	9303      	str	r3, [sp, #12]
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	9302      	str	r3, [sp, #8]
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	9301      	str	r3, [sp, #4]
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	68b9      	ldr	r1, [r7, #8]
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 f80e 	bl	800684e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006832:	69f8      	ldr	r0, [r7, #28]
 8006834:	f000 f892 	bl	800695c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006838:	2301      	movs	r3, #1
 800683a:	61bb      	str	r3, [r7, #24]
 800683c:	e002      	b.n	8006844 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800683e:	f04f 33ff 	mov.w	r3, #4294967295
 8006842:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006844:	69bb      	ldr	r3, [r7, #24]
	}
 8006846:	4618      	mov	r0, r3
 8006848:	3720      	adds	r7, #32
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b088      	sub	sp, #32
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	607a      	str	r2, [r7, #4]
 800685a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	461a      	mov	r2, r3
 8006866:	21a5      	movs	r1, #165	; 0xa5
 8006868:	f002 fbef 	bl	800904a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006876:	3b01      	subs	r3, #1
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	f023 0307 	bic.w	r3, r3, #7
 8006884:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	f003 0307 	and.w	r3, r3, #7
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	617b      	str	r3, [r7, #20]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068a6:	2300      	movs	r3, #0
 80068a8:	61fb      	str	r3, [r7, #28]
 80068aa:	e012      	b.n	80068d2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	4413      	add	r3, r2
 80068b2:	7819      	ldrb	r1, [r3, #0]
 80068b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	4413      	add	r3, r2
 80068ba:	3334      	adds	r3, #52	; 0x34
 80068bc:	460a      	mov	r2, r1
 80068be:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d006      	beq.n	80068da <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	3301      	adds	r3, #1
 80068d0:	61fb      	str	r3, [r7, #28]
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	2b1f      	cmp	r3, #31
 80068d6:	d9e9      	bls.n	80068ac <prvInitialiseNewTask+0x5e>
 80068d8:	e000      	b.n	80068dc <prvInitialiseNewTask+0x8e>
		{
			break;
 80068da:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e6:	2b37      	cmp	r3, #55	; 0x37
 80068e8:	d901      	bls.n	80068ee <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068ea:	2337      	movs	r3, #55	; 0x37
 80068ec:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f8:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	2200      	movs	r2, #0
 80068fe:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	3304      	adds	r3, #4
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff f98c 	bl	8005c22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	3318      	adds	r3, #24
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff f987 	bl	8005c22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006918:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006928:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	2200      	movs	r2, #0
 800692e:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	68f9      	ldr	r1, [r7, #12]
 800693c:	69b8      	ldr	r0, [r7, #24]
 800693e:	f001 fa0f 	bl	8007d60 <pxPortInitialiseStack>
 8006942:	4602      	mov	r2, r0
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	2b00      	cmp	r3, #0
 800694c:	d002      	beq.n	8006954 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006952:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006954:	bf00      	nop
 8006956:	3720      	adds	r7, #32
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006964:	f001 faea 	bl	8007f3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006968:	4b2d      	ldr	r3, [pc, #180]	; (8006a20 <prvAddNewTaskToReadyList+0xc4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3301      	adds	r3, #1
 800696e:	4a2c      	ldr	r2, [pc, #176]	; (8006a20 <prvAddNewTaskToReadyList+0xc4>)
 8006970:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006972:	4b2c      	ldr	r3, [pc, #176]	; (8006a24 <prvAddNewTaskToReadyList+0xc8>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d109      	bne.n	800698e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800697a:	4a2a      	ldr	r2, [pc, #168]	; (8006a24 <prvAddNewTaskToReadyList+0xc8>)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006980:	4b27      	ldr	r3, [pc, #156]	; (8006a20 <prvAddNewTaskToReadyList+0xc4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d110      	bne.n	80069aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006988:	f000 fd36 	bl	80073f8 <prvInitialiseTaskLists>
 800698c:	e00d      	b.n	80069aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800698e:	4b26      	ldr	r3, [pc, #152]	; (8006a28 <prvAddNewTaskToReadyList+0xcc>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d109      	bne.n	80069aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006996:	4b23      	ldr	r3, [pc, #140]	; (8006a24 <prvAddNewTaskToReadyList+0xc8>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d802      	bhi.n	80069aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069a4:	4a1f      	ldr	r2, [pc, #124]	; (8006a24 <prvAddNewTaskToReadyList+0xc8>)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069aa:	4b20      	ldr	r3, [pc, #128]	; (8006a2c <prvAddNewTaskToReadyList+0xd0>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3301      	adds	r3, #1
 80069b0:	4a1e      	ldr	r2, [pc, #120]	; (8006a2c <prvAddNewTaskToReadyList+0xd0>)
 80069b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80069b4:	4b1d      	ldr	r3, [pc, #116]	; (8006a2c <prvAddNewTaskToReadyList+0xd0>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c0:	4b1b      	ldr	r3, [pc, #108]	; (8006a30 <prvAddNewTaskToReadyList+0xd4>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d903      	bls.n	80069d0 <prvAddNewTaskToReadyList+0x74>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	4a18      	ldr	r2, [pc, #96]	; (8006a30 <prvAddNewTaskToReadyList+0xd4>)
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4a15      	ldr	r2, [pc, #84]	; (8006a34 <prvAddNewTaskToReadyList+0xd8>)
 80069de:	441a      	add	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3304      	adds	r3, #4
 80069e4:	4619      	mov	r1, r3
 80069e6:	4610      	mov	r0, r2
 80069e8:	f7ff f927 	bl	8005c3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069ec:	f001 fad6 	bl	8007f9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069f0:	4b0d      	ldr	r3, [pc, #52]	; (8006a28 <prvAddNewTaskToReadyList+0xcc>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00e      	beq.n	8006a16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069f8:	4b0a      	ldr	r3, [pc, #40]	; (8006a24 <prvAddNewTaskToReadyList+0xc8>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d207      	bcs.n	8006a16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a06:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <prvAddNewTaskToReadyList+0xdc>)
 8006a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a16:	bf00      	nop
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	2000107c 	.word	0x2000107c
 8006a24:	20000ba8 	.word	0x20000ba8
 8006a28:	20001088 	.word	0x20001088
 8006a2c:	20001098 	.word	0x20001098
 8006a30:	20001084 	.word	0x20001084
 8006a34:	20000bac 	.word	0x20000bac
 8006a38:	e000ed04 	.word	0xe000ed04

08006a3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d017      	beq.n	8006a7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a4e:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <vTaskDelay+0x60>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <vTaskDelay+0x30>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	60bb      	str	r3, [r7, #8]
}
 8006a68:	bf00      	nop
 8006a6a:	e7fe      	b.n	8006a6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a6c:	f000 f98e 	bl	8006d8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a70:	2100      	movs	r1, #0
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fe0e 	bl	8007694 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a78:	f000 f996 	bl	8006da8 <xTaskResumeAll>
 8006a7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d107      	bne.n	8006a94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a84:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <vTaskDelay+0x64>)
 8006a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a94:	bf00      	nop
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	200010a4 	.word	0x200010a4
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006aac:	f001 fa46 	bl	8007f3c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d102      	bne.n	8006abc <vTaskSuspend+0x18>
 8006ab6:	4b30      	ldr	r3, [pc, #192]	; (8006b78 <vTaskSuspend+0xd4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	e000      	b.n	8006abe <vTaskSuspend+0x1a>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff f913 	bl	8005cf0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d004      	beq.n	8006adc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3318      	adds	r3, #24
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7ff f90a 	bl	8005cf0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4826      	ldr	r0, [pc, #152]	; (8006b7c <vTaskSuspend+0xd8>)
 8006ae4:	f7ff f8a9 	bl	8005c3a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d103      	bne.n	8006afc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006afc:	f001 fa4e 	bl	8007f9c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006b00:	4b1f      	ldr	r3, [pc, #124]	; (8006b80 <vTaskSuspend+0xdc>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006b08:	f001 fa18 	bl	8007f3c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006b0c:	f000 fd12 	bl	8007534 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006b10:	f001 fa44 	bl	8007f9c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006b14:	4b18      	ldr	r3, [pc, #96]	; (8006b78 <vTaskSuspend+0xd4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d127      	bne.n	8006b6e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8006b1e:	4b18      	ldr	r3, [pc, #96]	; (8006b80 <vTaskSuspend+0xdc>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d017      	beq.n	8006b56 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006b26:	4b17      	ldr	r3, [pc, #92]	; (8006b84 <vTaskSuspend+0xe0>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <vTaskSuspend+0xa0>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	60bb      	str	r3, [r7, #8]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8006b44:	4b10      	ldr	r3, [pc, #64]	; (8006b88 <vTaskSuspend+0xe4>)
 8006b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b54:	e00b      	b.n	8006b6e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8006b56:	4b09      	ldr	r3, [pc, #36]	; (8006b7c <vTaskSuspend+0xd8>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <vTaskSuspend+0xe8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d103      	bne.n	8006b6a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8006b62:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <vTaskSuspend+0xd4>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]
	}
 8006b68:	e001      	b.n	8006b6e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8006b6a:	f000 fa99 	bl	80070a0 <vTaskSwitchContext>
	}
 8006b6e:	bf00      	nop
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000ba8 	.word	0x20000ba8
 8006b7c:	20001068 	.word	0x20001068
 8006b80:	20001088 	.word	0x20001088
 8006b84:	200010a4 	.word	0x200010a4
 8006b88:	e000ed04 	.word	0xe000ed04
 8006b8c:	2000107c 	.word	0x2000107c

08006b90 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10a      	bne.n	8006bbc <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	60fb      	str	r3, [r7, #12]
}
 8006bb8:	bf00      	nop
 8006bba:	e7fe      	b.n	8006bba <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	4a0e      	ldr	r2, [pc, #56]	; (8006bfc <prvTaskIsTaskSuspended+0x6c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d101      	bne.n	8006bca <prvTaskIsTaskSuspended+0x3a>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <prvTaskIsTaskSuspended+0x3c>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00f      	beq.n	8006bf0 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	4a0a      	ldr	r2, [pc, #40]	; (8006c00 <prvTaskIsTaskSuspended+0x70>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d00a      	beq.n	8006bf0 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <prvTaskIsTaskSuspended+0x56>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <prvTaskIsTaskSuspended+0x58>
 8006be6:	2300      	movs	r3, #0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8006bec:	2301      	movs	r3, #1
 8006bee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bf0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bc80      	pop	{r7}
 8006bfa:	4770      	bx	lr
 8006bfc:	20001068 	.word	0x20001068
 8006c00:	2000103c 	.word	0x2000103c

08006c04 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10a      	bne.n	8006c2c <vTaskResume+0x28>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	60bb      	str	r3, [r7, #8]
}
 8006c28:	bf00      	nop
 8006c2a:	e7fe      	b.n	8006c2a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d03a      	beq.n	8006ca8 <vTaskResume+0xa4>
 8006c32:	4b1f      	ldr	r3, [pc, #124]	; (8006cb0 <vTaskResume+0xac>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d035      	beq.n	8006ca8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8006c3c:	f001 f97e 	bl	8007f3c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f7ff ffa5 	bl	8006b90 <prvTaskIsTaskSuspended>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d02b      	beq.n	8006ca4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	3304      	adds	r3, #4
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff f84d 	bl	8005cf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5a:	4b16      	ldr	r3, [pc, #88]	; (8006cb4 <vTaskResume+0xb0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d903      	bls.n	8006c6a <vTaskResume+0x66>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	4a13      	ldr	r2, [pc, #76]	; (8006cb4 <vTaskResume+0xb0>)
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4a10      	ldr	r2, [pc, #64]	; (8006cb8 <vTaskResume+0xb4>)
 8006c78:	441a      	add	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4610      	mov	r0, r2
 8006c82:	f7fe ffda 	bl	8005c3a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8a:	4b09      	ldr	r3, [pc, #36]	; (8006cb0 <vTaskResume+0xac>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d307      	bcc.n	8006ca4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006c94:	4b09      	ldr	r3, [pc, #36]	; (8006cbc <vTaskResume+0xb8>)
 8006c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006ca4:	f001 f97a 	bl	8007f9c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ca8:	bf00      	nop
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20000ba8 	.word	0x20000ba8
 8006cb4:	20001084 	.word	0x20001084
 8006cb8:	20000bac 	.word	0x20000bac
 8006cbc:	e000ed04 	.word	0xe000ed04

08006cc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08a      	sub	sp, #40	; 0x28
 8006cc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cce:	463a      	mov	r2, r7
 8006cd0:	1d39      	adds	r1, r7, #4
 8006cd2:	f107 0308 	add.w	r3, r7, #8
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fe ff52 	bl	8005b80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	9202      	str	r2, [sp, #8]
 8006ce4:	9301      	str	r3, [sp, #4]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	2300      	movs	r3, #0
 8006cec:	460a      	mov	r2, r1
 8006cee:	4921      	ldr	r1, [pc, #132]	; (8006d74 <vTaskStartScheduler+0xb4>)
 8006cf0:	4821      	ldr	r0, [pc, #132]	; (8006d78 <vTaskStartScheduler+0xb8>)
 8006cf2:	f7ff fd0b 	bl	800670c <xTaskCreateStatic>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4a20      	ldr	r2, [pc, #128]	; (8006d7c <vTaskStartScheduler+0xbc>)
 8006cfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006cfc:	4b1f      	ldr	r3, [pc, #124]	; (8006d7c <vTaskStartScheduler+0xbc>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d04:	2301      	movs	r3, #1
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	e001      	b.n	8006d0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d102      	bne.n	8006d1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d14:	f000 fd12 	bl	800773c <xTimerCreateTimerTask>
 8006d18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d116      	bne.n	8006d4e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	613b      	str	r3, [r7, #16]
}
 8006d32:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d34:	4b12      	ldr	r3, [pc, #72]	; (8006d80 <vTaskStartScheduler+0xc0>)
 8006d36:	f04f 32ff 	mov.w	r2, #4294967295
 8006d3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d3c:	4b11      	ldr	r3, [pc, #68]	; (8006d84 <vTaskStartScheduler+0xc4>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006d42:	4b11      	ldr	r3, [pc, #68]	; (8006d88 <vTaskStartScheduler+0xc8>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d48:	f001 f886 	bl	8007e58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d4c:	e00e      	b.n	8006d6c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d54:	d10a      	bne.n	8006d6c <vTaskStartScheduler+0xac>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	60fb      	str	r3, [r7, #12]
}
 8006d68:	bf00      	nop
 8006d6a:	e7fe      	b.n	8006d6a <vTaskStartScheduler+0xaa>
}
 8006d6c:	bf00      	nop
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	0800bb80 	.word	0x0800bb80
 8006d78:	080073c9 	.word	0x080073c9
 8006d7c:	200010a0 	.word	0x200010a0
 8006d80:	2000109c 	.word	0x2000109c
 8006d84:	20001088 	.word	0x20001088
 8006d88:	20001080 	.word	0x20001080

08006d8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006d90:	4b04      	ldr	r3, [pc, #16]	; (8006da4 <vTaskSuspendAll+0x18>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3301      	adds	r3, #1
 8006d96:	4a03      	ldr	r2, [pc, #12]	; (8006da4 <vTaskSuspendAll+0x18>)
 8006d98:	6013      	str	r3, [r2, #0]
}
 8006d9a:	bf00      	nop
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	200010a4 	.word	0x200010a4

08006da8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006db2:	2300      	movs	r3, #0
 8006db4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006db6:	4b42      	ldr	r3, [pc, #264]	; (8006ec0 <xTaskResumeAll+0x118>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	603b      	str	r3, [r7, #0]
}
 8006dd0:	bf00      	nop
 8006dd2:	e7fe      	b.n	8006dd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006dd4:	f001 f8b2 	bl	8007f3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006dd8:	4b39      	ldr	r3, [pc, #228]	; (8006ec0 <xTaskResumeAll+0x118>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	4a38      	ldr	r2, [pc, #224]	; (8006ec0 <xTaskResumeAll+0x118>)
 8006de0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006de2:	4b37      	ldr	r3, [pc, #220]	; (8006ec0 <xTaskResumeAll+0x118>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d162      	bne.n	8006eb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006dea:	4b36      	ldr	r3, [pc, #216]	; (8006ec4 <xTaskResumeAll+0x11c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d05e      	beq.n	8006eb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006df2:	e02f      	b.n	8006e54 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006df4:	4b34      	ldr	r3, [pc, #208]	; (8006ec8 <xTaskResumeAll+0x120>)
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3318      	adds	r3, #24
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fe ff75 	bl	8005cf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fe ff70 	bl	8005cf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e14:	4b2d      	ldr	r3, [pc, #180]	; (8006ecc <xTaskResumeAll+0x124>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d903      	bls.n	8006e24 <xTaskResumeAll+0x7c>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	4a2a      	ldr	r2, [pc, #168]	; (8006ecc <xTaskResumeAll+0x124>)
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4a27      	ldr	r2, [pc, #156]	; (8006ed0 <xTaskResumeAll+0x128>)
 8006e32:	441a      	add	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3304      	adds	r3, #4
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	f7fe fefd 	bl	8005c3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e44:	4b23      	ldr	r3, [pc, #140]	; (8006ed4 <xTaskResumeAll+0x12c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d302      	bcc.n	8006e54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006e4e:	4b22      	ldr	r3, [pc, #136]	; (8006ed8 <xTaskResumeAll+0x130>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e54:	4b1c      	ldr	r3, [pc, #112]	; (8006ec8 <xTaskResumeAll+0x120>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1cb      	bne.n	8006df4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e62:	f000 fb67 	bl	8007534 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006e66:	4b1d      	ldr	r3, [pc, #116]	; (8006edc <xTaskResumeAll+0x134>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d010      	beq.n	8006e94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e72:	f000 f857 	bl	8006f24 <xTaskIncrementTick>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006e7c:	4b16      	ldr	r3, [pc, #88]	; (8006ed8 <xTaskResumeAll+0x130>)
 8006e7e:	2201      	movs	r2, #1
 8006e80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f1      	bne.n	8006e72 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006e8e:	4b13      	ldr	r3, [pc, #76]	; (8006edc <xTaskResumeAll+0x134>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e94:	4b10      	ldr	r3, [pc, #64]	; (8006ed8 <xTaskResumeAll+0x130>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d009      	beq.n	8006eb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ea0:	4b0f      	ldr	r3, [pc, #60]	; (8006ee0 <xTaskResumeAll+0x138>)
 8006ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006eb0:	f001 f874 	bl	8007f9c <vPortExitCritical>

	return xAlreadyYielded;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	200010a4 	.word	0x200010a4
 8006ec4:	2000107c 	.word	0x2000107c
 8006ec8:	2000103c 	.word	0x2000103c
 8006ecc:	20001084 	.word	0x20001084
 8006ed0:	20000bac 	.word	0x20000bac
 8006ed4:	20000ba8 	.word	0x20000ba8
 8006ed8:	20001090 	.word	0x20001090
 8006edc:	2000108c 	.word	0x2000108c
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006eea:	4b04      	ldr	r3, [pc, #16]	; (8006efc <xTaskGetTickCount+0x18>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ef0:	687b      	ldr	r3, [r7, #4]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bc80      	pop	{r7}
 8006efa:	4770      	bx	lr
 8006efc:	20001080 	.word	0x20001080

08006f00 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f06:	f001 f8db 	bl	80080c0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006f0e:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <xTaskGetTickCountFromISR+0x20>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f14:	683b      	ldr	r3, [r7, #0]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20001080 	.word	0x20001080

08006f24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f2e:	4b51      	ldr	r3, [pc, #324]	; (8007074 <xTaskIncrementTick+0x150>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f040 808e 	bne.w	8007054 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f38:	4b4f      	ldr	r3, [pc, #316]	; (8007078 <xTaskIncrementTick+0x154>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f40:	4a4d      	ldr	r2, [pc, #308]	; (8007078 <xTaskIncrementTick+0x154>)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d120      	bne.n	8006f8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f4c:	4b4b      	ldr	r3, [pc, #300]	; (800707c <xTaskIncrementTick+0x158>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <xTaskIncrementTick+0x48>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	603b      	str	r3, [r7, #0]
}
 8006f68:	bf00      	nop
 8006f6a:	e7fe      	b.n	8006f6a <xTaskIncrementTick+0x46>
 8006f6c:	4b43      	ldr	r3, [pc, #268]	; (800707c <xTaskIncrementTick+0x158>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	4b43      	ldr	r3, [pc, #268]	; (8007080 <xTaskIncrementTick+0x15c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a41      	ldr	r2, [pc, #260]	; (800707c <xTaskIncrementTick+0x158>)
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	4a41      	ldr	r2, [pc, #260]	; (8007080 <xTaskIncrementTick+0x15c>)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6013      	str	r3, [r2, #0]
 8006f80:	4b40      	ldr	r3, [pc, #256]	; (8007084 <xTaskIncrementTick+0x160>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3301      	adds	r3, #1
 8006f86:	4a3f      	ldr	r2, [pc, #252]	; (8007084 <xTaskIncrementTick+0x160>)
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	f000 fad3 	bl	8007534 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f8e:	4b3e      	ldr	r3, [pc, #248]	; (8007088 <xTaskIncrementTick+0x164>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d34e      	bcc.n	8007036 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f98:	4b38      	ldr	r3, [pc, #224]	; (800707c <xTaskIncrementTick+0x158>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <xTaskIncrementTick+0x82>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <xTaskIncrementTick+0x84>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d004      	beq.n	8006fb6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fac:	4b36      	ldr	r3, [pc, #216]	; (8007088 <xTaskIncrementTick+0x164>)
 8006fae:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb2:	601a      	str	r2, [r3, #0]
					break;
 8006fb4:	e03f      	b.n	8007036 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006fb6:	4b31      	ldr	r3, [pc, #196]	; (800707c <xTaskIncrementTick+0x158>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d203      	bcs.n	8006fd6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fce:	4a2e      	ldr	r2, [pc, #184]	; (8007088 <xTaskIncrementTick+0x164>)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6013      	str	r3, [r2, #0]
						break;
 8006fd4:	e02f      	b.n	8007036 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe fe88 	bl	8005cf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d004      	beq.n	8006ff2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	3318      	adds	r3, #24
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fe fe7f 	bl	8005cf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff6:	4b25      	ldr	r3, [pc, #148]	; (800708c <xTaskIncrementTick+0x168>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d903      	bls.n	8007006 <xTaskIncrementTick+0xe2>
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	4a22      	ldr	r2, [pc, #136]	; (800708c <xTaskIncrementTick+0x168>)
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700a:	4613      	mov	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4a1f      	ldr	r2, [pc, #124]	; (8007090 <xTaskIncrementTick+0x16c>)
 8007014:	441a      	add	r2, r3
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	3304      	adds	r3, #4
 800701a:	4619      	mov	r1, r3
 800701c:	4610      	mov	r0, r2
 800701e:	f7fe fe0c 	bl	8005c3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007026:	4b1b      	ldr	r3, [pc, #108]	; (8007094 <xTaskIncrementTick+0x170>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	429a      	cmp	r2, r3
 800702e:	d3b3      	bcc.n	8006f98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007030:	2301      	movs	r3, #1
 8007032:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007034:	e7b0      	b.n	8006f98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007036:	4b17      	ldr	r3, [pc, #92]	; (8007094 <xTaskIncrementTick+0x170>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703c:	4914      	ldr	r1, [pc, #80]	; (8007090 <xTaskIncrementTick+0x16c>)
 800703e:	4613      	mov	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d907      	bls.n	800705e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800704e:	2301      	movs	r3, #1
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	e004      	b.n	800705e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007054:	4b10      	ldr	r3, [pc, #64]	; (8007098 <xTaskIncrementTick+0x174>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3301      	adds	r3, #1
 800705a:	4a0f      	ldr	r2, [pc, #60]	; (8007098 <xTaskIncrementTick+0x174>)
 800705c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800705e:	4b0f      	ldr	r3, [pc, #60]	; (800709c <xTaskIncrementTick+0x178>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007066:	2301      	movs	r3, #1
 8007068:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800706a:	697b      	ldr	r3, [r7, #20]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	200010a4 	.word	0x200010a4
 8007078:	20001080 	.word	0x20001080
 800707c:	20001034 	.word	0x20001034
 8007080:	20001038 	.word	0x20001038
 8007084:	20001094 	.word	0x20001094
 8007088:	2000109c 	.word	0x2000109c
 800708c:	20001084 	.word	0x20001084
 8007090:	20000bac 	.word	0x20000bac
 8007094:	20000ba8 	.word	0x20000ba8
 8007098:	2000108c 	.word	0x2000108c
 800709c:	20001090 	.word	0x20001090

080070a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070a6:	4b27      	ldr	r3, [pc, #156]	; (8007144 <vTaskSwitchContext+0xa4>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070ae:	4b26      	ldr	r3, [pc, #152]	; (8007148 <vTaskSwitchContext+0xa8>)
 80070b0:	2201      	movs	r2, #1
 80070b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070b4:	e041      	b.n	800713a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80070b6:	4b24      	ldr	r3, [pc, #144]	; (8007148 <vTaskSwitchContext+0xa8>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80070bc:	4b23      	ldr	r3, [pc, #140]	; (800714c <vTaskSwitchContext+0xac>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	e010      	b.n	80070e6 <vTaskSwitchContext+0x46>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10a      	bne.n	80070e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	607b      	str	r3, [r7, #4]
}
 80070dc:	bf00      	nop
 80070de:	e7fe      	b.n	80070de <vTaskSwitchContext+0x3e>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	491a      	ldr	r1, [pc, #104]	; (8007150 <vTaskSwitchContext+0xb0>)
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d0e4      	beq.n	80070c4 <vTaskSwitchContext+0x24>
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4613      	mov	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4a12      	ldr	r2, [pc, #72]	; (8007150 <vTaskSwitchContext+0xb0>)
 8007106:	4413      	add	r3, r2
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	605a      	str	r2, [r3, #4]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	3308      	adds	r3, #8
 800711c:	429a      	cmp	r2, r3
 800711e:	d104      	bne.n	800712a <vTaskSwitchContext+0x8a>
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	605a      	str	r2, [r3, #4]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	4a08      	ldr	r2, [pc, #32]	; (8007154 <vTaskSwitchContext+0xb4>)
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	4a05      	ldr	r2, [pc, #20]	; (800714c <vTaskSwitchContext+0xac>)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6013      	str	r3, [r2, #0]
}
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr
 8007144:	200010a4 	.word	0x200010a4
 8007148:	20001090 	.word	0x20001090
 800714c:	20001084 	.word	0x20001084
 8007150:	20000bac 	.word	0x20000bac
 8007154:	20000ba8 	.word	0x20000ba8

08007158 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	60fb      	str	r3, [r7, #12]
}
 800717a:	bf00      	nop
 800717c:	e7fe      	b.n	800717c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800717e:	4b07      	ldr	r3, [pc, #28]	; (800719c <vTaskPlaceOnEventList+0x44>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3318      	adds	r3, #24
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7fe fd7a 	bl	8005c80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800718c:	2101      	movs	r1, #1
 800718e:	6838      	ldr	r0, [r7, #0]
 8007190:	f000 fa80 	bl	8007694 <prvAddCurrentTaskToDelayedList>
}
 8007194:	bf00      	nop
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	20000ba8 	.word	0x20000ba8

080071a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10a      	bne.n	80071c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	617b      	str	r3, [r7, #20]
}
 80071c4:	bf00      	nop
 80071c6:	e7fe      	b.n	80071c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071c8:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3318      	adds	r3, #24
 80071ce:	4619      	mov	r1, r3
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f7fe fd32 	bl	8005c3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80071dc:	f04f 33ff 	mov.w	r3, #4294967295
 80071e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	68b8      	ldr	r0, [r7, #8]
 80071e6:	f000 fa55 	bl	8007694 <prvAddCurrentTaskToDelayedList>
	}
 80071ea:	bf00      	nop
 80071ec:	3718      	adds	r7, #24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000ba8 	.word	0x20000ba8

080071f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10a      	bne.n	8007224 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	60fb      	str	r3, [r7, #12]
}
 8007220:	bf00      	nop
 8007222:	e7fe      	b.n	8007222 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	3318      	adds	r3, #24
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe fd61 	bl	8005cf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800722e:	4b1e      	ldr	r3, [pc, #120]	; (80072a8 <xTaskRemoveFromEventList+0xb0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d11d      	bne.n	8007272 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	3304      	adds	r3, #4
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe fd58 	bl	8005cf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007244:	4b19      	ldr	r3, [pc, #100]	; (80072ac <xTaskRemoveFromEventList+0xb4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	429a      	cmp	r2, r3
 800724a:	d903      	bls.n	8007254 <xTaskRemoveFromEventList+0x5c>
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	4a16      	ldr	r2, [pc, #88]	; (80072ac <xTaskRemoveFromEventList+0xb4>)
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4a13      	ldr	r2, [pc, #76]	; (80072b0 <xTaskRemoveFromEventList+0xb8>)
 8007262:	441a      	add	r2, r3
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	3304      	adds	r3, #4
 8007268:	4619      	mov	r1, r3
 800726a:	4610      	mov	r0, r2
 800726c:	f7fe fce5 	bl	8005c3a <vListInsertEnd>
 8007270:	e005      	b.n	800727e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	3318      	adds	r3, #24
 8007276:	4619      	mov	r1, r3
 8007278:	480e      	ldr	r0, [pc, #56]	; (80072b4 <xTaskRemoveFromEventList+0xbc>)
 800727a:	f7fe fcde 	bl	8005c3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007282:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <xTaskRemoveFromEventList+0xc0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	429a      	cmp	r2, r3
 800728a:	d905      	bls.n	8007298 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800728c:	2301      	movs	r3, #1
 800728e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007290:	4b0a      	ldr	r3, [pc, #40]	; (80072bc <xTaskRemoveFromEventList+0xc4>)
 8007292:	2201      	movs	r2, #1
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	e001      	b.n	800729c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800729c:	697b      	ldr	r3, [r7, #20]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	200010a4 	.word	0x200010a4
 80072ac:	20001084 	.word	0x20001084
 80072b0:	20000bac 	.word	0x20000bac
 80072b4:	2000103c 	.word	0x2000103c
 80072b8:	20000ba8 	.word	0x20000ba8
 80072bc:	20001090 	.word	0x20001090

080072c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072c8:	4b06      	ldr	r3, [pc, #24]	; (80072e4 <vTaskInternalSetTimeOutState+0x24>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072d0:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <vTaskInternalSetTimeOutState+0x28>)
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	605a      	str	r2, [r3, #4]
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	bc80      	pop	{r7}
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	20001094 	.word	0x20001094
 80072e8:	20001080 	.word	0x20001080

080072ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	613b      	str	r3, [r7, #16]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	60fb      	str	r3, [r7, #12]
}
 800732a:	bf00      	nop
 800732c:	e7fe      	b.n	800732c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800732e:	f000 fe05 	bl	8007f3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007332:	4b1d      	ldr	r3, [pc, #116]	; (80073a8 <xTaskCheckForTimeOut+0xbc>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734a:	d102      	bne.n	8007352 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800734c:	2300      	movs	r3, #0
 800734e:	61fb      	str	r3, [r7, #28]
 8007350:	e023      	b.n	800739a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	4b15      	ldr	r3, [pc, #84]	; (80073ac <xTaskCheckForTimeOut+0xc0>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d007      	beq.n	800736e <xTaskCheckForTimeOut+0x82>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	429a      	cmp	r2, r3
 8007366:	d302      	bcc.n	800736e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007368:	2301      	movs	r3, #1
 800736a:	61fb      	str	r3, [r7, #28]
 800736c:	e015      	b.n	800739a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	429a      	cmp	r2, r3
 8007376:	d20b      	bcs.n	8007390 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	1ad2      	subs	r2, r2, r3
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff ff9b 	bl	80072c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800738a:	2300      	movs	r3, #0
 800738c:	61fb      	str	r3, [r7, #28]
 800738e:	e004      	b.n	800739a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007396:	2301      	movs	r3, #1
 8007398:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800739a:	f000 fdff 	bl	8007f9c <vPortExitCritical>

	return xReturn;
 800739e:	69fb      	ldr	r3, [r7, #28]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3720      	adds	r7, #32
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	20001080 	.word	0x20001080
 80073ac:	20001094 	.word	0x20001094

080073b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073b4:	4b03      	ldr	r3, [pc, #12]	; (80073c4 <vTaskMissedYield+0x14>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	601a      	str	r2, [r3, #0]
}
 80073ba:	bf00      	nop
 80073bc:	46bd      	mov	sp, r7
 80073be:	bc80      	pop	{r7}
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	20001090 	.word	0x20001090

080073c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073d0:	f000 f852 	bl	8007478 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073d4:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <prvIdleTask+0x28>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d9f9      	bls.n	80073d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80073dc:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <prvIdleTask+0x2c>)
 80073de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80073ec:	e7f0      	b.n	80073d0 <prvIdleTask+0x8>
 80073ee:	bf00      	nop
 80073f0:	20000bac 	.word	0x20000bac
 80073f4:	e000ed04 	.word	0xe000ed04

080073f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073fe:	2300      	movs	r3, #0
 8007400:	607b      	str	r3, [r7, #4]
 8007402:	e00c      	b.n	800741e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	4613      	mov	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4a12      	ldr	r2, [pc, #72]	; (8007458 <prvInitialiseTaskLists+0x60>)
 8007410:	4413      	add	r3, r2
 8007412:	4618      	mov	r0, r3
 8007414:	f7fe fbe6 	bl	8005be4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3301      	adds	r3, #1
 800741c:	607b      	str	r3, [r7, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b37      	cmp	r3, #55	; 0x37
 8007422:	d9ef      	bls.n	8007404 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007424:	480d      	ldr	r0, [pc, #52]	; (800745c <prvInitialiseTaskLists+0x64>)
 8007426:	f7fe fbdd 	bl	8005be4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800742a:	480d      	ldr	r0, [pc, #52]	; (8007460 <prvInitialiseTaskLists+0x68>)
 800742c:	f7fe fbda 	bl	8005be4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007430:	480c      	ldr	r0, [pc, #48]	; (8007464 <prvInitialiseTaskLists+0x6c>)
 8007432:	f7fe fbd7 	bl	8005be4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007436:	480c      	ldr	r0, [pc, #48]	; (8007468 <prvInitialiseTaskLists+0x70>)
 8007438:	f7fe fbd4 	bl	8005be4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800743c:	480b      	ldr	r0, [pc, #44]	; (800746c <prvInitialiseTaskLists+0x74>)
 800743e:	f7fe fbd1 	bl	8005be4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007442:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <prvInitialiseTaskLists+0x78>)
 8007444:	4a05      	ldr	r2, [pc, #20]	; (800745c <prvInitialiseTaskLists+0x64>)
 8007446:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007448:	4b0a      	ldr	r3, [pc, #40]	; (8007474 <prvInitialiseTaskLists+0x7c>)
 800744a:	4a05      	ldr	r2, [pc, #20]	; (8007460 <prvInitialiseTaskLists+0x68>)
 800744c:	601a      	str	r2, [r3, #0]
}
 800744e:	bf00      	nop
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20000bac 	.word	0x20000bac
 800745c:	2000100c 	.word	0x2000100c
 8007460:	20001020 	.word	0x20001020
 8007464:	2000103c 	.word	0x2000103c
 8007468:	20001050 	.word	0x20001050
 800746c:	20001068 	.word	0x20001068
 8007470:	20001034 	.word	0x20001034
 8007474:	20001038 	.word	0x20001038

08007478 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800747e:	e019      	b.n	80074b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007480:	f000 fd5c 	bl	8007f3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007484:	4b10      	ldr	r3, [pc, #64]	; (80074c8 <prvCheckTasksWaitingTermination+0x50>)
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3304      	adds	r3, #4
 8007490:	4618      	mov	r0, r3
 8007492:	f7fe fc2d 	bl	8005cf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007496:	4b0d      	ldr	r3, [pc, #52]	; (80074cc <prvCheckTasksWaitingTermination+0x54>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3b01      	subs	r3, #1
 800749c:	4a0b      	ldr	r2, [pc, #44]	; (80074cc <prvCheckTasksWaitingTermination+0x54>)
 800749e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074a0:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <prvCheckTasksWaitingTermination+0x58>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3b01      	subs	r3, #1
 80074a6:	4a0a      	ldr	r2, [pc, #40]	; (80074d0 <prvCheckTasksWaitingTermination+0x58>)
 80074a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074aa:	f000 fd77 	bl	8007f9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f810 	bl	80074d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074b4:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <prvCheckTasksWaitingTermination+0x58>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e1      	bne.n	8007480 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074bc:	bf00      	nop
 80074be:	bf00      	nop
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20001050 	.word	0x20001050
 80074cc:	2000107c 	.word	0x2000107c
 80074d0:	20001064 	.word	0x20001064

080074d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d108      	bne.n	80074f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 feea 	bl	80082c4 <vPortFree>
				vPortFree( pxTCB );
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fee7 	bl	80082c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074f6:	e018      	b.n	800752a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d103      	bne.n	800750a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fede 	bl	80082c4 <vPortFree>
	}
 8007508:	e00f      	b.n	800752a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8007510:	2b02      	cmp	r3, #2
 8007512:	d00a      	beq.n	800752a <prvDeleteTCB+0x56>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	60fb      	str	r3, [r7, #12]
}
 8007526:	bf00      	nop
 8007528:	e7fe      	b.n	8007528 <prvDeleteTCB+0x54>
	}
 800752a:	bf00      	nop
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800753a:	4b0e      	ldr	r3, [pc, #56]	; (8007574 <prvResetNextTaskUnblockTime+0x40>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <prvResetNextTaskUnblockTime+0x14>
 8007544:	2301      	movs	r3, #1
 8007546:	e000      	b.n	800754a <prvResetNextTaskUnblockTime+0x16>
 8007548:	2300      	movs	r3, #0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d004      	beq.n	8007558 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800754e:	4b0a      	ldr	r3, [pc, #40]	; (8007578 <prvResetNextTaskUnblockTime+0x44>)
 8007550:	f04f 32ff 	mov.w	r2, #4294967295
 8007554:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007556:	e008      	b.n	800756a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007558:	4b06      	ldr	r3, [pc, #24]	; (8007574 <prvResetNextTaskUnblockTime+0x40>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	4a04      	ldr	r2, [pc, #16]	; (8007578 <prvResetNextTaskUnblockTime+0x44>)
 8007568:	6013      	str	r3, [r2, #0]
}
 800756a:	bf00      	nop
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	bc80      	pop	{r7}
 8007572:	4770      	bx	lr
 8007574:	20001034 	.word	0x20001034
 8007578:	2000109c 	.word	0x2000109c

0800757c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007582:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <xTaskGetSchedulerState+0x34>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d102      	bne.n	8007590 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800758a:	2301      	movs	r3, #1
 800758c:	607b      	str	r3, [r7, #4]
 800758e:	e008      	b.n	80075a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007590:	4b08      	ldr	r3, [pc, #32]	; (80075b4 <xTaskGetSchedulerState+0x38>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d102      	bne.n	800759e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007598:	2302      	movs	r3, #2
 800759a:	607b      	str	r3, [r7, #4]
 800759c:	e001      	b.n	80075a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800759e:	2300      	movs	r3, #0
 80075a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075a2:	687b      	ldr	r3, [r7, #4]
	}
 80075a4:	4618      	mov	r0, r3
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bc80      	pop	{r7}
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	20001088 	.word	0x20001088
 80075b4:	200010a4 	.word	0x200010a4

080075b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d056      	beq.n	800767c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075ce:	4b2e      	ldr	r3, [pc, #184]	; (8007688 <xTaskPriorityDisinherit+0xd0>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d00a      	beq.n	80075ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	60fb      	str	r3, [r7, #12]
}
 80075ea:	bf00      	nop
 80075ec:	e7fe      	b.n	80075ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10a      	bne.n	800760c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	60bb      	str	r3, [r7, #8]
}
 8007608:	bf00      	nop
 800760a:	e7fe      	b.n	800760a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007610:	1e5a      	subs	r2, r3, #1
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800761e:	429a      	cmp	r2, r3
 8007620:	d02c      	beq.n	800767c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007626:	2b00      	cmp	r3, #0
 8007628:	d128      	bne.n	800767c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	3304      	adds	r3, #4
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe fb5e 	bl	8005cf0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764c:	4b0f      	ldr	r3, [pc, #60]	; (800768c <xTaskPriorityDisinherit+0xd4>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	429a      	cmp	r2, r3
 8007652:	d903      	bls.n	800765c <xTaskPriorityDisinherit+0xa4>
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	4a0c      	ldr	r2, [pc, #48]	; (800768c <xTaskPriorityDisinherit+0xd4>)
 800765a:	6013      	str	r3, [r2, #0]
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007660:	4613      	mov	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4a09      	ldr	r2, [pc, #36]	; (8007690 <xTaskPriorityDisinherit+0xd8>)
 800766a:	441a      	add	r2, r3
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	3304      	adds	r3, #4
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f7fe fae1 	bl	8005c3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007678:	2301      	movs	r3, #1
 800767a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800767c:	697b      	ldr	r3, [r7, #20]
	}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20000ba8 	.word	0x20000ba8
 800768c:	20001084 	.word	0x20001084
 8007690:	20000bac 	.word	0x20000bac

08007694 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800769e:	4b21      	ldr	r3, [pc, #132]	; (8007724 <prvAddCurrentTaskToDelayedList+0x90>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076a4:	4b20      	ldr	r3, [pc, #128]	; (8007728 <prvAddCurrentTaskToDelayedList+0x94>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3304      	adds	r3, #4
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe fb20 	bl	8005cf0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b6:	d10a      	bne.n	80076ce <prvAddCurrentTaskToDelayedList+0x3a>
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d007      	beq.n	80076ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076be:	4b1a      	ldr	r3, [pc, #104]	; (8007728 <prvAddCurrentTaskToDelayedList+0x94>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3304      	adds	r3, #4
 80076c4:	4619      	mov	r1, r3
 80076c6:	4819      	ldr	r0, [pc, #100]	; (800772c <prvAddCurrentTaskToDelayedList+0x98>)
 80076c8:	f7fe fab7 	bl	8005c3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076cc:	e026      	b.n	800771c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4413      	add	r3, r2
 80076d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076d6:	4b14      	ldr	r3, [pc, #80]	; (8007728 <prvAddCurrentTaskToDelayedList+0x94>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d209      	bcs.n	80076fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076e6:	4b12      	ldr	r3, [pc, #72]	; (8007730 <prvAddCurrentTaskToDelayedList+0x9c>)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	4b0f      	ldr	r3, [pc, #60]	; (8007728 <prvAddCurrentTaskToDelayedList+0x94>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3304      	adds	r3, #4
 80076f0:	4619      	mov	r1, r3
 80076f2:	4610      	mov	r0, r2
 80076f4:	f7fe fac4 	bl	8005c80 <vListInsert>
}
 80076f8:	e010      	b.n	800771c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076fa:	4b0e      	ldr	r3, [pc, #56]	; (8007734 <prvAddCurrentTaskToDelayedList+0xa0>)
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	4b0a      	ldr	r3, [pc, #40]	; (8007728 <prvAddCurrentTaskToDelayedList+0x94>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3304      	adds	r3, #4
 8007704:	4619      	mov	r1, r3
 8007706:	4610      	mov	r0, r2
 8007708:	f7fe faba 	bl	8005c80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <prvAddCurrentTaskToDelayedList+0xa4>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	429a      	cmp	r2, r3
 8007714:	d202      	bcs.n	800771c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007716:	4a08      	ldr	r2, [pc, #32]	; (8007738 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	6013      	str	r3, [r2, #0]
}
 800771c:	bf00      	nop
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20001080 	.word	0x20001080
 8007728:	20000ba8 	.word	0x20000ba8
 800772c:	20001068 	.word	0x20001068
 8007730:	20001038 	.word	0x20001038
 8007734:	20001034 	.word	0x20001034
 8007738:	2000109c 	.word	0x2000109c

0800773c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08a      	sub	sp, #40	; 0x28
 8007740:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007742:	2300      	movs	r3, #0
 8007744:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007746:	f000 facb 	bl	8007ce0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800774a:	4b1c      	ldr	r3, [pc, #112]	; (80077bc <xTimerCreateTimerTask+0x80>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d021      	beq.n	8007796 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007756:	2300      	movs	r3, #0
 8007758:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800775a:	1d3a      	adds	r2, r7, #4
 800775c:	f107 0108 	add.w	r1, r7, #8
 8007760:	f107 030c 	add.w	r3, r7, #12
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe fa23 	bl	8005bb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	9202      	str	r2, [sp, #8]
 8007772:	9301      	str	r3, [sp, #4]
 8007774:	2302      	movs	r3, #2
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	2300      	movs	r3, #0
 800777a:	460a      	mov	r2, r1
 800777c:	4910      	ldr	r1, [pc, #64]	; (80077c0 <xTimerCreateTimerTask+0x84>)
 800777e:	4811      	ldr	r0, [pc, #68]	; (80077c4 <xTimerCreateTimerTask+0x88>)
 8007780:	f7fe ffc4 	bl	800670c <xTaskCreateStatic>
 8007784:	4603      	mov	r3, r0
 8007786:	4a10      	ldr	r2, [pc, #64]	; (80077c8 <xTimerCreateTimerTask+0x8c>)
 8007788:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800778a:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <xTimerCreateTimerTask+0x8c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007792:	2301      	movs	r3, #1
 8007794:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	613b      	str	r3, [r7, #16]
}
 80077ae:	bf00      	nop
 80077b0:	e7fe      	b.n	80077b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077b2:	697b      	ldr	r3, [r7, #20]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	200010d8 	.word	0x200010d8
 80077c0:	0800bb88 	.word	0x0800bb88
 80077c4:	080078e9 	.word	0x080078e9
 80077c8:	200010dc 	.word	0x200010dc

080077cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08a      	sub	sp, #40	; 0x28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077da:	2300      	movs	r3, #0
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	623b      	str	r3, [r7, #32]
}
 80077f6:	bf00      	nop
 80077f8:	e7fe      	b.n	80077f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80077fa:	4b1a      	ldr	r3, [pc, #104]	; (8007864 <xTimerGenericCommand+0x98>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d02a      	beq.n	8007858 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2b05      	cmp	r3, #5
 8007812:	dc18      	bgt.n	8007846 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007814:	f7ff feb2 	bl	800757c <xTaskGetSchedulerState>
 8007818:	4603      	mov	r3, r0
 800781a:	2b02      	cmp	r3, #2
 800781c:	d109      	bne.n	8007832 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800781e:	4b11      	ldr	r3, [pc, #68]	; (8007864 <xTimerGenericCommand+0x98>)
 8007820:	6818      	ldr	r0, [r3, #0]
 8007822:	f107 0110 	add.w	r1, r7, #16
 8007826:	2300      	movs	r3, #0
 8007828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800782a:	f7fe fb8d 	bl	8005f48 <xQueueGenericSend>
 800782e:	6278      	str	r0, [r7, #36]	; 0x24
 8007830:	e012      	b.n	8007858 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007832:	4b0c      	ldr	r3, [pc, #48]	; (8007864 <xTimerGenericCommand+0x98>)
 8007834:	6818      	ldr	r0, [r3, #0]
 8007836:	f107 0110 	add.w	r1, r7, #16
 800783a:	2300      	movs	r3, #0
 800783c:	2200      	movs	r2, #0
 800783e:	f7fe fb83 	bl	8005f48 <xQueueGenericSend>
 8007842:	6278      	str	r0, [r7, #36]	; 0x24
 8007844:	e008      	b.n	8007858 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007846:	4b07      	ldr	r3, [pc, #28]	; (8007864 <xTimerGenericCommand+0x98>)
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	f107 0110 	add.w	r1, r7, #16
 800784e:	2300      	movs	r3, #0
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	f7fe fc77 	bl	8006144 <xQueueGenericSendFromISR>
 8007856:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800785a:	4618      	mov	r0, r3
 800785c:	3728      	adds	r7, #40	; 0x28
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	200010d8 	.word	0x200010d8

08007868 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b088      	sub	sp, #32
 800786c:	af02      	add	r7, sp, #8
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007872:	4b1c      	ldr	r3, [pc, #112]	; (80078e4 <prvProcessExpiredTimer+0x7c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	3304      	adds	r3, #4
 8007880:	4618      	mov	r0, r3
 8007882:	f7fe fa35 	bl	8005cf0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d122      	bne.n	80078d4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	699a      	ldr	r2, [r3, #24]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	18d1      	adds	r1, r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	6978      	ldr	r0, [r7, #20]
 800789c:	f000 f8c8 	bl	8007a30 <prvInsertTimerInActiveList>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d016      	beq.n	80078d4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078a6:	2300      	movs	r3, #0
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	2300      	movs	r3, #0
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	2100      	movs	r1, #0
 80078b0:	6978      	ldr	r0, [r7, #20]
 80078b2:	f7ff ff8b 	bl	80077cc <xTimerGenericCommand>
 80078b6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10a      	bne.n	80078d4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	60fb      	str	r3, [r7, #12]
}
 80078d0:	bf00      	nop
 80078d2:	e7fe      	b.n	80078d2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	6978      	ldr	r0, [r7, #20]
 80078da:	4798      	blx	r3
}
 80078dc:	bf00      	nop
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	200010d0 	.word	0x200010d0

080078e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078f0:	f107 0308 	add.w	r3, r7, #8
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 f857 	bl	80079a8 <prvGetNextExpireTime>
 80078fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4619      	mov	r1, r3
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f803 	bl	800790c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007906:	f000 f8d5 	bl	8007ab4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800790a:	e7f1      	b.n	80078f0 <prvTimerTask+0x8>

0800790c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007916:	f7ff fa39 	bl	8006d8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800791a:	f107 0308 	add.w	r3, r7, #8
 800791e:	4618      	mov	r0, r3
 8007920:	f000 f866 	bl	80079f0 <prvSampleTimeNow>
 8007924:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d130      	bne.n	800798e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10a      	bne.n	8007948 <prvProcessTimerOrBlockTask+0x3c>
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	429a      	cmp	r2, r3
 8007938:	d806      	bhi.n	8007948 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800793a:	f7ff fa35 	bl	8006da8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800793e:	68f9      	ldr	r1, [r7, #12]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff ff91 	bl	8007868 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007946:	e024      	b.n	8007992 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d008      	beq.n	8007960 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800794e:	4b13      	ldr	r3, [pc, #76]	; (800799c <prvProcessTimerOrBlockTask+0x90>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	bf0c      	ite	eq
 8007958:	2301      	moveq	r3, #1
 800795a:	2300      	movne	r3, #0
 800795c:	b2db      	uxtb	r3, r3
 800795e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007960:	4b0f      	ldr	r3, [pc, #60]	; (80079a0 <prvProcessTimerOrBlockTask+0x94>)
 8007962:	6818      	ldr	r0, [r3, #0]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	4619      	mov	r1, r3
 800796e:	f7fe fe99 	bl	80066a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007972:	f7ff fa19 	bl	8006da8 <xTaskResumeAll>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800797c:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <prvProcessTimerOrBlockTask+0x98>)
 800797e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	f3bf 8f6f 	isb	sy
}
 800798c:	e001      	b.n	8007992 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800798e:	f7ff fa0b 	bl	8006da8 <xTaskResumeAll>
}
 8007992:	bf00      	nop
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	200010d4 	.word	0x200010d4
 80079a0:	200010d8 	.word	0x200010d8
 80079a4:	e000ed04 	.word	0xe000ed04

080079a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079b0:	4b0e      	ldr	r3, [pc, #56]	; (80079ec <prvGetNextExpireTime+0x44>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	bf0c      	ite	eq
 80079ba:	2301      	moveq	r3, #1
 80079bc:	2300      	movne	r3, #0
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d105      	bne.n	80079da <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079ce:	4b07      	ldr	r3, [pc, #28]	; (80079ec <prvGetNextExpireTime+0x44>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	e001      	b.n	80079de <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079de:	68fb      	ldr	r3, [r7, #12]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc80      	pop	{r7}
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	200010d0 	.word	0x200010d0

080079f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80079f8:	f7ff fa74 	bl	8006ee4 <xTaskGetTickCount>
 80079fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80079fe:	4b0b      	ldr	r3, [pc, #44]	; (8007a2c <prvSampleTimeNow+0x3c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d205      	bcs.n	8007a14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a08:	f000 f908 	bl	8007c1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	e002      	b.n	8007a1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a1a:	4a04      	ldr	r2, [pc, #16]	; (8007a2c <prvSampleTimeNow+0x3c>)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a20:	68fb      	ldr	r3, [r7, #12]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	200010e0 	.word	0x200010e0

08007a30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d812      	bhi.n	8007a7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	1ad2      	subs	r2, r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d302      	bcc.n	8007a6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a64:	2301      	movs	r3, #1
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	e01b      	b.n	8007aa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a6a:	4b10      	ldr	r3, [pc, #64]	; (8007aac <prvInsertTimerInActiveList+0x7c>)
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4619      	mov	r1, r3
 8007a74:	4610      	mov	r0, r2
 8007a76:	f7fe f903 	bl	8005c80 <vListInsert>
 8007a7a:	e012      	b.n	8007aa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d206      	bcs.n	8007a92 <prvInsertTimerInActiveList+0x62>
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d302      	bcc.n	8007a92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	617b      	str	r3, [r7, #20]
 8007a90:	e007      	b.n	8007aa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a92:	4b07      	ldr	r3, [pc, #28]	; (8007ab0 <prvInsertTimerInActiveList+0x80>)
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3304      	adds	r3, #4
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	f7fe f8ef 	bl	8005c80 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007aa2:	697b      	ldr	r3, [r7, #20]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	200010d4 	.word	0x200010d4
 8007ab0:	200010d0 	.word	0x200010d0

08007ab4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08e      	sub	sp, #56	; 0x38
 8007ab8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aba:	e09d      	b.n	8007bf8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	da18      	bge.n	8007af4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ac2:	1d3b      	adds	r3, r7, #4
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10a      	bne.n	8007ae4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	61fb      	str	r3, [r7, #28]
}
 8007ae0:	bf00      	nop
 8007ae2:	e7fe      	b.n	8007ae2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aea:	6850      	ldr	r0, [r2, #4]
 8007aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aee:	6892      	ldr	r2, [r2, #8]
 8007af0:	4611      	mov	r1, r2
 8007af2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	db7e      	blt.n	8007bf8 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d004      	beq.n	8007b10 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	3304      	adds	r3, #4
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe f8f0 	bl	8005cf0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b10:	463b      	mov	r3, r7
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff ff6c 	bl	80079f0 <prvSampleTimeNow>
 8007b18:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b09      	cmp	r3, #9
 8007b1e:	d86a      	bhi.n	8007bf6 <prvProcessReceivedCommands+0x142>
 8007b20:	a201      	add	r2, pc, #4	; (adr r2, 8007b28 <prvProcessReceivedCommands+0x74>)
 8007b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b26:	bf00      	nop
 8007b28:	08007b51 	.word	0x08007b51
 8007b2c:	08007b51 	.word	0x08007b51
 8007b30:	08007b51 	.word	0x08007b51
 8007b34:	08007bf9 	.word	0x08007bf9
 8007b38:	08007bad 	.word	0x08007bad
 8007b3c:	08007be5 	.word	0x08007be5
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b51 	.word	0x08007b51
 8007b48:	08007bf9 	.word	0x08007bf9
 8007b4c:	08007bad 	.word	0x08007bad
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	18d1      	adds	r1, r2, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b5e:	f7ff ff67 	bl	8007a30 <prvInsertTimerInActiveList>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d047      	beq.n	8007bf8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b6e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d13f      	bne.n	8007bf8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	441a      	add	r2, r3
 8007b80:	2300      	movs	r3, #0
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	2300      	movs	r3, #0
 8007b86:	2100      	movs	r1, #0
 8007b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b8a:	f7ff fe1f 	bl	80077cc <xTimerGenericCommand>
 8007b8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d130      	bne.n	8007bf8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	61bb      	str	r3, [r7, #24]
}
 8007ba8:	bf00      	nop
 8007baa:	e7fe      	b.n	8007baa <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10a      	bne.n	8007bd0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	617b      	str	r3, [r7, #20]
}
 8007bcc:	bf00      	nop
 8007bce:	e7fe      	b.n	8007bce <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	699a      	ldr	r2, [r3, #24]
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	18d1      	adds	r1, r2, r3
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bde:	f7ff ff27 	bl	8007a30 <prvInsertTimerInActiveList>
					break;
 8007be2:	e009      	b.n	8007bf8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d104      	bne.n	8007bf8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf0:	f000 fb68 	bl	80082c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007bf4:	e000      	b.n	8007bf8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8007bf6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bf8:	4b07      	ldr	r3, [pc, #28]	; (8007c18 <prvProcessReceivedCommands+0x164>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	1d39      	adds	r1, r7, #4
 8007bfe:	2200      	movs	r2, #0
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fe fb37 	bl	8006274 <xQueueReceive>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f47f af57 	bne.w	8007abc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007c0e:	bf00      	nop
 8007c10:	bf00      	nop
 8007c12:	3730      	adds	r7, #48	; 0x30
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	200010d8 	.word	0x200010d8

08007c1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c22:	e045      	b.n	8007cb0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c24:	4b2c      	ldr	r3, [pc, #176]	; (8007cd8 <prvSwitchTimerLists+0xbc>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c2e:	4b2a      	ldr	r3, [pc, #168]	; (8007cd8 <prvSwitchTimerLists+0xbc>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe f857 	bl	8005cf0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d12e      	bne.n	8007cb0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	4413      	add	r3, r2
 8007c5a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d90e      	bls.n	8007c82 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c70:	4b19      	ldr	r3, [pc, #100]	; (8007cd8 <prvSwitchTimerLists+0xbc>)
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f7fe f800 	bl	8005c80 <vListInsert>
 8007c80:	e016      	b.n	8007cb0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c82:	2300      	movs	r3, #0
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	2300      	movs	r3, #0
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f7ff fd9d 	bl	80077cc <xTimerGenericCommand>
 8007c92:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10a      	bne.n	8007cb0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	603b      	str	r3, [r7, #0]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cb0:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <prvSwitchTimerLists+0xbc>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1b4      	bne.n	8007c24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007cba:	4b07      	ldr	r3, [pc, #28]	; (8007cd8 <prvSwitchTimerLists+0xbc>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007cc0:	4b06      	ldr	r3, [pc, #24]	; (8007cdc <prvSwitchTimerLists+0xc0>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a04      	ldr	r2, [pc, #16]	; (8007cd8 <prvSwitchTimerLists+0xbc>)
 8007cc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007cc8:	4a04      	ldr	r2, [pc, #16]	; (8007cdc <prvSwitchTimerLists+0xc0>)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	6013      	str	r3, [r2, #0]
}
 8007cce:	bf00      	nop
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	200010d0 	.word	0x200010d0
 8007cdc:	200010d4 	.word	0x200010d4

08007ce0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ce6:	f000 f929 	bl	8007f3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007cea:	4b15      	ldr	r3, [pc, #84]	; (8007d40 <prvCheckForValidListAndQueue+0x60>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d120      	bne.n	8007d34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cf2:	4814      	ldr	r0, [pc, #80]	; (8007d44 <prvCheckForValidListAndQueue+0x64>)
 8007cf4:	f7fd ff76 	bl	8005be4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cf8:	4813      	ldr	r0, [pc, #76]	; (8007d48 <prvCheckForValidListAndQueue+0x68>)
 8007cfa:	f7fd ff73 	bl	8005be4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <prvCheckForValidListAndQueue+0x6c>)
 8007d00:	4a10      	ldr	r2, [pc, #64]	; (8007d44 <prvCheckForValidListAndQueue+0x64>)
 8007d02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d04:	4b12      	ldr	r3, [pc, #72]	; (8007d50 <prvCheckForValidListAndQueue+0x70>)
 8007d06:	4a10      	ldr	r2, [pc, #64]	; (8007d48 <prvCheckForValidListAndQueue+0x68>)
 8007d08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	4b11      	ldr	r3, [pc, #68]	; (8007d54 <prvCheckForValidListAndQueue+0x74>)
 8007d10:	4a11      	ldr	r2, [pc, #68]	; (8007d58 <prvCheckForValidListAndQueue+0x78>)
 8007d12:	2110      	movs	r1, #16
 8007d14:	200a      	movs	r0, #10
 8007d16:	f7fe f87d 	bl	8005e14 <xQueueGenericCreateStatic>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	4a08      	ldr	r2, [pc, #32]	; (8007d40 <prvCheckForValidListAndQueue+0x60>)
 8007d1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d20:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <prvCheckForValidListAndQueue+0x60>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d28:	4b05      	ldr	r3, [pc, #20]	; (8007d40 <prvCheckForValidListAndQueue+0x60>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	490b      	ldr	r1, [pc, #44]	; (8007d5c <prvCheckForValidListAndQueue+0x7c>)
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fc90 	bl	8006654 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d34:	f000 f932 	bl	8007f9c <vPortExitCritical>
}
 8007d38:	bf00      	nop
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	200010d8 	.word	0x200010d8
 8007d44:	200010a8 	.word	0x200010a8
 8007d48:	200010bc 	.word	0x200010bc
 8007d4c:	200010d0 	.word	0x200010d0
 8007d50:	200010d4 	.word	0x200010d4
 8007d54:	20001184 	.word	0x20001184
 8007d58:	200010e4 	.word	0x200010e4
 8007d5c:	0800bb90 	.word	0x0800bb90

08007d60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3b04      	subs	r3, #4
 8007d70:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3b04      	subs	r3, #4
 8007d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f023 0201 	bic.w	r2, r3, #1
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3b04      	subs	r3, #4
 8007d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d90:	4a08      	ldr	r2, [pc, #32]	; (8007db4 <pxPortInitialiseStack+0x54>)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3b14      	subs	r3, #20
 8007d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3b20      	subs	r3, #32
 8007da6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007da8:	68fb      	ldr	r3, [r7, #12]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr
 8007db4:	08007db9 	.word	0x08007db9

08007db8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dc2:	4b12      	ldr	r3, [pc, #72]	; (8007e0c <prvTaskExitError+0x54>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dca:	d00a      	beq.n	8007de2 <prvTaskExitError+0x2a>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	60fb      	str	r3, [r7, #12]
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <prvTaskExitError+0x28>
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	60bb      	str	r3, [r7, #8]
}
 8007df4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007df6:	bf00      	nop
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0fc      	beq.n	8007df8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dfe:	bf00      	nop
 8007e00:	bf00      	nop
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bc80      	pop	{r7}
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	20000054 	.word	0x20000054

08007e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e10:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <pxCurrentTCBConst2>)
 8007e12:	6819      	ldr	r1, [r3, #0]
 8007e14:	6808      	ldr	r0, [r1, #0]
 8007e16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e1a:	f380 8809 	msr	PSP, r0
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f04f 0000 	mov.w	r0, #0
 8007e26:	f380 8811 	msr	BASEPRI, r0
 8007e2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007e2e:	4770      	bx	lr

08007e30 <pxCurrentTCBConst2>:
 8007e30:	20000ba8 	.word	0x20000ba8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop

08007e38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007e38:	4806      	ldr	r0, [pc, #24]	; (8007e54 <prvPortStartFirstTask+0x1c>)
 8007e3a:	6800      	ldr	r0, [r0, #0]
 8007e3c:	6800      	ldr	r0, [r0, #0]
 8007e3e:	f380 8808 	msr	MSP, r0
 8007e42:	b662      	cpsie	i
 8007e44:	b661      	cpsie	f
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	df00      	svc	0
 8007e50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e52:	bf00      	nop
 8007e54:	e000ed08 	.word	0xe000ed08

08007e58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e5e:	4b32      	ldr	r3, [pc, #200]	; (8007f28 <xPortStartScheduler+0xd0>)
 8007e60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	22ff      	movs	r2, #255	; 0xff
 8007e6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e78:	78fb      	ldrb	r3, [r7, #3]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	4b2a      	ldr	r3, [pc, #168]	; (8007f2c <xPortStartScheduler+0xd4>)
 8007e84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e86:	4b2a      	ldr	r3, [pc, #168]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007e88:	2207      	movs	r2, #7
 8007e8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e8c:	e009      	b.n	8007ea2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e8e:	4b28      	ldr	r3, [pc, #160]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	4a26      	ldr	r2, [pc, #152]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007e96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ea2:	78fb      	ldrb	r3, [r7, #3]
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eaa:	2b80      	cmp	r3, #128	; 0x80
 8007eac:	d0ef      	beq.n	8007e8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007eae:	4b20      	ldr	r3, [pc, #128]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f1c3 0307 	rsb	r3, r3, #7
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d00a      	beq.n	8007ed0 <xPortStartScheduler+0x78>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	60bb      	str	r3, [r7, #8]
}
 8007ecc:	bf00      	nop
 8007ece:	e7fe      	b.n	8007ece <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ed0:	4b17      	ldr	r3, [pc, #92]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	021b      	lsls	r3, r3, #8
 8007ed6:	4a16      	ldr	r2, [pc, #88]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007ed8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007eda:	4b15      	ldr	r3, [pc, #84]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ee2:	4a13      	ldr	r2, [pc, #76]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007ee4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007eee:	4b11      	ldr	r3, [pc, #68]	; (8007f34 <xPortStartScheduler+0xdc>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a10      	ldr	r2, [pc, #64]	; (8007f34 <xPortStartScheduler+0xdc>)
 8007ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ef8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007efa:	4b0e      	ldr	r3, [pc, #56]	; (8007f34 <xPortStartScheduler+0xdc>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a0d      	ldr	r2, [pc, #52]	; (8007f34 <xPortStartScheduler+0xdc>)
 8007f00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f06:	f000 f8b9 	bl	800807c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f0a:	4b0b      	ldr	r3, [pc, #44]	; (8007f38 <xPortStartScheduler+0xe0>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f10:	f7ff ff92 	bl	8007e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f14:	f7ff f8c4 	bl	80070a0 <vTaskSwitchContext>
	prvTaskExitError();
 8007f18:	f7ff ff4e 	bl	8007db8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	e000e400 	.word	0xe000e400
 8007f2c:	200011d4 	.word	0x200011d4
 8007f30:	200011d8 	.word	0x200011d8
 8007f34:	e000ed20 	.word	0xe000ed20
 8007f38:	20000054 	.word	0x20000054

08007f3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	607b      	str	r3, [r7, #4]
}
 8007f54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f56:	4b0f      	ldr	r3, [pc, #60]	; (8007f94 <vPortEnterCritical+0x58>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	4a0d      	ldr	r2, [pc, #52]	; (8007f94 <vPortEnterCritical+0x58>)
 8007f5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f60:	4b0c      	ldr	r3, [pc, #48]	; (8007f94 <vPortEnterCritical+0x58>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d10f      	bne.n	8007f88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f68:	4b0b      	ldr	r3, [pc, #44]	; (8007f98 <vPortEnterCritical+0x5c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	603b      	str	r3, [r7, #0]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <vPortEnterCritical+0x4a>
	}
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bc80      	pop	{r7}
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	20000054 	.word	0x20000054
 8007f98:	e000ed04 	.word	0xe000ed04

08007f9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fa2:	4b11      	ldr	r3, [pc, #68]	; (8007fe8 <vPortExitCritical+0x4c>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <vPortExitCritical+0x24>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	607b      	str	r3, [r7, #4]
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fc0:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <vPortExitCritical+0x4c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	4a08      	ldr	r2, [pc, #32]	; (8007fe8 <vPortExitCritical+0x4c>)
 8007fc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fca:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <vPortExitCritical+0x4c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d105      	bne.n	8007fde <vPortExitCritical+0x42>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	f383 8811 	msr	BASEPRI, r3
}
 8007fdc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fde:	bf00      	nop
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bc80      	pop	{r7}
 8007fe6:	4770      	bx	lr
 8007fe8:	20000054 	.word	0x20000054
 8007fec:	00000000 	.word	0x00000000

08007ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ff0:	f3ef 8009 	mrs	r0, PSP
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	4b0d      	ldr	r3, [pc, #52]	; (8008030 <pxCurrentTCBConst>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008000:	6010      	str	r0, [r2, #0]
 8008002:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008006:	f04f 0050 	mov.w	r0, #80	; 0x50
 800800a:	f380 8811 	msr	BASEPRI, r0
 800800e:	f7ff f847 	bl	80070a0 <vTaskSwitchContext>
 8008012:	f04f 0000 	mov.w	r0, #0
 8008016:	f380 8811 	msr	BASEPRI, r0
 800801a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800801e:	6819      	ldr	r1, [r3, #0]
 8008020:	6808      	ldr	r0, [r1, #0]
 8008022:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008026:	f380 8809 	msr	PSP, r0
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	4770      	bx	lr

08008030 <pxCurrentTCBConst>:
 8008030:	20000ba8 	.word	0x20000ba8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop

08008038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	607b      	str	r3, [r7, #4]
}
 8008050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008052:	f7fe ff67 	bl	8006f24 <xTaskIncrementTick>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800805c:	4b06      	ldr	r3, [pc, #24]	; (8008078 <SysTick_Handler+0x40>)
 800805e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	2300      	movs	r3, #0
 8008066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	f383 8811 	msr	BASEPRI, r3
}
 800806e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008070:	bf00      	nop
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008080:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <vPortSetupTimerInterrupt+0x30>)
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008086:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <vPortSetupTimerInterrupt+0x34>)
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800808c:	4b09      	ldr	r3, [pc, #36]	; (80080b4 <vPortSetupTimerInterrupt+0x38>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a09      	ldr	r2, [pc, #36]	; (80080b8 <vPortSetupTimerInterrupt+0x3c>)
 8008092:	fba2 2303 	umull	r2, r3, r2, r3
 8008096:	099b      	lsrs	r3, r3, #6
 8008098:	4a08      	ldr	r2, [pc, #32]	; (80080bc <vPortSetupTimerInterrupt+0x40>)
 800809a:	3b01      	subs	r3, #1
 800809c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800809e:	4b03      	ldr	r3, [pc, #12]	; (80080ac <vPortSetupTimerInterrupt+0x30>)
 80080a0:	2207      	movs	r2, #7
 80080a2:	601a      	str	r2, [r3, #0]
}
 80080a4:	bf00      	nop
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bc80      	pop	{r7}
 80080aa:	4770      	bx	lr
 80080ac:	e000e010 	.word	0xe000e010
 80080b0:	e000e018 	.word	0xe000e018
 80080b4:	20000024 	.word	0x20000024
 80080b8:	10624dd3 	.word	0x10624dd3
 80080bc:	e000e014 	.word	0xe000e014

080080c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080c6:	f3ef 8305 	mrs	r3, IPSR
 80080ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b0f      	cmp	r3, #15
 80080d0:	d914      	bls.n	80080fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080d2:	4a16      	ldr	r2, [pc, #88]	; (800812c <vPortValidateInterruptPriority+0x6c>)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4413      	add	r3, r2
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80080dc:	4b14      	ldr	r3, [pc, #80]	; (8008130 <vPortValidateInterruptPriority+0x70>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	7afa      	ldrb	r2, [r7, #11]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d20a      	bcs.n	80080fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	607b      	str	r3, [r7, #4]
}
 80080f8:	bf00      	nop
 80080fa:	e7fe      	b.n	80080fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080fc:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <vPortValidateInterruptPriority+0x74>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008104:	4b0c      	ldr	r3, [pc, #48]	; (8008138 <vPortValidateInterruptPriority+0x78>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d90a      	bls.n	8008122 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	603b      	str	r3, [r7, #0]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <vPortValidateInterruptPriority+0x60>
	}
 8008122:	bf00      	nop
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	bc80      	pop	{r7}
 800812a:	4770      	bx	lr
 800812c:	e000e3f0 	.word	0xe000e3f0
 8008130:	200011d4 	.word	0x200011d4
 8008134:	e000ed0c 	.word	0xe000ed0c
 8008138:	200011d8 	.word	0x200011d8

0800813c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b08a      	sub	sp, #40	; 0x28
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008144:	2300      	movs	r3, #0
 8008146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008148:	f7fe fe20 	bl	8006d8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800814c:	4b58      	ldr	r3, [pc, #352]	; (80082b0 <pvPortMalloc+0x174>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008154:	f000 f910 	bl	8008378 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008158:	4b56      	ldr	r3, [pc, #344]	; (80082b4 <pvPortMalloc+0x178>)
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4013      	ands	r3, r2
 8008160:	2b00      	cmp	r3, #0
 8008162:	f040 808e 	bne.w	8008282 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d01d      	beq.n	80081a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800816c:	2208      	movs	r2, #8
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4413      	add	r3, r2
 8008172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f003 0307 	and.w	r3, r3, #7
 800817a:	2b00      	cmp	r3, #0
 800817c:	d014      	beq.n	80081a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f023 0307 	bic.w	r3, r3, #7
 8008184:	3308      	adds	r3, #8
 8008186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f003 0307 	and.w	r3, r3, #7
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <pvPortMalloc+0x6c>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	617b      	str	r3, [r7, #20]
}
 80081a4:	bf00      	nop
 80081a6:	e7fe      	b.n	80081a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d069      	beq.n	8008282 <pvPortMalloc+0x146>
 80081ae:	4b42      	ldr	r3, [pc, #264]	; (80082b8 <pvPortMalloc+0x17c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d864      	bhi.n	8008282 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081b8:	4b40      	ldr	r3, [pc, #256]	; (80082bc <pvPortMalloc+0x180>)
 80081ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081bc:	4b3f      	ldr	r3, [pc, #252]	; (80082bc <pvPortMalloc+0x180>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081c2:	e004      	b.n	80081ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d903      	bls.n	80081e0 <pvPortMalloc+0xa4>
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1f1      	bne.n	80081c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081e0:	4b33      	ldr	r3, [pc, #204]	; (80082b0 <pvPortMalloc+0x174>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d04b      	beq.n	8008282 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2208      	movs	r2, #8
 80081f0:	4413      	add	r3, r2
 80081f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	1ad2      	subs	r2, r2, r3
 8008204:	2308      	movs	r3, #8
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	429a      	cmp	r2, r3
 800820a:	d91f      	bls.n	800824c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800820c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4413      	add	r3, r2
 8008212:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <pvPortMalloc+0xf8>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	613b      	str	r3, [r7, #16]
}
 8008230:	bf00      	nop
 8008232:	e7fe      	b.n	8008232 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	1ad2      	subs	r2, r2, r3
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008246:	69b8      	ldr	r0, [r7, #24]
 8008248:	f000 f8f8 	bl	800843c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800824c:	4b1a      	ldr	r3, [pc, #104]	; (80082b8 <pvPortMalloc+0x17c>)
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	4a18      	ldr	r2, [pc, #96]	; (80082b8 <pvPortMalloc+0x17c>)
 8008258:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800825a:	4b17      	ldr	r3, [pc, #92]	; (80082b8 <pvPortMalloc+0x17c>)
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	4b18      	ldr	r3, [pc, #96]	; (80082c0 <pvPortMalloc+0x184>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d203      	bcs.n	800826e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008266:	4b14      	ldr	r3, [pc, #80]	; (80082b8 <pvPortMalloc+0x17c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a15      	ldr	r2, [pc, #84]	; (80082c0 <pvPortMalloc+0x184>)
 800826c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	4b10      	ldr	r3, [pc, #64]	; (80082b4 <pvPortMalloc+0x178>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	431a      	orrs	r2, r3
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008282:	f7fe fd91 	bl	8006da8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00a      	beq.n	80082a6 <pvPortMalloc+0x16a>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	60fb      	str	r3, [r7, #12]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <pvPortMalloc+0x168>
	return pvReturn;
 80082a6:	69fb      	ldr	r3, [r7, #28]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3728      	adds	r7, #40	; 0x28
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20001de4 	.word	0x20001de4
 80082b4:	20001df0 	.word	0x20001df0
 80082b8:	20001de8 	.word	0x20001de8
 80082bc:	20001ddc 	.word	0x20001ddc
 80082c0:	20001dec 	.word	0x20001dec

080082c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d048      	beq.n	8008368 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082d6:	2308      	movs	r3, #8
 80082d8:	425b      	negs	r3, r3
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4413      	add	r3, r2
 80082de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	4b21      	ldr	r3, [pc, #132]	; (8008370 <vPortFree+0xac>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4013      	ands	r3, r2
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <vPortFree+0x44>
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	60fb      	str	r3, [r7, #12]
}
 8008304:	bf00      	nop
 8008306:	e7fe      	b.n	8008306 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00a      	beq.n	8008326 <vPortFree+0x62>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	60bb      	str	r3, [r7, #8]
}
 8008322:	bf00      	nop
 8008324:	e7fe      	b.n	8008324 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	4b11      	ldr	r3, [pc, #68]	; (8008370 <vPortFree+0xac>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4013      	ands	r3, r2
 8008330:	2b00      	cmp	r3, #0
 8008332:	d019      	beq.n	8008368 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d115      	bne.n	8008368 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	4b0b      	ldr	r3, [pc, #44]	; (8008370 <vPortFree+0xac>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	43db      	mvns	r3, r3
 8008346:	401a      	ands	r2, r3
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800834c:	f7fe fd1e 	bl	8006d8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	685a      	ldr	r2, [r3, #4]
 8008354:	4b07      	ldr	r3, [pc, #28]	; (8008374 <vPortFree+0xb0>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4413      	add	r3, r2
 800835a:	4a06      	ldr	r2, [pc, #24]	; (8008374 <vPortFree+0xb0>)
 800835c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800835e:	6938      	ldr	r0, [r7, #16]
 8008360:	f000 f86c 	bl	800843c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008364:	f7fe fd20 	bl	8006da8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008368:	bf00      	nop
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20001df0 	.word	0x20001df0
 8008374:	20001de8 	.word	0x20001de8

08008378 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800837e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008382:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008384:	4b27      	ldr	r3, [pc, #156]	; (8008424 <prvHeapInit+0xac>)
 8008386:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f003 0307 	and.w	r3, r3, #7
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00c      	beq.n	80083ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	3307      	adds	r3, #7
 8008396:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0307 	bic.w	r3, r3, #7
 800839e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	4a1f      	ldr	r2, [pc, #124]	; (8008424 <prvHeapInit+0xac>)
 80083a8:	4413      	add	r3, r2
 80083aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083b0:	4a1d      	ldr	r2, [pc, #116]	; (8008428 <prvHeapInit+0xb0>)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083b6:	4b1c      	ldr	r3, [pc, #112]	; (8008428 <prvHeapInit+0xb0>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	4413      	add	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083c4:	2208      	movs	r2, #8
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	1a9b      	subs	r3, r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f023 0307 	bic.w	r3, r3, #7
 80083d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4a15      	ldr	r2, [pc, #84]	; (800842c <prvHeapInit+0xb4>)
 80083d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083da:	4b14      	ldr	r3, [pc, #80]	; (800842c <prvHeapInit+0xb4>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2200      	movs	r2, #0
 80083e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083e2:	4b12      	ldr	r3, [pc, #72]	; (800842c <prvHeapInit+0xb4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2200      	movs	r2, #0
 80083e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	1ad2      	subs	r2, r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083f8:	4b0c      	ldr	r3, [pc, #48]	; (800842c <prvHeapInit+0xb4>)
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	4a0a      	ldr	r2, [pc, #40]	; (8008430 <prvHeapInit+0xb8>)
 8008406:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	4a09      	ldr	r2, [pc, #36]	; (8008434 <prvHeapInit+0xbc>)
 800840e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008410:	4b09      	ldr	r3, [pc, #36]	; (8008438 <prvHeapInit+0xc0>)
 8008412:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008416:	601a      	str	r2, [r3, #0]
}
 8008418:	bf00      	nop
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	bc80      	pop	{r7}
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	200011dc 	.word	0x200011dc
 8008428:	20001ddc 	.word	0x20001ddc
 800842c:	20001de4 	.word	0x20001de4
 8008430:	20001dec 	.word	0x20001dec
 8008434:	20001de8 	.word	0x20001de8
 8008438:	20001df0 	.word	0x20001df0

0800843c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008444:	4b27      	ldr	r3, [pc, #156]	; (80084e4 <prvInsertBlockIntoFreeList+0xa8>)
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	e002      	b.n	8008450 <prvInsertBlockIntoFreeList+0x14>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	429a      	cmp	r2, r3
 8008458:	d8f7      	bhi.n	800844a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	4413      	add	r3, r2
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	429a      	cmp	r2, r3
 800846a:	d108      	bne.n	800847e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	441a      	add	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	441a      	add	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d118      	bne.n	80084c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	4b14      	ldr	r3, [pc, #80]	; (80084e8 <prvInsertBlockIntoFreeList+0xac>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d00d      	beq.n	80084ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685a      	ldr	r2, [r3, #4]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	441a      	add	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	e008      	b.n	80084cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084ba:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <prvInsertBlockIntoFreeList+0xac>)
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	601a      	str	r2, [r3, #0]
 80084c2:	e003      	b.n	80084cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d002      	beq.n	80084da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084da:	bf00      	nop
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr
 80084e4:	20001ddc 	.word	0x20001ddc
 80084e8:	20001de4 	.word	0x20001de4

080084ec <__cvt>:
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f2:	461f      	mov	r7, r3
 80084f4:	bfbb      	ittet	lt
 80084f6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80084fa:	461f      	movlt	r7, r3
 80084fc:	2300      	movge	r3, #0
 80084fe:	232d      	movlt	r3, #45	; 0x2d
 8008500:	b088      	sub	sp, #32
 8008502:	4614      	mov	r4, r2
 8008504:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008506:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008508:	7013      	strb	r3, [r2, #0]
 800850a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800850c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008510:	f023 0820 	bic.w	r8, r3, #32
 8008514:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008518:	d005      	beq.n	8008526 <__cvt+0x3a>
 800851a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800851e:	d100      	bne.n	8008522 <__cvt+0x36>
 8008520:	3501      	adds	r5, #1
 8008522:	2302      	movs	r3, #2
 8008524:	e000      	b.n	8008528 <__cvt+0x3c>
 8008526:	2303      	movs	r3, #3
 8008528:	aa07      	add	r2, sp, #28
 800852a:	9204      	str	r2, [sp, #16]
 800852c:	aa06      	add	r2, sp, #24
 800852e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008532:	e9cd 3500 	strd	r3, r5, [sp]
 8008536:	4622      	mov	r2, r4
 8008538:	463b      	mov	r3, r7
 800853a:	f000 fead 	bl	8009298 <_dtoa_r>
 800853e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008542:	4606      	mov	r6, r0
 8008544:	d102      	bne.n	800854c <__cvt+0x60>
 8008546:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008548:	07db      	lsls	r3, r3, #31
 800854a:	d522      	bpl.n	8008592 <__cvt+0xa6>
 800854c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008550:	eb06 0905 	add.w	r9, r6, r5
 8008554:	d110      	bne.n	8008578 <__cvt+0x8c>
 8008556:	7833      	ldrb	r3, [r6, #0]
 8008558:	2b30      	cmp	r3, #48	; 0x30
 800855a:	d10a      	bne.n	8008572 <__cvt+0x86>
 800855c:	2200      	movs	r2, #0
 800855e:	2300      	movs	r3, #0
 8008560:	4620      	mov	r0, r4
 8008562:	4639      	mov	r1, r7
 8008564:	f7f8 fa20 	bl	80009a8 <__aeabi_dcmpeq>
 8008568:	b918      	cbnz	r0, 8008572 <__cvt+0x86>
 800856a:	f1c5 0501 	rsb	r5, r5, #1
 800856e:	f8ca 5000 	str.w	r5, [sl]
 8008572:	f8da 3000 	ldr.w	r3, [sl]
 8008576:	4499      	add	r9, r3
 8008578:	2200      	movs	r2, #0
 800857a:	2300      	movs	r3, #0
 800857c:	4620      	mov	r0, r4
 800857e:	4639      	mov	r1, r7
 8008580:	f7f8 fa12 	bl	80009a8 <__aeabi_dcmpeq>
 8008584:	b108      	cbz	r0, 800858a <__cvt+0x9e>
 8008586:	f8cd 901c 	str.w	r9, [sp, #28]
 800858a:	2230      	movs	r2, #48	; 0x30
 800858c:	9b07      	ldr	r3, [sp, #28]
 800858e:	454b      	cmp	r3, r9
 8008590:	d307      	bcc.n	80085a2 <__cvt+0xb6>
 8008592:	4630      	mov	r0, r6
 8008594:	9b07      	ldr	r3, [sp, #28]
 8008596:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008598:	1b9b      	subs	r3, r3, r6
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	b008      	add	sp, #32
 800859e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a2:	1c59      	adds	r1, r3, #1
 80085a4:	9107      	str	r1, [sp, #28]
 80085a6:	701a      	strb	r2, [r3, #0]
 80085a8:	e7f0      	b.n	800858c <__cvt+0xa0>

080085aa <__exponent>:
 80085aa:	4603      	mov	r3, r0
 80085ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085ae:	2900      	cmp	r1, #0
 80085b0:	f803 2b02 	strb.w	r2, [r3], #2
 80085b4:	bfb6      	itet	lt
 80085b6:	222d      	movlt	r2, #45	; 0x2d
 80085b8:	222b      	movge	r2, #43	; 0x2b
 80085ba:	4249      	neglt	r1, r1
 80085bc:	2909      	cmp	r1, #9
 80085be:	7042      	strb	r2, [r0, #1]
 80085c0:	dd2a      	ble.n	8008618 <__exponent+0x6e>
 80085c2:	f10d 0207 	add.w	r2, sp, #7
 80085c6:	4617      	mov	r7, r2
 80085c8:	260a      	movs	r6, #10
 80085ca:	fb91 f5f6 	sdiv	r5, r1, r6
 80085ce:	4694      	mov	ip, r2
 80085d0:	fb06 1415 	mls	r4, r6, r5, r1
 80085d4:	3430      	adds	r4, #48	; 0x30
 80085d6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80085da:	460c      	mov	r4, r1
 80085dc:	2c63      	cmp	r4, #99	; 0x63
 80085de:	4629      	mov	r1, r5
 80085e0:	f102 32ff 	add.w	r2, r2, #4294967295
 80085e4:	dcf1      	bgt.n	80085ca <__exponent+0x20>
 80085e6:	3130      	adds	r1, #48	; 0x30
 80085e8:	f1ac 0402 	sub.w	r4, ip, #2
 80085ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 80085f0:	4622      	mov	r2, r4
 80085f2:	1c41      	adds	r1, r0, #1
 80085f4:	42ba      	cmp	r2, r7
 80085f6:	d30a      	bcc.n	800860e <__exponent+0x64>
 80085f8:	f10d 0209 	add.w	r2, sp, #9
 80085fc:	eba2 020c 	sub.w	r2, r2, ip
 8008600:	42bc      	cmp	r4, r7
 8008602:	bf88      	it	hi
 8008604:	2200      	movhi	r2, #0
 8008606:	4413      	add	r3, r2
 8008608:	1a18      	subs	r0, r3, r0
 800860a:	b003      	add	sp, #12
 800860c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008612:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008616:	e7ed      	b.n	80085f4 <__exponent+0x4a>
 8008618:	2330      	movs	r3, #48	; 0x30
 800861a:	3130      	adds	r1, #48	; 0x30
 800861c:	7083      	strb	r3, [r0, #2]
 800861e:	70c1      	strb	r1, [r0, #3]
 8008620:	1d03      	adds	r3, r0, #4
 8008622:	e7f1      	b.n	8008608 <__exponent+0x5e>

08008624 <_printf_float>:
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	b091      	sub	sp, #68	; 0x44
 800862a:	460c      	mov	r4, r1
 800862c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008630:	4616      	mov	r6, r2
 8008632:	461f      	mov	r7, r3
 8008634:	4605      	mov	r5, r0
 8008636:	f000 fd11 	bl	800905c <_localeconv_r>
 800863a:	6803      	ldr	r3, [r0, #0]
 800863c:	4618      	mov	r0, r3
 800863e:	9309      	str	r3, [sp, #36]	; 0x24
 8008640:	f7f7 fd86 	bl	8000150 <strlen>
 8008644:	2300      	movs	r3, #0
 8008646:	930e      	str	r3, [sp, #56]	; 0x38
 8008648:	f8d8 3000 	ldr.w	r3, [r8]
 800864c:	900a      	str	r0, [sp, #40]	; 0x28
 800864e:	3307      	adds	r3, #7
 8008650:	f023 0307 	bic.w	r3, r3, #7
 8008654:	f103 0208 	add.w	r2, r3, #8
 8008658:	f894 9018 	ldrb.w	r9, [r4, #24]
 800865c:	f8d4 b000 	ldr.w	fp, [r4]
 8008660:	f8c8 2000 	str.w	r2, [r8]
 8008664:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008668:	4652      	mov	r2, sl
 800866a:	4643      	mov	r3, r8
 800866c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008670:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008674:	930b      	str	r3, [sp, #44]	; 0x2c
 8008676:	f04f 32ff 	mov.w	r2, #4294967295
 800867a:	4650      	mov	r0, sl
 800867c:	4b9c      	ldr	r3, [pc, #624]	; (80088f0 <_printf_float+0x2cc>)
 800867e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008680:	f7f8 f9c4 	bl	8000a0c <__aeabi_dcmpun>
 8008684:	bb70      	cbnz	r0, 80086e4 <_printf_float+0xc0>
 8008686:	f04f 32ff 	mov.w	r2, #4294967295
 800868a:	4650      	mov	r0, sl
 800868c:	4b98      	ldr	r3, [pc, #608]	; (80088f0 <_printf_float+0x2cc>)
 800868e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008690:	f7f8 f99e 	bl	80009d0 <__aeabi_dcmple>
 8008694:	bb30      	cbnz	r0, 80086e4 <_printf_float+0xc0>
 8008696:	2200      	movs	r2, #0
 8008698:	2300      	movs	r3, #0
 800869a:	4650      	mov	r0, sl
 800869c:	4641      	mov	r1, r8
 800869e:	f7f8 f98d 	bl	80009bc <__aeabi_dcmplt>
 80086a2:	b110      	cbz	r0, 80086aa <_printf_float+0x86>
 80086a4:	232d      	movs	r3, #45	; 0x2d
 80086a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086aa:	4a92      	ldr	r2, [pc, #584]	; (80088f4 <_printf_float+0x2d0>)
 80086ac:	4b92      	ldr	r3, [pc, #584]	; (80088f8 <_printf_float+0x2d4>)
 80086ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80086b2:	bf94      	ite	ls
 80086b4:	4690      	movls	r8, r2
 80086b6:	4698      	movhi	r8, r3
 80086b8:	2303      	movs	r3, #3
 80086ba:	f04f 0a00 	mov.w	sl, #0
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	f02b 0304 	bic.w	r3, fp, #4
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	4633      	mov	r3, r6
 80086c8:	4621      	mov	r1, r4
 80086ca:	4628      	mov	r0, r5
 80086cc:	9700      	str	r7, [sp, #0]
 80086ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80086d0:	f000 f9d6 	bl	8008a80 <_printf_common>
 80086d4:	3001      	adds	r0, #1
 80086d6:	f040 8090 	bne.w	80087fa <_printf_float+0x1d6>
 80086da:	f04f 30ff 	mov.w	r0, #4294967295
 80086de:	b011      	add	sp, #68	; 0x44
 80086e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e4:	4652      	mov	r2, sl
 80086e6:	4643      	mov	r3, r8
 80086e8:	4650      	mov	r0, sl
 80086ea:	4641      	mov	r1, r8
 80086ec:	f7f8 f98e 	bl	8000a0c <__aeabi_dcmpun>
 80086f0:	b148      	cbz	r0, 8008706 <_printf_float+0xe2>
 80086f2:	f1b8 0f00 	cmp.w	r8, #0
 80086f6:	bfb8      	it	lt
 80086f8:	232d      	movlt	r3, #45	; 0x2d
 80086fa:	4a80      	ldr	r2, [pc, #512]	; (80088fc <_printf_float+0x2d8>)
 80086fc:	bfb8      	it	lt
 80086fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008702:	4b7f      	ldr	r3, [pc, #508]	; (8008900 <_printf_float+0x2dc>)
 8008704:	e7d3      	b.n	80086ae <_printf_float+0x8a>
 8008706:	6863      	ldr	r3, [r4, #4]
 8008708:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	d142      	bne.n	8008796 <_printf_float+0x172>
 8008710:	2306      	movs	r3, #6
 8008712:	6063      	str	r3, [r4, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	9206      	str	r2, [sp, #24]
 8008718:	aa0e      	add	r2, sp, #56	; 0x38
 800871a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800871e:	aa0d      	add	r2, sp, #52	; 0x34
 8008720:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008724:	9203      	str	r2, [sp, #12]
 8008726:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800872a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800872e:	6023      	str	r3, [r4, #0]
 8008730:	6863      	ldr	r3, [r4, #4]
 8008732:	4652      	mov	r2, sl
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	4628      	mov	r0, r5
 8008738:	4643      	mov	r3, r8
 800873a:	910b      	str	r1, [sp, #44]	; 0x2c
 800873c:	f7ff fed6 	bl	80084ec <__cvt>
 8008740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008742:	4680      	mov	r8, r0
 8008744:	2947      	cmp	r1, #71	; 0x47
 8008746:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008748:	d108      	bne.n	800875c <_printf_float+0x138>
 800874a:	1cc8      	adds	r0, r1, #3
 800874c:	db02      	blt.n	8008754 <_printf_float+0x130>
 800874e:	6863      	ldr	r3, [r4, #4]
 8008750:	4299      	cmp	r1, r3
 8008752:	dd40      	ble.n	80087d6 <_printf_float+0x1b2>
 8008754:	f1a9 0902 	sub.w	r9, r9, #2
 8008758:	fa5f f989 	uxtb.w	r9, r9
 800875c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008760:	d81f      	bhi.n	80087a2 <_printf_float+0x17e>
 8008762:	464a      	mov	r2, r9
 8008764:	3901      	subs	r1, #1
 8008766:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800876a:	910d      	str	r1, [sp, #52]	; 0x34
 800876c:	f7ff ff1d 	bl	80085aa <__exponent>
 8008770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008772:	4682      	mov	sl, r0
 8008774:	1813      	adds	r3, r2, r0
 8008776:	2a01      	cmp	r2, #1
 8008778:	6123      	str	r3, [r4, #16]
 800877a:	dc02      	bgt.n	8008782 <_printf_float+0x15e>
 800877c:	6822      	ldr	r2, [r4, #0]
 800877e:	07d2      	lsls	r2, r2, #31
 8008780:	d501      	bpl.n	8008786 <_printf_float+0x162>
 8008782:	3301      	adds	r3, #1
 8008784:	6123      	str	r3, [r4, #16]
 8008786:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800878a:	2b00      	cmp	r3, #0
 800878c:	d09b      	beq.n	80086c6 <_printf_float+0xa2>
 800878e:	232d      	movs	r3, #45	; 0x2d
 8008790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008794:	e797      	b.n	80086c6 <_printf_float+0xa2>
 8008796:	2947      	cmp	r1, #71	; 0x47
 8008798:	d1bc      	bne.n	8008714 <_printf_float+0xf0>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1ba      	bne.n	8008714 <_printf_float+0xf0>
 800879e:	2301      	movs	r3, #1
 80087a0:	e7b7      	b.n	8008712 <_printf_float+0xee>
 80087a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80087a6:	d118      	bne.n	80087da <_printf_float+0x1b6>
 80087a8:	2900      	cmp	r1, #0
 80087aa:	6863      	ldr	r3, [r4, #4]
 80087ac:	dd0b      	ble.n	80087c6 <_printf_float+0x1a2>
 80087ae:	6121      	str	r1, [r4, #16]
 80087b0:	b913      	cbnz	r3, 80087b8 <_printf_float+0x194>
 80087b2:	6822      	ldr	r2, [r4, #0]
 80087b4:	07d0      	lsls	r0, r2, #31
 80087b6:	d502      	bpl.n	80087be <_printf_float+0x19a>
 80087b8:	3301      	adds	r3, #1
 80087ba:	440b      	add	r3, r1
 80087bc:	6123      	str	r3, [r4, #16]
 80087be:	f04f 0a00 	mov.w	sl, #0
 80087c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80087c4:	e7df      	b.n	8008786 <_printf_float+0x162>
 80087c6:	b913      	cbnz	r3, 80087ce <_printf_float+0x1aa>
 80087c8:	6822      	ldr	r2, [r4, #0]
 80087ca:	07d2      	lsls	r2, r2, #31
 80087cc:	d501      	bpl.n	80087d2 <_printf_float+0x1ae>
 80087ce:	3302      	adds	r3, #2
 80087d0:	e7f4      	b.n	80087bc <_printf_float+0x198>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e7f2      	b.n	80087bc <_printf_float+0x198>
 80087d6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80087da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087dc:	4299      	cmp	r1, r3
 80087de:	db05      	blt.n	80087ec <_printf_float+0x1c8>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	6121      	str	r1, [r4, #16]
 80087e4:	07d8      	lsls	r0, r3, #31
 80087e6:	d5ea      	bpl.n	80087be <_printf_float+0x19a>
 80087e8:	1c4b      	adds	r3, r1, #1
 80087ea:	e7e7      	b.n	80087bc <_printf_float+0x198>
 80087ec:	2900      	cmp	r1, #0
 80087ee:	bfcc      	ite	gt
 80087f0:	2201      	movgt	r2, #1
 80087f2:	f1c1 0202 	rsble	r2, r1, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	e7e0      	b.n	80087bc <_printf_float+0x198>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	055a      	lsls	r2, r3, #21
 80087fe:	d407      	bmi.n	8008810 <_printf_float+0x1ec>
 8008800:	6923      	ldr	r3, [r4, #16]
 8008802:	4642      	mov	r2, r8
 8008804:	4631      	mov	r1, r6
 8008806:	4628      	mov	r0, r5
 8008808:	47b8      	blx	r7
 800880a:	3001      	adds	r0, #1
 800880c:	d12b      	bne.n	8008866 <_printf_float+0x242>
 800880e:	e764      	b.n	80086da <_printf_float+0xb6>
 8008810:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008814:	f240 80dd 	bls.w	80089d2 <_printf_float+0x3ae>
 8008818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800881c:	2200      	movs	r2, #0
 800881e:	2300      	movs	r3, #0
 8008820:	f7f8 f8c2 	bl	80009a8 <__aeabi_dcmpeq>
 8008824:	2800      	cmp	r0, #0
 8008826:	d033      	beq.n	8008890 <_printf_float+0x26c>
 8008828:	2301      	movs	r3, #1
 800882a:	4631      	mov	r1, r6
 800882c:	4628      	mov	r0, r5
 800882e:	4a35      	ldr	r2, [pc, #212]	; (8008904 <_printf_float+0x2e0>)
 8008830:	47b8      	blx	r7
 8008832:	3001      	adds	r0, #1
 8008834:	f43f af51 	beq.w	80086da <_printf_float+0xb6>
 8008838:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800883c:	429a      	cmp	r2, r3
 800883e:	db02      	blt.n	8008846 <_printf_float+0x222>
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	07d8      	lsls	r0, r3, #31
 8008844:	d50f      	bpl.n	8008866 <_printf_float+0x242>
 8008846:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800884a:	4631      	mov	r1, r6
 800884c:	4628      	mov	r0, r5
 800884e:	47b8      	blx	r7
 8008850:	3001      	adds	r0, #1
 8008852:	f43f af42 	beq.w	80086da <_printf_float+0xb6>
 8008856:	f04f 0800 	mov.w	r8, #0
 800885a:	f104 091a 	add.w	r9, r4, #26
 800885e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008860:	3b01      	subs	r3, #1
 8008862:	4543      	cmp	r3, r8
 8008864:	dc09      	bgt.n	800887a <_printf_float+0x256>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	079b      	lsls	r3, r3, #30
 800886a:	f100 8104 	bmi.w	8008a76 <_printf_float+0x452>
 800886e:	68e0      	ldr	r0, [r4, #12]
 8008870:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008872:	4298      	cmp	r0, r3
 8008874:	bfb8      	it	lt
 8008876:	4618      	movlt	r0, r3
 8008878:	e731      	b.n	80086de <_printf_float+0xba>
 800887a:	2301      	movs	r3, #1
 800887c:	464a      	mov	r2, r9
 800887e:	4631      	mov	r1, r6
 8008880:	4628      	mov	r0, r5
 8008882:	47b8      	blx	r7
 8008884:	3001      	adds	r0, #1
 8008886:	f43f af28 	beq.w	80086da <_printf_float+0xb6>
 800888a:	f108 0801 	add.w	r8, r8, #1
 800888e:	e7e6      	b.n	800885e <_printf_float+0x23a>
 8008890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008892:	2b00      	cmp	r3, #0
 8008894:	dc38      	bgt.n	8008908 <_printf_float+0x2e4>
 8008896:	2301      	movs	r3, #1
 8008898:	4631      	mov	r1, r6
 800889a:	4628      	mov	r0, r5
 800889c:	4a19      	ldr	r2, [pc, #100]	; (8008904 <_printf_float+0x2e0>)
 800889e:	47b8      	blx	r7
 80088a0:	3001      	adds	r0, #1
 80088a2:	f43f af1a 	beq.w	80086da <_printf_float+0xb6>
 80088a6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80088aa:	4313      	orrs	r3, r2
 80088ac:	d102      	bne.n	80088b4 <_printf_float+0x290>
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	07d9      	lsls	r1, r3, #31
 80088b2:	d5d8      	bpl.n	8008866 <_printf_float+0x242>
 80088b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088b8:	4631      	mov	r1, r6
 80088ba:	4628      	mov	r0, r5
 80088bc:	47b8      	blx	r7
 80088be:	3001      	adds	r0, #1
 80088c0:	f43f af0b 	beq.w	80086da <_printf_float+0xb6>
 80088c4:	f04f 0900 	mov.w	r9, #0
 80088c8:	f104 0a1a 	add.w	sl, r4, #26
 80088cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088ce:	425b      	negs	r3, r3
 80088d0:	454b      	cmp	r3, r9
 80088d2:	dc01      	bgt.n	80088d8 <_printf_float+0x2b4>
 80088d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088d6:	e794      	b.n	8008802 <_printf_float+0x1de>
 80088d8:	2301      	movs	r3, #1
 80088da:	4652      	mov	r2, sl
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	f43f aef9 	beq.w	80086da <_printf_float+0xb6>
 80088e8:	f109 0901 	add.w	r9, r9, #1
 80088ec:	e7ee      	b.n	80088cc <_printf_float+0x2a8>
 80088ee:	bf00      	nop
 80088f0:	7fefffff 	.word	0x7fefffff
 80088f4:	0800bbf2 	.word	0x0800bbf2
 80088f8:	0800bbf6 	.word	0x0800bbf6
 80088fc:	0800bbfa 	.word	0x0800bbfa
 8008900:	0800bbfe 	.word	0x0800bbfe
 8008904:	0800be33 	.word	0x0800be33
 8008908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800890a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800890c:	429a      	cmp	r2, r3
 800890e:	bfa8      	it	ge
 8008910:	461a      	movge	r2, r3
 8008912:	2a00      	cmp	r2, #0
 8008914:	4691      	mov	r9, r2
 8008916:	dc37      	bgt.n	8008988 <_printf_float+0x364>
 8008918:	f04f 0b00 	mov.w	fp, #0
 800891c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008920:	f104 021a 	add.w	r2, r4, #26
 8008924:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008928:	ebaa 0309 	sub.w	r3, sl, r9
 800892c:	455b      	cmp	r3, fp
 800892e:	dc33      	bgt.n	8008998 <_printf_float+0x374>
 8008930:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008934:	429a      	cmp	r2, r3
 8008936:	db3b      	blt.n	80089b0 <_printf_float+0x38c>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	07da      	lsls	r2, r3, #31
 800893c:	d438      	bmi.n	80089b0 <_printf_float+0x38c>
 800893e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008942:	eba2 0903 	sub.w	r9, r2, r3
 8008946:	eba2 020a 	sub.w	r2, r2, sl
 800894a:	4591      	cmp	r9, r2
 800894c:	bfa8      	it	ge
 800894e:	4691      	movge	r9, r2
 8008950:	f1b9 0f00 	cmp.w	r9, #0
 8008954:	dc34      	bgt.n	80089c0 <_printf_float+0x39c>
 8008956:	f04f 0800 	mov.w	r8, #0
 800895a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800895e:	f104 0a1a 	add.w	sl, r4, #26
 8008962:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008966:	1a9b      	subs	r3, r3, r2
 8008968:	eba3 0309 	sub.w	r3, r3, r9
 800896c:	4543      	cmp	r3, r8
 800896e:	f77f af7a 	ble.w	8008866 <_printf_float+0x242>
 8008972:	2301      	movs	r3, #1
 8008974:	4652      	mov	r2, sl
 8008976:	4631      	mov	r1, r6
 8008978:	4628      	mov	r0, r5
 800897a:	47b8      	blx	r7
 800897c:	3001      	adds	r0, #1
 800897e:	f43f aeac 	beq.w	80086da <_printf_float+0xb6>
 8008982:	f108 0801 	add.w	r8, r8, #1
 8008986:	e7ec      	b.n	8008962 <_printf_float+0x33e>
 8008988:	4613      	mov	r3, r2
 800898a:	4631      	mov	r1, r6
 800898c:	4642      	mov	r2, r8
 800898e:	4628      	mov	r0, r5
 8008990:	47b8      	blx	r7
 8008992:	3001      	adds	r0, #1
 8008994:	d1c0      	bne.n	8008918 <_printf_float+0x2f4>
 8008996:	e6a0      	b.n	80086da <_printf_float+0xb6>
 8008998:	2301      	movs	r3, #1
 800899a:	4631      	mov	r1, r6
 800899c:	4628      	mov	r0, r5
 800899e:	920b      	str	r2, [sp, #44]	; 0x2c
 80089a0:	47b8      	blx	r7
 80089a2:	3001      	adds	r0, #1
 80089a4:	f43f ae99 	beq.w	80086da <_printf_float+0xb6>
 80089a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089aa:	f10b 0b01 	add.w	fp, fp, #1
 80089ae:	e7b9      	b.n	8008924 <_printf_float+0x300>
 80089b0:	4631      	mov	r1, r6
 80089b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089b6:	4628      	mov	r0, r5
 80089b8:	47b8      	blx	r7
 80089ba:	3001      	adds	r0, #1
 80089bc:	d1bf      	bne.n	800893e <_printf_float+0x31a>
 80089be:	e68c      	b.n	80086da <_printf_float+0xb6>
 80089c0:	464b      	mov	r3, r9
 80089c2:	4631      	mov	r1, r6
 80089c4:	4628      	mov	r0, r5
 80089c6:	eb08 020a 	add.w	r2, r8, sl
 80089ca:	47b8      	blx	r7
 80089cc:	3001      	adds	r0, #1
 80089ce:	d1c2      	bne.n	8008956 <_printf_float+0x332>
 80089d0:	e683      	b.n	80086da <_printf_float+0xb6>
 80089d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089d4:	2a01      	cmp	r2, #1
 80089d6:	dc01      	bgt.n	80089dc <_printf_float+0x3b8>
 80089d8:	07db      	lsls	r3, r3, #31
 80089da:	d539      	bpl.n	8008a50 <_printf_float+0x42c>
 80089dc:	2301      	movs	r3, #1
 80089de:	4642      	mov	r2, r8
 80089e0:	4631      	mov	r1, r6
 80089e2:	4628      	mov	r0, r5
 80089e4:	47b8      	blx	r7
 80089e6:	3001      	adds	r0, #1
 80089e8:	f43f ae77 	beq.w	80086da <_printf_float+0xb6>
 80089ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089f0:	4631      	mov	r1, r6
 80089f2:	4628      	mov	r0, r5
 80089f4:	47b8      	blx	r7
 80089f6:	3001      	adds	r0, #1
 80089f8:	f43f ae6f 	beq.w	80086da <_printf_float+0xb6>
 80089fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a00:	2200      	movs	r2, #0
 8008a02:	2300      	movs	r3, #0
 8008a04:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008a08:	f7f7 ffce 	bl	80009a8 <__aeabi_dcmpeq>
 8008a0c:	b9d8      	cbnz	r0, 8008a46 <_printf_float+0x422>
 8008a0e:	f109 33ff 	add.w	r3, r9, #4294967295
 8008a12:	f108 0201 	add.w	r2, r8, #1
 8008a16:	4631      	mov	r1, r6
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b8      	blx	r7
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d10e      	bne.n	8008a3e <_printf_float+0x41a>
 8008a20:	e65b      	b.n	80086da <_printf_float+0xb6>
 8008a22:	2301      	movs	r3, #1
 8008a24:	464a      	mov	r2, r9
 8008a26:	4631      	mov	r1, r6
 8008a28:	4628      	mov	r0, r5
 8008a2a:	47b8      	blx	r7
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	f43f ae54 	beq.w	80086da <_printf_float+0xb6>
 8008a32:	f108 0801 	add.w	r8, r8, #1
 8008a36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	4543      	cmp	r3, r8
 8008a3c:	dcf1      	bgt.n	8008a22 <_printf_float+0x3fe>
 8008a3e:	4653      	mov	r3, sl
 8008a40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a44:	e6de      	b.n	8008804 <_printf_float+0x1e0>
 8008a46:	f04f 0800 	mov.w	r8, #0
 8008a4a:	f104 091a 	add.w	r9, r4, #26
 8008a4e:	e7f2      	b.n	8008a36 <_printf_float+0x412>
 8008a50:	2301      	movs	r3, #1
 8008a52:	4642      	mov	r2, r8
 8008a54:	e7df      	b.n	8008a16 <_printf_float+0x3f2>
 8008a56:	2301      	movs	r3, #1
 8008a58:	464a      	mov	r2, r9
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	47b8      	blx	r7
 8008a60:	3001      	adds	r0, #1
 8008a62:	f43f ae3a 	beq.w	80086da <_printf_float+0xb6>
 8008a66:	f108 0801 	add.w	r8, r8, #1
 8008a6a:	68e3      	ldr	r3, [r4, #12]
 8008a6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a6e:	1a5b      	subs	r3, r3, r1
 8008a70:	4543      	cmp	r3, r8
 8008a72:	dcf0      	bgt.n	8008a56 <_printf_float+0x432>
 8008a74:	e6fb      	b.n	800886e <_printf_float+0x24a>
 8008a76:	f04f 0800 	mov.w	r8, #0
 8008a7a:	f104 0919 	add.w	r9, r4, #25
 8008a7e:	e7f4      	b.n	8008a6a <_printf_float+0x446>

08008a80 <_printf_common>:
 8008a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a84:	4616      	mov	r6, r2
 8008a86:	4699      	mov	r9, r3
 8008a88:	688a      	ldr	r2, [r1, #8]
 8008a8a:	690b      	ldr	r3, [r1, #16]
 8008a8c:	4607      	mov	r7, r0
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	bfb8      	it	lt
 8008a92:	4613      	movlt	r3, r2
 8008a94:	6033      	str	r3, [r6, #0]
 8008a96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008aa0:	b10a      	cbz	r2, 8008aa6 <_printf_common+0x26>
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	6033      	str	r3, [r6, #0]
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	0699      	lsls	r1, r3, #26
 8008aaa:	bf42      	ittt	mi
 8008aac:	6833      	ldrmi	r3, [r6, #0]
 8008aae:	3302      	addmi	r3, #2
 8008ab0:	6033      	strmi	r3, [r6, #0]
 8008ab2:	6825      	ldr	r5, [r4, #0]
 8008ab4:	f015 0506 	ands.w	r5, r5, #6
 8008ab8:	d106      	bne.n	8008ac8 <_printf_common+0x48>
 8008aba:	f104 0a19 	add.w	sl, r4, #25
 8008abe:	68e3      	ldr	r3, [r4, #12]
 8008ac0:	6832      	ldr	r2, [r6, #0]
 8008ac2:	1a9b      	subs	r3, r3, r2
 8008ac4:	42ab      	cmp	r3, r5
 8008ac6:	dc2b      	bgt.n	8008b20 <_printf_common+0xa0>
 8008ac8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008acc:	1e13      	subs	r3, r2, #0
 8008ace:	6822      	ldr	r2, [r4, #0]
 8008ad0:	bf18      	it	ne
 8008ad2:	2301      	movne	r3, #1
 8008ad4:	0692      	lsls	r2, r2, #26
 8008ad6:	d430      	bmi.n	8008b3a <_printf_common+0xba>
 8008ad8:	4649      	mov	r1, r9
 8008ada:	4638      	mov	r0, r7
 8008adc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ae0:	47c0      	blx	r8
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	d023      	beq.n	8008b2e <_printf_common+0xae>
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	6922      	ldr	r2, [r4, #16]
 8008aea:	f003 0306 	and.w	r3, r3, #6
 8008aee:	2b04      	cmp	r3, #4
 8008af0:	bf14      	ite	ne
 8008af2:	2500      	movne	r5, #0
 8008af4:	6833      	ldreq	r3, [r6, #0]
 8008af6:	f04f 0600 	mov.w	r6, #0
 8008afa:	bf08      	it	eq
 8008afc:	68e5      	ldreq	r5, [r4, #12]
 8008afe:	f104 041a 	add.w	r4, r4, #26
 8008b02:	bf08      	it	eq
 8008b04:	1aed      	subeq	r5, r5, r3
 8008b06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008b0a:	bf08      	it	eq
 8008b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b10:	4293      	cmp	r3, r2
 8008b12:	bfc4      	itt	gt
 8008b14:	1a9b      	subgt	r3, r3, r2
 8008b16:	18ed      	addgt	r5, r5, r3
 8008b18:	42b5      	cmp	r5, r6
 8008b1a:	d11a      	bne.n	8008b52 <_printf_common+0xd2>
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	e008      	b.n	8008b32 <_printf_common+0xb2>
 8008b20:	2301      	movs	r3, #1
 8008b22:	4652      	mov	r2, sl
 8008b24:	4649      	mov	r1, r9
 8008b26:	4638      	mov	r0, r7
 8008b28:	47c0      	blx	r8
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d103      	bne.n	8008b36 <_printf_common+0xb6>
 8008b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b36:	3501      	adds	r5, #1
 8008b38:	e7c1      	b.n	8008abe <_printf_common+0x3e>
 8008b3a:	2030      	movs	r0, #48	; 0x30
 8008b3c:	18e1      	adds	r1, r4, r3
 8008b3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b48:	4422      	add	r2, r4
 8008b4a:	3302      	adds	r3, #2
 8008b4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b50:	e7c2      	b.n	8008ad8 <_printf_common+0x58>
 8008b52:	2301      	movs	r3, #1
 8008b54:	4622      	mov	r2, r4
 8008b56:	4649      	mov	r1, r9
 8008b58:	4638      	mov	r0, r7
 8008b5a:	47c0      	blx	r8
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d0e6      	beq.n	8008b2e <_printf_common+0xae>
 8008b60:	3601      	adds	r6, #1
 8008b62:	e7d9      	b.n	8008b18 <_printf_common+0x98>

08008b64 <_printf_i>:
 8008b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b68:	7e0f      	ldrb	r7, [r1, #24]
 8008b6a:	4691      	mov	r9, r2
 8008b6c:	2f78      	cmp	r7, #120	; 0x78
 8008b6e:	4680      	mov	r8, r0
 8008b70:	460c      	mov	r4, r1
 8008b72:	469a      	mov	sl, r3
 8008b74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b7a:	d807      	bhi.n	8008b8c <_printf_i+0x28>
 8008b7c:	2f62      	cmp	r7, #98	; 0x62
 8008b7e:	d80a      	bhi.n	8008b96 <_printf_i+0x32>
 8008b80:	2f00      	cmp	r7, #0
 8008b82:	f000 80d5 	beq.w	8008d30 <_printf_i+0x1cc>
 8008b86:	2f58      	cmp	r7, #88	; 0x58
 8008b88:	f000 80c1 	beq.w	8008d0e <_printf_i+0x1aa>
 8008b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b94:	e03a      	b.n	8008c0c <_printf_i+0xa8>
 8008b96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b9a:	2b15      	cmp	r3, #21
 8008b9c:	d8f6      	bhi.n	8008b8c <_printf_i+0x28>
 8008b9e:	a101      	add	r1, pc, #4	; (adr r1, 8008ba4 <_printf_i+0x40>)
 8008ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ba4:	08008bfd 	.word	0x08008bfd
 8008ba8:	08008c11 	.word	0x08008c11
 8008bac:	08008b8d 	.word	0x08008b8d
 8008bb0:	08008b8d 	.word	0x08008b8d
 8008bb4:	08008b8d 	.word	0x08008b8d
 8008bb8:	08008b8d 	.word	0x08008b8d
 8008bbc:	08008c11 	.word	0x08008c11
 8008bc0:	08008b8d 	.word	0x08008b8d
 8008bc4:	08008b8d 	.word	0x08008b8d
 8008bc8:	08008b8d 	.word	0x08008b8d
 8008bcc:	08008b8d 	.word	0x08008b8d
 8008bd0:	08008d17 	.word	0x08008d17
 8008bd4:	08008c3d 	.word	0x08008c3d
 8008bd8:	08008cd1 	.word	0x08008cd1
 8008bdc:	08008b8d 	.word	0x08008b8d
 8008be0:	08008b8d 	.word	0x08008b8d
 8008be4:	08008d39 	.word	0x08008d39
 8008be8:	08008b8d 	.word	0x08008b8d
 8008bec:	08008c3d 	.word	0x08008c3d
 8008bf0:	08008b8d 	.word	0x08008b8d
 8008bf4:	08008b8d 	.word	0x08008b8d
 8008bf8:	08008cd9 	.word	0x08008cd9
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	1d1a      	adds	r2, r3, #4
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	602a      	str	r2, [r5, #0]
 8008c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e0a0      	b.n	8008d52 <_printf_i+0x1ee>
 8008c10:	6820      	ldr	r0, [r4, #0]
 8008c12:	682b      	ldr	r3, [r5, #0]
 8008c14:	0607      	lsls	r7, r0, #24
 8008c16:	f103 0104 	add.w	r1, r3, #4
 8008c1a:	6029      	str	r1, [r5, #0]
 8008c1c:	d501      	bpl.n	8008c22 <_printf_i+0xbe>
 8008c1e:	681e      	ldr	r6, [r3, #0]
 8008c20:	e003      	b.n	8008c2a <_printf_i+0xc6>
 8008c22:	0646      	lsls	r6, r0, #25
 8008c24:	d5fb      	bpl.n	8008c1e <_printf_i+0xba>
 8008c26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c2a:	2e00      	cmp	r6, #0
 8008c2c:	da03      	bge.n	8008c36 <_printf_i+0xd2>
 8008c2e:	232d      	movs	r3, #45	; 0x2d
 8008c30:	4276      	negs	r6, r6
 8008c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c36:	230a      	movs	r3, #10
 8008c38:	4859      	ldr	r0, [pc, #356]	; (8008da0 <_printf_i+0x23c>)
 8008c3a:	e012      	b.n	8008c62 <_printf_i+0xfe>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	6820      	ldr	r0, [r4, #0]
 8008c40:	1d19      	adds	r1, r3, #4
 8008c42:	6029      	str	r1, [r5, #0]
 8008c44:	0605      	lsls	r5, r0, #24
 8008c46:	d501      	bpl.n	8008c4c <_printf_i+0xe8>
 8008c48:	681e      	ldr	r6, [r3, #0]
 8008c4a:	e002      	b.n	8008c52 <_printf_i+0xee>
 8008c4c:	0641      	lsls	r1, r0, #25
 8008c4e:	d5fb      	bpl.n	8008c48 <_printf_i+0xe4>
 8008c50:	881e      	ldrh	r6, [r3, #0]
 8008c52:	2f6f      	cmp	r7, #111	; 0x6f
 8008c54:	bf0c      	ite	eq
 8008c56:	2308      	moveq	r3, #8
 8008c58:	230a      	movne	r3, #10
 8008c5a:	4851      	ldr	r0, [pc, #324]	; (8008da0 <_printf_i+0x23c>)
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c62:	6865      	ldr	r5, [r4, #4]
 8008c64:	2d00      	cmp	r5, #0
 8008c66:	bfa8      	it	ge
 8008c68:	6821      	ldrge	r1, [r4, #0]
 8008c6a:	60a5      	str	r5, [r4, #8]
 8008c6c:	bfa4      	itt	ge
 8008c6e:	f021 0104 	bicge.w	r1, r1, #4
 8008c72:	6021      	strge	r1, [r4, #0]
 8008c74:	b90e      	cbnz	r6, 8008c7a <_printf_i+0x116>
 8008c76:	2d00      	cmp	r5, #0
 8008c78:	d04b      	beq.n	8008d12 <_printf_i+0x1ae>
 8008c7a:	4615      	mov	r5, r2
 8008c7c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c80:	fb03 6711 	mls	r7, r3, r1, r6
 8008c84:	5dc7      	ldrb	r7, [r0, r7]
 8008c86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c8a:	4637      	mov	r7, r6
 8008c8c:	42bb      	cmp	r3, r7
 8008c8e:	460e      	mov	r6, r1
 8008c90:	d9f4      	bls.n	8008c7c <_printf_i+0x118>
 8008c92:	2b08      	cmp	r3, #8
 8008c94:	d10b      	bne.n	8008cae <_printf_i+0x14a>
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	07de      	lsls	r6, r3, #31
 8008c9a:	d508      	bpl.n	8008cae <_printf_i+0x14a>
 8008c9c:	6923      	ldr	r3, [r4, #16]
 8008c9e:	6861      	ldr	r1, [r4, #4]
 8008ca0:	4299      	cmp	r1, r3
 8008ca2:	bfde      	ittt	le
 8008ca4:	2330      	movle	r3, #48	; 0x30
 8008ca6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008caa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cae:	1b52      	subs	r2, r2, r5
 8008cb0:	6122      	str	r2, [r4, #16]
 8008cb2:	464b      	mov	r3, r9
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	4640      	mov	r0, r8
 8008cb8:	f8cd a000 	str.w	sl, [sp]
 8008cbc:	aa03      	add	r2, sp, #12
 8008cbe:	f7ff fedf 	bl	8008a80 <_printf_common>
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	d14a      	bne.n	8008d5c <_printf_i+0x1f8>
 8008cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cca:	b004      	add	sp, #16
 8008ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd0:	6823      	ldr	r3, [r4, #0]
 8008cd2:	f043 0320 	orr.w	r3, r3, #32
 8008cd6:	6023      	str	r3, [r4, #0]
 8008cd8:	2778      	movs	r7, #120	; 0x78
 8008cda:	4832      	ldr	r0, [pc, #200]	; (8008da4 <_printf_i+0x240>)
 8008cdc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	6829      	ldr	r1, [r5, #0]
 8008ce4:	061f      	lsls	r7, r3, #24
 8008ce6:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cea:	d402      	bmi.n	8008cf2 <_printf_i+0x18e>
 8008cec:	065f      	lsls	r7, r3, #25
 8008cee:	bf48      	it	mi
 8008cf0:	b2b6      	uxthmi	r6, r6
 8008cf2:	07df      	lsls	r7, r3, #31
 8008cf4:	bf48      	it	mi
 8008cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8008cfa:	6029      	str	r1, [r5, #0]
 8008cfc:	bf48      	it	mi
 8008cfe:	6023      	strmi	r3, [r4, #0]
 8008d00:	b91e      	cbnz	r6, 8008d0a <_printf_i+0x1a6>
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	f023 0320 	bic.w	r3, r3, #32
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	2310      	movs	r3, #16
 8008d0c:	e7a6      	b.n	8008c5c <_printf_i+0xf8>
 8008d0e:	4824      	ldr	r0, [pc, #144]	; (8008da0 <_printf_i+0x23c>)
 8008d10:	e7e4      	b.n	8008cdc <_printf_i+0x178>
 8008d12:	4615      	mov	r5, r2
 8008d14:	e7bd      	b.n	8008c92 <_printf_i+0x12e>
 8008d16:	682b      	ldr	r3, [r5, #0]
 8008d18:	6826      	ldr	r6, [r4, #0]
 8008d1a:	1d18      	adds	r0, r3, #4
 8008d1c:	6961      	ldr	r1, [r4, #20]
 8008d1e:	6028      	str	r0, [r5, #0]
 8008d20:	0635      	lsls	r5, r6, #24
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	d501      	bpl.n	8008d2a <_printf_i+0x1c6>
 8008d26:	6019      	str	r1, [r3, #0]
 8008d28:	e002      	b.n	8008d30 <_printf_i+0x1cc>
 8008d2a:	0670      	lsls	r0, r6, #25
 8008d2c:	d5fb      	bpl.n	8008d26 <_printf_i+0x1c2>
 8008d2e:	8019      	strh	r1, [r3, #0]
 8008d30:	2300      	movs	r3, #0
 8008d32:	4615      	mov	r5, r2
 8008d34:	6123      	str	r3, [r4, #16]
 8008d36:	e7bc      	b.n	8008cb2 <_printf_i+0x14e>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	1d1a      	adds	r2, r3, #4
 8008d3e:	602a      	str	r2, [r5, #0]
 8008d40:	681d      	ldr	r5, [r3, #0]
 8008d42:	6862      	ldr	r2, [r4, #4]
 8008d44:	4628      	mov	r0, r5
 8008d46:	f000 fa00 	bl	800914a <memchr>
 8008d4a:	b108      	cbz	r0, 8008d50 <_printf_i+0x1ec>
 8008d4c:	1b40      	subs	r0, r0, r5
 8008d4e:	6060      	str	r0, [r4, #4]
 8008d50:	6863      	ldr	r3, [r4, #4]
 8008d52:	6123      	str	r3, [r4, #16]
 8008d54:	2300      	movs	r3, #0
 8008d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d5a:	e7aa      	b.n	8008cb2 <_printf_i+0x14e>
 8008d5c:	462a      	mov	r2, r5
 8008d5e:	4649      	mov	r1, r9
 8008d60:	4640      	mov	r0, r8
 8008d62:	6923      	ldr	r3, [r4, #16]
 8008d64:	47d0      	blx	sl
 8008d66:	3001      	adds	r0, #1
 8008d68:	d0ad      	beq.n	8008cc6 <_printf_i+0x162>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	079b      	lsls	r3, r3, #30
 8008d6e:	d413      	bmi.n	8008d98 <_printf_i+0x234>
 8008d70:	68e0      	ldr	r0, [r4, #12]
 8008d72:	9b03      	ldr	r3, [sp, #12]
 8008d74:	4298      	cmp	r0, r3
 8008d76:	bfb8      	it	lt
 8008d78:	4618      	movlt	r0, r3
 8008d7a:	e7a6      	b.n	8008cca <_printf_i+0x166>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	4632      	mov	r2, r6
 8008d80:	4649      	mov	r1, r9
 8008d82:	4640      	mov	r0, r8
 8008d84:	47d0      	blx	sl
 8008d86:	3001      	adds	r0, #1
 8008d88:	d09d      	beq.n	8008cc6 <_printf_i+0x162>
 8008d8a:	3501      	adds	r5, #1
 8008d8c:	68e3      	ldr	r3, [r4, #12]
 8008d8e:	9903      	ldr	r1, [sp, #12]
 8008d90:	1a5b      	subs	r3, r3, r1
 8008d92:	42ab      	cmp	r3, r5
 8008d94:	dcf2      	bgt.n	8008d7c <_printf_i+0x218>
 8008d96:	e7eb      	b.n	8008d70 <_printf_i+0x20c>
 8008d98:	2500      	movs	r5, #0
 8008d9a:	f104 0619 	add.w	r6, r4, #25
 8008d9e:	e7f5      	b.n	8008d8c <_printf_i+0x228>
 8008da0:	0800bc02 	.word	0x0800bc02
 8008da4:	0800bc13 	.word	0x0800bc13

08008da8 <std>:
 8008da8:	2300      	movs	r3, #0
 8008daa:	b510      	push	{r4, lr}
 8008dac:	4604      	mov	r4, r0
 8008dae:	e9c0 3300 	strd	r3, r3, [r0]
 8008db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008db6:	6083      	str	r3, [r0, #8]
 8008db8:	8181      	strh	r1, [r0, #12]
 8008dba:	6643      	str	r3, [r0, #100]	; 0x64
 8008dbc:	81c2      	strh	r2, [r0, #14]
 8008dbe:	6183      	str	r3, [r0, #24]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	2208      	movs	r2, #8
 8008dc4:	305c      	adds	r0, #92	; 0x5c
 8008dc6:	f000 f940 	bl	800904a <memset>
 8008dca:	4b0d      	ldr	r3, [pc, #52]	; (8008e00 <std+0x58>)
 8008dcc:	6224      	str	r4, [r4, #32]
 8008dce:	6263      	str	r3, [r4, #36]	; 0x24
 8008dd0:	4b0c      	ldr	r3, [pc, #48]	; (8008e04 <std+0x5c>)
 8008dd2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008dd4:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <std+0x60>)
 8008dd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dd8:	4b0c      	ldr	r3, [pc, #48]	; (8008e0c <std+0x64>)
 8008dda:	6323      	str	r3, [r4, #48]	; 0x30
 8008ddc:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <std+0x68>)
 8008dde:	429c      	cmp	r4, r3
 8008de0:	d006      	beq.n	8008df0 <std+0x48>
 8008de2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008de6:	4294      	cmp	r4, r2
 8008de8:	d002      	beq.n	8008df0 <std+0x48>
 8008dea:	33d0      	adds	r3, #208	; 0xd0
 8008dec:	429c      	cmp	r4, r3
 8008dee:	d105      	bne.n	8008dfc <std+0x54>
 8008df0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008df8:	f000 b9a4 	b.w	8009144 <__retarget_lock_init_recursive>
 8008dfc:	bd10      	pop	{r4, pc}
 8008dfe:	bf00      	nop
 8008e00:	08008fc1 	.word	0x08008fc1
 8008e04:	08008fe7 	.word	0x08008fe7
 8008e08:	0800901f 	.word	0x0800901f
 8008e0c:	08009043 	.word	0x08009043
 8008e10:	20001df4 	.word	0x20001df4

08008e14 <stdio_exit_handler>:
 8008e14:	4a02      	ldr	r2, [pc, #8]	; (8008e20 <stdio_exit_handler+0xc>)
 8008e16:	4903      	ldr	r1, [pc, #12]	; (8008e24 <stdio_exit_handler+0x10>)
 8008e18:	4803      	ldr	r0, [pc, #12]	; (8008e28 <stdio_exit_handler+0x14>)
 8008e1a:	f000 b869 	b.w	8008ef0 <_fwalk_sglue>
 8008e1e:	bf00      	nop
 8008e20:	20000058 	.word	0x20000058
 8008e24:	0800b139 	.word	0x0800b139
 8008e28:	20000064 	.word	0x20000064

08008e2c <cleanup_stdio>:
 8008e2c:	6841      	ldr	r1, [r0, #4]
 8008e2e:	4b0c      	ldr	r3, [pc, #48]	; (8008e60 <cleanup_stdio+0x34>)
 8008e30:	b510      	push	{r4, lr}
 8008e32:	4299      	cmp	r1, r3
 8008e34:	4604      	mov	r4, r0
 8008e36:	d001      	beq.n	8008e3c <cleanup_stdio+0x10>
 8008e38:	f002 f97e 	bl	800b138 <_fflush_r>
 8008e3c:	68a1      	ldr	r1, [r4, #8]
 8008e3e:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <cleanup_stdio+0x38>)
 8008e40:	4299      	cmp	r1, r3
 8008e42:	d002      	beq.n	8008e4a <cleanup_stdio+0x1e>
 8008e44:	4620      	mov	r0, r4
 8008e46:	f002 f977 	bl	800b138 <_fflush_r>
 8008e4a:	68e1      	ldr	r1, [r4, #12]
 8008e4c:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <cleanup_stdio+0x3c>)
 8008e4e:	4299      	cmp	r1, r3
 8008e50:	d004      	beq.n	8008e5c <cleanup_stdio+0x30>
 8008e52:	4620      	mov	r0, r4
 8008e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e58:	f002 b96e 	b.w	800b138 <_fflush_r>
 8008e5c:	bd10      	pop	{r4, pc}
 8008e5e:	bf00      	nop
 8008e60:	20001df4 	.word	0x20001df4
 8008e64:	20001e5c 	.word	0x20001e5c
 8008e68:	20001ec4 	.word	0x20001ec4

08008e6c <global_stdio_init.part.0>:
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	4b0b      	ldr	r3, [pc, #44]	; (8008e9c <global_stdio_init.part.0+0x30>)
 8008e70:	4c0b      	ldr	r4, [pc, #44]	; (8008ea0 <global_stdio_init.part.0+0x34>)
 8008e72:	4a0c      	ldr	r2, [pc, #48]	; (8008ea4 <global_stdio_init.part.0+0x38>)
 8008e74:	4620      	mov	r0, r4
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	2104      	movs	r1, #4
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f7ff ff94 	bl	8008da8 <std>
 8008e80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008e84:	2201      	movs	r2, #1
 8008e86:	2109      	movs	r1, #9
 8008e88:	f7ff ff8e 	bl	8008da8 <std>
 8008e8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008e90:	2202      	movs	r2, #2
 8008e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e96:	2112      	movs	r1, #18
 8008e98:	f7ff bf86 	b.w	8008da8 <std>
 8008e9c:	20001f2c 	.word	0x20001f2c
 8008ea0:	20001df4 	.word	0x20001df4
 8008ea4:	08008e15 	.word	0x08008e15

08008ea8 <__sfp_lock_acquire>:
 8008ea8:	4801      	ldr	r0, [pc, #4]	; (8008eb0 <__sfp_lock_acquire+0x8>)
 8008eaa:	f000 b94c 	b.w	8009146 <__retarget_lock_acquire_recursive>
 8008eae:	bf00      	nop
 8008eb0:	20001f35 	.word	0x20001f35

08008eb4 <__sfp_lock_release>:
 8008eb4:	4801      	ldr	r0, [pc, #4]	; (8008ebc <__sfp_lock_release+0x8>)
 8008eb6:	f000 b947 	b.w	8009148 <__retarget_lock_release_recursive>
 8008eba:	bf00      	nop
 8008ebc:	20001f35 	.word	0x20001f35

08008ec0 <__sinit>:
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	f7ff fff0 	bl	8008ea8 <__sfp_lock_acquire>
 8008ec8:	6a23      	ldr	r3, [r4, #32]
 8008eca:	b11b      	cbz	r3, 8008ed4 <__sinit+0x14>
 8008ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed0:	f7ff bff0 	b.w	8008eb4 <__sfp_lock_release>
 8008ed4:	4b04      	ldr	r3, [pc, #16]	; (8008ee8 <__sinit+0x28>)
 8008ed6:	6223      	str	r3, [r4, #32]
 8008ed8:	4b04      	ldr	r3, [pc, #16]	; (8008eec <__sinit+0x2c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1f5      	bne.n	8008ecc <__sinit+0xc>
 8008ee0:	f7ff ffc4 	bl	8008e6c <global_stdio_init.part.0>
 8008ee4:	e7f2      	b.n	8008ecc <__sinit+0xc>
 8008ee6:	bf00      	nop
 8008ee8:	08008e2d 	.word	0x08008e2d
 8008eec:	20001f2c 	.word	0x20001f2c

08008ef0 <_fwalk_sglue>:
 8008ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ef4:	4607      	mov	r7, r0
 8008ef6:	4688      	mov	r8, r1
 8008ef8:	4614      	mov	r4, r2
 8008efa:	2600      	movs	r6, #0
 8008efc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f00:	f1b9 0901 	subs.w	r9, r9, #1
 8008f04:	d505      	bpl.n	8008f12 <_fwalk_sglue+0x22>
 8008f06:	6824      	ldr	r4, [r4, #0]
 8008f08:	2c00      	cmp	r4, #0
 8008f0a:	d1f7      	bne.n	8008efc <_fwalk_sglue+0xc>
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f12:	89ab      	ldrh	r3, [r5, #12]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d907      	bls.n	8008f28 <_fwalk_sglue+0x38>
 8008f18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	d003      	beq.n	8008f28 <_fwalk_sglue+0x38>
 8008f20:	4629      	mov	r1, r5
 8008f22:	4638      	mov	r0, r7
 8008f24:	47c0      	blx	r8
 8008f26:	4306      	orrs	r6, r0
 8008f28:	3568      	adds	r5, #104	; 0x68
 8008f2a:	e7e9      	b.n	8008f00 <_fwalk_sglue+0x10>

08008f2c <siprintf>:
 8008f2c:	b40e      	push	{r1, r2, r3}
 8008f2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f32:	b500      	push	{lr}
 8008f34:	b09c      	sub	sp, #112	; 0x70
 8008f36:	ab1d      	add	r3, sp, #116	; 0x74
 8008f38:	9002      	str	r0, [sp, #8]
 8008f3a:	9006      	str	r0, [sp, #24]
 8008f3c:	9107      	str	r1, [sp, #28]
 8008f3e:	9104      	str	r1, [sp, #16]
 8008f40:	4808      	ldr	r0, [pc, #32]	; (8008f64 <siprintf+0x38>)
 8008f42:	4909      	ldr	r1, [pc, #36]	; (8008f68 <siprintf+0x3c>)
 8008f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f48:	9105      	str	r1, [sp, #20]
 8008f4a:	6800      	ldr	r0, [r0, #0]
 8008f4c:	a902      	add	r1, sp, #8
 8008f4e:	9301      	str	r3, [sp, #4]
 8008f50:	f001 fc54 	bl	800a7fc <_svfiprintf_r>
 8008f54:	2200      	movs	r2, #0
 8008f56:	9b02      	ldr	r3, [sp, #8]
 8008f58:	701a      	strb	r2, [r3, #0]
 8008f5a:	b01c      	add	sp, #112	; 0x70
 8008f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f60:	b003      	add	sp, #12
 8008f62:	4770      	bx	lr
 8008f64:	200000b0 	.word	0x200000b0
 8008f68:	ffff0208 	.word	0xffff0208

08008f6c <siscanf>:
 8008f6c:	b40e      	push	{r1, r2, r3}
 8008f6e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8008f72:	b530      	push	{r4, r5, lr}
 8008f74:	b09c      	sub	sp, #112	; 0x70
 8008f76:	ac1f      	add	r4, sp, #124	; 0x7c
 8008f78:	f854 5b04 	ldr.w	r5, [r4], #4
 8008f7c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008f80:	9002      	str	r0, [sp, #8]
 8008f82:	9006      	str	r0, [sp, #24]
 8008f84:	f7f7 f8e4 	bl	8000150 <strlen>
 8008f88:	4b0b      	ldr	r3, [pc, #44]	; (8008fb8 <siscanf+0x4c>)
 8008f8a:	9003      	str	r0, [sp, #12]
 8008f8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f8e:	2300      	movs	r3, #0
 8008f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f92:	9314      	str	r3, [sp, #80]	; 0x50
 8008f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f98:	9007      	str	r0, [sp, #28]
 8008f9a:	4808      	ldr	r0, [pc, #32]	; (8008fbc <siscanf+0x50>)
 8008f9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008fa0:	462a      	mov	r2, r5
 8008fa2:	4623      	mov	r3, r4
 8008fa4:	a902      	add	r1, sp, #8
 8008fa6:	6800      	ldr	r0, [r0, #0]
 8008fa8:	9401      	str	r4, [sp, #4]
 8008faa:	f001 fd7f 	bl	800aaac <__ssvfiscanf_r>
 8008fae:	b01c      	add	sp, #112	; 0x70
 8008fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fb4:	b003      	add	sp, #12
 8008fb6:	4770      	bx	lr
 8008fb8:	08008fe3 	.word	0x08008fe3
 8008fbc:	200000b0 	.word	0x200000b0

08008fc0 <__sread>:
 8008fc0:	b510      	push	{r4, lr}
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc8:	f000 f86e 	bl	80090a8 <_read_r>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	bfab      	itete	ge
 8008fd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8008fd4:	181b      	addge	r3, r3, r0
 8008fd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fda:	bfac      	ite	ge
 8008fdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fde:	81a3      	strhlt	r3, [r4, #12]
 8008fe0:	bd10      	pop	{r4, pc}

08008fe2 <__seofread>:
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	4770      	bx	lr

08008fe6 <__swrite>:
 8008fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fea:	461f      	mov	r7, r3
 8008fec:	898b      	ldrh	r3, [r1, #12]
 8008fee:	4605      	mov	r5, r0
 8008ff0:	05db      	lsls	r3, r3, #23
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	4616      	mov	r6, r2
 8008ff6:	d505      	bpl.n	8009004 <__swrite+0x1e>
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009000:	f000 f840 	bl	8009084 <_lseek_r>
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	4632      	mov	r2, r6
 8009008:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800900c:	81a3      	strh	r3, [r4, #12]
 800900e:	4628      	mov	r0, r5
 8009010:	463b      	mov	r3, r7
 8009012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800901a:	f000 b857 	b.w	80090cc <_write_r>

0800901e <__sseek>:
 800901e:	b510      	push	{r4, lr}
 8009020:	460c      	mov	r4, r1
 8009022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009026:	f000 f82d 	bl	8009084 <_lseek_r>
 800902a:	1c43      	adds	r3, r0, #1
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	bf15      	itete	ne
 8009030:	6560      	strne	r0, [r4, #84]	; 0x54
 8009032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800903a:	81a3      	strheq	r3, [r4, #12]
 800903c:	bf18      	it	ne
 800903e:	81a3      	strhne	r3, [r4, #12]
 8009040:	bd10      	pop	{r4, pc}

08009042 <__sclose>:
 8009042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009046:	f000 b80d 	b.w	8009064 <_close_r>

0800904a <memset>:
 800904a:	4603      	mov	r3, r0
 800904c:	4402      	add	r2, r0
 800904e:	4293      	cmp	r3, r2
 8009050:	d100      	bne.n	8009054 <memset+0xa>
 8009052:	4770      	bx	lr
 8009054:	f803 1b01 	strb.w	r1, [r3], #1
 8009058:	e7f9      	b.n	800904e <memset+0x4>
	...

0800905c <_localeconv_r>:
 800905c:	4800      	ldr	r0, [pc, #0]	; (8009060 <_localeconv_r+0x4>)
 800905e:	4770      	bx	lr
 8009060:	200001a4 	.word	0x200001a4

08009064 <_close_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	2300      	movs	r3, #0
 8009068:	4d05      	ldr	r5, [pc, #20]	; (8009080 <_close_r+0x1c>)
 800906a:	4604      	mov	r4, r0
 800906c:	4608      	mov	r0, r1
 800906e:	602b      	str	r3, [r5, #0]
 8009070:	f7f9 f89c 	bl	80021ac <_close>
 8009074:	1c43      	adds	r3, r0, #1
 8009076:	d102      	bne.n	800907e <_close_r+0x1a>
 8009078:	682b      	ldr	r3, [r5, #0]
 800907a:	b103      	cbz	r3, 800907e <_close_r+0x1a>
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	bd38      	pop	{r3, r4, r5, pc}
 8009080:	20001f30 	.word	0x20001f30

08009084 <_lseek_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4604      	mov	r4, r0
 8009088:	4608      	mov	r0, r1
 800908a:	4611      	mov	r1, r2
 800908c:	2200      	movs	r2, #0
 800908e:	4d05      	ldr	r5, [pc, #20]	; (80090a4 <_lseek_r+0x20>)
 8009090:	602a      	str	r2, [r5, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	f7f9 f8ae 	bl	80021f4 <_lseek>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_lseek_r+0x1e>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_lseek_r+0x1e>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	20001f30 	.word	0x20001f30

080090a8 <_read_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4604      	mov	r4, r0
 80090ac:	4608      	mov	r0, r1
 80090ae:	4611      	mov	r1, r2
 80090b0:	2200      	movs	r2, #0
 80090b2:	4d05      	ldr	r5, [pc, #20]	; (80090c8 <_read_r+0x20>)
 80090b4:	602a      	str	r2, [r5, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	f7f9 f83f 	bl	800213a <_read>
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	d102      	bne.n	80090c6 <_read_r+0x1e>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	b103      	cbz	r3, 80090c6 <_read_r+0x1e>
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
 80090c8:	20001f30 	.word	0x20001f30

080090cc <_write_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	4604      	mov	r4, r0
 80090d0:	4608      	mov	r0, r1
 80090d2:	4611      	mov	r1, r2
 80090d4:	2200      	movs	r2, #0
 80090d6:	4d05      	ldr	r5, [pc, #20]	; (80090ec <_write_r+0x20>)
 80090d8:	602a      	str	r2, [r5, #0]
 80090da:	461a      	mov	r2, r3
 80090dc:	f7f9 f84a 	bl	8002174 <_write>
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	d102      	bne.n	80090ea <_write_r+0x1e>
 80090e4:	682b      	ldr	r3, [r5, #0]
 80090e6:	b103      	cbz	r3, 80090ea <_write_r+0x1e>
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	20001f30 	.word	0x20001f30

080090f0 <__errno>:
 80090f0:	4b01      	ldr	r3, [pc, #4]	; (80090f8 <__errno+0x8>)
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	200000b0 	.word	0x200000b0

080090fc <__libc_init_array>:
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	2600      	movs	r6, #0
 8009100:	4d0c      	ldr	r5, [pc, #48]	; (8009134 <__libc_init_array+0x38>)
 8009102:	4c0d      	ldr	r4, [pc, #52]	; (8009138 <__libc_init_array+0x3c>)
 8009104:	1b64      	subs	r4, r4, r5
 8009106:	10a4      	asrs	r4, r4, #2
 8009108:	42a6      	cmp	r6, r4
 800910a:	d109      	bne.n	8009120 <__libc_init_array+0x24>
 800910c:	f002 fd0e 	bl	800bb2c <_init>
 8009110:	2600      	movs	r6, #0
 8009112:	4d0a      	ldr	r5, [pc, #40]	; (800913c <__libc_init_array+0x40>)
 8009114:	4c0a      	ldr	r4, [pc, #40]	; (8009140 <__libc_init_array+0x44>)
 8009116:	1b64      	subs	r4, r4, r5
 8009118:	10a4      	asrs	r4, r4, #2
 800911a:	42a6      	cmp	r6, r4
 800911c:	d105      	bne.n	800912a <__libc_init_array+0x2e>
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	f855 3b04 	ldr.w	r3, [r5], #4
 8009124:	4798      	blx	r3
 8009126:	3601      	adds	r6, #1
 8009128:	e7ee      	b.n	8009108 <__libc_init_array+0xc>
 800912a:	f855 3b04 	ldr.w	r3, [r5], #4
 800912e:	4798      	blx	r3
 8009130:	3601      	adds	r6, #1
 8009132:	e7f2      	b.n	800911a <__libc_init_array+0x1e>
 8009134:	0800bf80 	.word	0x0800bf80
 8009138:	0800bf80 	.word	0x0800bf80
 800913c:	0800bf80 	.word	0x0800bf80
 8009140:	0800bf84 	.word	0x0800bf84

08009144 <__retarget_lock_init_recursive>:
 8009144:	4770      	bx	lr

08009146 <__retarget_lock_acquire_recursive>:
 8009146:	4770      	bx	lr

08009148 <__retarget_lock_release_recursive>:
 8009148:	4770      	bx	lr

0800914a <memchr>:
 800914a:	4603      	mov	r3, r0
 800914c:	b510      	push	{r4, lr}
 800914e:	b2c9      	uxtb	r1, r1
 8009150:	4402      	add	r2, r0
 8009152:	4293      	cmp	r3, r2
 8009154:	4618      	mov	r0, r3
 8009156:	d101      	bne.n	800915c <memchr+0x12>
 8009158:	2000      	movs	r0, #0
 800915a:	e003      	b.n	8009164 <memchr+0x1a>
 800915c:	7804      	ldrb	r4, [r0, #0]
 800915e:	3301      	adds	r3, #1
 8009160:	428c      	cmp	r4, r1
 8009162:	d1f6      	bne.n	8009152 <memchr+0x8>
 8009164:	bd10      	pop	{r4, pc}

08009166 <memcpy>:
 8009166:	440a      	add	r2, r1
 8009168:	4291      	cmp	r1, r2
 800916a:	f100 33ff 	add.w	r3, r0, #4294967295
 800916e:	d100      	bne.n	8009172 <memcpy+0xc>
 8009170:	4770      	bx	lr
 8009172:	b510      	push	{r4, lr}
 8009174:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009178:	4291      	cmp	r1, r2
 800917a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800917e:	d1f9      	bne.n	8009174 <memcpy+0xe>
 8009180:	bd10      	pop	{r4, pc}

08009182 <quorem>:
 8009182:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009186:	6903      	ldr	r3, [r0, #16]
 8009188:	690c      	ldr	r4, [r1, #16]
 800918a:	4607      	mov	r7, r0
 800918c:	42a3      	cmp	r3, r4
 800918e:	db7f      	blt.n	8009290 <quorem+0x10e>
 8009190:	3c01      	subs	r4, #1
 8009192:	f100 0514 	add.w	r5, r0, #20
 8009196:	f101 0814 	add.w	r8, r1, #20
 800919a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800919e:	9301      	str	r3, [sp, #4]
 80091a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091a8:	3301      	adds	r3, #1
 80091aa:	429a      	cmp	r2, r3
 80091ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80091b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80091b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80091b8:	d331      	bcc.n	800921e <quorem+0x9c>
 80091ba:	f04f 0e00 	mov.w	lr, #0
 80091be:	4640      	mov	r0, r8
 80091c0:	46ac      	mov	ip, r5
 80091c2:	46f2      	mov	sl, lr
 80091c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80091c8:	b293      	uxth	r3, r2
 80091ca:	fb06 e303 	mla	r3, r6, r3, lr
 80091ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80091d2:	0c1a      	lsrs	r2, r3, #16
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	fb06 220e 	mla	r2, r6, lr, r2
 80091da:	ebaa 0303 	sub.w	r3, sl, r3
 80091de:	f8dc a000 	ldr.w	sl, [ip]
 80091e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80091e6:	fa1f fa8a 	uxth.w	sl, sl
 80091ea:	4453      	add	r3, sl
 80091ec:	f8dc a000 	ldr.w	sl, [ip]
 80091f0:	b292      	uxth	r2, r2
 80091f2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80091f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009200:	4581      	cmp	r9, r0
 8009202:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009206:	f84c 3b04 	str.w	r3, [ip], #4
 800920a:	d2db      	bcs.n	80091c4 <quorem+0x42>
 800920c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009210:	b92b      	cbnz	r3, 800921e <quorem+0x9c>
 8009212:	9b01      	ldr	r3, [sp, #4]
 8009214:	3b04      	subs	r3, #4
 8009216:	429d      	cmp	r5, r3
 8009218:	461a      	mov	r2, r3
 800921a:	d32d      	bcc.n	8009278 <quorem+0xf6>
 800921c:	613c      	str	r4, [r7, #16]
 800921e:	4638      	mov	r0, r7
 8009220:	f001 f994 	bl	800a54c <__mcmp>
 8009224:	2800      	cmp	r0, #0
 8009226:	db23      	blt.n	8009270 <quorem+0xee>
 8009228:	4629      	mov	r1, r5
 800922a:	2000      	movs	r0, #0
 800922c:	3601      	adds	r6, #1
 800922e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009232:	f8d1 c000 	ldr.w	ip, [r1]
 8009236:	b293      	uxth	r3, r2
 8009238:	1ac3      	subs	r3, r0, r3
 800923a:	0c12      	lsrs	r2, r2, #16
 800923c:	fa1f f08c 	uxth.w	r0, ip
 8009240:	4403      	add	r3, r0
 8009242:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009246:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800924a:	b29b      	uxth	r3, r3
 800924c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009250:	45c1      	cmp	r9, r8
 8009252:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009256:	f841 3b04 	str.w	r3, [r1], #4
 800925a:	d2e8      	bcs.n	800922e <quorem+0xac>
 800925c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009260:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009264:	b922      	cbnz	r2, 8009270 <quorem+0xee>
 8009266:	3b04      	subs	r3, #4
 8009268:	429d      	cmp	r5, r3
 800926a:	461a      	mov	r2, r3
 800926c:	d30a      	bcc.n	8009284 <quorem+0x102>
 800926e:	613c      	str	r4, [r7, #16]
 8009270:	4630      	mov	r0, r6
 8009272:	b003      	add	sp, #12
 8009274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009278:	6812      	ldr	r2, [r2, #0]
 800927a:	3b04      	subs	r3, #4
 800927c:	2a00      	cmp	r2, #0
 800927e:	d1cd      	bne.n	800921c <quorem+0x9a>
 8009280:	3c01      	subs	r4, #1
 8009282:	e7c8      	b.n	8009216 <quorem+0x94>
 8009284:	6812      	ldr	r2, [r2, #0]
 8009286:	3b04      	subs	r3, #4
 8009288:	2a00      	cmp	r2, #0
 800928a:	d1f0      	bne.n	800926e <quorem+0xec>
 800928c:	3c01      	subs	r4, #1
 800928e:	e7eb      	b.n	8009268 <quorem+0xe6>
 8009290:	2000      	movs	r0, #0
 8009292:	e7ee      	b.n	8009272 <quorem+0xf0>
 8009294:	0000      	movs	r0, r0
	...

08009298 <_dtoa_r>:
 8009298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929c:	4616      	mov	r6, r2
 800929e:	461f      	mov	r7, r3
 80092a0:	69c4      	ldr	r4, [r0, #28]
 80092a2:	b099      	sub	sp, #100	; 0x64
 80092a4:	4605      	mov	r5, r0
 80092a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80092aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80092ae:	b974      	cbnz	r4, 80092ce <_dtoa_r+0x36>
 80092b0:	2010      	movs	r0, #16
 80092b2:	f000 fe1d 	bl	8009ef0 <malloc>
 80092b6:	4602      	mov	r2, r0
 80092b8:	61e8      	str	r0, [r5, #28]
 80092ba:	b920      	cbnz	r0, 80092c6 <_dtoa_r+0x2e>
 80092bc:	21ef      	movs	r1, #239	; 0xef
 80092be:	4bac      	ldr	r3, [pc, #688]	; (8009570 <_dtoa_r+0x2d8>)
 80092c0:	48ac      	ldr	r0, [pc, #688]	; (8009574 <_dtoa_r+0x2dc>)
 80092c2:	f001 fffd 	bl	800b2c0 <__assert_func>
 80092c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092ca:	6004      	str	r4, [r0, #0]
 80092cc:	60c4      	str	r4, [r0, #12]
 80092ce:	69eb      	ldr	r3, [r5, #28]
 80092d0:	6819      	ldr	r1, [r3, #0]
 80092d2:	b151      	cbz	r1, 80092ea <_dtoa_r+0x52>
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	2301      	movs	r3, #1
 80092d8:	4093      	lsls	r3, r2
 80092da:	604a      	str	r2, [r1, #4]
 80092dc:	608b      	str	r3, [r1, #8]
 80092de:	4628      	mov	r0, r5
 80092e0:	f000 fefa 	bl	800a0d8 <_Bfree>
 80092e4:	2200      	movs	r2, #0
 80092e6:	69eb      	ldr	r3, [r5, #28]
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	1e3b      	subs	r3, r7, #0
 80092ec:	bfaf      	iteee	ge
 80092ee:	2300      	movge	r3, #0
 80092f0:	2201      	movlt	r2, #1
 80092f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80092f6:	9305      	strlt	r3, [sp, #20]
 80092f8:	bfa8      	it	ge
 80092fa:	f8c8 3000 	strge.w	r3, [r8]
 80092fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009302:	4b9d      	ldr	r3, [pc, #628]	; (8009578 <_dtoa_r+0x2e0>)
 8009304:	bfb8      	it	lt
 8009306:	f8c8 2000 	strlt.w	r2, [r8]
 800930a:	ea33 0309 	bics.w	r3, r3, r9
 800930e:	d119      	bne.n	8009344 <_dtoa_r+0xac>
 8009310:	f242 730f 	movw	r3, #9999	; 0x270f
 8009314:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800931c:	4333      	orrs	r3, r6
 800931e:	f000 8589 	beq.w	8009e34 <_dtoa_r+0xb9c>
 8009322:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009324:	b953      	cbnz	r3, 800933c <_dtoa_r+0xa4>
 8009326:	4b95      	ldr	r3, [pc, #596]	; (800957c <_dtoa_r+0x2e4>)
 8009328:	e023      	b.n	8009372 <_dtoa_r+0xda>
 800932a:	4b95      	ldr	r3, [pc, #596]	; (8009580 <_dtoa_r+0x2e8>)
 800932c:	9303      	str	r3, [sp, #12]
 800932e:	3308      	adds	r3, #8
 8009330:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009332:	6013      	str	r3, [r2, #0]
 8009334:	9803      	ldr	r0, [sp, #12]
 8009336:	b019      	add	sp, #100	; 0x64
 8009338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933c:	4b8f      	ldr	r3, [pc, #572]	; (800957c <_dtoa_r+0x2e4>)
 800933e:	9303      	str	r3, [sp, #12]
 8009340:	3303      	adds	r3, #3
 8009342:	e7f5      	b.n	8009330 <_dtoa_r+0x98>
 8009344:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009348:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800934c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009350:	2200      	movs	r2, #0
 8009352:	2300      	movs	r3, #0
 8009354:	f7f7 fb28 	bl	80009a8 <__aeabi_dcmpeq>
 8009358:	4680      	mov	r8, r0
 800935a:	b160      	cbz	r0, 8009376 <_dtoa_r+0xde>
 800935c:	2301      	movs	r3, #1
 800935e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009360:	6013      	str	r3, [r2, #0]
 8009362:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 8562 	beq.w	8009e2e <_dtoa_r+0xb96>
 800936a:	4b86      	ldr	r3, [pc, #536]	; (8009584 <_dtoa_r+0x2ec>)
 800936c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	3b01      	subs	r3, #1
 8009372:	9303      	str	r3, [sp, #12]
 8009374:	e7de      	b.n	8009334 <_dtoa_r+0x9c>
 8009376:	ab16      	add	r3, sp, #88	; 0x58
 8009378:	9301      	str	r3, [sp, #4]
 800937a:	ab17      	add	r3, sp, #92	; 0x5c
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	4628      	mov	r0, r5
 8009380:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009384:	f001 f98a 	bl	800a69c <__d2b>
 8009388:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800938c:	4682      	mov	sl, r0
 800938e:	2c00      	cmp	r4, #0
 8009390:	d07e      	beq.n	8009490 <_dtoa_r+0x1f8>
 8009392:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009398:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800939c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093a0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80093a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80093a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80093ac:	4619      	mov	r1, r3
 80093ae:	2200      	movs	r2, #0
 80093b0:	4b75      	ldr	r3, [pc, #468]	; (8009588 <_dtoa_r+0x2f0>)
 80093b2:	f7f6 fed9 	bl	8000168 <__aeabi_dsub>
 80093b6:	a368      	add	r3, pc, #416	; (adr r3, 8009558 <_dtoa_r+0x2c0>)
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	f7f7 f88c 	bl	80004d8 <__aeabi_dmul>
 80093c0:	a367      	add	r3, pc, #412	; (adr r3, 8009560 <_dtoa_r+0x2c8>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f6 fed1 	bl	800016c <__adddf3>
 80093ca:	4606      	mov	r6, r0
 80093cc:	4620      	mov	r0, r4
 80093ce:	460f      	mov	r7, r1
 80093d0:	f7f7 f818 	bl	8000404 <__aeabi_i2d>
 80093d4:	a364      	add	r3, pc, #400	; (adr r3, 8009568 <_dtoa_r+0x2d0>)
 80093d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093da:	f7f7 f87d 	bl	80004d8 <__aeabi_dmul>
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	4630      	mov	r0, r6
 80093e4:	4639      	mov	r1, r7
 80093e6:	f7f6 fec1 	bl	800016c <__adddf3>
 80093ea:	4606      	mov	r6, r0
 80093ec:	460f      	mov	r7, r1
 80093ee:	f7f7 fb23 	bl	8000a38 <__aeabi_d2iz>
 80093f2:	2200      	movs	r2, #0
 80093f4:	4683      	mov	fp, r0
 80093f6:	2300      	movs	r3, #0
 80093f8:	4630      	mov	r0, r6
 80093fa:	4639      	mov	r1, r7
 80093fc:	f7f7 fade 	bl	80009bc <__aeabi_dcmplt>
 8009400:	b148      	cbz	r0, 8009416 <_dtoa_r+0x17e>
 8009402:	4658      	mov	r0, fp
 8009404:	f7f6 fffe 	bl	8000404 <__aeabi_i2d>
 8009408:	4632      	mov	r2, r6
 800940a:	463b      	mov	r3, r7
 800940c:	f7f7 facc 	bl	80009a8 <__aeabi_dcmpeq>
 8009410:	b908      	cbnz	r0, 8009416 <_dtoa_r+0x17e>
 8009412:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009416:	f1bb 0f16 	cmp.w	fp, #22
 800941a:	d857      	bhi.n	80094cc <_dtoa_r+0x234>
 800941c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009420:	4b5a      	ldr	r3, [pc, #360]	; (800958c <_dtoa_r+0x2f4>)
 8009422:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	f7f7 fac7 	bl	80009bc <__aeabi_dcmplt>
 800942e:	2800      	cmp	r0, #0
 8009430:	d04e      	beq.n	80094d0 <_dtoa_r+0x238>
 8009432:	2300      	movs	r3, #0
 8009434:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009438:	930f      	str	r3, [sp, #60]	; 0x3c
 800943a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800943c:	1b1b      	subs	r3, r3, r4
 800943e:	1e5a      	subs	r2, r3, #1
 8009440:	bf46      	itte	mi
 8009442:	f1c3 0901 	rsbmi	r9, r3, #1
 8009446:	2300      	movmi	r3, #0
 8009448:	f04f 0900 	movpl.w	r9, #0
 800944c:	9209      	str	r2, [sp, #36]	; 0x24
 800944e:	bf48      	it	mi
 8009450:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009452:	f1bb 0f00 	cmp.w	fp, #0
 8009456:	db3d      	blt.n	80094d4 <_dtoa_r+0x23c>
 8009458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800945e:	445b      	add	r3, fp
 8009460:	9309      	str	r3, [sp, #36]	; 0x24
 8009462:	2300      	movs	r3, #0
 8009464:	930a      	str	r3, [sp, #40]	; 0x28
 8009466:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009468:	2b09      	cmp	r3, #9
 800946a:	d867      	bhi.n	800953c <_dtoa_r+0x2a4>
 800946c:	2b05      	cmp	r3, #5
 800946e:	bfc4      	itt	gt
 8009470:	3b04      	subgt	r3, #4
 8009472:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009474:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009476:	bfc8      	it	gt
 8009478:	2400      	movgt	r4, #0
 800947a:	f1a3 0302 	sub.w	r3, r3, #2
 800947e:	bfd8      	it	le
 8009480:	2401      	movle	r4, #1
 8009482:	2b03      	cmp	r3, #3
 8009484:	f200 8086 	bhi.w	8009594 <_dtoa_r+0x2fc>
 8009488:	e8df f003 	tbb	[pc, r3]
 800948c:	5637392c 	.word	0x5637392c
 8009490:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009494:	441c      	add	r4, r3
 8009496:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800949a:	2b20      	cmp	r3, #32
 800949c:	bfc1      	itttt	gt
 800949e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80094a2:	fa09 f903 	lslgt.w	r9, r9, r3
 80094a6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80094aa:	fa26 f303 	lsrgt.w	r3, r6, r3
 80094ae:	bfd6      	itet	le
 80094b0:	f1c3 0320 	rsble	r3, r3, #32
 80094b4:	ea49 0003 	orrgt.w	r0, r9, r3
 80094b8:	fa06 f003 	lslle.w	r0, r6, r3
 80094bc:	f7f6 ff92 	bl	80003e4 <__aeabi_ui2d>
 80094c0:	2201      	movs	r2, #1
 80094c2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80094c6:	3c01      	subs	r4, #1
 80094c8:	9213      	str	r2, [sp, #76]	; 0x4c
 80094ca:	e76f      	b.n	80093ac <_dtoa_r+0x114>
 80094cc:	2301      	movs	r3, #1
 80094ce:	e7b3      	b.n	8009438 <_dtoa_r+0x1a0>
 80094d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80094d2:	e7b2      	b.n	800943a <_dtoa_r+0x1a2>
 80094d4:	f1cb 0300 	rsb	r3, fp, #0
 80094d8:	930a      	str	r3, [sp, #40]	; 0x28
 80094da:	2300      	movs	r3, #0
 80094dc:	eba9 090b 	sub.w	r9, r9, fp
 80094e0:	930e      	str	r3, [sp, #56]	; 0x38
 80094e2:	e7c0      	b.n	8009466 <_dtoa_r+0x1ce>
 80094e4:	2300      	movs	r3, #0
 80094e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80094e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	dc55      	bgt.n	800959a <_dtoa_r+0x302>
 80094ee:	2301      	movs	r3, #1
 80094f0:	461a      	mov	r2, r3
 80094f2:	9306      	str	r3, [sp, #24]
 80094f4:	9308      	str	r3, [sp, #32]
 80094f6:	9223      	str	r2, [sp, #140]	; 0x8c
 80094f8:	e00b      	b.n	8009512 <_dtoa_r+0x27a>
 80094fa:	2301      	movs	r3, #1
 80094fc:	e7f3      	b.n	80094e6 <_dtoa_r+0x24e>
 80094fe:	2300      	movs	r3, #0
 8009500:	930b      	str	r3, [sp, #44]	; 0x2c
 8009502:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009504:	445b      	add	r3, fp
 8009506:	9306      	str	r3, [sp, #24]
 8009508:	3301      	adds	r3, #1
 800950a:	2b01      	cmp	r3, #1
 800950c:	9308      	str	r3, [sp, #32]
 800950e:	bfb8      	it	lt
 8009510:	2301      	movlt	r3, #1
 8009512:	2100      	movs	r1, #0
 8009514:	2204      	movs	r2, #4
 8009516:	69e8      	ldr	r0, [r5, #28]
 8009518:	f102 0614 	add.w	r6, r2, #20
 800951c:	429e      	cmp	r6, r3
 800951e:	d940      	bls.n	80095a2 <_dtoa_r+0x30a>
 8009520:	6041      	str	r1, [r0, #4]
 8009522:	4628      	mov	r0, r5
 8009524:	f000 fd98 	bl	800a058 <_Balloc>
 8009528:	9003      	str	r0, [sp, #12]
 800952a:	2800      	cmp	r0, #0
 800952c:	d13c      	bne.n	80095a8 <_dtoa_r+0x310>
 800952e:	4602      	mov	r2, r0
 8009530:	f240 11af 	movw	r1, #431	; 0x1af
 8009534:	4b16      	ldr	r3, [pc, #88]	; (8009590 <_dtoa_r+0x2f8>)
 8009536:	e6c3      	b.n	80092c0 <_dtoa_r+0x28>
 8009538:	2301      	movs	r3, #1
 800953a:	e7e1      	b.n	8009500 <_dtoa_r+0x268>
 800953c:	2401      	movs	r4, #1
 800953e:	2300      	movs	r3, #0
 8009540:	940b      	str	r4, [sp, #44]	; 0x2c
 8009542:	9322      	str	r3, [sp, #136]	; 0x88
 8009544:	f04f 33ff 	mov.w	r3, #4294967295
 8009548:	2200      	movs	r2, #0
 800954a:	9306      	str	r3, [sp, #24]
 800954c:	9308      	str	r3, [sp, #32]
 800954e:	2312      	movs	r3, #18
 8009550:	e7d1      	b.n	80094f6 <_dtoa_r+0x25e>
 8009552:	bf00      	nop
 8009554:	f3af 8000 	nop.w
 8009558:	636f4361 	.word	0x636f4361
 800955c:	3fd287a7 	.word	0x3fd287a7
 8009560:	8b60c8b3 	.word	0x8b60c8b3
 8009564:	3fc68a28 	.word	0x3fc68a28
 8009568:	509f79fb 	.word	0x509f79fb
 800956c:	3fd34413 	.word	0x3fd34413
 8009570:	0800bc31 	.word	0x0800bc31
 8009574:	0800bc48 	.word	0x0800bc48
 8009578:	7ff00000 	.word	0x7ff00000
 800957c:	0800bc2d 	.word	0x0800bc2d
 8009580:	0800bc24 	.word	0x0800bc24
 8009584:	0800be34 	.word	0x0800be34
 8009588:	3ff80000 	.word	0x3ff80000
 800958c:	0800bd38 	.word	0x0800bd38
 8009590:	0800bca0 	.word	0x0800bca0
 8009594:	2301      	movs	r3, #1
 8009596:	930b      	str	r3, [sp, #44]	; 0x2c
 8009598:	e7d4      	b.n	8009544 <_dtoa_r+0x2ac>
 800959a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800959c:	9306      	str	r3, [sp, #24]
 800959e:	9308      	str	r3, [sp, #32]
 80095a0:	e7b7      	b.n	8009512 <_dtoa_r+0x27a>
 80095a2:	3101      	adds	r1, #1
 80095a4:	0052      	lsls	r2, r2, #1
 80095a6:	e7b7      	b.n	8009518 <_dtoa_r+0x280>
 80095a8:	69eb      	ldr	r3, [r5, #28]
 80095aa:	9a03      	ldr	r2, [sp, #12]
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	9b08      	ldr	r3, [sp, #32]
 80095b0:	2b0e      	cmp	r3, #14
 80095b2:	f200 80a8 	bhi.w	8009706 <_dtoa_r+0x46e>
 80095b6:	2c00      	cmp	r4, #0
 80095b8:	f000 80a5 	beq.w	8009706 <_dtoa_r+0x46e>
 80095bc:	f1bb 0f00 	cmp.w	fp, #0
 80095c0:	dd34      	ble.n	800962c <_dtoa_r+0x394>
 80095c2:	4b9a      	ldr	r3, [pc, #616]	; (800982c <_dtoa_r+0x594>)
 80095c4:	f00b 020f 	and.w	r2, fp, #15
 80095c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80095d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80095d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80095d8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80095dc:	d016      	beq.n	800960c <_dtoa_r+0x374>
 80095de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095e2:	4b93      	ldr	r3, [pc, #588]	; (8009830 <_dtoa_r+0x598>)
 80095e4:	2703      	movs	r7, #3
 80095e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095ea:	f7f7 f89f 	bl	800072c <__aeabi_ddiv>
 80095ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095f2:	f004 040f 	and.w	r4, r4, #15
 80095f6:	4e8e      	ldr	r6, [pc, #568]	; (8009830 <_dtoa_r+0x598>)
 80095f8:	b954      	cbnz	r4, 8009610 <_dtoa_r+0x378>
 80095fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80095fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009602:	f7f7 f893 	bl	800072c <__aeabi_ddiv>
 8009606:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800960a:	e029      	b.n	8009660 <_dtoa_r+0x3c8>
 800960c:	2702      	movs	r7, #2
 800960e:	e7f2      	b.n	80095f6 <_dtoa_r+0x35e>
 8009610:	07e1      	lsls	r1, r4, #31
 8009612:	d508      	bpl.n	8009626 <_dtoa_r+0x38e>
 8009614:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009618:	e9d6 2300 	ldrd	r2, r3, [r6]
 800961c:	f7f6 ff5c 	bl	80004d8 <__aeabi_dmul>
 8009620:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009624:	3701      	adds	r7, #1
 8009626:	1064      	asrs	r4, r4, #1
 8009628:	3608      	adds	r6, #8
 800962a:	e7e5      	b.n	80095f8 <_dtoa_r+0x360>
 800962c:	f000 80a5 	beq.w	800977a <_dtoa_r+0x4e2>
 8009630:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009634:	f1cb 0400 	rsb	r4, fp, #0
 8009638:	4b7c      	ldr	r3, [pc, #496]	; (800982c <_dtoa_r+0x594>)
 800963a:	f004 020f 	and.w	r2, r4, #15
 800963e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f7f6 ff47 	bl	80004d8 <__aeabi_dmul>
 800964a:	2702      	movs	r7, #2
 800964c:	2300      	movs	r3, #0
 800964e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009652:	4e77      	ldr	r6, [pc, #476]	; (8009830 <_dtoa_r+0x598>)
 8009654:	1124      	asrs	r4, r4, #4
 8009656:	2c00      	cmp	r4, #0
 8009658:	f040 8084 	bne.w	8009764 <_dtoa_r+0x4cc>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1d2      	bne.n	8009606 <_dtoa_r+0x36e>
 8009660:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009664:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800966a:	2b00      	cmp	r3, #0
 800966c:	f000 8087 	beq.w	800977e <_dtoa_r+0x4e6>
 8009670:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009674:	2200      	movs	r2, #0
 8009676:	4b6f      	ldr	r3, [pc, #444]	; (8009834 <_dtoa_r+0x59c>)
 8009678:	f7f7 f9a0 	bl	80009bc <__aeabi_dcmplt>
 800967c:	2800      	cmp	r0, #0
 800967e:	d07e      	beq.n	800977e <_dtoa_r+0x4e6>
 8009680:	9b08      	ldr	r3, [sp, #32]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d07b      	beq.n	800977e <_dtoa_r+0x4e6>
 8009686:	9b06      	ldr	r3, [sp, #24]
 8009688:	2b00      	cmp	r3, #0
 800968a:	dd38      	ble.n	80096fe <_dtoa_r+0x466>
 800968c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009690:	2200      	movs	r2, #0
 8009692:	4b69      	ldr	r3, [pc, #420]	; (8009838 <_dtoa_r+0x5a0>)
 8009694:	f7f6 ff20 	bl	80004d8 <__aeabi_dmul>
 8009698:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800969c:	9c06      	ldr	r4, [sp, #24]
 800969e:	f10b 38ff 	add.w	r8, fp, #4294967295
 80096a2:	3701      	adds	r7, #1
 80096a4:	4638      	mov	r0, r7
 80096a6:	f7f6 fead 	bl	8000404 <__aeabi_i2d>
 80096aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096ae:	f7f6 ff13 	bl	80004d8 <__aeabi_dmul>
 80096b2:	2200      	movs	r2, #0
 80096b4:	4b61      	ldr	r3, [pc, #388]	; (800983c <_dtoa_r+0x5a4>)
 80096b6:	f7f6 fd59 	bl	800016c <__adddf3>
 80096ba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80096be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80096c2:	9611      	str	r6, [sp, #68]	; 0x44
 80096c4:	2c00      	cmp	r4, #0
 80096c6:	d15d      	bne.n	8009784 <_dtoa_r+0x4ec>
 80096c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096cc:	2200      	movs	r2, #0
 80096ce:	4b5c      	ldr	r3, [pc, #368]	; (8009840 <_dtoa_r+0x5a8>)
 80096d0:	f7f6 fd4a 	bl	8000168 <__aeabi_dsub>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80096dc:	4633      	mov	r3, r6
 80096de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80096e0:	f7f7 f98a 	bl	80009f8 <__aeabi_dcmpgt>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	f040 8295 	bne.w	8009c14 <_dtoa_r+0x97c>
 80096ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80096f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80096f4:	f7f7 f962 	bl	80009bc <__aeabi_dcmplt>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	f040 8289 	bne.w	8009c10 <_dtoa_r+0x978>
 80096fe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009702:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009706:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009708:	2b00      	cmp	r3, #0
 800970a:	f2c0 8151 	blt.w	80099b0 <_dtoa_r+0x718>
 800970e:	f1bb 0f0e 	cmp.w	fp, #14
 8009712:	f300 814d 	bgt.w	80099b0 <_dtoa_r+0x718>
 8009716:	4b45      	ldr	r3, [pc, #276]	; (800982c <_dtoa_r+0x594>)
 8009718:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800971c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009720:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009724:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009726:	2b00      	cmp	r3, #0
 8009728:	f280 80da 	bge.w	80098e0 <_dtoa_r+0x648>
 800972c:	9b08      	ldr	r3, [sp, #32]
 800972e:	2b00      	cmp	r3, #0
 8009730:	f300 80d6 	bgt.w	80098e0 <_dtoa_r+0x648>
 8009734:	f040 826b 	bne.w	8009c0e <_dtoa_r+0x976>
 8009738:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800973c:	2200      	movs	r2, #0
 800973e:	4b40      	ldr	r3, [pc, #256]	; (8009840 <_dtoa_r+0x5a8>)
 8009740:	f7f6 feca 	bl	80004d8 <__aeabi_dmul>
 8009744:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009748:	f7f7 f94c 	bl	80009e4 <__aeabi_dcmpge>
 800974c:	9c08      	ldr	r4, [sp, #32]
 800974e:	4626      	mov	r6, r4
 8009750:	2800      	cmp	r0, #0
 8009752:	f040 8241 	bne.w	8009bd8 <_dtoa_r+0x940>
 8009756:	2331      	movs	r3, #49	; 0x31
 8009758:	9f03      	ldr	r7, [sp, #12]
 800975a:	f10b 0b01 	add.w	fp, fp, #1
 800975e:	f807 3b01 	strb.w	r3, [r7], #1
 8009762:	e23d      	b.n	8009be0 <_dtoa_r+0x948>
 8009764:	07e2      	lsls	r2, r4, #31
 8009766:	d505      	bpl.n	8009774 <_dtoa_r+0x4dc>
 8009768:	e9d6 2300 	ldrd	r2, r3, [r6]
 800976c:	f7f6 feb4 	bl	80004d8 <__aeabi_dmul>
 8009770:	2301      	movs	r3, #1
 8009772:	3701      	adds	r7, #1
 8009774:	1064      	asrs	r4, r4, #1
 8009776:	3608      	adds	r6, #8
 8009778:	e76d      	b.n	8009656 <_dtoa_r+0x3be>
 800977a:	2702      	movs	r7, #2
 800977c:	e770      	b.n	8009660 <_dtoa_r+0x3c8>
 800977e:	46d8      	mov	r8, fp
 8009780:	9c08      	ldr	r4, [sp, #32]
 8009782:	e78f      	b.n	80096a4 <_dtoa_r+0x40c>
 8009784:	9903      	ldr	r1, [sp, #12]
 8009786:	4b29      	ldr	r3, [pc, #164]	; (800982c <_dtoa_r+0x594>)
 8009788:	4421      	add	r1, r4
 800978a:	9112      	str	r1, [sp, #72]	; 0x48
 800978c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800978e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009792:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009796:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800979a:	2900      	cmp	r1, #0
 800979c:	d054      	beq.n	8009848 <_dtoa_r+0x5b0>
 800979e:	2000      	movs	r0, #0
 80097a0:	4928      	ldr	r1, [pc, #160]	; (8009844 <_dtoa_r+0x5ac>)
 80097a2:	f7f6 ffc3 	bl	800072c <__aeabi_ddiv>
 80097a6:	463b      	mov	r3, r7
 80097a8:	4632      	mov	r2, r6
 80097aa:	f7f6 fcdd 	bl	8000168 <__aeabi_dsub>
 80097ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80097b2:	9f03      	ldr	r7, [sp, #12]
 80097b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097b8:	f7f7 f93e 	bl	8000a38 <__aeabi_d2iz>
 80097bc:	4604      	mov	r4, r0
 80097be:	f7f6 fe21 	bl	8000404 <__aeabi_i2d>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097ca:	f7f6 fccd 	bl	8000168 <__aeabi_dsub>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	3430      	adds	r4, #48	; 0x30
 80097d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80097dc:	f807 4b01 	strb.w	r4, [r7], #1
 80097e0:	f7f7 f8ec 	bl	80009bc <__aeabi_dcmplt>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d173      	bne.n	80098d0 <_dtoa_r+0x638>
 80097e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097ec:	2000      	movs	r0, #0
 80097ee:	4911      	ldr	r1, [pc, #68]	; (8009834 <_dtoa_r+0x59c>)
 80097f0:	f7f6 fcba 	bl	8000168 <__aeabi_dsub>
 80097f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80097f8:	f7f7 f8e0 	bl	80009bc <__aeabi_dcmplt>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	f040 80b6 	bne.w	800996e <_dtoa_r+0x6d6>
 8009802:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009804:	429f      	cmp	r7, r3
 8009806:	f43f af7a 	beq.w	80096fe <_dtoa_r+0x466>
 800980a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800980e:	2200      	movs	r2, #0
 8009810:	4b09      	ldr	r3, [pc, #36]	; (8009838 <_dtoa_r+0x5a0>)
 8009812:	f7f6 fe61 	bl	80004d8 <__aeabi_dmul>
 8009816:	2200      	movs	r2, #0
 8009818:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800981c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009820:	4b05      	ldr	r3, [pc, #20]	; (8009838 <_dtoa_r+0x5a0>)
 8009822:	f7f6 fe59 	bl	80004d8 <__aeabi_dmul>
 8009826:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800982a:	e7c3      	b.n	80097b4 <_dtoa_r+0x51c>
 800982c:	0800bd38 	.word	0x0800bd38
 8009830:	0800bd10 	.word	0x0800bd10
 8009834:	3ff00000 	.word	0x3ff00000
 8009838:	40240000 	.word	0x40240000
 800983c:	401c0000 	.word	0x401c0000
 8009840:	40140000 	.word	0x40140000
 8009844:	3fe00000 	.word	0x3fe00000
 8009848:	4630      	mov	r0, r6
 800984a:	4639      	mov	r1, r7
 800984c:	f7f6 fe44 	bl	80004d8 <__aeabi_dmul>
 8009850:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009852:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009856:	9c03      	ldr	r4, [sp, #12]
 8009858:	9314      	str	r3, [sp, #80]	; 0x50
 800985a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800985e:	f7f7 f8eb 	bl	8000a38 <__aeabi_d2iz>
 8009862:	9015      	str	r0, [sp, #84]	; 0x54
 8009864:	f7f6 fdce 	bl	8000404 <__aeabi_i2d>
 8009868:	4602      	mov	r2, r0
 800986a:	460b      	mov	r3, r1
 800986c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009870:	f7f6 fc7a 	bl	8000168 <__aeabi_dsub>
 8009874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009876:	4606      	mov	r6, r0
 8009878:	3330      	adds	r3, #48	; 0x30
 800987a:	f804 3b01 	strb.w	r3, [r4], #1
 800987e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009880:	460f      	mov	r7, r1
 8009882:	429c      	cmp	r4, r3
 8009884:	f04f 0200 	mov.w	r2, #0
 8009888:	d124      	bne.n	80098d4 <_dtoa_r+0x63c>
 800988a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800988e:	4baf      	ldr	r3, [pc, #700]	; (8009b4c <_dtoa_r+0x8b4>)
 8009890:	f7f6 fc6c 	bl	800016c <__adddf3>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	4630      	mov	r0, r6
 800989a:	4639      	mov	r1, r7
 800989c:	f7f7 f8ac 	bl	80009f8 <__aeabi_dcmpgt>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	d163      	bne.n	800996c <_dtoa_r+0x6d4>
 80098a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098a8:	2000      	movs	r0, #0
 80098aa:	49a8      	ldr	r1, [pc, #672]	; (8009b4c <_dtoa_r+0x8b4>)
 80098ac:	f7f6 fc5c 	bl	8000168 <__aeabi_dsub>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	4630      	mov	r0, r6
 80098b6:	4639      	mov	r1, r7
 80098b8:	f7f7 f880 	bl	80009bc <__aeabi_dcmplt>
 80098bc:	2800      	cmp	r0, #0
 80098be:	f43f af1e 	beq.w	80096fe <_dtoa_r+0x466>
 80098c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80098c4:	1e7b      	subs	r3, r7, #1
 80098c6:	9314      	str	r3, [sp, #80]	; 0x50
 80098c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80098cc:	2b30      	cmp	r3, #48	; 0x30
 80098ce:	d0f8      	beq.n	80098c2 <_dtoa_r+0x62a>
 80098d0:	46c3      	mov	fp, r8
 80098d2:	e03b      	b.n	800994c <_dtoa_r+0x6b4>
 80098d4:	4b9e      	ldr	r3, [pc, #632]	; (8009b50 <_dtoa_r+0x8b8>)
 80098d6:	f7f6 fdff 	bl	80004d8 <__aeabi_dmul>
 80098da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098de:	e7bc      	b.n	800985a <_dtoa_r+0x5c2>
 80098e0:	9f03      	ldr	r7, [sp, #12]
 80098e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80098e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098ea:	4640      	mov	r0, r8
 80098ec:	4649      	mov	r1, r9
 80098ee:	f7f6 ff1d 	bl	800072c <__aeabi_ddiv>
 80098f2:	f7f7 f8a1 	bl	8000a38 <__aeabi_d2iz>
 80098f6:	4604      	mov	r4, r0
 80098f8:	f7f6 fd84 	bl	8000404 <__aeabi_i2d>
 80098fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009900:	f7f6 fdea 	bl	80004d8 <__aeabi_dmul>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4640      	mov	r0, r8
 800990a:	4649      	mov	r1, r9
 800990c:	f7f6 fc2c 	bl	8000168 <__aeabi_dsub>
 8009910:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009914:	f807 6b01 	strb.w	r6, [r7], #1
 8009918:	9e03      	ldr	r6, [sp, #12]
 800991a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800991e:	1bbe      	subs	r6, r7, r6
 8009920:	45b4      	cmp	ip, r6
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	d136      	bne.n	8009996 <_dtoa_r+0x6fe>
 8009928:	f7f6 fc20 	bl	800016c <__adddf3>
 800992c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009930:	4680      	mov	r8, r0
 8009932:	4689      	mov	r9, r1
 8009934:	f7f7 f860 	bl	80009f8 <__aeabi_dcmpgt>
 8009938:	bb58      	cbnz	r0, 8009992 <_dtoa_r+0x6fa>
 800993a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800993e:	4640      	mov	r0, r8
 8009940:	4649      	mov	r1, r9
 8009942:	f7f7 f831 	bl	80009a8 <__aeabi_dcmpeq>
 8009946:	b108      	cbz	r0, 800994c <_dtoa_r+0x6b4>
 8009948:	07e3      	lsls	r3, r4, #31
 800994a:	d422      	bmi.n	8009992 <_dtoa_r+0x6fa>
 800994c:	4651      	mov	r1, sl
 800994e:	4628      	mov	r0, r5
 8009950:	f000 fbc2 	bl	800a0d8 <_Bfree>
 8009954:	2300      	movs	r3, #0
 8009956:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009958:	703b      	strb	r3, [r7, #0]
 800995a:	f10b 0301 	add.w	r3, fp, #1
 800995e:	6013      	str	r3, [r2, #0]
 8009960:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009962:	2b00      	cmp	r3, #0
 8009964:	f43f ace6 	beq.w	8009334 <_dtoa_r+0x9c>
 8009968:	601f      	str	r7, [r3, #0]
 800996a:	e4e3      	b.n	8009334 <_dtoa_r+0x9c>
 800996c:	4627      	mov	r7, r4
 800996e:	463b      	mov	r3, r7
 8009970:	461f      	mov	r7, r3
 8009972:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009976:	2a39      	cmp	r2, #57	; 0x39
 8009978:	d107      	bne.n	800998a <_dtoa_r+0x6f2>
 800997a:	9a03      	ldr	r2, [sp, #12]
 800997c:	429a      	cmp	r2, r3
 800997e:	d1f7      	bne.n	8009970 <_dtoa_r+0x6d8>
 8009980:	2230      	movs	r2, #48	; 0x30
 8009982:	9903      	ldr	r1, [sp, #12]
 8009984:	f108 0801 	add.w	r8, r8, #1
 8009988:	700a      	strb	r2, [r1, #0]
 800998a:	781a      	ldrb	r2, [r3, #0]
 800998c:	3201      	adds	r2, #1
 800998e:	701a      	strb	r2, [r3, #0]
 8009990:	e79e      	b.n	80098d0 <_dtoa_r+0x638>
 8009992:	46d8      	mov	r8, fp
 8009994:	e7eb      	b.n	800996e <_dtoa_r+0x6d6>
 8009996:	2200      	movs	r2, #0
 8009998:	4b6d      	ldr	r3, [pc, #436]	; (8009b50 <_dtoa_r+0x8b8>)
 800999a:	f7f6 fd9d 	bl	80004d8 <__aeabi_dmul>
 800999e:	2200      	movs	r2, #0
 80099a0:	2300      	movs	r3, #0
 80099a2:	4680      	mov	r8, r0
 80099a4:	4689      	mov	r9, r1
 80099a6:	f7f6 ffff 	bl	80009a8 <__aeabi_dcmpeq>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d09b      	beq.n	80098e6 <_dtoa_r+0x64e>
 80099ae:	e7cd      	b.n	800994c <_dtoa_r+0x6b4>
 80099b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099b2:	2a00      	cmp	r2, #0
 80099b4:	f000 80c4 	beq.w	8009b40 <_dtoa_r+0x8a8>
 80099b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80099ba:	2a01      	cmp	r2, #1
 80099bc:	f300 80a8 	bgt.w	8009b10 <_dtoa_r+0x878>
 80099c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80099c2:	2a00      	cmp	r2, #0
 80099c4:	f000 80a0 	beq.w	8009b08 <_dtoa_r+0x870>
 80099c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80099cc:	464f      	mov	r7, r9
 80099ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80099d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099d2:	2101      	movs	r1, #1
 80099d4:	441a      	add	r2, r3
 80099d6:	4628      	mov	r0, r5
 80099d8:	4499      	add	r9, r3
 80099da:	9209      	str	r2, [sp, #36]	; 0x24
 80099dc:	f000 fc32 	bl	800a244 <__i2b>
 80099e0:	4606      	mov	r6, r0
 80099e2:	b15f      	cbz	r7, 80099fc <_dtoa_r+0x764>
 80099e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	dd08      	ble.n	80099fc <_dtoa_r+0x764>
 80099ea:	42bb      	cmp	r3, r7
 80099ec:	bfa8      	it	ge
 80099ee:	463b      	movge	r3, r7
 80099f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099f2:	eba9 0903 	sub.w	r9, r9, r3
 80099f6:	1aff      	subs	r7, r7, r3
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	9309      	str	r3, [sp, #36]	; 0x24
 80099fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099fe:	b1f3      	cbz	r3, 8009a3e <_dtoa_r+0x7a6>
 8009a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 80a0 	beq.w	8009b48 <_dtoa_r+0x8b0>
 8009a08:	2c00      	cmp	r4, #0
 8009a0a:	dd10      	ble.n	8009a2e <_dtoa_r+0x796>
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4622      	mov	r2, r4
 8009a10:	4628      	mov	r0, r5
 8009a12:	f000 fcd5 	bl	800a3c0 <__pow5mult>
 8009a16:	4652      	mov	r2, sl
 8009a18:	4601      	mov	r1, r0
 8009a1a:	4606      	mov	r6, r0
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	f000 fc27 	bl	800a270 <__multiply>
 8009a22:	4680      	mov	r8, r0
 8009a24:	4651      	mov	r1, sl
 8009a26:	4628      	mov	r0, r5
 8009a28:	f000 fb56 	bl	800a0d8 <_Bfree>
 8009a2c:	46c2      	mov	sl, r8
 8009a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a30:	1b1a      	subs	r2, r3, r4
 8009a32:	d004      	beq.n	8009a3e <_dtoa_r+0x7a6>
 8009a34:	4651      	mov	r1, sl
 8009a36:	4628      	mov	r0, r5
 8009a38:	f000 fcc2 	bl	800a3c0 <__pow5mult>
 8009a3c:	4682      	mov	sl, r0
 8009a3e:	2101      	movs	r1, #1
 8009a40:	4628      	mov	r0, r5
 8009a42:	f000 fbff 	bl	800a244 <__i2b>
 8009a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a48:	4604      	mov	r4, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f340 8082 	ble.w	8009b54 <_dtoa_r+0x8bc>
 8009a50:	461a      	mov	r2, r3
 8009a52:	4601      	mov	r1, r0
 8009a54:	4628      	mov	r0, r5
 8009a56:	f000 fcb3 	bl	800a3c0 <__pow5mult>
 8009a5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	dd7b      	ble.n	8009b5a <_dtoa_r+0x8c2>
 8009a62:	f04f 0800 	mov.w	r8, #0
 8009a66:	6923      	ldr	r3, [r4, #16]
 8009a68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a6c:	6918      	ldr	r0, [r3, #16]
 8009a6e:	f000 fb9b 	bl	800a1a8 <__hi0bits>
 8009a72:	f1c0 0020 	rsb	r0, r0, #32
 8009a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a78:	4418      	add	r0, r3
 8009a7a:	f010 001f 	ands.w	r0, r0, #31
 8009a7e:	f000 8092 	beq.w	8009ba6 <_dtoa_r+0x90e>
 8009a82:	f1c0 0320 	rsb	r3, r0, #32
 8009a86:	2b04      	cmp	r3, #4
 8009a88:	f340 8085 	ble.w	8009b96 <_dtoa_r+0x8fe>
 8009a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a8e:	f1c0 001c 	rsb	r0, r0, #28
 8009a92:	4403      	add	r3, r0
 8009a94:	4481      	add	r9, r0
 8009a96:	4407      	add	r7, r0
 8009a98:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9a:	f1b9 0f00 	cmp.w	r9, #0
 8009a9e:	dd05      	ble.n	8009aac <_dtoa_r+0x814>
 8009aa0:	4651      	mov	r1, sl
 8009aa2:	464a      	mov	r2, r9
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f000 fce5 	bl	800a474 <__lshift>
 8009aaa:	4682      	mov	sl, r0
 8009aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	dd05      	ble.n	8009abe <_dtoa_r+0x826>
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	f000 fcdc 	bl	800a474 <__lshift>
 8009abc:	4604      	mov	r4, r0
 8009abe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d072      	beq.n	8009baa <_dtoa_r+0x912>
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	4650      	mov	r0, sl
 8009ac8:	f000 fd40 	bl	800a54c <__mcmp>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	da6c      	bge.n	8009baa <_dtoa_r+0x912>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	4651      	mov	r1, sl
 8009ad4:	220a      	movs	r2, #10
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	f000 fb20 	bl	800a11c <__multadd>
 8009adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ade:	4682      	mov	sl, r0
 8009ae0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 81ac 	beq.w	8009e42 <_dtoa_r+0xbaa>
 8009aea:	2300      	movs	r3, #0
 8009aec:	4631      	mov	r1, r6
 8009aee:	220a      	movs	r2, #10
 8009af0:	4628      	mov	r0, r5
 8009af2:	f000 fb13 	bl	800a11c <__multadd>
 8009af6:	9b06      	ldr	r3, [sp, #24]
 8009af8:	4606      	mov	r6, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f300 8093 	bgt.w	8009c26 <_dtoa_r+0x98e>
 8009b00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	dc59      	bgt.n	8009bba <_dtoa_r+0x922>
 8009b06:	e08e      	b.n	8009c26 <_dtoa_r+0x98e>
 8009b08:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009b0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b0e:	e75d      	b.n	80099cc <_dtoa_r+0x734>
 8009b10:	9b08      	ldr	r3, [sp, #32]
 8009b12:	1e5c      	subs	r4, r3, #1
 8009b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b16:	42a3      	cmp	r3, r4
 8009b18:	bfbf      	itttt	lt
 8009b1a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009b1c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009b1e:	1ae3      	sublt	r3, r4, r3
 8009b20:	18d2      	addlt	r2, r2, r3
 8009b22:	bfa8      	it	ge
 8009b24:	1b1c      	subge	r4, r3, r4
 8009b26:	9b08      	ldr	r3, [sp, #32]
 8009b28:	bfbe      	ittt	lt
 8009b2a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009b2c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009b2e:	2400      	movlt	r4, #0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	bfb5      	itete	lt
 8009b34:	eba9 0703 	sublt.w	r7, r9, r3
 8009b38:	464f      	movge	r7, r9
 8009b3a:	2300      	movlt	r3, #0
 8009b3c:	9b08      	ldrge	r3, [sp, #32]
 8009b3e:	e747      	b.n	80099d0 <_dtoa_r+0x738>
 8009b40:	464f      	mov	r7, r9
 8009b42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009b44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009b46:	e74c      	b.n	80099e2 <_dtoa_r+0x74a>
 8009b48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b4a:	e773      	b.n	8009a34 <_dtoa_r+0x79c>
 8009b4c:	3fe00000 	.word	0x3fe00000
 8009b50:	40240000 	.word	0x40240000
 8009b54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	dc18      	bgt.n	8009b8c <_dtoa_r+0x8f4>
 8009b5a:	9b04      	ldr	r3, [sp, #16]
 8009b5c:	b9b3      	cbnz	r3, 8009b8c <_dtoa_r+0x8f4>
 8009b5e:	9b05      	ldr	r3, [sp, #20]
 8009b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b64:	b993      	cbnz	r3, 8009b8c <_dtoa_r+0x8f4>
 8009b66:	9b05      	ldr	r3, [sp, #20]
 8009b68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b6c:	0d1b      	lsrs	r3, r3, #20
 8009b6e:	051b      	lsls	r3, r3, #20
 8009b70:	b17b      	cbz	r3, 8009b92 <_dtoa_r+0x8fa>
 8009b72:	f04f 0801 	mov.w	r8, #1
 8009b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b78:	f109 0901 	add.w	r9, r9, #1
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f47f af6f 	bne.w	8009a66 <_dtoa_r+0x7ce>
 8009b88:	2001      	movs	r0, #1
 8009b8a:	e774      	b.n	8009a76 <_dtoa_r+0x7de>
 8009b8c:	f04f 0800 	mov.w	r8, #0
 8009b90:	e7f6      	b.n	8009b80 <_dtoa_r+0x8e8>
 8009b92:	4698      	mov	r8, r3
 8009b94:	e7f4      	b.n	8009b80 <_dtoa_r+0x8e8>
 8009b96:	d080      	beq.n	8009a9a <_dtoa_r+0x802>
 8009b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b9a:	331c      	adds	r3, #28
 8009b9c:	441a      	add	r2, r3
 8009b9e:	4499      	add	r9, r3
 8009ba0:	441f      	add	r7, r3
 8009ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ba4:	e779      	b.n	8009a9a <_dtoa_r+0x802>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	e7f6      	b.n	8009b98 <_dtoa_r+0x900>
 8009baa:	9b08      	ldr	r3, [sp, #32]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	dc34      	bgt.n	8009c1a <_dtoa_r+0x982>
 8009bb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	dd31      	ble.n	8009c1a <_dtoa_r+0x982>
 8009bb6:	9b08      	ldr	r3, [sp, #32]
 8009bb8:	9306      	str	r3, [sp, #24]
 8009bba:	9b06      	ldr	r3, [sp, #24]
 8009bbc:	b963      	cbnz	r3, 8009bd8 <_dtoa_r+0x940>
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	2205      	movs	r2, #5
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	f000 faaa 	bl	800a11c <__multadd>
 8009bc8:	4601      	mov	r1, r0
 8009bca:	4604      	mov	r4, r0
 8009bcc:	4650      	mov	r0, sl
 8009bce:	f000 fcbd 	bl	800a54c <__mcmp>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	f73f adbf 	bgt.w	8009756 <_dtoa_r+0x4be>
 8009bd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bda:	9f03      	ldr	r7, [sp, #12]
 8009bdc:	ea6f 0b03 	mvn.w	fp, r3
 8009be0:	f04f 0800 	mov.w	r8, #0
 8009be4:	4621      	mov	r1, r4
 8009be6:	4628      	mov	r0, r5
 8009be8:	f000 fa76 	bl	800a0d8 <_Bfree>
 8009bec:	2e00      	cmp	r6, #0
 8009bee:	f43f aead 	beq.w	800994c <_dtoa_r+0x6b4>
 8009bf2:	f1b8 0f00 	cmp.w	r8, #0
 8009bf6:	d005      	beq.n	8009c04 <_dtoa_r+0x96c>
 8009bf8:	45b0      	cmp	r8, r6
 8009bfa:	d003      	beq.n	8009c04 <_dtoa_r+0x96c>
 8009bfc:	4641      	mov	r1, r8
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f000 fa6a 	bl	800a0d8 <_Bfree>
 8009c04:	4631      	mov	r1, r6
 8009c06:	4628      	mov	r0, r5
 8009c08:	f000 fa66 	bl	800a0d8 <_Bfree>
 8009c0c:	e69e      	b.n	800994c <_dtoa_r+0x6b4>
 8009c0e:	2400      	movs	r4, #0
 8009c10:	4626      	mov	r6, r4
 8009c12:	e7e1      	b.n	8009bd8 <_dtoa_r+0x940>
 8009c14:	46c3      	mov	fp, r8
 8009c16:	4626      	mov	r6, r4
 8009c18:	e59d      	b.n	8009756 <_dtoa_r+0x4be>
 8009c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f000 80c8 	beq.w	8009db2 <_dtoa_r+0xb1a>
 8009c22:	9b08      	ldr	r3, [sp, #32]
 8009c24:	9306      	str	r3, [sp, #24]
 8009c26:	2f00      	cmp	r7, #0
 8009c28:	dd05      	ble.n	8009c36 <_dtoa_r+0x99e>
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	463a      	mov	r2, r7
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f000 fc20 	bl	800a474 <__lshift>
 8009c34:	4606      	mov	r6, r0
 8009c36:	f1b8 0f00 	cmp.w	r8, #0
 8009c3a:	d05b      	beq.n	8009cf4 <_dtoa_r+0xa5c>
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	6871      	ldr	r1, [r6, #4]
 8009c40:	f000 fa0a 	bl	800a058 <_Balloc>
 8009c44:	4607      	mov	r7, r0
 8009c46:	b928      	cbnz	r0, 8009c54 <_dtoa_r+0x9bc>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009c4e:	4b81      	ldr	r3, [pc, #516]	; (8009e54 <_dtoa_r+0xbbc>)
 8009c50:	f7ff bb36 	b.w	80092c0 <_dtoa_r+0x28>
 8009c54:	6932      	ldr	r2, [r6, #16]
 8009c56:	f106 010c 	add.w	r1, r6, #12
 8009c5a:	3202      	adds	r2, #2
 8009c5c:	0092      	lsls	r2, r2, #2
 8009c5e:	300c      	adds	r0, #12
 8009c60:	f7ff fa81 	bl	8009166 <memcpy>
 8009c64:	2201      	movs	r2, #1
 8009c66:	4639      	mov	r1, r7
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f000 fc03 	bl	800a474 <__lshift>
 8009c6e:	46b0      	mov	r8, r6
 8009c70:	4606      	mov	r6, r0
 8009c72:	9b03      	ldr	r3, [sp, #12]
 8009c74:	9a03      	ldr	r2, [sp, #12]
 8009c76:	3301      	adds	r3, #1
 8009c78:	9308      	str	r3, [sp, #32]
 8009c7a:	9b06      	ldr	r3, [sp, #24]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c80:	9b04      	ldr	r3, [sp, #16]
 8009c82:	f003 0301 	and.w	r3, r3, #1
 8009c86:	930a      	str	r3, [sp, #40]	; 0x28
 8009c88:	9b08      	ldr	r3, [sp, #32]
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	4650      	mov	r0, sl
 8009c90:	9304      	str	r3, [sp, #16]
 8009c92:	f7ff fa76 	bl	8009182 <quorem>
 8009c96:	4641      	mov	r1, r8
 8009c98:	9006      	str	r0, [sp, #24]
 8009c9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009c9e:	4650      	mov	r0, sl
 8009ca0:	f000 fc54 	bl	800a54c <__mcmp>
 8009ca4:	4632      	mov	r2, r6
 8009ca6:	9009      	str	r0, [sp, #36]	; 0x24
 8009ca8:	4621      	mov	r1, r4
 8009caa:	4628      	mov	r0, r5
 8009cac:	f000 fc6a 	bl	800a584 <__mdiff>
 8009cb0:	68c2      	ldr	r2, [r0, #12]
 8009cb2:	4607      	mov	r7, r0
 8009cb4:	bb02      	cbnz	r2, 8009cf8 <_dtoa_r+0xa60>
 8009cb6:	4601      	mov	r1, r0
 8009cb8:	4650      	mov	r0, sl
 8009cba:	f000 fc47 	bl	800a54c <__mcmp>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	4639      	mov	r1, r7
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	920c      	str	r2, [sp, #48]	; 0x30
 8009cc6:	f000 fa07 	bl	800a0d8 <_Bfree>
 8009cca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ccc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cce:	9f08      	ldr	r7, [sp, #32]
 8009cd0:	ea43 0102 	orr.w	r1, r3, r2
 8009cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd6:	4319      	orrs	r1, r3
 8009cd8:	d110      	bne.n	8009cfc <_dtoa_r+0xa64>
 8009cda:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009cde:	d029      	beq.n	8009d34 <_dtoa_r+0xa9c>
 8009ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	dd02      	ble.n	8009cec <_dtoa_r+0xa54>
 8009ce6:	9b06      	ldr	r3, [sp, #24]
 8009ce8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009cec:	9b04      	ldr	r3, [sp, #16]
 8009cee:	f883 9000 	strb.w	r9, [r3]
 8009cf2:	e777      	b.n	8009be4 <_dtoa_r+0x94c>
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	e7ba      	b.n	8009c6e <_dtoa_r+0x9d6>
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	e7e1      	b.n	8009cc0 <_dtoa_r+0xa28>
 8009cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	db04      	blt.n	8009d0c <_dtoa_r+0xa74>
 8009d02:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009d04:	430b      	orrs	r3, r1
 8009d06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d08:	430b      	orrs	r3, r1
 8009d0a:	d120      	bne.n	8009d4e <_dtoa_r+0xab6>
 8009d0c:	2a00      	cmp	r2, #0
 8009d0e:	dded      	ble.n	8009cec <_dtoa_r+0xa54>
 8009d10:	4651      	mov	r1, sl
 8009d12:	2201      	movs	r2, #1
 8009d14:	4628      	mov	r0, r5
 8009d16:	f000 fbad 	bl	800a474 <__lshift>
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	4682      	mov	sl, r0
 8009d1e:	f000 fc15 	bl	800a54c <__mcmp>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	dc03      	bgt.n	8009d2e <_dtoa_r+0xa96>
 8009d26:	d1e1      	bne.n	8009cec <_dtoa_r+0xa54>
 8009d28:	f019 0f01 	tst.w	r9, #1
 8009d2c:	d0de      	beq.n	8009cec <_dtoa_r+0xa54>
 8009d2e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d32:	d1d8      	bne.n	8009ce6 <_dtoa_r+0xa4e>
 8009d34:	2339      	movs	r3, #57	; 0x39
 8009d36:	9a04      	ldr	r2, [sp, #16]
 8009d38:	7013      	strb	r3, [r2, #0]
 8009d3a:	463b      	mov	r3, r7
 8009d3c:	461f      	mov	r7, r3
 8009d3e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009d42:	3b01      	subs	r3, #1
 8009d44:	2a39      	cmp	r2, #57	; 0x39
 8009d46:	d06b      	beq.n	8009e20 <_dtoa_r+0xb88>
 8009d48:	3201      	adds	r2, #1
 8009d4a:	701a      	strb	r2, [r3, #0]
 8009d4c:	e74a      	b.n	8009be4 <_dtoa_r+0x94c>
 8009d4e:	2a00      	cmp	r2, #0
 8009d50:	dd07      	ble.n	8009d62 <_dtoa_r+0xaca>
 8009d52:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d56:	d0ed      	beq.n	8009d34 <_dtoa_r+0xa9c>
 8009d58:	9a04      	ldr	r2, [sp, #16]
 8009d5a:	f109 0301 	add.w	r3, r9, #1
 8009d5e:	7013      	strb	r3, [r2, #0]
 8009d60:	e740      	b.n	8009be4 <_dtoa_r+0x94c>
 8009d62:	9b08      	ldr	r3, [sp, #32]
 8009d64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d66:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d042      	beq.n	8009df4 <_dtoa_r+0xb5c>
 8009d6e:	4651      	mov	r1, sl
 8009d70:	2300      	movs	r3, #0
 8009d72:	220a      	movs	r2, #10
 8009d74:	4628      	mov	r0, r5
 8009d76:	f000 f9d1 	bl	800a11c <__multadd>
 8009d7a:	45b0      	cmp	r8, r6
 8009d7c:	4682      	mov	sl, r0
 8009d7e:	f04f 0300 	mov.w	r3, #0
 8009d82:	f04f 020a 	mov.w	r2, #10
 8009d86:	4641      	mov	r1, r8
 8009d88:	4628      	mov	r0, r5
 8009d8a:	d107      	bne.n	8009d9c <_dtoa_r+0xb04>
 8009d8c:	f000 f9c6 	bl	800a11c <__multadd>
 8009d90:	4680      	mov	r8, r0
 8009d92:	4606      	mov	r6, r0
 8009d94:	9b08      	ldr	r3, [sp, #32]
 8009d96:	3301      	adds	r3, #1
 8009d98:	9308      	str	r3, [sp, #32]
 8009d9a:	e775      	b.n	8009c88 <_dtoa_r+0x9f0>
 8009d9c:	f000 f9be 	bl	800a11c <__multadd>
 8009da0:	4631      	mov	r1, r6
 8009da2:	4680      	mov	r8, r0
 8009da4:	2300      	movs	r3, #0
 8009da6:	220a      	movs	r2, #10
 8009da8:	4628      	mov	r0, r5
 8009daa:	f000 f9b7 	bl	800a11c <__multadd>
 8009dae:	4606      	mov	r6, r0
 8009db0:	e7f0      	b.n	8009d94 <_dtoa_r+0xafc>
 8009db2:	9b08      	ldr	r3, [sp, #32]
 8009db4:	9306      	str	r3, [sp, #24]
 8009db6:	9f03      	ldr	r7, [sp, #12]
 8009db8:	4621      	mov	r1, r4
 8009dba:	4650      	mov	r0, sl
 8009dbc:	f7ff f9e1 	bl	8009182 <quorem>
 8009dc0:	9b03      	ldr	r3, [sp, #12]
 8009dc2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009dc6:	f807 9b01 	strb.w	r9, [r7], #1
 8009dca:	1afa      	subs	r2, r7, r3
 8009dcc:	9b06      	ldr	r3, [sp, #24]
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	dd07      	ble.n	8009de2 <_dtoa_r+0xb4a>
 8009dd2:	4651      	mov	r1, sl
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	220a      	movs	r2, #10
 8009dd8:	4628      	mov	r0, r5
 8009dda:	f000 f99f 	bl	800a11c <__multadd>
 8009dde:	4682      	mov	sl, r0
 8009de0:	e7ea      	b.n	8009db8 <_dtoa_r+0xb20>
 8009de2:	9b06      	ldr	r3, [sp, #24]
 8009de4:	f04f 0800 	mov.w	r8, #0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	bfcc      	ite	gt
 8009dec:	461f      	movgt	r7, r3
 8009dee:	2701      	movle	r7, #1
 8009df0:	9b03      	ldr	r3, [sp, #12]
 8009df2:	441f      	add	r7, r3
 8009df4:	4651      	mov	r1, sl
 8009df6:	2201      	movs	r2, #1
 8009df8:	4628      	mov	r0, r5
 8009dfa:	f000 fb3b 	bl	800a474 <__lshift>
 8009dfe:	4621      	mov	r1, r4
 8009e00:	4682      	mov	sl, r0
 8009e02:	f000 fba3 	bl	800a54c <__mcmp>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	dc97      	bgt.n	8009d3a <_dtoa_r+0xaa2>
 8009e0a:	d102      	bne.n	8009e12 <_dtoa_r+0xb7a>
 8009e0c:	f019 0f01 	tst.w	r9, #1
 8009e10:	d193      	bne.n	8009d3a <_dtoa_r+0xaa2>
 8009e12:	463b      	mov	r3, r7
 8009e14:	461f      	mov	r7, r3
 8009e16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e1a:	2a30      	cmp	r2, #48	; 0x30
 8009e1c:	d0fa      	beq.n	8009e14 <_dtoa_r+0xb7c>
 8009e1e:	e6e1      	b.n	8009be4 <_dtoa_r+0x94c>
 8009e20:	9a03      	ldr	r2, [sp, #12]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d18a      	bne.n	8009d3c <_dtoa_r+0xaa4>
 8009e26:	2331      	movs	r3, #49	; 0x31
 8009e28:	f10b 0b01 	add.w	fp, fp, #1
 8009e2c:	e797      	b.n	8009d5e <_dtoa_r+0xac6>
 8009e2e:	4b0a      	ldr	r3, [pc, #40]	; (8009e58 <_dtoa_r+0xbc0>)
 8009e30:	f7ff ba9f 	b.w	8009372 <_dtoa_r+0xda>
 8009e34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f47f aa77 	bne.w	800932a <_dtoa_r+0x92>
 8009e3c:	4b07      	ldr	r3, [pc, #28]	; (8009e5c <_dtoa_r+0xbc4>)
 8009e3e:	f7ff ba98 	b.w	8009372 <_dtoa_r+0xda>
 8009e42:	9b06      	ldr	r3, [sp, #24]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	dcb6      	bgt.n	8009db6 <_dtoa_r+0xb1e>
 8009e48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	f73f aeb5 	bgt.w	8009bba <_dtoa_r+0x922>
 8009e50:	e7b1      	b.n	8009db6 <_dtoa_r+0xb1e>
 8009e52:	bf00      	nop
 8009e54:	0800bca0 	.word	0x0800bca0
 8009e58:	0800be33 	.word	0x0800be33
 8009e5c:	0800bc24 	.word	0x0800bc24

08009e60 <_free_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4605      	mov	r5, r0
 8009e64:	2900      	cmp	r1, #0
 8009e66:	d040      	beq.n	8009eea <_free_r+0x8a>
 8009e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e6c:	1f0c      	subs	r4, r1, #4
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	bfb8      	it	lt
 8009e72:	18e4      	addlt	r4, r4, r3
 8009e74:	f000 f8e4 	bl	800a040 <__malloc_lock>
 8009e78:	4a1c      	ldr	r2, [pc, #112]	; (8009eec <_free_r+0x8c>)
 8009e7a:	6813      	ldr	r3, [r2, #0]
 8009e7c:	b933      	cbnz	r3, 8009e8c <_free_r+0x2c>
 8009e7e:	6063      	str	r3, [r4, #4]
 8009e80:	6014      	str	r4, [r2, #0]
 8009e82:	4628      	mov	r0, r5
 8009e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e88:	f000 b8e0 	b.w	800a04c <__malloc_unlock>
 8009e8c:	42a3      	cmp	r3, r4
 8009e8e:	d908      	bls.n	8009ea2 <_free_r+0x42>
 8009e90:	6820      	ldr	r0, [r4, #0]
 8009e92:	1821      	adds	r1, r4, r0
 8009e94:	428b      	cmp	r3, r1
 8009e96:	bf01      	itttt	eq
 8009e98:	6819      	ldreq	r1, [r3, #0]
 8009e9a:	685b      	ldreq	r3, [r3, #4]
 8009e9c:	1809      	addeq	r1, r1, r0
 8009e9e:	6021      	streq	r1, [r4, #0]
 8009ea0:	e7ed      	b.n	8009e7e <_free_r+0x1e>
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	b10b      	cbz	r3, 8009eac <_free_r+0x4c>
 8009ea8:	42a3      	cmp	r3, r4
 8009eaa:	d9fa      	bls.n	8009ea2 <_free_r+0x42>
 8009eac:	6811      	ldr	r1, [r2, #0]
 8009eae:	1850      	adds	r0, r2, r1
 8009eb0:	42a0      	cmp	r0, r4
 8009eb2:	d10b      	bne.n	8009ecc <_free_r+0x6c>
 8009eb4:	6820      	ldr	r0, [r4, #0]
 8009eb6:	4401      	add	r1, r0
 8009eb8:	1850      	adds	r0, r2, r1
 8009eba:	4283      	cmp	r3, r0
 8009ebc:	6011      	str	r1, [r2, #0]
 8009ebe:	d1e0      	bne.n	8009e82 <_free_r+0x22>
 8009ec0:	6818      	ldr	r0, [r3, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	4408      	add	r0, r1
 8009ec6:	6010      	str	r0, [r2, #0]
 8009ec8:	6053      	str	r3, [r2, #4]
 8009eca:	e7da      	b.n	8009e82 <_free_r+0x22>
 8009ecc:	d902      	bls.n	8009ed4 <_free_r+0x74>
 8009ece:	230c      	movs	r3, #12
 8009ed0:	602b      	str	r3, [r5, #0]
 8009ed2:	e7d6      	b.n	8009e82 <_free_r+0x22>
 8009ed4:	6820      	ldr	r0, [r4, #0]
 8009ed6:	1821      	adds	r1, r4, r0
 8009ed8:	428b      	cmp	r3, r1
 8009eda:	bf01      	itttt	eq
 8009edc:	6819      	ldreq	r1, [r3, #0]
 8009ede:	685b      	ldreq	r3, [r3, #4]
 8009ee0:	1809      	addeq	r1, r1, r0
 8009ee2:	6021      	streq	r1, [r4, #0]
 8009ee4:	6063      	str	r3, [r4, #4]
 8009ee6:	6054      	str	r4, [r2, #4]
 8009ee8:	e7cb      	b.n	8009e82 <_free_r+0x22>
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	20001f38 	.word	0x20001f38

08009ef0 <malloc>:
 8009ef0:	4b02      	ldr	r3, [pc, #8]	; (8009efc <malloc+0xc>)
 8009ef2:	4601      	mov	r1, r0
 8009ef4:	6818      	ldr	r0, [r3, #0]
 8009ef6:	f000 b823 	b.w	8009f40 <_malloc_r>
 8009efa:	bf00      	nop
 8009efc:	200000b0 	.word	0x200000b0

08009f00 <sbrk_aligned>:
 8009f00:	b570      	push	{r4, r5, r6, lr}
 8009f02:	4e0e      	ldr	r6, [pc, #56]	; (8009f3c <sbrk_aligned+0x3c>)
 8009f04:	460c      	mov	r4, r1
 8009f06:	6831      	ldr	r1, [r6, #0]
 8009f08:	4605      	mov	r5, r0
 8009f0a:	b911      	cbnz	r1, 8009f12 <sbrk_aligned+0x12>
 8009f0c:	f001 f9c8 	bl	800b2a0 <_sbrk_r>
 8009f10:	6030      	str	r0, [r6, #0]
 8009f12:	4621      	mov	r1, r4
 8009f14:	4628      	mov	r0, r5
 8009f16:	f001 f9c3 	bl	800b2a0 <_sbrk_r>
 8009f1a:	1c43      	adds	r3, r0, #1
 8009f1c:	d00a      	beq.n	8009f34 <sbrk_aligned+0x34>
 8009f1e:	1cc4      	adds	r4, r0, #3
 8009f20:	f024 0403 	bic.w	r4, r4, #3
 8009f24:	42a0      	cmp	r0, r4
 8009f26:	d007      	beq.n	8009f38 <sbrk_aligned+0x38>
 8009f28:	1a21      	subs	r1, r4, r0
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f001 f9b8 	bl	800b2a0 <_sbrk_r>
 8009f30:	3001      	adds	r0, #1
 8009f32:	d101      	bne.n	8009f38 <sbrk_aligned+0x38>
 8009f34:	f04f 34ff 	mov.w	r4, #4294967295
 8009f38:	4620      	mov	r0, r4
 8009f3a:	bd70      	pop	{r4, r5, r6, pc}
 8009f3c:	20001f3c 	.word	0x20001f3c

08009f40 <_malloc_r>:
 8009f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f44:	1ccd      	adds	r5, r1, #3
 8009f46:	f025 0503 	bic.w	r5, r5, #3
 8009f4a:	3508      	adds	r5, #8
 8009f4c:	2d0c      	cmp	r5, #12
 8009f4e:	bf38      	it	cc
 8009f50:	250c      	movcc	r5, #12
 8009f52:	2d00      	cmp	r5, #0
 8009f54:	4607      	mov	r7, r0
 8009f56:	db01      	blt.n	8009f5c <_malloc_r+0x1c>
 8009f58:	42a9      	cmp	r1, r5
 8009f5a:	d905      	bls.n	8009f68 <_malloc_r+0x28>
 8009f5c:	230c      	movs	r3, #12
 8009f5e:	2600      	movs	r6, #0
 8009f60:	603b      	str	r3, [r7, #0]
 8009f62:	4630      	mov	r0, r6
 8009f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a03c <_malloc_r+0xfc>
 8009f6c:	f000 f868 	bl	800a040 <__malloc_lock>
 8009f70:	f8d8 3000 	ldr.w	r3, [r8]
 8009f74:	461c      	mov	r4, r3
 8009f76:	bb5c      	cbnz	r4, 8009fd0 <_malloc_r+0x90>
 8009f78:	4629      	mov	r1, r5
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	f7ff ffc0 	bl	8009f00 <sbrk_aligned>
 8009f80:	1c43      	adds	r3, r0, #1
 8009f82:	4604      	mov	r4, r0
 8009f84:	d155      	bne.n	800a032 <_malloc_r+0xf2>
 8009f86:	f8d8 4000 	ldr.w	r4, [r8]
 8009f8a:	4626      	mov	r6, r4
 8009f8c:	2e00      	cmp	r6, #0
 8009f8e:	d145      	bne.n	800a01c <_malloc_r+0xdc>
 8009f90:	2c00      	cmp	r4, #0
 8009f92:	d048      	beq.n	800a026 <_malloc_r+0xe6>
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	4631      	mov	r1, r6
 8009f98:	4638      	mov	r0, r7
 8009f9a:	eb04 0903 	add.w	r9, r4, r3
 8009f9e:	f001 f97f 	bl	800b2a0 <_sbrk_r>
 8009fa2:	4581      	cmp	r9, r0
 8009fa4:	d13f      	bne.n	800a026 <_malloc_r+0xe6>
 8009fa6:	6821      	ldr	r1, [r4, #0]
 8009fa8:	4638      	mov	r0, r7
 8009faa:	1a6d      	subs	r5, r5, r1
 8009fac:	4629      	mov	r1, r5
 8009fae:	f7ff ffa7 	bl	8009f00 <sbrk_aligned>
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	d037      	beq.n	800a026 <_malloc_r+0xe6>
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	442b      	add	r3, r5
 8009fba:	6023      	str	r3, [r4, #0]
 8009fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d038      	beq.n	800a036 <_malloc_r+0xf6>
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	42a2      	cmp	r2, r4
 8009fc8:	d12b      	bne.n	800a022 <_malloc_r+0xe2>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	605a      	str	r2, [r3, #4]
 8009fce:	e00f      	b.n	8009ff0 <_malloc_r+0xb0>
 8009fd0:	6822      	ldr	r2, [r4, #0]
 8009fd2:	1b52      	subs	r2, r2, r5
 8009fd4:	d41f      	bmi.n	800a016 <_malloc_r+0xd6>
 8009fd6:	2a0b      	cmp	r2, #11
 8009fd8:	d917      	bls.n	800a00a <_malloc_r+0xca>
 8009fda:	1961      	adds	r1, r4, r5
 8009fdc:	42a3      	cmp	r3, r4
 8009fde:	6025      	str	r5, [r4, #0]
 8009fe0:	bf18      	it	ne
 8009fe2:	6059      	strne	r1, [r3, #4]
 8009fe4:	6863      	ldr	r3, [r4, #4]
 8009fe6:	bf08      	it	eq
 8009fe8:	f8c8 1000 	streq.w	r1, [r8]
 8009fec:	5162      	str	r2, [r4, r5]
 8009fee:	604b      	str	r3, [r1, #4]
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	f104 060b 	add.w	r6, r4, #11
 8009ff6:	f000 f829 	bl	800a04c <__malloc_unlock>
 8009ffa:	f026 0607 	bic.w	r6, r6, #7
 8009ffe:	1d23      	adds	r3, r4, #4
 800a000:	1af2      	subs	r2, r6, r3
 800a002:	d0ae      	beq.n	8009f62 <_malloc_r+0x22>
 800a004:	1b9b      	subs	r3, r3, r6
 800a006:	50a3      	str	r3, [r4, r2]
 800a008:	e7ab      	b.n	8009f62 <_malloc_r+0x22>
 800a00a:	42a3      	cmp	r3, r4
 800a00c:	6862      	ldr	r2, [r4, #4]
 800a00e:	d1dd      	bne.n	8009fcc <_malloc_r+0x8c>
 800a010:	f8c8 2000 	str.w	r2, [r8]
 800a014:	e7ec      	b.n	8009ff0 <_malloc_r+0xb0>
 800a016:	4623      	mov	r3, r4
 800a018:	6864      	ldr	r4, [r4, #4]
 800a01a:	e7ac      	b.n	8009f76 <_malloc_r+0x36>
 800a01c:	4634      	mov	r4, r6
 800a01e:	6876      	ldr	r6, [r6, #4]
 800a020:	e7b4      	b.n	8009f8c <_malloc_r+0x4c>
 800a022:	4613      	mov	r3, r2
 800a024:	e7cc      	b.n	8009fc0 <_malloc_r+0x80>
 800a026:	230c      	movs	r3, #12
 800a028:	4638      	mov	r0, r7
 800a02a:	603b      	str	r3, [r7, #0]
 800a02c:	f000 f80e 	bl	800a04c <__malloc_unlock>
 800a030:	e797      	b.n	8009f62 <_malloc_r+0x22>
 800a032:	6025      	str	r5, [r4, #0]
 800a034:	e7dc      	b.n	8009ff0 <_malloc_r+0xb0>
 800a036:	605b      	str	r3, [r3, #4]
 800a038:	deff      	udf	#255	; 0xff
 800a03a:	bf00      	nop
 800a03c:	20001f38 	.word	0x20001f38

0800a040 <__malloc_lock>:
 800a040:	4801      	ldr	r0, [pc, #4]	; (800a048 <__malloc_lock+0x8>)
 800a042:	f7ff b880 	b.w	8009146 <__retarget_lock_acquire_recursive>
 800a046:	bf00      	nop
 800a048:	20001f34 	.word	0x20001f34

0800a04c <__malloc_unlock>:
 800a04c:	4801      	ldr	r0, [pc, #4]	; (800a054 <__malloc_unlock+0x8>)
 800a04e:	f7ff b87b 	b.w	8009148 <__retarget_lock_release_recursive>
 800a052:	bf00      	nop
 800a054:	20001f34 	.word	0x20001f34

0800a058 <_Balloc>:
 800a058:	b570      	push	{r4, r5, r6, lr}
 800a05a:	69c6      	ldr	r6, [r0, #28]
 800a05c:	4604      	mov	r4, r0
 800a05e:	460d      	mov	r5, r1
 800a060:	b976      	cbnz	r6, 800a080 <_Balloc+0x28>
 800a062:	2010      	movs	r0, #16
 800a064:	f7ff ff44 	bl	8009ef0 <malloc>
 800a068:	4602      	mov	r2, r0
 800a06a:	61e0      	str	r0, [r4, #28]
 800a06c:	b920      	cbnz	r0, 800a078 <_Balloc+0x20>
 800a06e:	216b      	movs	r1, #107	; 0x6b
 800a070:	4b17      	ldr	r3, [pc, #92]	; (800a0d0 <_Balloc+0x78>)
 800a072:	4818      	ldr	r0, [pc, #96]	; (800a0d4 <_Balloc+0x7c>)
 800a074:	f001 f924 	bl	800b2c0 <__assert_func>
 800a078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a07c:	6006      	str	r6, [r0, #0]
 800a07e:	60c6      	str	r6, [r0, #12]
 800a080:	69e6      	ldr	r6, [r4, #28]
 800a082:	68f3      	ldr	r3, [r6, #12]
 800a084:	b183      	cbz	r3, 800a0a8 <_Balloc+0x50>
 800a086:	69e3      	ldr	r3, [r4, #28]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a08e:	b9b8      	cbnz	r0, 800a0c0 <_Balloc+0x68>
 800a090:	2101      	movs	r1, #1
 800a092:	fa01 f605 	lsl.w	r6, r1, r5
 800a096:	1d72      	adds	r2, r6, #5
 800a098:	4620      	mov	r0, r4
 800a09a:	0092      	lsls	r2, r2, #2
 800a09c:	f001 f92e 	bl	800b2fc <_calloc_r>
 800a0a0:	b160      	cbz	r0, 800a0bc <_Balloc+0x64>
 800a0a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0a6:	e00e      	b.n	800a0c6 <_Balloc+0x6e>
 800a0a8:	2221      	movs	r2, #33	; 0x21
 800a0aa:	2104      	movs	r1, #4
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f001 f925 	bl	800b2fc <_calloc_r>
 800a0b2:	69e3      	ldr	r3, [r4, #28]
 800a0b4:	60f0      	str	r0, [r6, #12]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1e4      	bne.n	800a086 <_Balloc+0x2e>
 800a0bc:	2000      	movs	r0, #0
 800a0be:	bd70      	pop	{r4, r5, r6, pc}
 800a0c0:	6802      	ldr	r2, [r0, #0]
 800a0c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0cc:	e7f7      	b.n	800a0be <_Balloc+0x66>
 800a0ce:	bf00      	nop
 800a0d0:	0800bc31 	.word	0x0800bc31
 800a0d4:	0800bcb1 	.word	0x0800bcb1

0800a0d8 <_Bfree>:
 800a0d8:	b570      	push	{r4, r5, r6, lr}
 800a0da:	69c6      	ldr	r6, [r0, #28]
 800a0dc:	4605      	mov	r5, r0
 800a0de:	460c      	mov	r4, r1
 800a0e0:	b976      	cbnz	r6, 800a100 <_Bfree+0x28>
 800a0e2:	2010      	movs	r0, #16
 800a0e4:	f7ff ff04 	bl	8009ef0 <malloc>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	61e8      	str	r0, [r5, #28]
 800a0ec:	b920      	cbnz	r0, 800a0f8 <_Bfree+0x20>
 800a0ee:	218f      	movs	r1, #143	; 0x8f
 800a0f0:	4b08      	ldr	r3, [pc, #32]	; (800a114 <_Bfree+0x3c>)
 800a0f2:	4809      	ldr	r0, [pc, #36]	; (800a118 <_Bfree+0x40>)
 800a0f4:	f001 f8e4 	bl	800b2c0 <__assert_func>
 800a0f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0fc:	6006      	str	r6, [r0, #0]
 800a0fe:	60c6      	str	r6, [r0, #12]
 800a100:	b13c      	cbz	r4, 800a112 <_Bfree+0x3a>
 800a102:	69eb      	ldr	r3, [r5, #28]
 800a104:	6862      	ldr	r2, [r4, #4]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a10c:	6021      	str	r1, [r4, #0]
 800a10e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a112:	bd70      	pop	{r4, r5, r6, pc}
 800a114:	0800bc31 	.word	0x0800bc31
 800a118:	0800bcb1 	.word	0x0800bcb1

0800a11c <__multadd>:
 800a11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a120:	4607      	mov	r7, r0
 800a122:	460c      	mov	r4, r1
 800a124:	461e      	mov	r6, r3
 800a126:	2000      	movs	r0, #0
 800a128:	690d      	ldr	r5, [r1, #16]
 800a12a:	f101 0c14 	add.w	ip, r1, #20
 800a12e:	f8dc 3000 	ldr.w	r3, [ip]
 800a132:	3001      	adds	r0, #1
 800a134:	b299      	uxth	r1, r3
 800a136:	fb02 6101 	mla	r1, r2, r1, r6
 800a13a:	0c1e      	lsrs	r6, r3, #16
 800a13c:	0c0b      	lsrs	r3, r1, #16
 800a13e:	fb02 3306 	mla	r3, r2, r6, r3
 800a142:	b289      	uxth	r1, r1
 800a144:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a148:	4285      	cmp	r5, r0
 800a14a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a14e:	f84c 1b04 	str.w	r1, [ip], #4
 800a152:	dcec      	bgt.n	800a12e <__multadd+0x12>
 800a154:	b30e      	cbz	r6, 800a19a <__multadd+0x7e>
 800a156:	68a3      	ldr	r3, [r4, #8]
 800a158:	42ab      	cmp	r3, r5
 800a15a:	dc19      	bgt.n	800a190 <__multadd+0x74>
 800a15c:	6861      	ldr	r1, [r4, #4]
 800a15e:	4638      	mov	r0, r7
 800a160:	3101      	adds	r1, #1
 800a162:	f7ff ff79 	bl	800a058 <_Balloc>
 800a166:	4680      	mov	r8, r0
 800a168:	b928      	cbnz	r0, 800a176 <__multadd+0x5a>
 800a16a:	4602      	mov	r2, r0
 800a16c:	21ba      	movs	r1, #186	; 0xba
 800a16e:	4b0c      	ldr	r3, [pc, #48]	; (800a1a0 <__multadd+0x84>)
 800a170:	480c      	ldr	r0, [pc, #48]	; (800a1a4 <__multadd+0x88>)
 800a172:	f001 f8a5 	bl	800b2c0 <__assert_func>
 800a176:	6922      	ldr	r2, [r4, #16]
 800a178:	f104 010c 	add.w	r1, r4, #12
 800a17c:	3202      	adds	r2, #2
 800a17e:	0092      	lsls	r2, r2, #2
 800a180:	300c      	adds	r0, #12
 800a182:	f7fe fff0 	bl	8009166 <memcpy>
 800a186:	4621      	mov	r1, r4
 800a188:	4638      	mov	r0, r7
 800a18a:	f7ff ffa5 	bl	800a0d8 <_Bfree>
 800a18e:	4644      	mov	r4, r8
 800a190:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a194:	3501      	adds	r5, #1
 800a196:	615e      	str	r6, [r3, #20]
 800a198:	6125      	str	r5, [r4, #16]
 800a19a:	4620      	mov	r0, r4
 800a19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1a0:	0800bca0 	.word	0x0800bca0
 800a1a4:	0800bcb1 	.word	0x0800bcb1

0800a1a8 <__hi0bits>:
 800a1a8:	0c02      	lsrs	r2, r0, #16
 800a1aa:	0412      	lsls	r2, r2, #16
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	b9ca      	cbnz	r2, 800a1e4 <__hi0bits+0x3c>
 800a1b0:	0403      	lsls	r3, r0, #16
 800a1b2:	2010      	movs	r0, #16
 800a1b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a1b8:	bf04      	itt	eq
 800a1ba:	021b      	lsleq	r3, r3, #8
 800a1bc:	3008      	addeq	r0, #8
 800a1be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a1c2:	bf04      	itt	eq
 800a1c4:	011b      	lsleq	r3, r3, #4
 800a1c6:	3004      	addeq	r0, #4
 800a1c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a1cc:	bf04      	itt	eq
 800a1ce:	009b      	lsleq	r3, r3, #2
 800a1d0:	3002      	addeq	r0, #2
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	db05      	blt.n	800a1e2 <__hi0bits+0x3a>
 800a1d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a1da:	f100 0001 	add.w	r0, r0, #1
 800a1de:	bf08      	it	eq
 800a1e0:	2020      	moveq	r0, #32
 800a1e2:	4770      	bx	lr
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	e7e5      	b.n	800a1b4 <__hi0bits+0xc>

0800a1e8 <__lo0bits>:
 800a1e8:	6803      	ldr	r3, [r0, #0]
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	f013 0007 	ands.w	r0, r3, #7
 800a1f0:	d00b      	beq.n	800a20a <__lo0bits+0x22>
 800a1f2:	07d9      	lsls	r1, r3, #31
 800a1f4:	d421      	bmi.n	800a23a <__lo0bits+0x52>
 800a1f6:	0798      	lsls	r0, r3, #30
 800a1f8:	bf49      	itett	mi
 800a1fa:	085b      	lsrmi	r3, r3, #1
 800a1fc:	089b      	lsrpl	r3, r3, #2
 800a1fe:	2001      	movmi	r0, #1
 800a200:	6013      	strmi	r3, [r2, #0]
 800a202:	bf5c      	itt	pl
 800a204:	2002      	movpl	r0, #2
 800a206:	6013      	strpl	r3, [r2, #0]
 800a208:	4770      	bx	lr
 800a20a:	b299      	uxth	r1, r3
 800a20c:	b909      	cbnz	r1, 800a212 <__lo0bits+0x2a>
 800a20e:	2010      	movs	r0, #16
 800a210:	0c1b      	lsrs	r3, r3, #16
 800a212:	b2d9      	uxtb	r1, r3
 800a214:	b909      	cbnz	r1, 800a21a <__lo0bits+0x32>
 800a216:	3008      	adds	r0, #8
 800a218:	0a1b      	lsrs	r3, r3, #8
 800a21a:	0719      	lsls	r1, r3, #28
 800a21c:	bf04      	itt	eq
 800a21e:	091b      	lsreq	r3, r3, #4
 800a220:	3004      	addeq	r0, #4
 800a222:	0799      	lsls	r1, r3, #30
 800a224:	bf04      	itt	eq
 800a226:	089b      	lsreq	r3, r3, #2
 800a228:	3002      	addeq	r0, #2
 800a22a:	07d9      	lsls	r1, r3, #31
 800a22c:	d403      	bmi.n	800a236 <__lo0bits+0x4e>
 800a22e:	085b      	lsrs	r3, r3, #1
 800a230:	f100 0001 	add.w	r0, r0, #1
 800a234:	d003      	beq.n	800a23e <__lo0bits+0x56>
 800a236:	6013      	str	r3, [r2, #0]
 800a238:	4770      	bx	lr
 800a23a:	2000      	movs	r0, #0
 800a23c:	4770      	bx	lr
 800a23e:	2020      	movs	r0, #32
 800a240:	4770      	bx	lr
	...

0800a244 <__i2b>:
 800a244:	b510      	push	{r4, lr}
 800a246:	460c      	mov	r4, r1
 800a248:	2101      	movs	r1, #1
 800a24a:	f7ff ff05 	bl	800a058 <_Balloc>
 800a24e:	4602      	mov	r2, r0
 800a250:	b928      	cbnz	r0, 800a25e <__i2b+0x1a>
 800a252:	f240 1145 	movw	r1, #325	; 0x145
 800a256:	4b04      	ldr	r3, [pc, #16]	; (800a268 <__i2b+0x24>)
 800a258:	4804      	ldr	r0, [pc, #16]	; (800a26c <__i2b+0x28>)
 800a25a:	f001 f831 	bl	800b2c0 <__assert_func>
 800a25e:	2301      	movs	r3, #1
 800a260:	6144      	str	r4, [r0, #20]
 800a262:	6103      	str	r3, [r0, #16]
 800a264:	bd10      	pop	{r4, pc}
 800a266:	bf00      	nop
 800a268:	0800bca0 	.word	0x0800bca0
 800a26c:	0800bcb1 	.word	0x0800bcb1

0800a270 <__multiply>:
 800a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	4691      	mov	r9, r2
 800a276:	690a      	ldr	r2, [r1, #16]
 800a278:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a27c:	460c      	mov	r4, r1
 800a27e:	429a      	cmp	r2, r3
 800a280:	bfbe      	ittt	lt
 800a282:	460b      	movlt	r3, r1
 800a284:	464c      	movlt	r4, r9
 800a286:	4699      	movlt	r9, r3
 800a288:	6927      	ldr	r7, [r4, #16]
 800a28a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a28e:	68a3      	ldr	r3, [r4, #8]
 800a290:	6861      	ldr	r1, [r4, #4]
 800a292:	eb07 060a 	add.w	r6, r7, sl
 800a296:	42b3      	cmp	r3, r6
 800a298:	b085      	sub	sp, #20
 800a29a:	bfb8      	it	lt
 800a29c:	3101      	addlt	r1, #1
 800a29e:	f7ff fedb 	bl	800a058 <_Balloc>
 800a2a2:	b930      	cbnz	r0, 800a2b2 <__multiply+0x42>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a2aa:	4b43      	ldr	r3, [pc, #268]	; (800a3b8 <__multiply+0x148>)
 800a2ac:	4843      	ldr	r0, [pc, #268]	; (800a3bc <__multiply+0x14c>)
 800a2ae:	f001 f807 	bl	800b2c0 <__assert_func>
 800a2b2:	f100 0514 	add.w	r5, r0, #20
 800a2b6:	462b      	mov	r3, r5
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2be:	4543      	cmp	r3, r8
 800a2c0:	d321      	bcc.n	800a306 <__multiply+0x96>
 800a2c2:	f104 0314 	add.w	r3, r4, #20
 800a2c6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a2ca:	f109 0314 	add.w	r3, r9, #20
 800a2ce:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a2d2:	9202      	str	r2, [sp, #8]
 800a2d4:	1b3a      	subs	r2, r7, r4
 800a2d6:	3a15      	subs	r2, #21
 800a2d8:	f022 0203 	bic.w	r2, r2, #3
 800a2dc:	3204      	adds	r2, #4
 800a2de:	f104 0115 	add.w	r1, r4, #21
 800a2e2:	428f      	cmp	r7, r1
 800a2e4:	bf38      	it	cc
 800a2e6:	2204      	movcc	r2, #4
 800a2e8:	9201      	str	r2, [sp, #4]
 800a2ea:	9a02      	ldr	r2, [sp, #8]
 800a2ec:	9303      	str	r3, [sp, #12]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d80c      	bhi.n	800a30c <__multiply+0x9c>
 800a2f2:	2e00      	cmp	r6, #0
 800a2f4:	dd03      	ble.n	800a2fe <__multiply+0x8e>
 800a2f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d05a      	beq.n	800a3b4 <__multiply+0x144>
 800a2fe:	6106      	str	r6, [r0, #16]
 800a300:	b005      	add	sp, #20
 800a302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a306:	f843 2b04 	str.w	r2, [r3], #4
 800a30a:	e7d8      	b.n	800a2be <__multiply+0x4e>
 800a30c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a310:	f1ba 0f00 	cmp.w	sl, #0
 800a314:	d023      	beq.n	800a35e <__multiply+0xee>
 800a316:	46a9      	mov	r9, r5
 800a318:	f04f 0c00 	mov.w	ip, #0
 800a31c:	f104 0e14 	add.w	lr, r4, #20
 800a320:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a324:	f8d9 1000 	ldr.w	r1, [r9]
 800a328:	fa1f fb82 	uxth.w	fp, r2
 800a32c:	b289      	uxth	r1, r1
 800a32e:	fb0a 110b 	mla	r1, sl, fp, r1
 800a332:	4461      	add	r1, ip
 800a334:	f8d9 c000 	ldr.w	ip, [r9]
 800a338:	0c12      	lsrs	r2, r2, #16
 800a33a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a33e:	fb0a c202 	mla	r2, sl, r2, ip
 800a342:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a346:	b289      	uxth	r1, r1
 800a348:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a34c:	4577      	cmp	r7, lr
 800a34e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a352:	f849 1b04 	str.w	r1, [r9], #4
 800a356:	d8e3      	bhi.n	800a320 <__multiply+0xb0>
 800a358:	9a01      	ldr	r2, [sp, #4]
 800a35a:	f845 c002 	str.w	ip, [r5, r2]
 800a35e:	9a03      	ldr	r2, [sp, #12]
 800a360:	3304      	adds	r3, #4
 800a362:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a366:	f1b9 0f00 	cmp.w	r9, #0
 800a36a:	d021      	beq.n	800a3b0 <__multiply+0x140>
 800a36c:	46ae      	mov	lr, r5
 800a36e:	f04f 0a00 	mov.w	sl, #0
 800a372:	6829      	ldr	r1, [r5, #0]
 800a374:	f104 0c14 	add.w	ip, r4, #20
 800a378:	f8bc b000 	ldrh.w	fp, [ip]
 800a37c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a380:	b289      	uxth	r1, r1
 800a382:	fb09 220b 	mla	r2, r9, fp, r2
 800a386:	4452      	add	r2, sl
 800a388:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a38c:	f84e 1b04 	str.w	r1, [lr], #4
 800a390:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a394:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a398:	f8be 1000 	ldrh.w	r1, [lr]
 800a39c:	4567      	cmp	r7, ip
 800a39e:	fb09 110a 	mla	r1, r9, sl, r1
 800a3a2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a3a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a3aa:	d8e5      	bhi.n	800a378 <__multiply+0x108>
 800a3ac:	9a01      	ldr	r2, [sp, #4]
 800a3ae:	50a9      	str	r1, [r5, r2]
 800a3b0:	3504      	adds	r5, #4
 800a3b2:	e79a      	b.n	800a2ea <__multiply+0x7a>
 800a3b4:	3e01      	subs	r6, #1
 800a3b6:	e79c      	b.n	800a2f2 <__multiply+0x82>
 800a3b8:	0800bca0 	.word	0x0800bca0
 800a3bc:	0800bcb1 	.word	0x0800bcb1

0800a3c0 <__pow5mult>:
 800a3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c4:	4615      	mov	r5, r2
 800a3c6:	f012 0203 	ands.w	r2, r2, #3
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	460f      	mov	r7, r1
 800a3ce:	d007      	beq.n	800a3e0 <__pow5mult+0x20>
 800a3d0:	4c25      	ldr	r4, [pc, #148]	; (800a468 <__pow5mult+0xa8>)
 800a3d2:	3a01      	subs	r2, #1
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3da:	f7ff fe9f 	bl	800a11c <__multadd>
 800a3de:	4607      	mov	r7, r0
 800a3e0:	10ad      	asrs	r5, r5, #2
 800a3e2:	d03d      	beq.n	800a460 <__pow5mult+0xa0>
 800a3e4:	69f4      	ldr	r4, [r6, #28]
 800a3e6:	b97c      	cbnz	r4, 800a408 <__pow5mult+0x48>
 800a3e8:	2010      	movs	r0, #16
 800a3ea:	f7ff fd81 	bl	8009ef0 <malloc>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	61f0      	str	r0, [r6, #28]
 800a3f2:	b928      	cbnz	r0, 800a400 <__pow5mult+0x40>
 800a3f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a3f8:	4b1c      	ldr	r3, [pc, #112]	; (800a46c <__pow5mult+0xac>)
 800a3fa:	481d      	ldr	r0, [pc, #116]	; (800a470 <__pow5mult+0xb0>)
 800a3fc:	f000 ff60 	bl	800b2c0 <__assert_func>
 800a400:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a404:	6004      	str	r4, [r0, #0]
 800a406:	60c4      	str	r4, [r0, #12]
 800a408:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a40c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a410:	b94c      	cbnz	r4, 800a426 <__pow5mult+0x66>
 800a412:	f240 2171 	movw	r1, #625	; 0x271
 800a416:	4630      	mov	r0, r6
 800a418:	f7ff ff14 	bl	800a244 <__i2b>
 800a41c:	2300      	movs	r3, #0
 800a41e:	4604      	mov	r4, r0
 800a420:	f8c8 0008 	str.w	r0, [r8, #8]
 800a424:	6003      	str	r3, [r0, #0]
 800a426:	f04f 0900 	mov.w	r9, #0
 800a42a:	07eb      	lsls	r3, r5, #31
 800a42c:	d50a      	bpl.n	800a444 <__pow5mult+0x84>
 800a42e:	4639      	mov	r1, r7
 800a430:	4622      	mov	r2, r4
 800a432:	4630      	mov	r0, r6
 800a434:	f7ff ff1c 	bl	800a270 <__multiply>
 800a438:	4680      	mov	r8, r0
 800a43a:	4639      	mov	r1, r7
 800a43c:	4630      	mov	r0, r6
 800a43e:	f7ff fe4b 	bl	800a0d8 <_Bfree>
 800a442:	4647      	mov	r7, r8
 800a444:	106d      	asrs	r5, r5, #1
 800a446:	d00b      	beq.n	800a460 <__pow5mult+0xa0>
 800a448:	6820      	ldr	r0, [r4, #0]
 800a44a:	b938      	cbnz	r0, 800a45c <__pow5mult+0x9c>
 800a44c:	4622      	mov	r2, r4
 800a44e:	4621      	mov	r1, r4
 800a450:	4630      	mov	r0, r6
 800a452:	f7ff ff0d 	bl	800a270 <__multiply>
 800a456:	6020      	str	r0, [r4, #0]
 800a458:	f8c0 9000 	str.w	r9, [r0]
 800a45c:	4604      	mov	r4, r0
 800a45e:	e7e4      	b.n	800a42a <__pow5mult+0x6a>
 800a460:	4638      	mov	r0, r7
 800a462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a466:	bf00      	nop
 800a468:	0800be00 	.word	0x0800be00
 800a46c:	0800bc31 	.word	0x0800bc31
 800a470:	0800bcb1 	.word	0x0800bcb1

0800a474 <__lshift>:
 800a474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a478:	460c      	mov	r4, r1
 800a47a:	4607      	mov	r7, r0
 800a47c:	4691      	mov	r9, r2
 800a47e:	6923      	ldr	r3, [r4, #16]
 800a480:	6849      	ldr	r1, [r1, #4]
 800a482:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a486:	68a3      	ldr	r3, [r4, #8]
 800a488:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a48c:	f108 0601 	add.w	r6, r8, #1
 800a490:	42b3      	cmp	r3, r6
 800a492:	db0b      	blt.n	800a4ac <__lshift+0x38>
 800a494:	4638      	mov	r0, r7
 800a496:	f7ff fddf 	bl	800a058 <_Balloc>
 800a49a:	4605      	mov	r5, r0
 800a49c:	b948      	cbnz	r0, 800a4b2 <__lshift+0x3e>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a4a4:	4b27      	ldr	r3, [pc, #156]	; (800a544 <__lshift+0xd0>)
 800a4a6:	4828      	ldr	r0, [pc, #160]	; (800a548 <__lshift+0xd4>)
 800a4a8:	f000 ff0a 	bl	800b2c0 <__assert_func>
 800a4ac:	3101      	adds	r1, #1
 800a4ae:	005b      	lsls	r3, r3, #1
 800a4b0:	e7ee      	b.n	800a490 <__lshift+0x1c>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	f100 0114 	add.w	r1, r0, #20
 800a4b8:	f100 0210 	add.w	r2, r0, #16
 800a4bc:	4618      	mov	r0, r3
 800a4be:	4553      	cmp	r3, sl
 800a4c0:	db33      	blt.n	800a52a <__lshift+0xb6>
 800a4c2:	6920      	ldr	r0, [r4, #16]
 800a4c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4c8:	f104 0314 	add.w	r3, r4, #20
 800a4cc:	f019 091f 	ands.w	r9, r9, #31
 800a4d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4d8:	d02b      	beq.n	800a532 <__lshift+0xbe>
 800a4da:	468a      	mov	sl, r1
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f1c9 0e20 	rsb	lr, r9, #32
 800a4e2:	6818      	ldr	r0, [r3, #0]
 800a4e4:	fa00 f009 	lsl.w	r0, r0, r9
 800a4e8:	4310      	orrs	r0, r2
 800a4ea:	f84a 0b04 	str.w	r0, [sl], #4
 800a4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f2:	459c      	cmp	ip, r3
 800a4f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4f8:	d8f3      	bhi.n	800a4e2 <__lshift+0x6e>
 800a4fa:	ebac 0304 	sub.w	r3, ip, r4
 800a4fe:	3b15      	subs	r3, #21
 800a500:	f023 0303 	bic.w	r3, r3, #3
 800a504:	3304      	adds	r3, #4
 800a506:	f104 0015 	add.w	r0, r4, #21
 800a50a:	4584      	cmp	ip, r0
 800a50c:	bf38      	it	cc
 800a50e:	2304      	movcc	r3, #4
 800a510:	50ca      	str	r2, [r1, r3]
 800a512:	b10a      	cbz	r2, 800a518 <__lshift+0xa4>
 800a514:	f108 0602 	add.w	r6, r8, #2
 800a518:	3e01      	subs	r6, #1
 800a51a:	4638      	mov	r0, r7
 800a51c:	4621      	mov	r1, r4
 800a51e:	612e      	str	r6, [r5, #16]
 800a520:	f7ff fdda 	bl	800a0d8 <_Bfree>
 800a524:	4628      	mov	r0, r5
 800a526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a52a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a52e:	3301      	adds	r3, #1
 800a530:	e7c5      	b.n	800a4be <__lshift+0x4a>
 800a532:	3904      	subs	r1, #4
 800a534:	f853 2b04 	ldr.w	r2, [r3], #4
 800a538:	459c      	cmp	ip, r3
 800a53a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a53e:	d8f9      	bhi.n	800a534 <__lshift+0xc0>
 800a540:	e7ea      	b.n	800a518 <__lshift+0xa4>
 800a542:	bf00      	nop
 800a544:	0800bca0 	.word	0x0800bca0
 800a548:	0800bcb1 	.word	0x0800bcb1

0800a54c <__mcmp>:
 800a54c:	4603      	mov	r3, r0
 800a54e:	690a      	ldr	r2, [r1, #16]
 800a550:	6900      	ldr	r0, [r0, #16]
 800a552:	b530      	push	{r4, r5, lr}
 800a554:	1a80      	subs	r0, r0, r2
 800a556:	d10d      	bne.n	800a574 <__mcmp+0x28>
 800a558:	3314      	adds	r3, #20
 800a55a:	3114      	adds	r1, #20
 800a55c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a560:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a564:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a568:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a56c:	4295      	cmp	r5, r2
 800a56e:	d002      	beq.n	800a576 <__mcmp+0x2a>
 800a570:	d304      	bcc.n	800a57c <__mcmp+0x30>
 800a572:	2001      	movs	r0, #1
 800a574:	bd30      	pop	{r4, r5, pc}
 800a576:	42a3      	cmp	r3, r4
 800a578:	d3f4      	bcc.n	800a564 <__mcmp+0x18>
 800a57a:	e7fb      	b.n	800a574 <__mcmp+0x28>
 800a57c:	f04f 30ff 	mov.w	r0, #4294967295
 800a580:	e7f8      	b.n	800a574 <__mcmp+0x28>
	...

0800a584 <__mdiff>:
 800a584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a588:	460d      	mov	r5, r1
 800a58a:	4607      	mov	r7, r0
 800a58c:	4611      	mov	r1, r2
 800a58e:	4628      	mov	r0, r5
 800a590:	4614      	mov	r4, r2
 800a592:	f7ff ffdb 	bl	800a54c <__mcmp>
 800a596:	1e06      	subs	r6, r0, #0
 800a598:	d111      	bne.n	800a5be <__mdiff+0x3a>
 800a59a:	4631      	mov	r1, r6
 800a59c:	4638      	mov	r0, r7
 800a59e:	f7ff fd5b 	bl	800a058 <_Balloc>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	b928      	cbnz	r0, 800a5b2 <__mdiff+0x2e>
 800a5a6:	f240 2137 	movw	r1, #567	; 0x237
 800a5aa:	4b3a      	ldr	r3, [pc, #232]	; (800a694 <__mdiff+0x110>)
 800a5ac:	483a      	ldr	r0, [pc, #232]	; (800a698 <__mdiff+0x114>)
 800a5ae:	f000 fe87 	bl	800b2c0 <__assert_func>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5be:	bfa4      	itt	ge
 800a5c0:	4623      	movge	r3, r4
 800a5c2:	462c      	movge	r4, r5
 800a5c4:	4638      	mov	r0, r7
 800a5c6:	6861      	ldr	r1, [r4, #4]
 800a5c8:	bfa6      	itte	ge
 800a5ca:	461d      	movge	r5, r3
 800a5cc:	2600      	movge	r6, #0
 800a5ce:	2601      	movlt	r6, #1
 800a5d0:	f7ff fd42 	bl	800a058 <_Balloc>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	b918      	cbnz	r0, 800a5e0 <__mdiff+0x5c>
 800a5d8:	f240 2145 	movw	r1, #581	; 0x245
 800a5dc:	4b2d      	ldr	r3, [pc, #180]	; (800a694 <__mdiff+0x110>)
 800a5de:	e7e5      	b.n	800a5ac <__mdiff+0x28>
 800a5e0:	f102 0814 	add.w	r8, r2, #20
 800a5e4:	46c2      	mov	sl, r8
 800a5e6:	f04f 0c00 	mov.w	ip, #0
 800a5ea:	6927      	ldr	r7, [r4, #16]
 800a5ec:	60c6      	str	r6, [r0, #12]
 800a5ee:	692e      	ldr	r6, [r5, #16]
 800a5f0:	f104 0014 	add.w	r0, r4, #20
 800a5f4:	f105 0914 	add.w	r9, r5, #20
 800a5f8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a5fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a600:	3410      	adds	r4, #16
 800a602:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a606:	f859 3b04 	ldr.w	r3, [r9], #4
 800a60a:	fa1f f18b 	uxth.w	r1, fp
 800a60e:	4461      	add	r1, ip
 800a610:	fa1f fc83 	uxth.w	ip, r3
 800a614:	0c1b      	lsrs	r3, r3, #16
 800a616:	eba1 010c 	sub.w	r1, r1, ip
 800a61a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a61e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a622:	b289      	uxth	r1, r1
 800a624:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a628:	454e      	cmp	r6, r9
 800a62a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a62e:	f84a 1b04 	str.w	r1, [sl], #4
 800a632:	d8e6      	bhi.n	800a602 <__mdiff+0x7e>
 800a634:	1b73      	subs	r3, r6, r5
 800a636:	3b15      	subs	r3, #21
 800a638:	f023 0303 	bic.w	r3, r3, #3
 800a63c:	3515      	adds	r5, #21
 800a63e:	3304      	adds	r3, #4
 800a640:	42ae      	cmp	r6, r5
 800a642:	bf38      	it	cc
 800a644:	2304      	movcc	r3, #4
 800a646:	4418      	add	r0, r3
 800a648:	4443      	add	r3, r8
 800a64a:	461e      	mov	r6, r3
 800a64c:	4605      	mov	r5, r0
 800a64e:	4575      	cmp	r5, lr
 800a650:	d30e      	bcc.n	800a670 <__mdiff+0xec>
 800a652:	f10e 0103 	add.w	r1, lr, #3
 800a656:	1a09      	subs	r1, r1, r0
 800a658:	f021 0103 	bic.w	r1, r1, #3
 800a65c:	3803      	subs	r0, #3
 800a65e:	4586      	cmp	lr, r0
 800a660:	bf38      	it	cc
 800a662:	2100      	movcc	r1, #0
 800a664:	440b      	add	r3, r1
 800a666:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a66a:	b189      	cbz	r1, 800a690 <__mdiff+0x10c>
 800a66c:	6117      	str	r7, [r2, #16]
 800a66e:	e7a3      	b.n	800a5b8 <__mdiff+0x34>
 800a670:	f855 8b04 	ldr.w	r8, [r5], #4
 800a674:	fa1f f188 	uxth.w	r1, r8
 800a678:	4461      	add	r1, ip
 800a67a:	140c      	asrs	r4, r1, #16
 800a67c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a680:	b289      	uxth	r1, r1
 800a682:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a686:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a68a:	f846 1b04 	str.w	r1, [r6], #4
 800a68e:	e7de      	b.n	800a64e <__mdiff+0xca>
 800a690:	3f01      	subs	r7, #1
 800a692:	e7e8      	b.n	800a666 <__mdiff+0xe2>
 800a694:	0800bca0 	.word	0x0800bca0
 800a698:	0800bcb1 	.word	0x0800bcb1

0800a69c <__d2b>:
 800a69c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a69e:	2101      	movs	r1, #1
 800a6a0:	4617      	mov	r7, r2
 800a6a2:	461c      	mov	r4, r3
 800a6a4:	9e08      	ldr	r6, [sp, #32]
 800a6a6:	f7ff fcd7 	bl	800a058 <_Balloc>
 800a6aa:	4605      	mov	r5, r0
 800a6ac:	b930      	cbnz	r0, 800a6bc <__d2b+0x20>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	f240 310f 	movw	r1, #783	; 0x30f
 800a6b4:	4b22      	ldr	r3, [pc, #136]	; (800a740 <__d2b+0xa4>)
 800a6b6:	4823      	ldr	r0, [pc, #140]	; (800a744 <__d2b+0xa8>)
 800a6b8:	f000 fe02 	bl	800b2c0 <__assert_func>
 800a6bc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a6c0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a6c4:	bb24      	cbnz	r4, 800a710 <__d2b+0x74>
 800a6c6:	2f00      	cmp	r7, #0
 800a6c8:	9301      	str	r3, [sp, #4]
 800a6ca:	d026      	beq.n	800a71a <__d2b+0x7e>
 800a6cc:	4668      	mov	r0, sp
 800a6ce:	9700      	str	r7, [sp, #0]
 800a6d0:	f7ff fd8a 	bl	800a1e8 <__lo0bits>
 800a6d4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a6d8:	b1e8      	cbz	r0, 800a716 <__d2b+0x7a>
 800a6da:	f1c0 0320 	rsb	r3, r0, #32
 800a6de:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e2:	430b      	orrs	r3, r1
 800a6e4:	40c2      	lsrs	r2, r0
 800a6e6:	616b      	str	r3, [r5, #20]
 800a6e8:	9201      	str	r2, [sp, #4]
 800a6ea:	9b01      	ldr	r3, [sp, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	bf14      	ite	ne
 800a6f0:	2102      	movne	r1, #2
 800a6f2:	2101      	moveq	r1, #1
 800a6f4:	61ab      	str	r3, [r5, #24]
 800a6f6:	6129      	str	r1, [r5, #16]
 800a6f8:	b1bc      	cbz	r4, 800a72a <__d2b+0x8e>
 800a6fa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a6fe:	4404      	add	r4, r0
 800a700:	6034      	str	r4, [r6, #0]
 800a702:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a708:	6018      	str	r0, [r3, #0]
 800a70a:	4628      	mov	r0, r5
 800a70c:	b003      	add	sp, #12
 800a70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a710:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a714:	e7d7      	b.n	800a6c6 <__d2b+0x2a>
 800a716:	6169      	str	r1, [r5, #20]
 800a718:	e7e7      	b.n	800a6ea <__d2b+0x4e>
 800a71a:	a801      	add	r0, sp, #4
 800a71c:	f7ff fd64 	bl	800a1e8 <__lo0bits>
 800a720:	9b01      	ldr	r3, [sp, #4]
 800a722:	2101      	movs	r1, #1
 800a724:	616b      	str	r3, [r5, #20]
 800a726:	3020      	adds	r0, #32
 800a728:	e7e5      	b.n	800a6f6 <__d2b+0x5a>
 800a72a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a72e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a732:	6030      	str	r0, [r6, #0]
 800a734:	6918      	ldr	r0, [r3, #16]
 800a736:	f7ff fd37 	bl	800a1a8 <__hi0bits>
 800a73a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a73e:	e7e2      	b.n	800a706 <__d2b+0x6a>
 800a740:	0800bca0 	.word	0x0800bca0
 800a744:	0800bcb1 	.word	0x0800bcb1

0800a748 <__ssputs_r>:
 800a748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a74c:	461f      	mov	r7, r3
 800a74e:	688e      	ldr	r6, [r1, #8]
 800a750:	4682      	mov	sl, r0
 800a752:	42be      	cmp	r6, r7
 800a754:	460c      	mov	r4, r1
 800a756:	4690      	mov	r8, r2
 800a758:	680b      	ldr	r3, [r1, #0]
 800a75a:	d82c      	bhi.n	800a7b6 <__ssputs_r+0x6e>
 800a75c:	898a      	ldrh	r2, [r1, #12]
 800a75e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a762:	d026      	beq.n	800a7b2 <__ssputs_r+0x6a>
 800a764:	6965      	ldr	r5, [r4, #20]
 800a766:	6909      	ldr	r1, [r1, #16]
 800a768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a76c:	eba3 0901 	sub.w	r9, r3, r1
 800a770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a774:	1c7b      	adds	r3, r7, #1
 800a776:	444b      	add	r3, r9
 800a778:	106d      	asrs	r5, r5, #1
 800a77a:	429d      	cmp	r5, r3
 800a77c:	bf38      	it	cc
 800a77e:	461d      	movcc	r5, r3
 800a780:	0553      	lsls	r3, r2, #21
 800a782:	d527      	bpl.n	800a7d4 <__ssputs_r+0x8c>
 800a784:	4629      	mov	r1, r5
 800a786:	f7ff fbdb 	bl	8009f40 <_malloc_r>
 800a78a:	4606      	mov	r6, r0
 800a78c:	b360      	cbz	r0, 800a7e8 <__ssputs_r+0xa0>
 800a78e:	464a      	mov	r2, r9
 800a790:	6921      	ldr	r1, [r4, #16]
 800a792:	f7fe fce8 	bl	8009166 <memcpy>
 800a796:	89a3      	ldrh	r3, [r4, #12]
 800a798:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7a0:	81a3      	strh	r3, [r4, #12]
 800a7a2:	6126      	str	r6, [r4, #16]
 800a7a4:	444e      	add	r6, r9
 800a7a6:	6026      	str	r6, [r4, #0]
 800a7a8:	463e      	mov	r6, r7
 800a7aa:	6165      	str	r5, [r4, #20]
 800a7ac:	eba5 0509 	sub.w	r5, r5, r9
 800a7b0:	60a5      	str	r5, [r4, #8]
 800a7b2:	42be      	cmp	r6, r7
 800a7b4:	d900      	bls.n	800a7b8 <__ssputs_r+0x70>
 800a7b6:	463e      	mov	r6, r7
 800a7b8:	4632      	mov	r2, r6
 800a7ba:	4641      	mov	r1, r8
 800a7bc:	6820      	ldr	r0, [r4, #0]
 800a7be:	f000 fd54 	bl	800b26a <memmove>
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	68a3      	ldr	r3, [r4, #8]
 800a7c6:	1b9b      	subs	r3, r3, r6
 800a7c8:	60a3      	str	r3, [r4, #8]
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	4433      	add	r3, r6
 800a7ce:	6023      	str	r3, [r4, #0]
 800a7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7d4:	462a      	mov	r2, r5
 800a7d6:	f000 fdb7 	bl	800b348 <_realloc_r>
 800a7da:	4606      	mov	r6, r0
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d1e0      	bne.n	800a7a2 <__ssputs_r+0x5a>
 800a7e0:	4650      	mov	r0, sl
 800a7e2:	6921      	ldr	r1, [r4, #16]
 800a7e4:	f7ff fb3c 	bl	8009e60 <_free_r>
 800a7e8:	230c      	movs	r3, #12
 800a7ea:	f8ca 3000 	str.w	r3, [sl]
 800a7ee:	89a3      	ldrh	r3, [r4, #12]
 800a7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7f8:	81a3      	strh	r3, [r4, #12]
 800a7fa:	e7e9      	b.n	800a7d0 <__ssputs_r+0x88>

0800a7fc <_svfiprintf_r>:
 800a7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a800:	4698      	mov	r8, r3
 800a802:	898b      	ldrh	r3, [r1, #12]
 800a804:	4607      	mov	r7, r0
 800a806:	061b      	lsls	r3, r3, #24
 800a808:	460d      	mov	r5, r1
 800a80a:	4614      	mov	r4, r2
 800a80c:	b09d      	sub	sp, #116	; 0x74
 800a80e:	d50e      	bpl.n	800a82e <_svfiprintf_r+0x32>
 800a810:	690b      	ldr	r3, [r1, #16]
 800a812:	b963      	cbnz	r3, 800a82e <_svfiprintf_r+0x32>
 800a814:	2140      	movs	r1, #64	; 0x40
 800a816:	f7ff fb93 	bl	8009f40 <_malloc_r>
 800a81a:	6028      	str	r0, [r5, #0]
 800a81c:	6128      	str	r0, [r5, #16]
 800a81e:	b920      	cbnz	r0, 800a82a <_svfiprintf_r+0x2e>
 800a820:	230c      	movs	r3, #12
 800a822:	603b      	str	r3, [r7, #0]
 800a824:	f04f 30ff 	mov.w	r0, #4294967295
 800a828:	e0d0      	b.n	800a9cc <_svfiprintf_r+0x1d0>
 800a82a:	2340      	movs	r3, #64	; 0x40
 800a82c:	616b      	str	r3, [r5, #20]
 800a82e:	2300      	movs	r3, #0
 800a830:	9309      	str	r3, [sp, #36]	; 0x24
 800a832:	2320      	movs	r3, #32
 800a834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a838:	2330      	movs	r3, #48	; 0x30
 800a83a:	f04f 0901 	mov.w	r9, #1
 800a83e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a842:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a9e4 <_svfiprintf_r+0x1e8>
 800a846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a84a:	4623      	mov	r3, r4
 800a84c:	469a      	mov	sl, r3
 800a84e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a852:	b10a      	cbz	r2, 800a858 <_svfiprintf_r+0x5c>
 800a854:	2a25      	cmp	r2, #37	; 0x25
 800a856:	d1f9      	bne.n	800a84c <_svfiprintf_r+0x50>
 800a858:	ebba 0b04 	subs.w	fp, sl, r4
 800a85c:	d00b      	beq.n	800a876 <_svfiprintf_r+0x7a>
 800a85e:	465b      	mov	r3, fp
 800a860:	4622      	mov	r2, r4
 800a862:	4629      	mov	r1, r5
 800a864:	4638      	mov	r0, r7
 800a866:	f7ff ff6f 	bl	800a748 <__ssputs_r>
 800a86a:	3001      	adds	r0, #1
 800a86c:	f000 80a9 	beq.w	800a9c2 <_svfiprintf_r+0x1c6>
 800a870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a872:	445a      	add	r2, fp
 800a874:	9209      	str	r2, [sp, #36]	; 0x24
 800a876:	f89a 3000 	ldrb.w	r3, [sl]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f000 80a1 	beq.w	800a9c2 <_svfiprintf_r+0x1c6>
 800a880:	2300      	movs	r3, #0
 800a882:	f04f 32ff 	mov.w	r2, #4294967295
 800a886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a88a:	f10a 0a01 	add.w	sl, sl, #1
 800a88e:	9304      	str	r3, [sp, #16]
 800a890:	9307      	str	r3, [sp, #28]
 800a892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a896:	931a      	str	r3, [sp, #104]	; 0x68
 800a898:	4654      	mov	r4, sl
 800a89a:	2205      	movs	r2, #5
 800a89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8a0:	4850      	ldr	r0, [pc, #320]	; (800a9e4 <_svfiprintf_r+0x1e8>)
 800a8a2:	f7fe fc52 	bl	800914a <memchr>
 800a8a6:	9a04      	ldr	r2, [sp, #16]
 800a8a8:	b9d8      	cbnz	r0, 800a8e2 <_svfiprintf_r+0xe6>
 800a8aa:	06d0      	lsls	r0, r2, #27
 800a8ac:	bf44      	itt	mi
 800a8ae:	2320      	movmi	r3, #32
 800a8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8b4:	0711      	lsls	r1, r2, #28
 800a8b6:	bf44      	itt	mi
 800a8b8:	232b      	movmi	r3, #43	; 0x2b
 800a8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8be:	f89a 3000 	ldrb.w	r3, [sl]
 800a8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a8c4:	d015      	beq.n	800a8f2 <_svfiprintf_r+0xf6>
 800a8c6:	4654      	mov	r4, sl
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	f04f 0c0a 	mov.w	ip, #10
 800a8ce:	9a07      	ldr	r2, [sp, #28]
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8d6:	3b30      	subs	r3, #48	; 0x30
 800a8d8:	2b09      	cmp	r3, #9
 800a8da:	d94d      	bls.n	800a978 <_svfiprintf_r+0x17c>
 800a8dc:	b1b0      	cbz	r0, 800a90c <_svfiprintf_r+0x110>
 800a8de:	9207      	str	r2, [sp, #28]
 800a8e0:	e014      	b.n	800a90c <_svfiprintf_r+0x110>
 800a8e2:	eba0 0308 	sub.w	r3, r0, r8
 800a8e6:	fa09 f303 	lsl.w	r3, r9, r3
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	46a2      	mov	sl, r4
 800a8ee:	9304      	str	r3, [sp, #16]
 800a8f0:	e7d2      	b.n	800a898 <_svfiprintf_r+0x9c>
 800a8f2:	9b03      	ldr	r3, [sp, #12]
 800a8f4:	1d19      	adds	r1, r3, #4
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	9103      	str	r1, [sp, #12]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	bfbb      	ittet	lt
 800a8fe:	425b      	neglt	r3, r3
 800a900:	f042 0202 	orrlt.w	r2, r2, #2
 800a904:	9307      	strge	r3, [sp, #28]
 800a906:	9307      	strlt	r3, [sp, #28]
 800a908:	bfb8      	it	lt
 800a90a:	9204      	strlt	r2, [sp, #16]
 800a90c:	7823      	ldrb	r3, [r4, #0]
 800a90e:	2b2e      	cmp	r3, #46	; 0x2e
 800a910:	d10c      	bne.n	800a92c <_svfiprintf_r+0x130>
 800a912:	7863      	ldrb	r3, [r4, #1]
 800a914:	2b2a      	cmp	r3, #42	; 0x2a
 800a916:	d134      	bne.n	800a982 <_svfiprintf_r+0x186>
 800a918:	9b03      	ldr	r3, [sp, #12]
 800a91a:	3402      	adds	r4, #2
 800a91c:	1d1a      	adds	r2, r3, #4
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	9203      	str	r2, [sp, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	bfb8      	it	lt
 800a926:	f04f 33ff 	movlt.w	r3, #4294967295
 800a92a:	9305      	str	r3, [sp, #20]
 800a92c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a9e8 <_svfiprintf_r+0x1ec>
 800a930:	2203      	movs	r2, #3
 800a932:	4650      	mov	r0, sl
 800a934:	7821      	ldrb	r1, [r4, #0]
 800a936:	f7fe fc08 	bl	800914a <memchr>
 800a93a:	b138      	cbz	r0, 800a94c <_svfiprintf_r+0x150>
 800a93c:	2240      	movs	r2, #64	; 0x40
 800a93e:	9b04      	ldr	r3, [sp, #16]
 800a940:	eba0 000a 	sub.w	r0, r0, sl
 800a944:	4082      	lsls	r2, r0
 800a946:	4313      	orrs	r3, r2
 800a948:	3401      	adds	r4, #1
 800a94a:	9304      	str	r3, [sp, #16]
 800a94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a950:	2206      	movs	r2, #6
 800a952:	4826      	ldr	r0, [pc, #152]	; (800a9ec <_svfiprintf_r+0x1f0>)
 800a954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a958:	f7fe fbf7 	bl	800914a <memchr>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d038      	beq.n	800a9d2 <_svfiprintf_r+0x1d6>
 800a960:	4b23      	ldr	r3, [pc, #140]	; (800a9f0 <_svfiprintf_r+0x1f4>)
 800a962:	bb1b      	cbnz	r3, 800a9ac <_svfiprintf_r+0x1b0>
 800a964:	9b03      	ldr	r3, [sp, #12]
 800a966:	3307      	adds	r3, #7
 800a968:	f023 0307 	bic.w	r3, r3, #7
 800a96c:	3308      	adds	r3, #8
 800a96e:	9303      	str	r3, [sp, #12]
 800a970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a972:	4433      	add	r3, r6
 800a974:	9309      	str	r3, [sp, #36]	; 0x24
 800a976:	e768      	b.n	800a84a <_svfiprintf_r+0x4e>
 800a978:	460c      	mov	r4, r1
 800a97a:	2001      	movs	r0, #1
 800a97c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a980:	e7a6      	b.n	800a8d0 <_svfiprintf_r+0xd4>
 800a982:	2300      	movs	r3, #0
 800a984:	f04f 0c0a 	mov.w	ip, #10
 800a988:	4619      	mov	r1, r3
 800a98a:	3401      	adds	r4, #1
 800a98c:	9305      	str	r3, [sp, #20]
 800a98e:	4620      	mov	r0, r4
 800a990:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a994:	3a30      	subs	r2, #48	; 0x30
 800a996:	2a09      	cmp	r2, #9
 800a998:	d903      	bls.n	800a9a2 <_svfiprintf_r+0x1a6>
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d0c6      	beq.n	800a92c <_svfiprintf_r+0x130>
 800a99e:	9105      	str	r1, [sp, #20]
 800a9a0:	e7c4      	b.n	800a92c <_svfiprintf_r+0x130>
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9aa:	e7f0      	b.n	800a98e <_svfiprintf_r+0x192>
 800a9ac:	ab03      	add	r3, sp, #12
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	462a      	mov	r2, r5
 800a9b2:	4638      	mov	r0, r7
 800a9b4:	4b0f      	ldr	r3, [pc, #60]	; (800a9f4 <_svfiprintf_r+0x1f8>)
 800a9b6:	a904      	add	r1, sp, #16
 800a9b8:	f7fd fe34 	bl	8008624 <_printf_float>
 800a9bc:	1c42      	adds	r2, r0, #1
 800a9be:	4606      	mov	r6, r0
 800a9c0:	d1d6      	bne.n	800a970 <_svfiprintf_r+0x174>
 800a9c2:	89ab      	ldrh	r3, [r5, #12]
 800a9c4:	065b      	lsls	r3, r3, #25
 800a9c6:	f53f af2d 	bmi.w	800a824 <_svfiprintf_r+0x28>
 800a9ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9cc:	b01d      	add	sp, #116	; 0x74
 800a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d2:	ab03      	add	r3, sp, #12
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	462a      	mov	r2, r5
 800a9d8:	4638      	mov	r0, r7
 800a9da:	4b06      	ldr	r3, [pc, #24]	; (800a9f4 <_svfiprintf_r+0x1f8>)
 800a9dc:	a904      	add	r1, sp, #16
 800a9de:	f7fe f8c1 	bl	8008b64 <_printf_i>
 800a9e2:	e7eb      	b.n	800a9bc <_svfiprintf_r+0x1c0>
 800a9e4:	0800be0c 	.word	0x0800be0c
 800a9e8:	0800be12 	.word	0x0800be12
 800a9ec:	0800be16 	.word	0x0800be16
 800a9f0:	08008625 	.word	0x08008625
 800a9f4:	0800a749 	.word	0x0800a749

0800a9f8 <_sungetc_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	1c4b      	adds	r3, r1, #1
 800a9fc:	4614      	mov	r4, r2
 800a9fe:	d103      	bne.n	800aa08 <_sungetc_r+0x10>
 800aa00:	f04f 35ff 	mov.w	r5, #4294967295
 800aa04:	4628      	mov	r0, r5
 800aa06:	bd38      	pop	{r3, r4, r5, pc}
 800aa08:	8993      	ldrh	r3, [r2, #12]
 800aa0a:	b2cd      	uxtb	r5, r1
 800aa0c:	f023 0320 	bic.w	r3, r3, #32
 800aa10:	8193      	strh	r3, [r2, #12]
 800aa12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa14:	6852      	ldr	r2, [r2, #4]
 800aa16:	b18b      	cbz	r3, 800aa3c <_sungetc_r+0x44>
 800aa18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	dd08      	ble.n	800aa30 <_sungetc_r+0x38>
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	1e5a      	subs	r2, r3, #1
 800aa22:	6022      	str	r2, [r4, #0]
 800aa24:	f803 5c01 	strb.w	r5, [r3, #-1]
 800aa28:	6863      	ldr	r3, [r4, #4]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	6063      	str	r3, [r4, #4]
 800aa2e:	e7e9      	b.n	800aa04 <_sungetc_r+0xc>
 800aa30:	4621      	mov	r1, r4
 800aa32:	f000 fbe2 	bl	800b1fa <__submore>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d0f1      	beq.n	800aa1e <_sungetc_r+0x26>
 800aa3a:	e7e1      	b.n	800aa00 <_sungetc_r+0x8>
 800aa3c:	6921      	ldr	r1, [r4, #16]
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	b151      	cbz	r1, 800aa58 <_sungetc_r+0x60>
 800aa42:	4299      	cmp	r1, r3
 800aa44:	d208      	bcs.n	800aa58 <_sungetc_r+0x60>
 800aa46:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800aa4a:	42a9      	cmp	r1, r5
 800aa4c:	d104      	bne.n	800aa58 <_sungetc_r+0x60>
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	3201      	adds	r2, #1
 800aa52:	6023      	str	r3, [r4, #0]
 800aa54:	6062      	str	r2, [r4, #4]
 800aa56:	e7d5      	b.n	800aa04 <_sungetc_r+0xc>
 800aa58:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800aa5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa60:	6363      	str	r3, [r4, #52]	; 0x34
 800aa62:	2303      	movs	r3, #3
 800aa64:	63a3      	str	r3, [r4, #56]	; 0x38
 800aa66:	4623      	mov	r3, r4
 800aa68:	f803 5f46 	strb.w	r5, [r3, #70]!
 800aa6c:	6023      	str	r3, [r4, #0]
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e7dc      	b.n	800aa2c <_sungetc_r+0x34>

0800aa72 <__ssrefill_r>:
 800aa72:	b510      	push	{r4, lr}
 800aa74:	460c      	mov	r4, r1
 800aa76:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aa78:	b169      	cbz	r1, 800aa96 <__ssrefill_r+0x24>
 800aa7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa7e:	4299      	cmp	r1, r3
 800aa80:	d001      	beq.n	800aa86 <__ssrefill_r+0x14>
 800aa82:	f7ff f9ed 	bl	8009e60 <_free_r>
 800aa86:	2000      	movs	r0, #0
 800aa88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa8a:	6360      	str	r0, [r4, #52]	; 0x34
 800aa8c:	6063      	str	r3, [r4, #4]
 800aa8e:	b113      	cbz	r3, 800aa96 <__ssrefill_r+0x24>
 800aa90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aa92:	6023      	str	r3, [r4, #0]
 800aa94:	bd10      	pop	{r4, pc}
 800aa96:	6923      	ldr	r3, [r4, #16]
 800aa98:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9c:	6023      	str	r3, [r4, #0]
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	6063      	str	r3, [r4, #4]
 800aaa2:	89a3      	ldrh	r3, [r4, #12]
 800aaa4:	f043 0320 	orr.w	r3, r3, #32
 800aaa8:	81a3      	strh	r3, [r4, #12]
 800aaaa:	e7f3      	b.n	800aa94 <__ssrefill_r+0x22>

0800aaac <__ssvfiscanf_r>:
 800aaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab0:	460c      	mov	r4, r1
 800aab2:	2100      	movs	r1, #0
 800aab4:	4606      	mov	r6, r0
 800aab6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800aaba:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800aabe:	49a6      	ldr	r1, [pc, #664]	; (800ad58 <__ssvfiscanf_r+0x2ac>)
 800aac0:	f10d 0804 	add.w	r8, sp, #4
 800aac4:	91a0      	str	r1, [sp, #640]	; 0x280
 800aac6:	49a5      	ldr	r1, [pc, #660]	; (800ad5c <__ssvfiscanf_r+0x2b0>)
 800aac8:	4fa5      	ldr	r7, [pc, #660]	; (800ad60 <__ssvfiscanf_r+0x2b4>)
 800aaca:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ad64 <__ssvfiscanf_r+0x2b8>
 800aace:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800aad2:	91a1      	str	r1, [sp, #644]	; 0x284
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	7813      	ldrb	r3, [r2, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 815a 	beq.w	800ad92 <__ssvfiscanf_r+0x2e6>
 800aade:	5cf9      	ldrb	r1, [r7, r3]
 800aae0:	1c55      	adds	r5, r2, #1
 800aae2:	f011 0108 	ands.w	r1, r1, #8
 800aae6:	d019      	beq.n	800ab1c <__ssvfiscanf_r+0x70>
 800aae8:	6863      	ldr	r3, [r4, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	dd0f      	ble.n	800ab0e <__ssvfiscanf_r+0x62>
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	781a      	ldrb	r2, [r3, #0]
 800aaf2:	5cba      	ldrb	r2, [r7, r2]
 800aaf4:	0712      	lsls	r2, r2, #28
 800aaf6:	d401      	bmi.n	800aafc <__ssvfiscanf_r+0x50>
 800aaf8:	462a      	mov	r2, r5
 800aafa:	e7ec      	b.n	800aad6 <__ssvfiscanf_r+0x2a>
 800aafc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800aafe:	3301      	adds	r3, #1
 800ab00:	3201      	adds	r2, #1
 800ab02:	9245      	str	r2, [sp, #276]	; 0x114
 800ab04:	6862      	ldr	r2, [r4, #4]
 800ab06:	6023      	str	r3, [r4, #0]
 800ab08:	3a01      	subs	r2, #1
 800ab0a:	6062      	str	r2, [r4, #4]
 800ab0c:	e7ec      	b.n	800aae8 <__ssvfiscanf_r+0x3c>
 800ab0e:	4621      	mov	r1, r4
 800ab10:	4630      	mov	r0, r6
 800ab12:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ab14:	4798      	blx	r3
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d0e9      	beq.n	800aaee <__ssvfiscanf_r+0x42>
 800ab1a:	e7ed      	b.n	800aaf8 <__ssvfiscanf_r+0x4c>
 800ab1c:	2b25      	cmp	r3, #37	; 0x25
 800ab1e:	d012      	beq.n	800ab46 <__ssvfiscanf_r+0x9a>
 800ab20:	469a      	mov	sl, r3
 800ab22:	6863      	ldr	r3, [r4, #4]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f340 8092 	ble.w	800ac4e <__ssvfiscanf_r+0x1a2>
 800ab2a:	6822      	ldr	r2, [r4, #0]
 800ab2c:	7813      	ldrb	r3, [r2, #0]
 800ab2e:	4553      	cmp	r3, sl
 800ab30:	f040 812f 	bne.w	800ad92 <__ssvfiscanf_r+0x2e6>
 800ab34:	6863      	ldr	r3, [r4, #4]
 800ab36:	3201      	adds	r2, #1
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	6063      	str	r3, [r4, #4]
 800ab3c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ab3e:	6022      	str	r2, [r4, #0]
 800ab40:	3301      	adds	r3, #1
 800ab42:	9345      	str	r3, [sp, #276]	; 0x114
 800ab44:	e7d8      	b.n	800aaf8 <__ssvfiscanf_r+0x4c>
 800ab46:	9141      	str	r1, [sp, #260]	; 0x104
 800ab48:	9143      	str	r1, [sp, #268]	; 0x10c
 800ab4a:	7853      	ldrb	r3, [r2, #1]
 800ab4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ab4e:	bf04      	itt	eq
 800ab50:	2310      	moveq	r3, #16
 800ab52:	1c95      	addeq	r5, r2, #2
 800ab54:	f04f 020a 	mov.w	r2, #10
 800ab58:	bf08      	it	eq
 800ab5a:	9341      	streq	r3, [sp, #260]	; 0x104
 800ab5c:	46aa      	mov	sl, r5
 800ab5e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ab62:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ab66:	2b09      	cmp	r3, #9
 800ab68:	d91c      	bls.n	800aba4 <__ssvfiscanf_r+0xf8>
 800ab6a:	2203      	movs	r2, #3
 800ab6c:	487d      	ldr	r0, [pc, #500]	; (800ad64 <__ssvfiscanf_r+0x2b8>)
 800ab6e:	f7fe faec 	bl	800914a <memchr>
 800ab72:	b138      	cbz	r0, 800ab84 <__ssvfiscanf_r+0xd8>
 800ab74:	2301      	movs	r3, #1
 800ab76:	4655      	mov	r5, sl
 800ab78:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ab7a:	eba0 0009 	sub.w	r0, r0, r9
 800ab7e:	4083      	lsls	r3, r0
 800ab80:	4313      	orrs	r3, r2
 800ab82:	9341      	str	r3, [sp, #260]	; 0x104
 800ab84:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ab88:	2b78      	cmp	r3, #120	; 0x78
 800ab8a:	d806      	bhi.n	800ab9a <__ssvfiscanf_r+0xee>
 800ab8c:	2b57      	cmp	r3, #87	; 0x57
 800ab8e:	d810      	bhi.n	800abb2 <__ssvfiscanf_r+0x106>
 800ab90:	2b25      	cmp	r3, #37	; 0x25
 800ab92:	d0c5      	beq.n	800ab20 <__ssvfiscanf_r+0x74>
 800ab94:	d856      	bhi.n	800ac44 <__ssvfiscanf_r+0x198>
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d064      	beq.n	800ac64 <__ssvfiscanf_r+0x1b8>
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	9347      	str	r3, [sp, #284]	; 0x11c
 800ab9e:	230a      	movs	r3, #10
 800aba0:	9342      	str	r3, [sp, #264]	; 0x108
 800aba2:	e075      	b.n	800ac90 <__ssvfiscanf_r+0x1e4>
 800aba4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aba6:	4655      	mov	r5, sl
 800aba8:	fb02 1103 	mla	r1, r2, r3, r1
 800abac:	3930      	subs	r1, #48	; 0x30
 800abae:	9143      	str	r1, [sp, #268]	; 0x10c
 800abb0:	e7d4      	b.n	800ab5c <__ssvfiscanf_r+0xb0>
 800abb2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800abb6:	2a20      	cmp	r2, #32
 800abb8:	d8ef      	bhi.n	800ab9a <__ssvfiscanf_r+0xee>
 800abba:	a101      	add	r1, pc, #4	; (adr r1, 800abc0 <__ssvfiscanf_r+0x114>)
 800abbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800abc0:	0800ac73 	.word	0x0800ac73
 800abc4:	0800ab9b 	.word	0x0800ab9b
 800abc8:	0800ab9b 	.word	0x0800ab9b
 800abcc:	0800acd1 	.word	0x0800acd1
 800abd0:	0800ab9b 	.word	0x0800ab9b
 800abd4:	0800ab9b 	.word	0x0800ab9b
 800abd8:	0800ab9b 	.word	0x0800ab9b
 800abdc:	0800ab9b 	.word	0x0800ab9b
 800abe0:	0800ab9b 	.word	0x0800ab9b
 800abe4:	0800ab9b 	.word	0x0800ab9b
 800abe8:	0800ab9b 	.word	0x0800ab9b
 800abec:	0800ace7 	.word	0x0800ace7
 800abf0:	0800accd 	.word	0x0800accd
 800abf4:	0800ac4b 	.word	0x0800ac4b
 800abf8:	0800ac4b 	.word	0x0800ac4b
 800abfc:	0800ac4b 	.word	0x0800ac4b
 800ac00:	0800ab9b 	.word	0x0800ab9b
 800ac04:	0800ac89 	.word	0x0800ac89
 800ac08:	0800ab9b 	.word	0x0800ab9b
 800ac0c:	0800ab9b 	.word	0x0800ab9b
 800ac10:	0800ab9b 	.word	0x0800ab9b
 800ac14:	0800ab9b 	.word	0x0800ab9b
 800ac18:	0800acf7 	.word	0x0800acf7
 800ac1c:	0800acc5 	.word	0x0800acc5
 800ac20:	0800ac6b 	.word	0x0800ac6b
 800ac24:	0800ab9b 	.word	0x0800ab9b
 800ac28:	0800ab9b 	.word	0x0800ab9b
 800ac2c:	0800acf3 	.word	0x0800acf3
 800ac30:	0800ab9b 	.word	0x0800ab9b
 800ac34:	0800accd 	.word	0x0800accd
 800ac38:	0800ab9b 	.word	0x0800ab9b
 800ac3c:	0800ab9b 	.word	0x0800ab9b
 800ac40:	0800ac73 	.word	0x0800ac73
 800ac44:	3b45      	subs	r3, #69	; 0x45
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d8a7      	bhi.n	800ab9a <__ssvfiscanf_r+0xee>
 800ac4a:	2305      	movs	r3, #5
 800ac4c:	e01f      	b.n	800ac8e <__ssvfiscanf_r+0x1e2>
 800ac4e:	4621      	mov	r1, r4
 800ac50:	4630      	mov	r0, r6
 800ac52:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ac54:	4798      	blx	r3
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f43f af67 	beq.w	800ab2a <__ssvfiscanf_r+0x7e>
 800ac5c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f040 808d 	bne.w	800ad7e <__ssvfiscanf_r+0x2d2>
 800ac64:	f04f 30ff 	mov.w	r0, #4294967295
 800ac68:	e08f      	b.n	800ad8a <__ssvfiscanf_r+0x2de>
 800ac6a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ac6c:	f042 0220 	orr.w	r2, r2, #32
 800ac70:	9241      	str	r2, [sp, #260]	; 0x104
 800ac72:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ac74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac78:	9241      	str	r2, [sp, #260]	; 0x104
 800ac7a:	2210      	movs	r2, #16
 800ac7c:	2b6f      	cmp	r3, #111	; 0x6f
 800ac7e:	bf34      	ite	cc
 800ac80:	2303      	movcc	r3, #3
 800ac82:	2304      	movcs	r3, #4
 800ac84:	9242      	str	r2, [sp, #264]	; 0x108
 800ac86:	e002      	b.n	800ac8e <__ssvfiscanf_r+0x1e2>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	9342      	str	r3, [sp, #264]	; 0x108
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	9347      	str	r3, [sp, #284]	; 0x11c
 800ac90:	6863      	ldr	r3, [r4, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	dd3d      	ble.n	800ad12 <__ssvfiscanf_r+0x266>
 800ac96:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ac98:	0659      	lsls	r1, r3, #25
 800ac9a:	d404      	bmi.n	800aca6 <__ssvfiscanf_r+0x1fa>
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	781a      	ldrb	r2, [r3, #0]
 800aca0:	5cba      	ldrb	r2, [r7, r2]
 800aca2:	0712      	lsls	r2, r2, #28
 800aca4:	d43c      	bmi.n	800ad20 <__ssvfiscanf_r+0x274>
 800aca6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	dc4b      	bgt.n	800ad44 <__ssvfiscanf_r+0x298>
 800acac:	466b      	mov	r3, sp
 800acae:	4622      	mov	r2, r4
 800acb0:	4630      	mov	r0, r6
 800acb2:	a941      	add	r1, sp, #260	; 0x104
 800acb4:	f000 f872 	bl	800ad9c <_scanf_chars>
 800acb8:	2801      	cmp	r0, #1
 800acba:	d06a      	beq.n	800ad92 <__ssvfiscanf_r+0x2e6>
 800acbc:	2802      	cmp	r0, #2
 800acbe:	f47f af1b 	bne.w	800aaf8 <__ssvfiscanf_r+0x4c>
 800acc2:	e7cb      	b.n	800ac5c <__ssvfiscanf_r+0x1b0>
 800acc4:	2308      	movs	r3, #8
 800acc6:	9342      	str	r3, [sp, #264]	; 0x108
 800acc8:	2304      	movs	r3, #4
 800acca:	e7e0      	b.n	800ac8e <__ssvfiscanf_r+0x1e2>
 800accc:	220a      	movs	r2, #10
 800acce:	e7d5      	b.n	800ac7c <__ssvfiscanf_r+0x1d0>
 800acd0:	4629      	mov	r1, r5
 800acd2:	4640      	mov	r0, r8
 800acd4:	f000 fa58 	bl	800b188 <__sccl>
 800acd8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800acda:	4605      	mov	r5, r0
 800acdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ace0:	9341      	str	r3, [sp, #260]	; 0x104
 800ace2:	2301      	movs	r3, #1
 800ace4:	e7d3      	b.n	800ac8e <__ssvfiscanf_r+0x1e2>
 800ace6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ace8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acec:	9341      	str	r3, [sp, #260]	; 0x104
 800acee:	2300      	movs	r3, #0
 800acf0:	e7cd      	b.n	800ac8e <__ssvfiscanf_r+0x1e2>
 800acf2:	2302      	movs	r3, #2
 800acf4:	e7cb      	b.n	800ac8e <__ssvfiscanf_r+0x1e2>
 800acf6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800acf8:	06c3      	lsls	r3, r0, #27
 800acfa:	f53f aefd 	bmi.w	800aaf8 <__ssvfiscanf_r+0x4c>
 800acfe:	9b00      	ldr	r3, [sp, #0]
 800ad00:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ad02:	1d19      	adds	r1, r3, #4
 800ad04:	9100      	str	r1, [sp, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	07c0      	lsls	r0, r0, #31
 800ad0a:	bf4c      	ite	mi
 800ad0c:	801a      	strhmi	r2, [r3, #0]
 800ad0e:	601a      	strpl	r2, [r3, #0]
 800ad10:	e6f2      	b.n	800aaf8 <__ssvfiscanf_r+0x4c>
 800ad12:	4621      	mov	r1, r4
 800ad14:	4630      	mov	r0, r6
 800ad16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ad18:	4798      	blx	r3
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d0bb      	beq.n	800ac96 <__ssvfiscanf_r+0x1ea>
 800ad1e:	e79d      	b.n	800ac5c <__ssvfiscanf_r+0x1b0>
 800ad20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ad22:	3201      	adds	r2, #1
 800ad24:	9245      	str	r2, [sp, #276]	; 0x114
 800ad26:	6862      	ldr	r2, [r4, #4]
 800ad28:	3a01      	subs	r2, #1
 800ad2a:	2a00      	cmp	r2, #0
 800ad2c:	6062      	str	r2, [r4, #4]
 800ad2e:	dd02      	ble.n	800ad36 <__ssvfiscanf_r+0x28a>
 800ad30:	3301      	adds	r3, #1
 800ad32:	6023      	str	r3, [r4, #0]
 800ad34:	e7b2      	b.n	800ac9c <__ssvfiscanf_r+0x1f0>
 800ad36:	4621      	mov	r1, r4
 800ad38:	4630      	mov	r0, r6
 800ad3a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ad3c:	4798      	blx	r3
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d0ac      	beq.n	800ac9c <__ssvfiscanf_r+0x1f0>
 800ad42:	e78b      	b.n	800ac5c <__ssvfiscanf_r+0x1b0>
 800ad44:	2b04      	cmp	r3, #4
 800ad46:	dc0f      	bgt.n	800ad68 <__ssvfiscanf_r+0x2bc>
 800ad48:	466b      	mov	r3, sp
 800ad4a:	4622      	mov	r2, r4
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	a941      	add	r1, sp, #260	; 0x104
 800ad50:	f000 f87e 	bl	800ae50 <_scanf_i>
 800ad54:	e7b0      	b.n	800acb8 <__ssvfiscanf_r+0x20c>
 800ad56:	bf00      	nop
 800ad58:	0800a9f9 	.word	0x0800a9f9
 800ad5c:	0800aa73 	.word	0x0800aa73
 800ad60:	0800be7f 	.word	0x0800be7f
 800ad64:	0800be12 	.word	0x0800be12
 800ad68:	4b0b      	ldr	r3, [pc, #44]	; (800ad98 <__ssvfiscanf_r+0x2ec>)
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f43f aec4 	beq.w	800aaf8 <__ssvfiscanf_r+0x4c>
 800ad70:	466b      	mov	r3, sp
 800ad72:	4622      	mov	r2, r4
 800ad74:	4630      	mov	r0, r6
 800ad76:	a941      	add	r1, sp, #260	; 0x104
 800ad78:	f3af 8000 	nop.w
 800ad7c:	e79c      	b.n	800acb8 <__ssvfiscanf_r+0x20c>
 800ad7e:	89a3      	ldrh	r3, [r4, #12]
 800ad80:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ad84:	bf18      	it	ne
 800ad86:	f04f 30ff 	movne.w	r0, #4294967295
 800ad8a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ad8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad92:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ad94:	e7f9      	b.n	800ad8a <__ssvfiscanf_r+0x2de>
 800ad96:	bf00      	nop
 800ad98:	00000000 	.word	0x00000000

0800ad9c <_scanf_chars>:
 800ad9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada0:	4615      	mov	r5, r2
 800ada2:	688a      	ldr	r2, [r1, #8]
 800ada4:	4680      	mov	r8, r0
 800ada6:	460c      	mov	r4, r1
 800ada8:	b932      	cbnz	r2, 800adb8 <_scanf_chars+0x1c>
 800adaa:	698a      	ldr	r2, [r1, #24]
 800adac:	2a00      	cmp	r2, #0
 800adae:	bf0c      	ite	eq
 800adb0:	2201      	moveq	r2, #1
 800adb2:	f04f 32ff 	movne.w	r2, #4294967295
 800adb6:	608a      	str	r2, [r1, #8]
 800adb8:	2700      	movs	r7, #0
 800adba:	6822      	ldr	r2, [r4, #0]
 800adbc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800ae4c <_scanf_chars+0xb0>
 800adc0:	06d1      	lsls	r1, r2, #27
 800adc2:	bf5f      	itttt	pl
 800adc4:	681a      	ldrpl	r2, [r3, #0]
 800adc6:	1d11      	addpl	r1, r2, #4
 800adc8:	6019      	strpl	r1, [r3, #0]
 800adca:	6816      	ldrpl	r6, [r2, #0]
 800adcc:	69a0      	ldr	r0, [r4, #24]
 800adce:	b188      	cbz	r0, 800adf4 <_scanf_chars+0x58>
 800add0:	2801      	cmp	r0, #1
 800add2:	d107      	bne.n	800ade4 <_scanf_chars+0x48>
 800add4:	682b      	ldr	r3, [r5, #0]
 800add6:	781a      	ldrb	r2, [r3, #0]
 800add8:	6963      	ldr	r3, [r4, #20]
 800adda:	5c9b      	ldrb	r3, [r3, r2]
 800addc:	b953      	cbnz	r3, 800adf4 <_scanf_chars+0x58>
 800adde:	2f00      	cmp	r7, #0
 800ade0:	d031      	beq.n	800ae46 <_scanf_chars+0xaa>
 800ade2:	e022      	b.n	800ae2a <_scanf_chars+0x8e>
 800ade4:	2802      	cmp	r0, #2
 800ade6:	d120      	bne.n	800ae2a <_scanf_chars+0x8e>
 800ade8:	682b      	ldr	r3, [r5, #0]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	f819 3003 	ldrb.w	r3, [r9, r3]
 800adf0:	071b      	lsls	r3, r3, #28
 800adf2:	d41a      	bmi.n	800ae2a <_scanf_chars+0x8e>
 800adf4:	6823      	ldr	r3, [r4, #0]
 800adf6:	3701      	adds	r7, #1
 800adf8:	06da      	lsls	r2, r3, #27
 800adfa:	bf5e      	ittt	pl
 800adfc:	682b      	ldrpl	r3, [r5, #0]
 800adfe:	781b      	ldrbpl	r3, [r3, #0]
 800ae00:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ae04:	682a      	ldr	r2, [r5, #0]
 800ae06:	686b      	ldr	r3, [r5, #4]
 800ae08:	3201      	adds	r2, #1
 800ae0a:	602a      	str	r2, [r5, #0]
 800ae0c:	68a2      	ldr	r2, [r4, #8]
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	3a01      	subs	r2, #1
 800ae12:	606b      	str	r3, [r5, #4]
 800ae14:	60a2      	str	r2, [r4, #8]
 800ae16:	b142      	cbz	r2, 800ae2a <_scanf_chars+0x8e>
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	dcd7      	bgt.n	800adcc <_scanf_chars+0x30>
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	4640      	mov	r0, r8
 800ae20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ae24:	4798      	blx	r3
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d0d0      	beq.n	800adcc <_scanf_chars+0x30>
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	f013 0310 	ands.w	r3, r3, #16
 800ae30:	d105      	bne.n	800ae3e <_scanf_chars+0xa2>
 800ae32:	68e2      	ldr	r2, [r4, #12]
 800ae34:	3201      	adds	r2, #1
 800ae36:	60e2      	str	r2, [r4, #12]
 800ae38:	69a2      	ldr	r2, [r4, #24]
 800ae3a:	b102      	cbz	r2, 800ae3e <_scanf_chars+0xa2>
 800ae3c:	7033      	strb	r3, [r6, #0]
 800ae3e:	2000      	movs	r0, #0
 800ae40:	6923      	ldr	r3, [r4, #16]
 800ae42:	443b      	add	r3, r7
 800ae44:	6123      	str	r3, [r4, #16]
 800ae46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae4a:	bf00      	nop
 800ae4c:	0800be7f 	.word	0x0800be7f

0800ae50 <_scanf_i>:
 800ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	460c      	mov	r4, r1
 800ae56:	4698      	mov	r8, r3
 800ae58:	4b72      	ldr	r3, [pc, #456]	; (800b024 <_scanf_i+0x1d4>)
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	4682      	mov	sl, r0
 800ae5e:	4616      	mov	r6, r2
 800ae60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae64:	ab03      	add	r3, sp, #12
 800ae66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ae6a:	4b6f      	ldr	r3, [pc, #444]	; (800b028 <_scanf_i+0x1d8>)
 800ae6c:	69a1      	ldr	r1, [r4, #24]
 800ae6e:	4a6f      	ldr	r2, [pc, #444]	; (800b02c <_scanf_i+0x1dc>)
 800ae70:	4627      	mov	r7, r4
 800ae72:	2903      	cmp	r1, #3
 800ae74:	bf18      	it	ne
 800ae76:	461a      	movne	r2, r3
 800ae78:	68a3      	ldr	r3, [r4, #8]
 800ae7a:	9201      	str	r2, [sp, #4]
 800ae7c:	1e5a      	subs	r2, r3, #1
 800ae7e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ae82:	bf81      	itttt	hi
 800ae84:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ae88:	eb03 0905 	addhi.w	r9, r3, r5
 800ae8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ae90:	60a3      	strhi	r3, [r4, #8]
 800ae92:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ae96:	bf98      	it	ls
 800ae98:	f04f 0900 	movls.w	r9, #0
 800ae9c:	463d      	mov	r5, r7
 800ae9e:	f04f 0b00 	mov.w	fp, #0
 800aea2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800aea6:	6023      	str	r3, [r4, #0]
 800aea8:	6831      	ldr	r1, [r6, #0]
 800aeaa:	ab03      	add	r3, sp, #12
 800aeac:	2202      	movs	r2, #2
 800aeae:	7809      	ldrb	r1, [r1, #0]
 800aeb0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800aeb4:	f7fe f949 	bl	800914a <memchr>
 800aeb8:	b328      	cbz	r0, 800af06 <_scanf_i+0xb6>
 800aeba:	f1bb 0f01 	cmp.w	fp, #1
 800aebe:	d159      	bne.n	800af74 <_scanf_i+0x124>
 800aec0:	6862      	ldr	r2, [r4, #4]
 800aec2:	b92a      	cbnz	r2, 800aed0 <_scanf_i+0x80>
 800aec4:	2308      	movs	r3, #8
 800aec6:	6822      	ldr	r2, [r4, #0]
 800aec8:	6063      	str	r3, [r4, #4]
 800aeca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aece:	6022      	str	r2, [r4, #0]
 800aed0:	6822      	ldr	r2, [r4, #0]
 800aed2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800aed6:	6022      	str	r2, [r4, #0]
 800aed8:	68a2      	ldr	r2, [r4, #8]
 800aeda:	1e51      	subs	r1, r2, #1
 800aedc:	60a1      	str	r1, [r4, #8]
 800aede:	b192      	cbz	r2, 800af06 <_scanf_i+0xb6>
 800aee0:	6832      	ldr	r2, [r6, #0]
 800aee2:	1c51      	adds	r1, r2, #1
 800aee4:	6031      	str	r1, [r6, #0]
 800aee6:	7812      	ldrb	r2, [r2, #0]
 800aee8:	f805 2b01 	strb.w	r2, [r5], #1
 800aeec:	6872      	ldr	r2, [r6, #4]
 800aeee:	3a01      	subs	r2, #1
 800aef0:	2a00      	cmp	r2, #0
 800aef2:	6072      	str	r2, [r6, #4]
 800aef4:	dc07      	bgt.n	800af06 <_scanf_i+0xb6>
 800aef6:	4631      	mov	r1, r6
 800aef8:	4650      	mov	r0, sl
 800aefa:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800aefe:	4790      	blx	r2
 800af00:	2800      	cmp	r0, #0
 800af02:	f040 8085 	bne.w	800b010 <_scanf_i+0x1c0>
 800af06:	f10b 0b01 	add.w	fp, fp, #1
 800af0a:	f1bb 0f03 	cmp.w	fp, #3
 800af0e:	d1cb      	bne.n	800aea8 <_scanf_i+0x58>
 800af10:	6863      	ldr	r3, [r4, #4]
 800af12:	b90b      	cbnz	r3, 800af18 <_scanf_i+0xc8>
 800af14:	230a      	movs	r3, #10
 800af16:	6063      	str	r3, [r4, #4]
 800af18:	6863      	ldr	r3, [r4, #4]
 800af1a:	4945      	ldr	r1, [pc, #276]	; (800b030 <_scanf_i+0x1e0>)
 800af1c:	6960      	ldr	r0, [r4, #20]
 800af1e:	1ac9      	subs	r1, r1, r3
 800af20:	f000 f932 	bl	800b188 <__sccl>
 800af24:	f04f 0b00 	mov.w	fp, #0
 800af28:	68a3      	ldr	r3, [r4, #8]
 800af2a:	6822      	ldr	r2, [r4, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d03d      	beq.n	800afac <_scanf_i+0x15c>
 800af30:	6831      	ldr	r1, [r6, #0]
 800af32:	6960      	ldr	r0, [r4, #20]
 800af34:	f891 c000 	ldrb.w	ip, [r1]
 800af38:	f810 000c 	ldrb.w	r0, [r0, ip]
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d035      	beq.n	800afac <_scanf_i+0x15c>
 800af40:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800af44:	d124      	bne.n	800af90 <_scanf_i+0x140>
 800af46:	0510      	lsls	r0, r2, #20
 800af48:	d522      	bpl.n	800af90 <_scanf_i+0x140>
 800af4a:	f10b 0b01 	add.w	fp, fp, #1
 800af4e:	f1b9 0f00 	cmp.w	r9, #0
 800af52:	d003      	beq.n	800af5c <_scanf_i+0x10c>
 800af54:	3301      	adds	r3, #1
 800af56:	f109 39ff 	add.w	r9, r9, #4294967295
 800af5a:	60a3      	str	r3, [r4, #8]
 800af5c:	6873      	ldr	r3, [r6, #4]
 800af5e:	3b01      	subs	r3, #1
 800af60:	2b00      	cmp	r3, #0
 800af62:	6073      	str	r3, [r6, #4]
 800af64:	dd1b      	ble.n	800af9e <_scanf_i+0x14e>
 800af66:	6833      	ldr	r3, [r6, #0]
 800af68:	3301      	adds	r3, #1
 800af6a:	6033      	str	r3, [r6, #0]
 800af6c:	68a3      	ldr	r3, [r4, #8]
 800af6e:	3b01      	subs	r3, #1
 800af70:	60a3      	str	r3, [r4, #8]
 800af72:	e7d9      	b.n	800af28 <_scanf_i+0xd8>
 800af74:	f1bb 0f02 	cmp.w	fp, #2
 800af78:	d1ae      	bne.n	800aed8 <_scanf_i+0x88>
 800af7a:	6822      	ldr	r2, [r4, #0]
 800af7c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800af80:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800af84:	d1bf      	bne.n	800af06 <_scanf_i+0xb6>
 800af86:	2310      	movs	r3, #16
 800af88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af8c:	6063      	str	r3, [r4, #4]
 800af8e:	e7a2      	b.n	800aed6 <_scanf_i+0x86>
 800af90:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800af94:	6022      	str	r2, [r4, #0]
 800af96:	780b      	ldrb	r3, [r1, #0]
 800af98:	f805 3b01 	strb.w	r3, [r5], #1
 800af9c:	e7de      	b.n	800af5c <_scanf_i+0x10c>
 800af9e:	4631      	mov	r1, r6
 800afa0:	4650      	mov	r0, sl
 800afa2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800afa6:	4798      	blx	r3
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d0df      	beq.n	800af6c <_scanf_i+0x11c>
 800afac:	6823      	ldr	r3, [r4, #0]
 800afae:	05d9      	lsls	r1, r3, #23
 800afb0:	d50d      	bpl.n	800afce <_scanf_i+0x17e>
 800afb2:	42bd      	cmp	r5, r7
 800afb4:	d909      	bls.n	800afca <_scanf_i+0x17a>
 800afb6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800afba:	4632      	mov	r2, r6
 800afbc:	4650      	mov	r0, sl
 800afbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afc2:	f105 39ff 	add.w	r9, r5, #4294967295
 800afc6:	4798      	blx	r3
 800afc8:	464d      	mov	r5, r9
 800afca:	42bd      	cmp	r5, r7
 800afcc:	d028      	beq.n	800b020 <_scanf_i+0x1d0>
 800afce:	6822      	ldr	r2, [r4, #0]
 800afd0:	f012 0210 	ands.w	r2, r2, #16
 800afd4:	d113      	bne.n	800affe <_scanf_i+0x1ae>
 800afd6:	702a      	strb	r2, [r5, #0]
 800afd8:	4639      	mov	r1, r7
 800afda:	6863      	ldr	r3, [r4, #4]
 800afdc:	4650      	mov	r0, sl
 800afde:	9e01      	ldr	r6, [sp, #4]
 800afe0:	47b0      	blx	r6
 800afe2:	f8d8 3000 	ldr.w	r3, [r8]
 800afe6:	6821      	ldr	r1, [r4, #0]
 800afe8:	1d1a      	adds	r2, r3, #4
 800afea:	f8c8 2000 	str.w	r2, [r8]
 800afee:	f011 0f20 	tst.w	r1, #32
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	d00f      	beq.n	800b016 <_scanf_i+0x1c6>
 800aff6:	6018      	str	r0, [r3, #0]
 800aff8:	68e3      	ldr	r3, [r4, #12]
 800affa:	3301      	adds	r3, #1
 800affc:	60e3      	str	r3, [r4, #12]
 800affe:	2000      	movs	r0, #0
 800b000:	6923      	ldr	r3, [r4, #16]
 800b002:	1bed      	subs	r5, r5, r7
 800b004:	445d      	add	r5, fp
 800b006:	442b      	add	r3, r5
 800b008:	6123      	str	r3, [r4, #16]
 800b00a:	b007      	add	sp, #28
 800b00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b010:	f04f 0b00 	mov.w	fp, #0
 800b014:	e7ca      	b.n	800afac <_scanf_i+0x15c>
 800b016:	07ca      	lsls	r2, r1, #31
 800b018:	bf4c      	ite	mi
 800b01a:	8018      	strhmi	r0, [r3, #0]
 800b01c:	6018      	strpl	r0, [r3, #0]
 800b01e:	e7eb      	b.n	800aff8 <_scanf_i+0x1a8>
 800b020:	2001      	movs	r0, #1
 800b022:	e7f2      	b.n	800b00a <_scanf_i+0x1ba>
 800b024:	0800bb98 	.word	0x0800bb98
 800b028:	0800b58d 	.word	0x0800b58d
 800b02c:	0800b4a5 	.word	0x0800b4a5
 800b030:	0800be2d 	.word	0x0800be2d

0800b034 <__sflush_r>:
 800b034:	898a      	ldrh	r2, [r1, #12]
 800b036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b038:	4605      	mov	r5, r0
 800b03a:	0710      	lsls	r0, r2, #28
 800b03c:	460c      	mov	r4, r1
 800b03e:	d457      	bmi.n	800b0f0 <__sflush_r+0xbc>
 800b040:	684b      	ldr	r3, [r1, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	dc04      	bgt.n	800b050 <__sflush_r+0x1c>
 800b046:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b048:	2b00      	cmp	r3, #0
 800b04a:	dc01      	bgt.n	800b050 <__sflush_r+0x1c>
 800b04c:	2000      	movs	r0, #0
 800b04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b052:	2e00      	cmp	r6, #0
 800b054:	d0fa      	beq.n	800b04c <__sflush_r+0x18>
 800b056:	2300      	movs	r3, #0
 800b058:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b05c:	682f      	ldr	r7, [r5, #0]
 800b05e:	6a21      	ldr	r1, [r4, #32]
 800b060:	602b      	str	r3, [r5, #0]
 800b062:	d032      	beq.n	800b0ca <__sflush_r+0x96>
 800b064:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	075a      	lsls	r2, r3, #29
 800b06a:	d505      	bpl.n	800b078 <__sflush_r+0x44>
 800b06c:	6863      	ldr	r3, [r4, #4]
 800b06e:	1ac0      	subs	r0, r0, r3
 800b070:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b072:	b10b      	cbz	r3, 800b078 <__sflush_r+0x44>
 800b074:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b076:	1ac0      	subs	r0, r0, r3
 800b078:	2300      	movs	r3, #0
 800b07a:	4602      	mov	r2, r0
 800b07c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b07e:	4628      	mov	r0, r5
 800b080:	6a21      	ldr	r1, [r4, #32]
 800b082:	47b0      	blx	r6
 800b084:	1c43      	adds	r3, r0, #1
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	d106      	bne.n	800b098 <__sflush_r+0x64>
 800b08a:	6829      	ldr	r1, [r5, #0]
 800b08c:	291d      	cmp	r1, #29
 800b08e:	d82b      	bhi.n	800b0e8 <__sflush_r+0xb4>
 800b090:	4a28      	ldr	r2, [pc, #160]	; (800b134 <__sflush_r+0x100>)
 800b092:	410a      	asrs	r2, r1
 800b094:	07d6      	lsls	r6, r2, #31
 800b096:	d427      	bmi.n	800b0e8 <__sflush_r+0xb4>
 800b098:	2200      	movs	r2, #0
 800b09a:	6062      	str	r2, [r4, #4]
 800b09c:	6922      	ldr	r2, [r4, #16]
 800b09e:	04d9      	lsls	r1, r3, #19
 800b0a0:	6022      	str	r2, [r4, #0]
 800b0a2:	d504      	bpl.n	800b0ae <__sflush_r+0x7a>
 800b0a4:	1c42      	adds	r2, r0, #1
 800b0a6:	d101      	bne.n	800b0ac <__sflush_r+0x78>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	b903      	cbnz	r3, 800b0ae <__sflush_r+0x7a>
 800b0ac:	6560      	str	r0, [r4, #84]	; 0x54
 800b0ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0b0:	602f      	str	r7, [r5, #0]
 800b0b2:	2900      	cmp	r1, #0
 800b0b4:	d0ca      	beq.n	800b04c <__sflush_r+0x18>
 800b0b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0ba:	4299      	cmp	r1, r3
 800b0bc:	d002      	beq.n	800b0c4 <__sflush_r+0x90>
 800b0be:	4628      	mov	r0, r5
 800b0c0:	f7fe fece 	bl	8009e60 <_free_r>
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	6360      	str	r0, [r4, #52]	; 0x34
 800b0c8:	e7c1      	b.n	800b04e <__sflush_r+0x1a>
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	47b0      	blx	r6
 800b0d0:	1c41      	adds	r1, r0, #1
 800b0d2:	d1c8      	bne.n	800b066 <__sflush_r+0x32>
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d0c5      	beq.n	800b066 <__sflush_r+0x32>
 800b0da:	2b1d      	cmp	r3, #29
 800b0dc:	d001      	beq.n	800b0e2 <__sflush_r+0xae>
 800b0de:	2b16      	cmp	r3, #22
 800b0e0:	d101      	bne.n	800b0e6 <__sflush_r+0xb2>
 800b0e2:	602f      	str	r7, [r5, #0]
 800b0e4:	e7b2      	b.n	800b04c <__sflush_r+0x18>
 800b0e6:	89a3      	ldrh	r3, [r4, #12]
 800b0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ec:	81a3      	strh	r3, [r4, #12]
 800b0ee:	e7ae      	b.n	800b04e <__sflush_r+0x1a>
 800b0f0:	690f      	ldr	r7, [r1, #16]
 800b0f2:	2f00      	cmp	r7, #0
 800b0f4:	d0aa      	beq.n	800b04c <__sflush_r+0x18>
 800b0f6:	0793      	lsls	r3, r2, #30
 800b0f8:	bf18      	it	ne
 800b0fa:	2300      	movne	r3, #0
 800b0fc:	680e      	ldr	r6, [r1, #0]
 800b0fe:	bf08      	it	eq
 800b100:	694b      	ldreq	r3, [r1, #20]
 800b102:	1bf6      	subs	r6, r6, r7
 800b104:	600f      	str	r7, [r1, #0]
 800b106:	608b      	str	r3, [r1, #8]
 800b108:	2e00      	cmp	r6, #0
 800b10a:	dd9f      	ble.n	800b04c <__sflush_r+0x18>
 800b10c:	4633      	mov	r3, r6
 800b10e:	463a      	mov	r2, r7
 800b110:	4628      	mov	r0, r5
 800b112:	6a21      	ldr	r1, [r4, #32]
 800b114:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b118:	47e0      	blx	ip
 800b11a:	2800      	cmp	r0, #0
 800b11c:	dc06      	bgt.n	800b12c <__sflush_r+0xf8>
 800b11e:	89a3      	ldrh	r3, [r4, #12]
 800b120:	f04f 30ff 	mov.w	r0, #4294967295
 800b124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b128:	81a3      	strh	r3, [r4, #12]
 800b12a:	e790      	b.n	800b04e <__sflush_r+0x1a>
 800b12c:	4407      	add	r7, r0
 800b12e:	1a36      	subs	r6, r6, r0
 800b130:	e7ea      	b.n	800b108 <__sflush_r+0xd4>
 800b132:	bf00      	nop
 800b134:	dfbffffe 	.word	0xdfbffffe

0800b138 <_fflush_r>:
 800b138:	b538      	push	{r3, r4, r5, lr}
 800b13a:	690b      	ldr	r3, [r1, #16]
 800b13c:	4605      	mov	r5, r0
 800b13e:	460c      	mov	r4, r1
 800b140:	b913      	cbnz	r3, 800b148 <_fflush_r+0x10>
 800b142:	2500      	movs	r5, #0
 800b144:	4628      	mov	r0, r5
 800b146:	bd38      	pop	{r3, r4, r5, pc}
 800b148:	b118      	cbz	r0, 800b152 <_fflush_r+0x1a>
 800b14a:	6a03      	ldr	r3, [r0, #32]
 800b14c:	b90b      	cbnz	r3, 800b152 <_fflush_r+0x1a>
 800b14e:	f7fd feb7 	bl	8008ec0 <__sinit>
 800b152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d0f3      	beq.n	800b142 <_fflush_r+0xa>
 800b15a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b15c:	07d0      	lsls	r0, r2, #31
 800b15e:	d404      	bmi.n	800b16a <_fflush_r+0x32>
 800b160:	0599      	lsls	r1, r3, #22
 800b162:	d402      	bmi.n	800b16a <_fflush_r+0x32>
 800b164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b166:	f7fd ffee 	bl	8009146 <__retarget_lock_acquire_recursive>
 800b16a:	4628      	mov	r0, r5
 800b16c:	4621      	mov	r1, r4
 800b16e:	f7ff ff61 	bl	800b034 <__sflush_r>
 800b172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b174:	4605      	mov	r5, r0
 800b176:	07da      	lsls	r2, r3, #31
 800b178:	d4e4      	bmi.n	800b144 <_fflush_r+0xc>
 800b17a:	89a3      	ldrh	r3, [r4, #12]
 800b17c:	059b      	lsls	r3, r3, #22
 800b17e:	d4e1      	bmi.n	800b144 <_fflush_r+0xc>
 800b180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b182:	f7fd ffe1 	bl	8009148 <__retarget_lock_release_recursive>
 800b186:	e7dd      	b.n	800b144 <_fflush_r+0xc>

0800b188 <__sccl>:
 800b188:	b570      	push	{r4, r5, r6, lr}
 800b18a:	780b      	ldrb	r3, [r1, #0]
 800b18c:	4604      	mov	r4, r0
 800b18e:	2b5e      	cmp	r3, #94	; 0x5e
 800b190:	bf0b      	itete	eq
 800b192:	784b      	ldrbeq	r3, [r1, #1]
 800b194:	1c4a      	addne	r2, r1, #1
 800b196:	1c8a      	addeq	r2, r1, #2
 800b198:	2100      	movne	r1, #0
 800b19a:	bf08      	it	eq
 800b19c:	2101      	moveq	r1, #1
 800b19e:	3801      	subs	r0, #1
 800b1a0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b1a4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b1a8:	42a8      	cmp	r0, r5
 800b1aa:	d1fb      	bne.n	800b1a4 <__sccl+0x1c>
 800b1ac:	b90b      	cbnz	r3, 800b1b2 <__sccl+0x2a>
 800b1ae:	1e50      	subs	r0, r2, #1
 800b1b0:	bd70      	pop	{r4, r5, r6, pc}
 800b1b2:	f081 0101 	eor.w	r1, r1, #1
 800b1b6:	4610      	mov	r0, r2
 800b1b8:	54e1      	strb	r1, [r4, r3]
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b1c0:	2d2d      	cmp	r5, #45	; 0x2d
 800b1c2:	d005      	beq.n	800b1d0 <__sccl+0x48>
 800b1c4:	2d5d      	cmp	r5, #93	; 0x5d
 800b1c6:	d016      	beq.n	800b1f6 <__sccl+0x6e>
 800b1c8:	2d00      	cmp	r5, #0
 800b1ca:	d0f1      	beq.n	800b1b0 <__sccl+0x28>
 800b1cc:	462b      	mov	r3, r5
 800b1ce:	e7f2      	b.n	800b1b6 <__sccl+0x2e>
 800b1d0:	7846      	ldrb	r6, [r0, #1]
 800b1d2:	2e5d      	cmp	r6, #93	; 0x5d
 800b1d4:	d0fa      	beq.n	800b1cc <__sccl+0x44>
 800b1d6:	42b3      	cmp	r3, r6
 800b1d8:	dcf8      	bgt.n	800b1cc <__sccl+0x44>
 800b1da:	461a      	mov	r2, r3
 800b1dc:	3002      	adds	r0, #2
 800b1de:	3201      	adds	r2, #1
 800b1e0:	4296      	cmp	r6, r2
 800b1e2:	54a1      	strb	r1, [r4, r2]
 800b1e4:	dcfb      	bgt.n	800b1de <__sccl+0x56>
 800b1e6:	1af2      	subs	r2, r6, r3
 800b1e8:	3a01      	subs	r2, #1
 800b1ea:	42b3      	cmp	r3, r6
 800b1ec:	bfa8      	it	ge
 800b1ee:	2200      	movge	r2, #0
 800b1f0:	1c5d      	adds	r5, r3, #1
 800b1f2:	18ab      	adds	r3, r5, r2
 800b1f4:	e7e1      	b.n	800b1ba <__sccl+0x32>
 800b1f6:	4610      	mov	r0, r2
 800b1f8:	e7da      	b.n	800b1b0 <__sccl+0x28>

0800b1fa <__submore>:
 800b1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fe:	460c      	mov	r4, r1
 800b200:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b202:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b206:	4299      	cmp	r1, r3
 800b208:	d11b      	bne.n	800b242 <__submore+0x48>
 800b20a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b20e:	f7fe fe97 	bl	8009f40 <_malloc_r>
 800b212:	b918      	cbnz	r0, 800b21c <__submore+0x22>
 800b214:	f04f 30ff 	mov.w	r0, #4294967295
 800b218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b21c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b220:	63a3      	str	r3, [r4, #56]	; 0x38
 800b222:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b226:	6360      	str	r0, [r4, #52]	; 0x34
 800b228:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b22c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b230:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b234:	7043      	strb	r3, [r0, #1]
 800b236:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b23a:	7003      	strb	r3, [r0, #0]
 800b23c:	6020      	str	r0, [r4, #0]
 800b23e:	2000      	movs	r0, #0
 800b240:	e7ea      	b.n	800b218 <__submore+0x1e>
 800b242:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b244:	0077      	lsls	r7, r6, #1
 800b246:	463a      	mov	r2, r7
 800b248:	f000 f87e 	bl	800b348 <_realloc_r>
 800b24c:	4605      	mov	r5, r0
 800b24e:	2800      	cmp	r0, #0
 800b250:	d0e0      	beq.n	800b214 <__submore+0x1a>
 800b252:	eb00 0806 	add.w	r8, r0, r6
 800b256:	4601      	mov	r1, r0
 800b258:	4632      	mov	r2, r6
 800b25a:	4640      	mov	r0, r8
 800b25c:	f7fd ff83 	bl	8009166 <memcpy>
 800b260:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b264:	f8c4 8000 	str.w	r8, [r4]
 800b268:	e7e9      	b.n	800b23e <__submore+0x44>

0800b26a <memmove>:
 800b26a:	4288      	cmp	r0, r1
 800b26c:	b510      	push	{r4, lr}
 800b26e:	eb01 0402 	add.w	r4, r1, r2
 800b272:	d902      	bls.n	800b27a <memmove+0x10>
 800b274:	4284      	cmp	r4, r0
 800b276:	4623      	mov	r3, r4
 800b278:	d807      	bhi.n	800b28a <memmove+0x20>
 800b27a:	1e43      	subs	r3, r0, #1
 800b27c:	42a1      	cmp	r1, r4
 800b27e:	d008      	beq.n	800b292 <memmove+0x28>
 800b280:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b284:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b288:	e7f8      	b.n	800b27c <memmove+0x12>
 800b28a:	4601      	mov	r1, r0
 800b28c:	4402      	add	r2, r0
 800b28e:	428a      	cmp	r2, r1
 800b290:	d100      	bne.n	800b294 <memmove+0x2a>
 800b292:	bd10      	pop	{r4, pc}
 800b294:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b298:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b29c:	e7f7      	b.n	800b28e <memmove+0x24>
	...

0800b2a0 <_sbrk_r>:
 800b2a0:	b538      	push	{r3, r4, r5, lr}
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	4d05      	ldr	r5, [pc, #20]	; (800b2bc <_sbrk_r+0x1c>)
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	4608      	mov	r0, r1
 800b2aa:	602b      	str	r3, [r5, #0]
 800b2ac:	f7f6 ffae 	bl	800220c <_sbrk>
 800b2b0:	1c43      	adds	r3, r0, #1
 800b2b2:	d102      	bne.n	800b2ba <_sbrk_r+0x1a>
 800b2b4:	682b      	ldr	r3, [r5, #0]
 800b2b6:	b103      	cbz	r3, 800b2ba <_sbrk_r+0x1a>
 800b2b8:	6023      	str	r3, [r4, #0]
 800b2ba:	bd38      	pop	{r3, r4, r5, pc}
 800b2bc:	20001f30 	.word	0x20001f30

0800b2c0 <__assert_func>:
 800b2c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2c2:	4614      	mov	r4, r2
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	4b09      	ldr	r3, [pc, #36]	; (800b2ec <__assert_func+0x2c>)
 800b2c8:	4605      	mov	r5, r0
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68d8      	ldr	r0, [r3, #12]
 800b2ce:	b14c      	cbz	r4, 800b2e4 <__assert_func+0x24>
 800b2d0:	4b07      	ldr	r3, [pc, #28]	; (800b2f0 <__assert_func+0x30>)
 800b2d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2d6:	9100      	str	r1, [sp, #0]
 800b2d8:	462b      	mov	r3, r5
 800b2da:	4906      	ldr	r1, [pc, #24]	; (800b2f4 <__assert_func+0x34>)
 800b2dc:	f000 f966 	bl	800b5ac <fiprintf>
 800b2e0:	f000 f976 	bl	800b5d0 <abort>
 800b2e4:	4b04      	ldr	r3, [pc, #16]	; (800b2f8 <__assert_func+0x38>)
 800b2e6:	461c      	mov	r4, r3
 800b2e8:	e7f3      	b.n	800b2d2 <__assert_func+0x12>
 800b2ea:	bf00      	nop
 800b2ec:	200000b0 	.word	0x200000b0
 800b2f0:	0800be42 	.word	0x0800be42
 800b2f4:	0800be4f 	.word	0x0800be4f
 800b2f8:	0800be7d 	.word	0x0800be7d

0800b2fc <_calloc_r>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	fba1 5402 	umull	r5, r4, r1, r2
 800b302:	b934      	cbnz	r4, 800b312 <_calloc_r+0x16>
 800b304:	4629      	mov	r1, r5
 800b306:	f7fe fe1b 	bl	8009f40 <_malloc_r>
 800b30a:	4606      	mov	r6, r0
 800b30c:	b928      	cbnz	r0, 800b31a <_calloc_r+0x1e>
 800b30e:	4630      	mov	r0, r6
 800b310:	bd70      	pop	{r4, r5, r6, pc}
 800b312:	220c      	movs	r2, #12
 800b314:	2600      	movs	r6, #0
 800b316:	6002      	str	r2, [r0, #0]
 800b318:	e7f9      	b.n	800b30e <_calloc_r+0x12>
 800b31a:	462a      	mov	r2, r5
 800b31c:	4621      	mov	r1, r4
 800b31e:	f7fd fe94 	bl	800904a <memset>
 800b322:	e7f4      	b.n	800b30e <_calloc_r+0x12>

0800b324 <__ascii_mbtowc>:
 800b324:	b082      	sub	sp, #8
 800b326:	b901      	cbnz	r1, 800b32a <__ascii_mbtowc+0x6>
 800b328:	a901      	add	r1, sp, #4
 800b32a:	b142      	cbz	r2, 800b33e <__ascii_mbtowc+0x1a>
 800b32c:	b14b      	cbz	r3, 800b342 <__ascii_mbtowc+0x1e>
 800b32e:	7813      	ldrb	r3, [r2, #0]
 800b330:	600b      	str	r3, [r1, #0]
 800b332:	7812      	ldrb	r2, [r2, #0]
 800b334:	1e10      	subs	r0, r2, #0
 800b336:	bf18      	it	ne
 800b338:	2001      	movne	r0, #1
 800b33a:	b002      	add	sp, #8
 800b33c:	4770      	bx	lr
 800b33e:	4610      	mov	r0, r2
 800b340:	e7fb      	b.n	800b33a <__ascii_mbtowc+0x16>
 800b342:	f06f 0001 	mvn.w	r0, #1
 800b346:	e7f8      	b.n	800b33a <__ascii_mbtowc+0x16>

0800b348 <_realloc_r>:
 800b348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b34c:	4680      	mov	r8, r0
 800b34e:	4614      	mov	r4, r2
 800b350:	460e      	mov	r6, r1
 800b352:	b921      	cbnz	r1, 800b35e <_realloc_r+0x16>
 800b354:	4611      	mov	r1, r2
 800b356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b35a:	f7fe bdf1 	b.w	8009f40 <_malloc_r>
 800b35e:	b92a      	cbnz	r2, 800b36c <_realloc_r+0x24>
 800b360:	f7fe fd7e 	bl	8009e60 <_free_r>
 800b364:	4625      	mov	r5, r4
 800b366:	4628      	mov	r0, r5
 800b368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b36c:	f000 f937 	bl	800b5de <_malloc_usable_size_r>
 800b370:	4284      	cmp	r4, r0
 800b372:	4607      	mov	r7, r0
 800b374:	d802      	bhi.n	800b37c <_realloc_r+0x34>
 800b376:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b37a:	d812      	bhi.n	800b3a2 <_realloc_r+0x5a>
 800b37c:	4621      	mov	r1, r4
 800b37e:	4640      	mov	r0, r8
 800b380:	f7fe fdde 	bl	8009f40 <_malloc_r>
 800b384:	4605      	mov	r5, r0
 800b386:	2800      	cmp	r0, #0
 800b388:	d0ed      	beq.n	800b366 <_realloc_r+0x1e>
 800b38a:	42bc      	cmp	r4, r7
 800b38c:	4622      	mov	r2, r4
 800b38e:	4631      	mov	r1, r6
 800b390:	bf28      	it	cs
 800b392:	463a      	movcs	r2, r7
 800b394:	f7fd fee7 	bl	8009166 <memcpy>
 800b398:	4631      	mov	r1, r6
 800b39a:	4640      	mov	r0, r8
 800b39c:	f7fe fd60 	bl	8009e60 <_free_r>
 800b3a0:	e7e1      	b.n	800b366 <_realloc_r+0x1e>
 800b3a2:	4635      	mov	r5, r6
 800b3a4:	e7df      	b.n	800b366 <_realloc_r+0x1e>
	...

0800b3a8 <_strtol_l.constprop.0>:
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3ae:	4686      	mov	lr, r0
 800b3b0:	4690      	mov	r8, r2
 800b3b2:	d001      	beq.n	800b3b8 <_strtol_l.constprop.0+0x10>
 800b3b4:	2b24      	cmp	r3, #36	; 0x24
 800b3b6:	d906      	bls.n	800b3c6 <_strtol_l.constprop.0+0x1e>
 800b3b8:	f7fd fe9a 	bl	80090f0 <__errno>
 800b3bc:	2316      	movs	r3, #22
 800b3be:	6003      	str	r3, [r0, #0]
 800b3c0:	2000      	movs	r0, #0
 800b3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c6:	460d      	mov	r5, r1
 800b3c8:	4835      	ldr	r0, [pc, #212]	; (800b4a0 <_strtol_l.constprop.0+0xf8>)
 800b3ca:	462a      	mov	r2, r5
 800b3cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3d0:	5d06      	ldrb	r6, [r0, r4]
 800b3d2:	f016 0608 	ands.w	r6, r6, #8
 800b3d6:	d1f8      	bne.n	800b3ca <_strtol_l.constprop.0+0x22>
 800b3d8:	2c2d      	cmp	r4, #45	; 0x2d
 800b3da:	d12e      	bne.n	800b43a <_strtol_l.constprop.0+0x92>
 800b3dc:	2601      	movs	r6, #1
 800b3de:	782c      	ldrb	r4, [r5, #0]
 800b3e0:	1c95      	adds	r5, r2, #2
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d057      	beq.n	800b496 <_strtol_l.constprop.0+0xee>
 800b3e6:	2b10      	cmp	r3, #16
 800b3e8:	d109      	bne.n	800b3fe <_strtol_l.constprop.0+0x56>
 800b3ea:	2c30      	cmp	r4, #48	; 0x30
 800b3ec:	d107      	bne.n	800b3fe <_strtol_l.constprop.0+0x56>
 800b3ee:	782a      	ldrb	r2, [r5, #0]
 800b3f0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b3f4:	2a58      	cmp	r2, #88	; 0x58
 800b3f6:	d149      	bne.n	800b48c <_strtol_l.constprop.0+0xe4>
 800b3f8:	2310      	movs	r3, #16
 800b3fa:	786c      	ldrb	r4, [r5, #1]
 800b3fc:	3502      	adds	r5, #2
 800b3fe:	2200      	movs	r2, #0
 800b400:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800b404:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b408:	fbbc f9f3 	udiv	r9, ip, r3
 800b40c:	4610      	mov	r0, r2
 800b40e:	fb03 ca19 	mls	sl, r3, r9, ip
 800b412:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b416:	2f09      	cmp	r7, #9
 800b418:	d814      	bhi.n	800b444 <_strtol_l.constprop.0+0x9c>
 800b41a:	463c      	mov	r4, r7
 800b41c:	42a3      	cmp	r3, r4
 800b41e:	dd20      	ble.n	800b462 <_strtol_l.constprop.0+0xba>
 800b420:	1c57      	adds	r7, r2, #1
 800b422:	d007      	beq.n	800b434 <_strtol_l.constprop.0+0x8c>
 800b424:	4581      	cmp	r9, r0
 800b426:	d319      	bcc.n	800b45c <_strtol_l.constprop.0+0xb4>
 800b428:	d101      	bne.n	800b42e <_strtol_l.constprop.0+0x86>
 800b42a:	45a2      	cmp	sl, r4
 800b42c:	db16      	blt.n	800b45c <_strtol_l.constprop.0+0xb4>
 800b42e:	2201      	movs	r2, #1
 800b430:	fb00 4003 	mla	r0, r0, r3, r4
 800b434:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b438:	e7eb      	b.n	800b412 <_strtol_l.constprop.0+0x6a>
 800b43a:	2c2b      	cmp	r4, #43	; 0x2b
 800b43c:	bf04      	itt	eq
 800b43e:	782c      	ldrbeq	r4, [r5, #0]
 800b440:	1c95      	addeq	r5, r2, #2
 800b442:	e7ce      	b.n	800b3e2 <_strtol_l.constprop.0+0x3a>
 800b444:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b448:	2f19      	cmp	r7, #25
 800b44a:	d801      	bhi.n	800b450 <_strtol_l.constprop.0+0xa8>
 800b44c:	3c37      	subs	r4, #55	; 0x37
 800b44e:	e7e5      	b.n	800b41c <_strtol_l.constprop.0+0x74>
 800b450:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b454:	2f19      	cmp	r7, #25
 800b456:	d804      	bhi.n	800b462 <_strtol_l.constprop.0+0xba>
 800b458:	3c57      	subs	r4, #87	; 0x57
 800b45a:	e7df      	b.n	800b41c <_strtol_l.constprop.0+0x74>
 800b45c:	f04f 32ff 	mov.w	r2, #4294967295
 800b460:	e7e8      	b.n	800b434 <_strtol_l.constprop.0+0x8c>
 800b462:	1c53      	adds	r3, r2, #1
 800b464:	d108      	bne.n	800b478 <_strtol_l.constprop.0+0xd0>
 800b466:	2322      	movs	r3, #34	; 0x22
 800b468:	4660      	mov	r0, ip
 800b46a:	f8ce 3000 	str.w	r3, [lr]
 800b46e:	f1b8 0f00 	cmp.w	r8, #0
 800b472:	d0a6      	beq.n	800b3c2 <_strtol_l.constprop.0+0x1a>
 800b474:	1e69      	subs	r1, r5, #1
 800b476:	e006      	b.n	800b486 <_strtol_l.constprop.0+0xde>
 800b478:	b106      	cbz	r6, 800b47c <_strtol_l.constprop.0+0xd4>
 800b47a:	4240      	negs	r0, r0
 800b47c:	f1b8 0f00 	cmp.w	r8, #0
 800b480:	d09f      	beq.n	800b3c2 <_strtol_l.constprop.0+0x1a>
 800b482:	2a00      	cmp	r2, #0
 800b484:	d1f6      	bne.n	800b474 <_strtol_l.constprop.0+0xcc>
 800b486:	f8c8 1000 	str.w	r1, [r8]
 800b48a:	e79a      	b.n	800b3c2 <_strtol_l.constprop.0+0x1a>
 800b48c:	2430      	movs	r4, #48	; 0x30
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1b5      	bne.n	800b3fe <_strtol_l.constprop.0+0x56>
 800b492:	2308      	movs	r3, #8
 800b494:	e7b3      	b.n	800b3fe <_strtol_l.constprop.0+0x56>
 800b496:	2c30      	cmp	r4, #48	; 0x30
 800b498:	d0a9      	beq.n	800b3ee <_strtol_l.constprop.0+0x46>
 800b49a:	230a      	movs	r3, #10
 800b49c:	e7af      	b.n	800b3fe <_strtol_l.constprop.0+0x56>
 800b49e:	bf00      	nop
 800b4a0:	0800be7f 	.word	0x0800be7f

0800b4a4 <_strtol_r>:
 800b4a4:	f7ff bf80 	b.w	800b3a8 <_strtol_l.constprop.0>

0800b4a8 <_strtoul_l.constprop.0>:
 800b4a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4ac:	4686      	mov	lr, r0
 800b4ae:	460d      	mov	r5, r1
 800b4b0:	4f35      	ldr	r7, [pc, #212]	; (800b588 <_strtoul_l.constprop.0+0xe0>)
 800b4b2:	4628      	mov	r0, r5
 800b4b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4b8:	5d3e      	ldrb	r6, [r7, r4]
 800b4ba:	f016 0608 	ands.w	r6, r6, #8
 800b4be:	d1f8      	bne.n	800b4b2 <_strtoul_l.constprop.0+0xa>
 800b4c0:	2c2d      	cmp	r4, #45	; 0x2d
 800b4c2:	d130      	bne.n	800b526 <_strtoul_l.constprop.0+0x7e>
 800b4c4:	2601      	movs	r6, #1
 800b4c6:	782c      	ldrb	r4, [r5, #0]
 800b4c8:	1c85      	adds	r5, r0, #2
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d057      	beq.n	800b57e <_strtoul_l.constprop.0+0xd6>
 800b4ce:	2b10      	cmp	r3, #16
 800b4d0:	d109      	bne.n	800b4e6 <_strtoul_l.constprop.0+0x3e>
 800b4d2:	2c30      	cmp	r4, #48	; 0x30
 800b4d4:	d107      	bne.n	800b4e6 <_strtoul_l.constprop.0+0x3e>
 800b4d6:	7828      	ldrb	r0, [r5, #0]
 800b4d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b4dc:	2858      	cmp	r0, #88	; 0x58
 800b4de:	d149      	bne.n	800b574 <_strtoul_l.constprop.0+0xcc>
 800b4e0:	2310      	movs	r3, #16
 800b4e2:	786c      	ldrb	r4, [r5, #1]
 800b4e4:	3502      	adds	r5, #2
 800b4e6:	f04f 38ff 	mov.w	r8, #4294967295
 800b4ea:	fbb8 f8f3 	udiv	r8, r8, r3
 800b4ee:	2700      	movs	r7, #0
 800b4f0:	fb03 f908 	mul.w	r9, r3, r8
 800b4f4:	4638      	mov	r0, r7
 800b4f6:	ea6f 0909 	mvn.w	r9, r9
 800b4fa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b4fe:	f1bc 0f09 	cmp.w	ip, #9
 800b502:	d815      	bhi.n	800b530 <_strtoul_l.constprop.0+0x88>
 800b504:	4664      	mov	r4, ip
 800b506:	42a3      	cmp	r3, r4
 800b508:	dd23      	ble.n	800b552 <_strtoul_l.constprop.0+0xaa>
 800b50a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800b50e:	d007      	beq.n	800b520 <_strtoul_l.constprop.0+0x78>
 800b510:	4580      	cmp	r8, r0
 800b512:	d31b      	bcc.n	800b54c <_strtoul_l.constprop.0+0xa4>
 800b514:	d101      	bne.n	800b51a <_strtoul_l.constprop.0+0x72>
 800b516:	45a1      	cmp	r9, r4
 800b518:	db18      	blt.n	800b54c <_strtoul_l.constprop.0+0xa4>
 800b51a:	2701      	movs	r7, #1
 800b51c:	fb00 4003 	mla	r0, r0, r3, r4
 800b520:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b524:	e7e9      	b.n	800b4fa <_strtoul_l.constprop.0+0x52>
 800b526:	2c2b      	cmp	r4, #43	; 0x2b
 800b528:	bf04      	itt	eq
 800b52a:	782c      	ldrbeq	r4, [r5, #0]
 800b52c:	1c85      	addeq	r5, r0, #2
 800b52e:	e7cc      	b.n	800b4ca <_strtoul_l.constprop.0+0x22>
 800b530:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b534:	f1bc 0f19 	cmp.w	ip, #25
 800b538:	d801      	bhi.n	800b53e <_strtoul_l.constprop.0+0x96>
 800b53a:	3c37      	subs	r4, #55	; 0x37
 800b53c:	e7e3      	b.n	800b506 <_strtoul_l.constprop.0+0x5e>
 800b53e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b542:	f1bc 0f19 	cmp.w	ip, #25
 800b546:	d804      	bhi.n	800b552 <_strtoul_l.constprop.0+0xaa>
 800b548:	3c57      	subs	r4, #87	; 0x57
 800b54a:	e7dc      	b.n	800b506 <_strtoul_l.constprop.0+0x5e>
 800b54c:	f04f 37ff 	mov.w	r7, #4294967295
 800b550:	e7e6      	b.n	800b520 <_strtoul_l.constprop.0+0x78>
 800b552:	1c7b      	adds	r3, r7, #1
 800b554:	d106      	bne.n	800b564 <_strtoul_l.constprop.0+0xbc>
 800b556:	2322      	movs	r3, #34	; 0x22
 800b558:	4638      	mov	r0, r7
 800b55a:	f8ce 3000 	str.w	r3, [lr]
 800b55e:	b932      	cbnz	r2, 800b56e <_strtoul_l.constprop.0+0xc6>
 800b560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b564:	b106      	cbz	r6, 800b568 <_strtoul_l.constprop.0+0xc0>
 800b566:	4240      	negs	r0, r0
 800b568:	2a00      	cmp	r2, #0
 800b56a:	d0f9      	beq.n	800b560 <_strtoul_l.constprop.0+0xb8>
 800b56c:	b107      	cbz	r7, 800b570 <_strtoul_l.constprop.0+0xc8>
 800b56e:	1e69      	subs	r1, r5, #1
 800b570:	6011      	str	r1, [r2, #0]
 800b572:	e7f5      	b.n	800b560 <_strtoul_l.constprop.0+0xb8>
 800b574:	2430      	movs	r4, #48	; 0x30
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1b5      	bne.n	800b4e6 <_strtoul_l.constprop.0+0x3e>
 800b57a:	2308      	movs	r3, #8
 800b57c:	e7b3      	b.n	800b4e6 <_strtoul_l.constprop.0+0x3e>
 800b57e:	2c30      	cmp	r4, #48	; 0x30
 800b580:	d0a9      	beq.n	800b4d6 <_strtoul_l.constprop.0+0x2e>
 800b582:	230a      	movs	r3, #10
 800b584:	e7af      	b.n	800b4e6 <_strtoul_l.constprop.0+0x3e>
 800b586:	bf00      	nop
 800b588:	0800be7f 	.word	0x0800be7f

0800b58c <_strtoul_r>:
 800b58c:	f7ff bf8c 	b.w	800b4a8 <_strtoul_l.constprop.0>

0800b590 <__ascii_wctomb>:
 800b590:	4603      	mov	r3, r0
 800b592:	4608      	mov	r0, r1
 800b594:	b141      	cbz	r1, 800b5a8 <__ascii_wctomb+0x18>
 800b596:	2aff      	cmp	r2, #255	; 0xff
 800b598:	d904      	bls.n	800b5a4 <__ascii_wctomb+0x14>
 800b59a:	228a      	movs	r2, #138	; 0x8a
 800b59c:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a0:	601a      	str	r2, [r3, #0]
 800b5a2:	4770      	bx	lr
 800b5a4:	2001      	movs	r0, #1
 800b5a6:	700a      	strb	r2, [r1, #0]
 800b5a8:	4770      	bx	lr
	...

0800b5ac <fiprintf>:
 800b5ac:	b40e      	push	{r1, r2, r3}
 800b5ae:	b503      	push	{r0, r1, lr}
 800b5b0:	4601      	mov	r1, r0
 800b5b2:	ab03      	add	r3, sp, #12
 800b5b4:	4805      	ldr	r0, [pc, #20]	; (800b5cc <fiprintf+0x20>)
 800b5b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ba:	6800      	ldr	r0, [r0, #0]
 800b5bc:	9301      	str	r3, [sp, #4]
 800b5be:	f000 f83d 	bl	800b63c <_vfiprintf_r>
 800b5c2:	b002      	add	sp, #8
 800b5c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5c8:	b003      	add	sp, #12
 800b5ca:	4770      	bx	lr
 800b5cc:	200000b0 	.word	0x200000b0

0800b5d0 <abort>:
 800b5d0:	2006      	movs	r0, #6
 800b5d2:	b508      	push	{r3, lr}
 800b5d4:	f000 fa0a 	bl	800b9ec <raise>
 800b5d8:	2001      	movs	r0, #1
 800b5da:	f7f6 fda4 	bl	8002126 <_exit>

0800b5de <_malloc_usable_size_r>:
 800b5de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5e2:	1f18      	subs	r0, r3, #4
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	bfbc      	itt	lt
 800b5e8:	580b      	ldrlt	r3, [r1, r0]
 800b5ea:	18c0      	addlt	r0, r0, r3
 800b5ec:	4770      	bx	lr

0800b5ee <__sfputc_r>:
 800b5ee:	6893      	ldr	r3, [r2, #8]
 800b5f0:	b410      	push	{r4}
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	6093      	str	r3, [r2, #8]
 800b5f8:	da07      	bge.n	800b60a <__sfputc_r+0x1c>
 800b5fa:	6994      	ldr	r4, [r2, #24]
 800b5fc:	42a3      	cmp	r3, r4
 800b5fe:	db01      	blt.n	800b604 <__sfputc_r+0x16>
 800b600:	290a      	cmp	r1, #10
 800b602:	d102      	bne.n	800b60a <__sfputc_r+0x1c>
 800b604:	bc10      	pop	{r4}
 800b606:	f000 b933 	b.w	800b870 <__swbuf_r>
 800b60a:	6813      	ldr	r3, [r2, #0]
 800b60c:	1c58      	adds	r0, r3, #1
 800b60e:	6010      	str	r0, [r2, #0]
 800b610:	7019      	strb	r1, [r3, #0]
 800b612:	4608      	mov	r0, r1
 800b614:	bc10      	pop	{r4}
 800b616:	4770      	bx	lr

0800b618 <__sfputs_r>:
 800b618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b61a:	4606      	mov	r6, r0
 800b61c:	460f      	mov	r7, r1
 800b61e:	4614      	mov	r4, r2
 800b620:	18d5      	adds	r5, r2, r3
 800b622:	42ac      	cmp	r4, r5
 800b624:	d101      	bne.n	800b62a <__sfputs_r+0x12>
 800b626:	2000      	movs	r0, #0
 800b628:	e007      	b.n	800b63a <__sfputs_r+0x22>
 800b62a:	463a      	mov	r2, r7
 800b62c:	4630      	mov	r0, r6
 800b62e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b632:	f7ff ffdc 	bl	800b5ee <__sfputc_r>
 800b636:	1c43      	adds	r3, r0, #1
 800b638:	d1f3      	bne.n	800b622 <__sfputs_r+0xa>
 800b63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b63c <_vfiprintf_r>:
 800b63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b640:	460d      	mov	r5, r1
 800b642:	4614      	mov	r4, r2
 800b644:	4698      	mov	r8, r3
 800b646:	4606      	mov	r6, r0
 800b648:	b09d      	sub	sp, #116	; 0x74
 800b64a:	b118      	cbz	r0, 800b654 <_vfiprintf_r+0x18>
 800b64c:	6a03      	ldr	r3, [r0, #32]
 800b64e:	b90b      	cbnz	r3, 800b654 <_vfiprintf_r+0x18>
 800b650:	f7fd fc36 	bl	8008ec0 <__sinit>
 800b654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b656:	07d9      	lsls	r1, r3, #31
 800b658:	d405      	bmi.n	800b666 <_vfiprintf_r+0x2a>
 800b65a:	89ab      	ldrh	r3, [r5, #12]
 800b65c:	059a      	lsls	r2, r3, #22
 800b65e:	d402      	bmi.n	800b666 <_vfiprintf_r+0x2a>
 800b660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b662:	f7fd fd70 	bl	8009146 <__retarget_lock_acquire_recursive>
 800b666:	89ab      	ldrh	r3, [r5, #12]
 800b668:	071b      	lsls	r3, r3, #28
 800b66a:	d501      	bpl.n	800b670 <_vfiprintf_r+0x34>
 800b66c:	692b      	ldr	r3, [r5, #16]
 800b66e:	b99b      	cbnz	r3, 800b698 <_vfiprintf_r+0x5c>
 800b670:	4629      	mov	r1, r5
 800b672:	4630      	mov	r0, r6
 800b674:	f000 f93a 	bl	800b8ec <__swsetup_r>
 800b678:	b170      	cbz	r0, 800b698 <_vfiprintf_r+0x5c>
 800b67a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b67c:	07dc      	lsls	r4, r3, #31
 800b67e:	d504      	bpl.n	800b68a <_vfiprintf_r+0x4e>
 800b680:	f04f 30ff 	mov.w	r0, #4294967295
 800b684:	b01d      	add	sp, #116	; 0x74
 800b686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68a:	89ab      	ldrh	r3, [r5, #12]
 800b68c:	0598      	lsls	r0, r3, #22
 800b68e:	d4f7      	bmi.n	800b680 <_vfiprintf_r+0x44>
 800b690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b692:	f7fd fd59 	bl	8009148 <__retarget_lock_release_recursive>
 800b696:	e7f3      	b.n	800b680 <_vfiprintf_r+0x44>
 800b698:	2300      	movs	r3, #0
 800b69a:	9309      	str	r3, [sp, #36]	; 0x24
 800b69c:	2320      	movs	r3, #32
 800b69e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6a2:	2330      	movs	r3, #48	; 0x30
 800b6a4:	f04f 0901 	mov.w	r9, #1
 800b6a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b85c <_vfiprintf_r+0x220>
 800b6b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6b4:	4623      	mov	r3, r4
 800b6b6:	469a      	mov	sl, r3
 800b6b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6bc:	b10a      	cbz	r2, 800b6c2 <_vfiprintf_r+0x86>
 800b6be:	2a25      	cmp	r2, #37	; 0x25
 800b6c0:	d1f9      	bne.n	800b6b6 <_vfiprintf_r+0x7a>
 800b6c2:	ebba 0b04 	subs.w	fp, sl, r4
 800b6c6:	d00b      	beq.n	800b6e0 <_vfiprintf_r+0xa4>
 800b6c8:	465b      	mov	r3, fp
 800b6ca:	4622      	mov	r2, r4
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f7ff ffa2 	bl	800b618 <__sfputs_r>
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	f000 80a9 	beq.w	800b82c <_vfiprintf_r+0x1f0>
 800b6da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6dc:	445a      	add	r2, fp
 800b6de:	9209      	str	r2, [sp, #36]	; 0x24
 800b6e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	f000 80a1 	beq.w	800b82c <_vfiprintf_r+0x1f0>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6f4:	f10a 0a01 	add.w	sl, sl, #1
 800b6f8:	9304      	str	r3, [sp, #16]
 800b6fa:	9307      	str	r3, [sp, #28]
 800b6fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b700:	931a      	str	r3, [sp, #104]	; 0x68
 800b702:	4654      	mov	r4, sl
 800b704:	2205      	movs	r2, #5
 800b706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b70a:	4854      	ldr	r0, [pc, #336]	; (800b85c <_vfiprintf_r+0x220>)
 800b70c:	f7fd fd1d 	bl	800914a <memchr>
 800b710:	9a04      	ldr	r2, [sp, #16]
 800b712:	b9d8      	cbnz	r0, 800b74c <_vfiprintf_r+0x110>
 800b714:	06d1      	lsls	r1, r2, #27
 800b716:	bf44      	itt	mi
 800b718:	2320      	movmi	r3, #32
 800b71a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b71e:	0713      	lsls	r3, r2, #28
 800b720:	bf44      	itt	mi
 800b722:	232b      	movmi	r3, #43	; 0x2b
 800b724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b728:	f89a 3000 	ldrb.w	r3, [sl]
 800b72c:	2b2a      	cmp	r3, #42	; 0x2a
 800b72e:	d015      	beq.n	800b75c <_vfiprintf_r+0x120>
 800b730:	4654      	mov	r4, sl
 800b732:	2000      	movs	r0, #0
 800b734:	f04f 0c0a 	mov.w	ip, #10
 800b738:	9a07      	ldr	r2, [sp, #28]
 800b73a:	4621      	mov	r1, r4
 800b73c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b740:	3b30      	subs	r3, #48	; 0x30
 800b742:	2b09      	cmp	r3, #9
 800b744:	d94d      	bls.n	800b7e2 <_vfiprintf_r+0x1a6>
 800b746:	b1b0      	cbz	r0, 800b776 <_vfiprintf_r+0x13a>
 800b748:	9207      	str	r2, [sp, #28]
 800b74a:	e014      	b.n	800b776 <_vfiprintf_r+0x13a>
 800b74c:	eba0 0308 	sub.w	r3, r0, r8
 800b750:	fa09 f303 	lsl.w	r3, r9, r3
 800b754:	4313      	orrs	r3, r2
 800b756:	46a2      	mov	sl, r4
 800b758:	9304      	str	r3, [sp, #16]
 800b75a:	e7d2      	b.n	800b702 <_vfiprintf_r+0xc6>
 800b75c:	9b03      	ldr	r3, [sp, #12]
 800b75e:	1d19      	adds	r1, r3, #4
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	9103      	str	r1, [sp, #12]
 800b764:	2b00      	cmp	r3, #0
 800b766:	bfbb      	ittet	lt
 800b768:	425b      	neglt	r3, r3
 800b76a:	f042 0202 	orrlt.w	r2, r2, #2
 800b76e:	9307      	strge	r3, [sp, #28]
 800b770:	9307      	strlt	r3, [sp, #28]
 800b772:	bfb8      	it	lt
 800b774:	9204      	strlt	r2, [sp, #16]
 800b776:	7823      	ldrb	r3, [r4, #0]
 800b778:	2b2e      	cmp	r3, #46	; 0x2e
 800b77a:	d10c      	bne.n	800b796 <_vfiprintf_r+0x15a>
 800b77c:	7863      	ldrb	r3, [r4, #1]
 800b77e:	2b2a      	cmp	r3, #42	; 0x2a
 800b780:	d134      	bne.n	800b7ec <_vfiprintf_r+0x1b0>
 800b782:	9b03      	ldr	r3, [sp, #12]
 800b784:	3402      	adds	r4, #2
 800b786:	1d1a      	adds	r2, r3, #4
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	9203      	str	r2, [sp, #12]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	bfb8      	it	lt
 800b790:	f04f 33ff 	movlt.w	r3, #4294967295
 800b794:	9305      	str	r3, [sp, #20]
 800b796:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b860 <_vfiprintf_r+0x224>
 800b79a:	2203      	movs	r2, #3
 800b79c:	4650      	mov	r0, sl
 800b79e:	7821      	ldrb	r1, [r4, #0]
 800b7a0:	f7fd fcd3 	bl	800914a <memchr>
 800b7a4:	b138      	cbz	r0, 800b7b6 <_vfiprintf_r+0x17a>
 800b7a6:	2240      	movs	r2, #64	; 0x40
 800b7a8:	9b04      	ldr	r3, [sp, #16]
 800b7aa:	eba0 000a 	sub.w	r0, r0, sl
 800b7ae:	4082      	lsls	r2, r0
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	3401      	adds	r4, #1
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ba:	2206      	movs	r2, #6
 800b7bc:	4829      	ldr	r0, [pc, #164]	; (800b864 <_vfiprintf_r+0x228>)
 800b7be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7c2:	f7fd fcc2 	bl	800914a <memchr>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d03f      	beq.n	800b84a <_vfiprintf_r+0x20e>
 800b7ca:	4b27      	ldr	r3, [pc, #156]	; (800b868 <_vfiprintf_r+0x22c>)
 800b7cc:	bb1b      	cbnz	r3, 800b816 <_vfiprintf_r+0x1da>
 800b7ce:	9b03      	ldr	r3, [sp, #12]
 800b7d0:	3307      	adds	r3, #7
 800b7d2:	f023 0307 	bic.w	r3, r3, #7
 800b7d6:	3308      	adds	r3, #8
 800b7d8:	9303      	str	r3, [sp, #12]
 800b7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7dc:	443b      	add	r3, r7
 800b7de:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e0:	e768      	b.n	800b6b4 <_vfiprintf_r+0x78>
 800b7e2:	460c      	mov	r4, r1
 800b7e4:	2001      	movs	r0, #1
 800b7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7ea:	e7a6      	b.n	800b73a <_vfiprintf_r+0xfe>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f04f 0c0a 	mov.w	ip, #10
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	3401      	adds	r4, #1
 800b7f6:	9305      	str	r3, [sp, #20]
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7fe:	3a30      	subs	r2, #48	; 0x30
 800b800:	2a09      	cmp	r2, #9
 800b802:	d903      	bls.n	800b80c <_vfiprintf_r+0x1d0>
 800b804:	2b00      	cmp	r3, #0
 800b806:	d0c6      	beq.n	800b796 <_vfiprintf_r+0x15a>
 800b808:	9105      	str	r1, [sp, #20]
 800b80a:	e7c4      	b.n	800b796 <_vfiprintf_r+0x15a>
 800b80c:	4604      	mov	r4, r0
 800b80e:	2301      	movs	r3, #1
 800b810:	fb0c 2101 	mla	r1, ip, r1, r2
 800b814:	e7f0      	b.n	800b7f8 <_vfiprintf_r+0x1bc>
 800b816:	ab03      	add	r3, sp, #12
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	462a      	mov	r2, r5
 800b81c:	4630      	mov	r0, r6
 800b81e:	4b13      	ldr	r3, [pc, #76]	; (800b86c <_vfiprintf_r+0x230>)
 800b820:	a904      	add	r1, sp, #16
 800b822:	f7fc feff 	bl	8008624 <_printf_float>
 800b826:	4607      	mov	r7, r0
 800b828:	1c78      	adds	r0, r7, #1
 800b82a:	d1d6      	bne.n	800b7da <_vfiprintf_r+0x19e>
 800b82c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b82e:	07d9      	lsls	r1, r3, #31
 800b830:	d405      	bmi.n	800b83e <_vfiprintf_r+0x202>
 800b832:	89ab      	ldrh	r3, [r5, #12]
 800b834:	059a      	lsls	r2, r3, #22
 800b836:	d402      	bmi.n	800b83e <_vfiprintf_r+0x202>
 800b838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b83a:	f7fd fc85 	bl	8009148 <__retarget_lock_release_recursive>
 800b83e:	89ab      	ldrh	r3, [r5, #12]
 800b840:	065b      	lsls	r3, r3, #25
 800b842:	f53f af1d 	bmi.w	800b680 <_vfiprintf_r+0x44>
 800b846:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b848:	e71c      	b.n	800b684 <_vfiprintf_r+0x48>
 800b84a:	ab03      	add	r3, sp, #12
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	462a      	mov	r2, r5
 800b850:	4630      	mov	r0, r6
 800b852:	4b06      	ldr	r3, [pc, #24]	; (800b86c <_vfiprintf_r+0x230>)
 800b854:	a904      	add	r1, sp, #16
 800b856:	f7fd f985 	bl	8008b64 <_printf_i>
 800b85a:	e7e4      	b.n	800b826 <_vfiprintf_r+0x1ea>
 800b85c:	0800be0c 	.word	0x0800be0c
 800b860:	0800be12 	.word	0x0800be12
 800b864:	0800be16 	.word	0x0800be16
 800b868:	08008625 	.word	0x08008625
 800b86c:	0800b619 	.word	0x0800b619

0800b870 <__swbuf_r>:
 800b870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b872:	460e      	mov	r6, r1
 800b874:	4614      	mov	r4, r2
 800b876:	4605      	mov	r5, r0
 800b878:	b118      	cbz	r0, 800b882 <__swbuf_r+0x12>
 800b87a:	6a03      	ldr	r3, [r0, #32]
 800b87c:	b90b      	cbnz	r3, 800b882 <__swbuf_r+0x12>
 800b87e:	f7fd fb1f 	bl	8008ec0 <__sinit>
 800b882:	69a3      	ldr	r3, [r4, #24]
 800b884:	60a3      	str	r3, [r4, #8]
 800b886:	89a3      	ldrh	r3, [r4, #12]
 800b888:	071a      	lsls	r2, r3, #28
 800b88a:	d525      	bpl.n	800b8d8 <__swbuf_r+0x68>
 800b88c:	6923      	ldr	r3, [r4, #16]
 800b88e:	b31b      	cbz	r3, 800b8d8 <__swbuf_r+0x68>
 800b890:	6823      	ldr	r3, [r4, #0]
 800b892:	6922      	ldr	r2, [r4, #16]
 800b894:	b2f6      	uxtb	r6, r6
 800b896:	1a98      	subs	r0, r3, r2
 800b898:	6963      	ldr	r3, [r4, #20]
 800b89a:	4637      	mov	r7, r6
 800b89c:	4283      	cmp	r3, r0
 800b89e:	dc04      	bgt.n	800b8aa <__swbuf_r+0x3a>
 800b8a0:	4621      	mov	r1, r4
 800b8a2:	4628      	mov	r0, r5
 800b8a4:	f7ff fc48 	bl	800b138 <_fflush_r>
 800b8a8:	b9e0      	cbnz	r0, 800b8e4 <__swbuf_r+0x74>
 800b8aa:	68a3      	ldr	r3, [r4, #8]
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	60a3      	str	r3, [r4, #8]
 800b8b0:	6823      	ldr	r3, [r4, #0]
 800b8b2:	1c5a      	adds	r2, r3, #1
 800b8b4:	6022      	str	r2, [r4, #0]
 800b8b6:	701e      	strb	r6, [r3, #0]
 800b8b8:	6962      	ldr	r2, [r4, #20]
 800b8ba:	1c43      	adds	r3, r0, #1
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d004      	beq.n	800b8ca <__swbuf_r+0x5a>
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	07db      	lsls	r3, r3, #31
 800b8c4:	d506      	bpl.n	800b8d4 <__swbuf_r+0x64>
 800b8c6:	2e0a      	cmp	r6, #10
 800b8c8:	d104      	bne.n	800b8d4 <__swbuf_r+0x64>
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	f7ff fc33 	bl	800b138 <_fflush_r>
 800b8d2:	b938      	cbnz	r0, 800b8e4 <__swbuf_r+0x74>
 800b8d4:	4638      	mov	r0, r7
 800b8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d8:	4621      	mov	r1, r4
 800b8da:	4628      	mov	r0, r5
 800b8dc:	f000 f806 	bl	800b8ec <__swsetup_r>
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	d0d5      	beq.n	800b890 <__swbuf_r+0x20>
 800b8e4:	f04f 37ff 	mov.w	r7, #4294967295
 800b8e8:	e7f4      	b.n	800b8d4 <__swbuf_r+0x64>
	...

0800b8ec <__swsetup_r>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	4b2a      	ldr	r3, [pc, #168]	; (800b998 <__swsetup_r+0xac>)
 800b8f0:	4605      	mov	r5, r0
 800b8f2:	6818      	ldr	r0, [r3, #0]
 800b8f4:	460c      	mov	r4, r1
 800b8f6:	b118      	cbz	r0, 800b900 <__swsetup_r+0x14>
 800b8f8:	6a03      	ldr	r3, [r0, #32]
 800b8fa:	b90b      	cbnz	r3, 800b900 <__swsetup_r+0x14>
 800b8fc:	f7fd fae0 	bl	8008ec0 <__sinit>
 800b900:	89a3      	ldrh	r3, [r4, #12]
 800b902:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b906:	0718      	lsls	r0, r3, #28
 800b908:	d422      	bmi.n	800b950 <__swsetup_r+0x64>
 800b90a:	06d9      	lsls	r1, r3, #27
 800b90c:	d407      	bmi.n	800b91e <__swsetup_r+0x32>
 800b90e:	2309      	movs	r3, #9
 800b910:	602b      	str	r3, [r5, #0]
 800b912:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b916:	f04f 30ff 	mov.w	r0, #4294967295
 800b91a:	81a3      	strh	r3, [r4, #12]
 800b91c:	e034      	b.n	800b988 <__swsetup_r+0x9c>
 800b91e:	0758      	lsls	r0, r3, #29
 800b920:	d512      	bpl.n	800b948 <__swsetup_r+0x5c>
 800b922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b924:	b141      	cbz	r1, 800b938 <__swsetup_r+0x4c>
 800b926:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b92a:	4299      	cmp	r1, r3
 800b92c:	d002      	beq.n	800b934 <__swsetup_r+0x48>
 800b92e:	4628      	mov	r0, r5
 800b930:	f7fe fa96 	bl	8009e60 <_free_r>
 800b934:	2300      	movs	r3, #0
 800b936:	6363      	str	r3, [r4, #52]	; 0x34
 800b938:	89a3      	ldrh	r3, [r4, #12]
 800b93a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b93e:	81a3      	strh	r3, [r4, #12]
 800b940:	2300      	movs	r3, #0
 800b942:	6063      	str	r3, [r4, #4]
 800b944:	6923      	ldr	r3, [r4, #16]
 800b946:	6023      	str	r3, [r4, #0]
 800b948:	89a3      	ldrh	r3, [r4, #12]
 800b94a:	f043 0308 	orr.w	r3, r3, #8
 800b94e:	81a3      	strh	r3, [r4, #12]
 800b950:	6923      	ldr	r3, [r4, #16]
 800b952:	b94b      	cbnz	r3, 800b968 <__swsetup_r+0x7c>
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b95a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b95e:	d003      	beq.n	800b968 <__swsetup_r+0x7c>
 800b960:	4621      	mov	r1, r4
 800b962:	4628      	mov	r0, r5
 800b964:	f000 f883 	bl	800ba6e <__smakebuf_r>
 800b968:	89a0      	ldrh	r0, [r4, #12]
 800b96a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b96e:	f010 0301 	ands.w	r3, r0, #1
 800b972:	d00a      	beq.n	800b98a <__swsetup_r+0x9e>
 800b974:	2300      	movs	r3, #0
 800b976:	60a3      	str	r3, [r4, #8]
 800b978:	6963      	ldr	r3, [r4, #20]
 800b97a:	425b      	negs	r3, r3
 800b97c:	61a3      	str	r3, [r4, #24]
 800b97e:	6923      	ldr	r3, [r4, #16]
 800b980:	b943      	cbnz	r3, 800b994 <__swsetup_r+0xa8>
 800b982:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b986:	d1c4      	bne.n	800b912 <__swsetup_r+0x26>
 800b988:	bd38      	pop	{r3, r4, r5, pc}
 800b98a:	0781      	lsls	r1, r0, #30
 800b98c:	bf58      	it	pl
 800b98e:	6963      	ldrpl	r3, [r4, #20]
 800b990:	60a3      	str	r3, [r4, #8]
 800b992:	e7f4      	b.n	800b97e <__swsetup_r+0x92>
 800b994:	2000      	movs	r0, #0
 800b996:	e7f7      	b.n	800b988 <__swsetup_r+0x9c>
 800b998:	200000b0 	.word	0x200000b0

0800b99c <_raise_r>:
 800b99c:	291f      	cmp	r1, #31
 800b99e:	b538      	push	{r3, r4, r5, lr}
 800b9a0:	4604      	mov	r4, r0
 800b9a2:	460d      	mov	r5, r1
 800b9a4:	d904      	bls.n	800b9b0 <_raise_r+0x14>
 800b9a6:	2316      	movs	r3, #22
 800b9a8:	6003      	str	r3, [r0, #0]
 800b9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ae:	bd38      	pop	{r3, r4, r5, pc}
 800b9b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b9b2:	b112      	cbz	r2, 800b9ba <_raise_r+0x1e>
 800b9b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9b8:	b94b      	cbnz	r3, 800b9ce <_raise_r+0x32>
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 f830 	bl	800ba20 <_getpid_r>
 800b9c0:	462a      	mov	r2, r5
 800b9c2:	4601      	mov	r1, r0
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9ca:	f000 b817 	b.w	800b9fc <_kill_r>
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d00a      	beq.n	800b9e8 <_raise_r+0x4c>
 800b9d2:	1c59      	adds	r1, r3, #1
 800b9d4:	d103      	bne.n	800b9de <_raise_r+0x42>
 800b9d6:	2316      	movs	r3, #22
 800b9d8:	6003      	str	r3, [r0, #0]
 800b9da:	2001      	movs	r0, #1
 800b9dc:	e7e7      	b.n	800b9ae <_raise_r+0x12>
 800b9de:	2400      	movs	r4, #0
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9e6:	4798      	blx	r3
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	e7e0      	b.n	800b9ae <_raise_r+0x12>

0800b9ec <raise>:
 800b9ec:	4b02      	ldr	r3, [pc, #8]	; (800b9f8 <raise+0xc>)
 800b9ee:	4601      	mov	r1, r0
 800b9f0:	6818      	ldr	r0, [r3, #0]
 800b9f2:	f7ff bfd3 	b.w	800b99c <_raise_r>
 800b9f6:	bf00      	nop
 800b9f8:	200000b0 	.word	0x200000b0

0800b9fc <_kill_r>:
 800b9fc:	b538      	push	{r3, r4, r5, lr}
 800b9fe:	2300      	movs	r3, #0
 800ba00:	4d06      	ldr	r5, [pc, #24]	; (800ba1c <_kill_r+0x20>)
 800ba02:	4604      	mov	r4, r0
 800ba04:	4608      	mov	r0, r1
 800ba06:	4611      	mov	r1, r2
 800ba08:	602b      	str	r3, [r5, #0]
 800ba0a:	f7f6 fb7c 	bl	8002106 <_kill>
 800ba0e:	1c43      	adds	r3, r0, #1
 800ba10:	d102      	bne.n	800ba18 <_kill_r+0x1c>
 800ba12:	682b      	ldr	r3, [r5, #0]
 800ba14:	b103      	cbz	r3, 800ba18 <_kill_r+0x1c>
 800ba16:	6023      	str	r3, [r4, #0]
 800ba18:	bd38      	pop	{r3, r4, r5, pc}
 800ba1a:	bf00      	nop
 800ba1c:	20001f30 	.word	0x20001f30

0800ba20 <_getpid_r>:
 800ba20:	f7f6 bb6a 	b.w	80020f8 <_getpid>

0800ba24 <__swhatbuf_r>:
 800ba24:	b570      	push	{r4, r5, r6, lr}
 800ba26:	460c      	mov	r4, r1
 800ba28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba2c:	4615      	mov	r5, r2
 800ba2e:	2900      	cmp	r1, #0
 800ba30:	461e      	mov	r6, r3
 800ba32:	b096      	sub	sp, #88	; 0x58
 800ba34:	da0c      	bge.n	800ba50 <__swhatbuf_r+0x2c>
 800ba36:	89a3      	ldrh	r3, [r4, #12]
 800ba38:	2100      	movs	r1, #0
 800ba3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ba3e:	bf0c      	ite	eq
 800ba40:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ba44:	2340      	movne	r3, #64	; 0x40
 800ba46:	2000      	movs	r0, #0
 800ba48:	6031      	str	r1, [r6, #0]
 800ba4a:	602b      	str	r3, [r5, #0]
 800ba4c:	b016      	add	sp, #88	; 0x58
 800ba4e:	bd70      	pop	{r4, r5, r6, pc}
 800ba50:	466a      	mov	r2, sp
 800ba52:	f000 f849 	bl	800bae8 <_fstat_r>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	dbed      	blt.n	800ba36 <__swhatbuf_r+0x12>
 800ba5a:	9901      	ldr	r1, [sp, #4]
 800ba5c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ba60:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ba64:	4259      	negs	r1, r3
 800ba66:	4159      	adcs	r1, r3
 800ba68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba6c:	e7eb      	b.n	800ba46 <__swhatbuf_r+0x22>

0800ba6e <__smakebuf_r>:
 800ba6e:	898b      	ldrh	r3, [r1, #12]
 800ba70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba72:	079d      	lsls	r5, r3, #30
 800ba74:	4606      	mov	r6, r0
 800ba76:	460c      	mov	r4, r1
 800ba78:	d507      	bpl.n	800ba8a <__smakebuf_r+0x1c>
 800ba7a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba7e:	6023      	str	r3, [r4, #0]
 800ba80:	6123      	str	r3, [r4, #16]
 800ba82:	2301      	movs	r3, #1
 800ba84:	6163      	str	r3, [r4, #20]
 800ba86:	b002      	add	sp, #8
 800ba88:	bd70      	pop	{r4, r5, r6, pc}
 800ba8a:	466a      	mov	r2, sp
 800ba8c:	ab01      	add	r3, sp, #4
 800ba8e:	f7ff ffc9 	bl	800ba24 <__swhatbuf_r>
 800ba92:	9900      	ldr	r1, [sp, #0]
 800ba94:	4605      	mov	r5, r0
 800ba96:	4630      	mov	r0, r6
 800ba98:	f7fe fa52 	bl	8009f40 <_malloc_r>
 800ba9c:	b948      	cbnz	r0, 800bab2 <__smakebuf_r+0x44>
 800ba9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baa2:	059a      	lsls	r2, r3, #22
 800baa4:	d4ef      	bmi.n	800ba86 <__smakebuf_r+0x18>
 800baa6:	f023 0303 	bic.w	r3, r3, #3
 800baaa:	f043 0302 	orr.w	r3, r3, #2
 800baae:	81a3      	strh	r3, [r4, #12]
 800bab0:	e7e3      	b.n	800ba7a <__smakebuf_r+0xc>
 800bab2:	89a3      	ldrh	r3, [r4, #12]
 800bab4:	6020      	str	r0, [r4, #0]
 800bab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baba:	81a3      	strh	r3, [r4, #12]
 800babc:	9b00      	ldr	r3, [sp, #0]
 800babe:	6120      	str	r0, [r4, #16]
 800bac0:	6163      	str	r3, [r4, #20]
 800bac2:	9b01      	ldr	r3, [sp, #4]
 800bac4:	b15b      	cbz	r3, 800bade <__smakebuf_r+0x70>
 800bac6:	4630      	mov	r0, r6
 800bac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bacc:	f000 f81e 	bl	800bb0c <_isatty_r>
 800bad0:	b128      	cbz	r0, 800bade <__smakebuf_r+0x70>
 800bad2:	89a3      	ldrh	r3, [r4, #12]
 800bad4:	f023 0303 	bic.w	r3, r3, #3
 800bad8:	f043 0301 	orr.w	r3, r3, #1
 800badc:	81a3      	strh	r3, [r4, #12]
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	431d      	orrs	r5, r3
 800bae2:	81a5      	strh	r5, [r4, #12]
 800bae4:	e7cf      	b.n	800ba86 <__smakebuf_r+0x18>
	...

0800bae8 <_fstat_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	2300      	movs	r3, #0
 800baec:	4d06      	ldr	r5, [pc, #24]	; (800bb08 <_fstat_r+0x20>)
 800baee:	4604      	mov	r4, r0
 800baf0:	4608      	mov	r0, r1
 800baf2:	4611      	mov	r1, r2
 800baf4:	602b      	str	r3, [r5, #0]
 800baf6:	f7f6 fb64 	bl	80021c2 <_fstat>
 800bafa:	1c43      	adds	r3, r0, #1
 800bafc:	d102      	bne.n	800bb04 <_fstat_r+0x1c>
 800bafe:	682b      	ldr	r3, [r5, #0]
 800bb00:	b103      	cbz	r3, 800bb04 <_fstat_r+0x1c>
 800bb02:	6023      	str	r3, [r4, #0]
 800bb04:	bd38      	pop	{r3, r4, r5, pc}
 800bb06:	bf00      	nop
 800bb08:	20001f30 	.word	0x20001f30

0800bb0c <_isatty_r>:
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	2300      	movs	r3, #0
 800bb10:	4d05      	ldr	r5, [pc, #20]	; (800bb28 <_isatty_r+0x1c>)
 800bb12:	4604      	mov	r4, r0
 800bb14:	4608      	mov	r0, r1
 800bb16:	602b      	str	r3, [r5, #0]
 800bb18:	f7f6 fb62 	bl	80021e0 <_isatty>
 800bb1c:	1c43      	adds	r3, r0, #1
 800bb1e:	d102      	bne.n	800bb26 <_isatty_r+0x1a>
 800bb20:	682b      	ldr	r3, [r5, #0]
 800bb22:	b103      	cbz	r3, 800bb26 <_isatty_r+0x1a>
 800bb24:	6023      	str	r3, [r4, #0]
 800bb26:	bd38      	pop	{r3, r4, r5, pc}
 800bb28:	20001f30 	.word	0x20001f30

0800bb2c <_init>:
 800bb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb2e:	bf00      	nop
 800bb30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb32:	bc08      	pop	{r3}
 800bb34:	469e      	mov	lr, r3
 800bb36:	4770      	bx	lr

0800bb38 <_fini>:
 800bb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3a:	bf00      	nop
 800bb3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb3e:	bc08      	pop	{r3}
 800bb40:	469e      	mov	lr, r3
 800bb42:	4770      	bx	lr

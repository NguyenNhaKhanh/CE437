
Lab04_SensorTester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae8  08004ae8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004ae8  08004ae8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ae8  08004ae8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aec  08004aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000068  08004b58  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08004b58  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa78  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002125  00000000  00000000  0002ab4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  0002cc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000723  00000000  00000000  0002d5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018abd  00000000  00000000  0002dd13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c27f  00000000  00000000  000467d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008725a  00000000  00000000  00052a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003034  00000000  00000000  000d9cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000dcce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080048cc 	.word	0x080048cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080048cc 	.word	0x080048cc

0800014c <CanTP_Init>:
#define CANTP_BUFF_SIZE			100

uint8_t SendBuffer[CANTP_BUFF_SIZE];
uint8_t RecvBuffer[CANTP_BUFF_SIZE];

uint8_t CanTP_Init(uint16_t SendId, uint16_t RecvId) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b08e      	sub	sp, #56	; 0x38
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	80fb      	strh	r3, [r7, #6]
 8000158:	4613      	mov	r3, r2
 800015a:	80bb      	strh	r3, [r7, #4]
	CAN_FilterTypeDef Can_Filter;
	Can_Filter.FilterActivation = CAN_FILTER_ENABLE;
 800015c:	2301      	movs	r3, #1
 800015e:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_Filter.FilterBank = 0;
 8000160:	2300      	movs	r3, #0
 8000162:	61fb      	str	r3, [r7, #28]
	Can_Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000164:	2300      	movs	r3, #0
 8000166:	61bb      	str	r3, [r7, #24]
	Can_Filter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000168:	2301      	movs	r3, #1
 800016a:	623b      	str	r3, [r7, #32]
	Can_Filter.FilterScale = CAN_FILTERSCALE_16BIT;
 800016c:	2300      	movs	r3, #0
 800016e:	627b      	str	r3, [r7, #36]	; 0x24
	Can_Filter.FilterIdHigh = RecvId << 5;
 8000170:	88bb      	ldrh	r3, [r7, #4]
 8000172:	015b      	lsls	r3, r3, #5
 8000174:	60bb      	str	r3, [r7, #8]
	HAL_ERR(HAL_CAN_ConfigFilter(&hcan, &Can_Filter));
 8000176:	f107 0308 	add.w	r3, r7, #8
 800017a:	4619      	mov	r1, r3
 800017c:	481a      	ldr	r0, [pc, #104]	; (80001e8 <CanTP_Init+0x9c>)
 800017e:	f000 ff70 	bl	8001062 <HAL_CAN_ConfigFilter>
 8000182:	4603      	mov	r3, r0
 8000184:	2b00      	cmp	r3, #0
 8000186:	d007      	beq.n	8000198 <CanTP_Init+0x4c>
 8000188:	f107 0308 	add.w	r3, r7, #8
 800018c:	4619      	mov	r1, r3
 800018e:	4816      	ldr	r0, [pc, #88]	; (80001e8 <CanTP_Init+0x9c>)
 8000190:	f000 ff67 	bl	8001062 <HAL_CAN_ConfigFilter>
 8000194:	4603      	mov	r3, r0
 8000196:	e022      	b.n	80001de <CanTP_Init+0x92>

	HAL_ERR(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING));
 8000198:	2102      	movs	r1, #2
 800019a:	4813      	ldr	r0, [pc, #76]	; (80001e8 <CanTP_Init+0x9c>)
 800019c:	f001 fa92 	bl	80016c4 <HAL_CAN_ActivateNotification>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d005      	beq.n	80001b2 <CanTP_Init+0x66>
 80001a6:	2102      	movs	r1, #2
 80001a8:	480f      	ldr	r0, [pc, #60]	; (80001e8 <CanTP_Init+0x9c>)
 80001aa:	f001 fa8b 	bl	80016c4 <HAL_CAN_ActivateNotification>
 80001ae:	4603      	mov	r3, r0
 80001b0:	e015      	b.n	80001de <CanTP_Init+0x92>

	HAL_ERR(HAL_CAN_Start(&hcan));
 80001b2:	480d      	ldr	r0, [pc, #52]	; (80001e8 <CanTP_Init+0x9c>)
 80001b4:	f001 f81e 	bl	80011f4 <HAL_CAN_Start>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d004      	beq.n	80001c8 <CanTP_Init+0x7c>
 80001be:	480a      	ldr	r0, [pc, #40]	; (80001e8 <CanTP_Init+0x9c>)
 80001c0:	f001 f818 	bl	80011f4 <HAL_CAN_Start>
 80001c4:	4603      	mov	r3, r0
 80001c6:	e00a      	b.n	80001de <CanTP_Init+0x92>
//	uint8_t status = 0;
	isotp_init_link(&isoTP, SendId, SendBuffer, CANTP_BUFF_SIZE, RecvBuffer, CANTP_BUFF_SIZE);
 80001c8:	88f9      	ldrh	r1, [r7, #6]
 80001ca:	2364      	movs	r3, #100	; 0x64
 80001cc:	9301      	str	r3, [sp, #4]
 80001ce:	4b07      	ldr	r3, [pc, #28]	; (80001ec <CanTP_Init+0xa0>)
 80001d0:	9300      	str	r3, [sp, #0]
 80001d2:	2364      	movs	r3, #100	; 0x64
 80001d4:	4a06      	ldr	r2, [pc, #24]	; (80001f0 <CanTP_Init+0xa4>)
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <CanTP_Init+0xa8>)
 80001d8:	f003 f8e4 	bl	80033a4 <isotp_init_link>
	return HAL_OK;
 80001dc:	2300      	movs	r3, #0
}
 80001de:	4618      	mov	r0, r3
 80001e0:	3730      	adds	r7, #48	; 0x30
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	2000018c 	.word	0x2000018c
 80001ec:	20000128 	.word	0x20000128
 80001f0:	200000c4 	.word	0x200000c4
 80001f4:	20000084 	.word	0x20000084

080001f8 <CanTP_Transmit>:

uint8_t CanTP_Transmit(uint8_t *pData, uint16_t len) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	807b      	strh	r3, [r7, #2]
	HAL_ERR(isotp_send(&isoTP, pData, len));
 8000204:	887b      	ldrh	r3, [r7, #2]
 8000206:	461a      	mov	r2, r3
 8000208:	6879      	ldr	r1, [r7, #4]
 800020a:	4814      	ldr	r0, [pc, #80]	; (800025c <CanTP_Transmit+0x64>)
 800020c:	f002 fecc 	bl	8002fa8 <isotp_send>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d00b      	beq.n	800022e <CanTP_Transmit+0x36>
 8000216:	887b      	ldrh	r3, [r7, #2]
 8000218:	461a      	mov	r2, r3
 800021a:	6879      	ldr	r1, [r7, #4]
 800021c:	480f      	ldr	r0, [pc, #60]	; (800025c <CanTP_Transmit+0x64>)
 800021e:	f002 fec3 	bl	8002fa8 <isotp_send>
 8000222:	4603      	mov	r3, r0
 8000224:	b2db      	uxtb	r3, r3
 8000226:	e015      	b.n	8000254 <CanTP_Transmit+0x5c>
	while (isoTP.send_status == ISOTP_SEND_STATUS_INPROGRESS) {
		isotp_poll(&isoTP);
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <CanTP_Transmit+0x64>)
 800022a:	f003 f8e2 	bl	80033f2 <isotp_poll>
	while (isoTP.send_status == ISOTP_SEND_STATUS_INPROGRESS) {
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <CanTP_Transmit+0x64>)
 8000230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d0f7      	beq.n	8000228 <CanTP_Transmit+0x30>
	}
	if (ISOTP_SEND_STATUS_IDLE != isoTP.send_status) {
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <CanTP_Transmit+0x64>)
 800023a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d007      	beq.n	8000252 <CanTP_Transmit+0x5a>
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 8000242:	2201      	movs	r2, #1
 8000244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000248:	4805      	ldr	r0, [pc, #20]	; (8000260 <CanTP_Transmit+0x68>)
 800024a:	f001 ff15 	bl	8002078 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 800024e:	2301      	movs	r3, #1
 8000250:	e000      	b.n	8000254 <CanTP_Transmit+0x5c>
	}
	return HAL_OK;
 8000252:	2300      	movs	r3, #0
}
 8000254:	4618      	mov	r0, r3
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000084 	.word	0x20000084
 8000260:	40010c00 	.word	0x40010c00

08000264 <CanTP_Receive>:

uint8_t CanTP_Receive(uint8_t *pData, uint16_t *len, uint32_t timeout) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	607a      	str	r2, [r7, #4]
	uint32_t startTime = HAL_GetTick();
 8000270:	f000 fdce 	bl	8000e10 <HAL_GetTick>
 8000274:	6178      	str	r0, [r7, #20]
	while ((HAL_GetTick() - startTime) < timeout) {
 8000276:	e007      	b.n	8000288 <CanTP_Receive+0x24>
		isotp_poll(&isoTP);
 8000278:	4819      	ldr	r0, [pc, #100]	; (80002e0 <CanTP_Receive+0x7c>)
 800027a:	f003 f8ba 	bl	80033f2 <isotp_poll>
		if (isoTP.receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 800027e:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <CanTP_Receive+0x7c>)
 8000280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000284:	2b02      	cmp	r3, #2
 8000286:	d008      	beq.n	800029a <CanTP_Receive+0x36>
	while ((HAL_GetTick() - startTime) < timeout) {
 8000288:	f000 fdc2 	bl	8000e10 <HAL_GetTick>
 800028c:	4602      	mov	r2, r0
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	1ad3      	subs	r3, r2, r3
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	429a      	cmp	r2, r3
 8000296:	d8ef      	bhi.n	8000278 <CanTP_Receive+0x14>
 8000298:	e000      	b.n	800029c <CanTP_Receive+0x38>
//			HAL_GPIO_TogglePin(LEDIn_GPIO_Port, LEDIn_Pin);
			break;
 800029a:	bf00      	nop
		}
	}
	uint8_t status = 0;
 800029c:	2300      	movs	r3, #0
 800029e:	74fb      	strb	r3, [r7, #19]
	if (ISOTP_RECEIVE_STATUS_FULL == isoTP.receive_status) {
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <CanTP_Receive+0x7c>)
 80002a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d10f      	bne.n	80002ca <CanTP_Receive+0x66>
		status = isotp_receive(&isoTP, pData,*len , len);
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	881a      	ldrh	r2, [r3, #0]
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	68f9      	ldr	r1, [r7, #12]
 80002b2:	480b      	ldr	r0, [pc, #44]	; (80002e0 <CanTP_Receive+0x7c>)
 80002b4:	f003 f84a 	bl	800334c <isotp_receive>
 80002b8:	4603      	mov	r3, r0
 80002ba:	74fb      	strb	r3, [r7, #19]
		if (status != ISOTP_RET_OK) {
 80002bc:	7cfb      	ldrb	r3, [r7, #19]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <CanTP_Receive+0x62>
			return HAL_ERROR;
 80002c2:	2301      	movs	r3, #1
 80002c4:	e007      	b.n	80002d6 <CanTP_Receive+0x72>
		}
		return HAL_OK;
 80002c6:	2300      	movs	r3, #0
 80002c8:	e005      	b.n	80002d6 <CanTP_Receive+0x72>
	}
	HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 80002ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ce:	4805      	ldr	r0, [pc, #20]	; (80002e4 <CanTP_Receive+0x80>)
 80002d0:	f001 feea 	bl	80020a8 <HAL_GPIO_TogglePin>
	return HAL_TIMEOUT;
 80002d4:	2303      	movs	r3, #3
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3718      	adds	r7, #24
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000084 	.word	0x20000084
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <CanTP_RcvCallback>:

void CanTP_RcvCallback() {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08a      	sub	sp, #40	; 0x28
 80002ec:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8] = {0};
 80002ee:	2300      	movs	r3, #0
 80002f0:	607b      	str	r3, [r7, #4]
 80002f2:	2300      	movs	r3, #0
 80002f4:	60bb      	str	r3, [r7, #8]
	HAL_CAN_GetRxMessage(&hcan, CAN_FILTER_FIFO0, &RxHeader, RxData);
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	f107 020c 	add.w	r2, r7, #12
 80002fc:	2100      	movs	r1, #0
 80002fe:	4807      	ldr	r0, [pc, #28]	; (800031c <CanTP_RcvCallback+0x34>)
 8000300:	f001 f8bf 	bl	8001482 <HAL_CAN_GetRxMessage>
	isotp_on_can_message(&isoTP, RxData, RxHeader.DLC);
 8000304:	69fb      	ldr	r3, [r7, #28]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	4619      	mov	r1, r3
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <CanTP_RcvCallback+0x38>)
 800030e:	f002 fecb 	bl	80030a8 <isotp_on_can_message>
}
 8000312:	bf00      	nop
 8000314:	3728      	adds	r7, #40	; 0x28
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	2000018c 	.word	0x2000018c
 8000320:	20000084 	.word	0x20000084

08000324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032a:	f000 fd19 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032e:	f000 f82b 	bl	8000388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000332:	f000 f8d1 	bl	80004d8 <MX_GPIO_Init>
  MX_CAN_Init();
 8000336:	f000 f86d 	bl	8000414 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800033a:	f000 f8a3 	bl	8000484 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	DiagnosticService_Init();
 800033e:	f000 fc27 	bl	8000b90 <DiagnosticService_Init>
	uint8_t WData[2] = { 0x12, 0x13 };
 8000342:	f241 3312 	movw	r3, #4882	; 0x1312
 8000346:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, 0);
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034e:	480d      	ldr	r0, [pc, #52]	; (8000384 <main+0x60>)
 8000350:	f001 fe92 	bl	8002078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 0);
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800035a:	480a      	ldr	r0, [pc, #40]	; (8000384 <main+0x60>)
 800035c:	f001 fe8c 	bl	8002078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 0);
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000366:	4807      	ldr	r0, [pc, #28]	; (8000384 <main+0x60>)
 8000368:	f001 fe86 	bl	8002078 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800036c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000370:	f000 fd58 	bl	8000e24 <HAL_Delay>
		Tester_SecurityAccess_RequestService();
 8000374:	f000 fc28 	bl	8000bc8 <Tester_SecurityAccess_RequestService>
		HAL_Delay(2000);
 8000378:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800037c:	f000 fd52 	bl	8000e24 <HAL_Delay>
		HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, 0);
 8000380:	e7e2      	b.n	8000348 <main+0x24>
 8000382:	bf00      	nop
 8000384:	40010c00 	.word	0x40010c00

08000388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b090      	sub	sp, #64	; 0x40
 800038c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	2228      	movs	r2, #40	; 0x28
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f003 fb04 	bl	80039a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003aa:	2301      	movs	r3, #1
 80003ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b8:	2301      	movs	r3, #1
 80003ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003bc:	2302      	movs	r3, #2
 80003be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003cc:	f107 0318 	add.w	r3, r7, #24
 80003d0:	4618      	mov	r0, r3
 80003d2:	f001 fe83 	bl	80020dc <HAL_RCC_OscConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003dc:	f000 f8fc 	bl	80005d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e0:	230f      	movs	r3, #15
 80003e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e4:	2302      	movs	r3, #2
 80003e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2102      	movs	r1, #2
 80003fa:	4618      	mov	r0, r3
 80003fc:	f002 f8f0 	bl	80025e0 <HAL_RCC_ClockConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000406:	f000 f8e7 	bl	80005d8 <Error_Handler>
  }
}
 800040a:	bf00      	nop
 800040c:	3740      	adds	r7, #64	; 0x40
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_CAN_Init+0x68>)
 800041a:	4a19      	ldr	r2, [pc, #100]	; (8000480 <MX_CAN_Init+0x6c>)
 800041c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800041e:	4b17      	ldr	r3, [pc, #92]	; (800047c <MX_CAN_Init+0x68>)
 8000420:	2204      	movs	r2, #4
 8000422:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000424:	4b15      	ldr	r3, [pc, #84]	; (800047c <MX_CAN_Init+0x68>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_CAN_Init+0x68>)
 800042c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000430:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000432:	4b12      	ldr	r3, [pc, #72]	; (800047c <MX_CAN_Init+0x68>)
 8000434:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000438:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <MX_CAN_Init+0x68>)
 800043c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000440:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_CAN_Init+0x68>)
 8000444:	2200      	movs	r2, #0
 8000446:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_CAN_Init+0x68>)
 800044a:	2200      	movs	r2, #0
 800044c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <MX_CAN_Init+0x68>)
 8000450:	2200      	movs	r2, #0
 8000452:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_CAN_Init+0x68>)
 8000456:	2200      	movs	r2, #0
 8000458:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <MX_CAN_Init+0x68>)
 800045c:	2200      	movs	r2, #0
 800045e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_CAN_Init+0x68>)
 8000462:	2200      	movs	r2, #0
 8000464:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000466:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_CAN_Init+0x68>)
 8000468:	f000 fd00 	bl	8000e6c <HAL_CAN_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000472:	f000 f8b1 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	2000018c 	.word	0x2000018c
 8000480:	40006400 	.word	0x40006400

08000484 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 800048a:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <MX_USART1_UART_Init+0x50>)
 800048c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 8000490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000494:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_USART1_UART_Init+0x4c>)
 80004bc:	f002 fa1e 	bl	80028fc <HAL_UART_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004c6:	f000 f887 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200001b4 	.word	0x200001b4
 80004d4:	40013800 	.word	0x40013800

080004d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ec:	4b2e      	ldr	r3, [pc, #184]	; (80005a8 <MX_GPIO_Init+0xd0>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a2d      	ldr	r2, [pc, #180]	; (80005a8 <MX_GPIO_Init+0xd0>)
 80004f2:	f043 0310 	orr.w	r3, r3, #16
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b2b      	ldr	r3, [pc, #172]	; (80005a8 <MX_GPIO_Init+0xd0>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0310 	and.w	r3, r3, #16
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000504:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a27      	ldr	r2, [pc, #156]	; (80005a8 <MX_GPIO_Init+0xd0>)
 800050a:	f043 0320 	orr.w	r3, r3, #32
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0320 	and.w	r3, r3, #32
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051c:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <MX_GPIO_Init+0xd0>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a21      	ldr	r2, [pc, #132]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000522:	f043 0308 	orr.w	r3, r3, #8
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <MX_GPIO_Init+0xd0>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0308 	and.w	r3, r3, #8
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000534:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a1b      	ldr	r2, [pc, #108]	; (80005a8 <MX_GPIO_Init+0xd0>)
 800053a:	f043 0304 	orr.w	r3, r3, #4
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <MX_GPIO_Init+0xd0>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0304 	and.w	r3, r3, #4
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDIn_GPIO_Port, LEDIn_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000552:	4816      	ldr	r0, [pc, #88]	; (80005ac <MX_GPIO_Init+0xd4>)
 8000554:	f001 fd90 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDB_Pin|LEDG_Pin|LEDR_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800055e:	4814      	ldr	r0, [pc, #80]	; (80005b0 <MX_GPIO_Init+0xd8>)
 8000560:	f001 fd8a 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDIn_Pin */
  GPIO_InitStruct.Pin = LEDIn_Pin;
 8000564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	2301      	movs	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	2302      	movs	r3, #2
 8000574:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDIn_GPIO_Port, &GPIO_InitStruct);
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	4619      	mov	r1, r3
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <MX_GPIO_Init+0xd4>)
 800057e:	f001 fbf7 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDG_Pin LEDR_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDG_Pin|LEDR_Pin;
 8000582:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	2301      	movs	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	2302      	movs	r3, #2
 8000592:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	4619      	mov	r1, r3
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_GPIO_Init+0xd8>)
 800059c:	f001 fbe8 	bl	8001d70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005a0:	bf00      	nop
 80005a2:	3720      	adds	r7, #32
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40011000 	.word	0x40011000
 80005b0:	40010c00 	.word	0x40010c00

080005b4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, 1);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c2:	4804      	ldr	r0, [pc, #16]	; (80005d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80005c4:	f001 fd58 	bl	8002078 <HAL_GPIO_WritePin>
	CanTP_RcvCallback();
 80005c8:	f7ff fe8e 	bl	80002e8 <CanTP_RcvCallback>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40010c00 	.word	0x40010c00

080005d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
}
 80005de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005e0:	e7fe      	b.n	80005e0 <Error_Handler+0x8>
	...

080005e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <HAL_MspInit+0x5c>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a14      	ldr	r2, [pc, #80]	; (8000640 <HAL_MspInit+0x5c>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6193      	str	r3, [r2, #24]
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_MspInit+0x5c>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_MspInit+0x5c>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_MspInit+0x5c>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060c:	61d3      	str	r3, [r2, #28]
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_MspInit+0x5c>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <HAL_MspInit+0x60>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <HAL_MspInit+0x60>)
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	40021000 	.word	0x40021000
 8000644:	40010000 	.word	0x40010000

08000648 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a2c      	ldr	r2, [pc, #176]	; (8000714 <HAL_CAN_MspInit+0xcc>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d151      	bne.n	800070c <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000668:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <HAL_CAN_MspInit+0xd0>)
 800066a:	69db      	ldr	r3, [r3, #28]
 800066c:	4a2a      	ldr	r2, [pc, #168]	; (8000718 <HAL_CAN_MspInit+0xd0>)
 800066e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000672:	61d3      	str	r3, [r2, #28]
 8000674:	4b28      	ldr	r3, [pc, #160]	; (8000718 <HAL_CAN_MspInit+0xd0>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <HAL_CAN_MspInit+0xd0>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a24      	ldr	r2, [pc, #144]	; (8000718 <HAL_CAN_MspInit+0xd0>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <HAL_CAN_MspInit+0xd0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800069c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	4619      	mov	r1, r3
 80006ac:	481b      	ldr	r0, [pc, #108]	; (800071c <HAL_CAN_MspInit+0xd4>)
 80006ae:	f001 fb5f 	bl	8001d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	4619      	mov	r1, r3
 80006c6:	4815      	ldr	r0, [pc, #84]	; (800071c <HAL_CAN_MspInit+0xd4>)
 80006c8:	f001 fb52 	bl	8001d70 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	2013      	movs	r0, #19
 80006d2:	f001 fb16 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80006d6:	2013      	movs	r0, #19
 80006d8:	f001 fb2f 	bl	8001d3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2100      	movs	r1, #0
 80006e0:	2014      	movs	r0, #20
 80006e2:	f001 fb0e 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80006e6:	2014      	movs	r0, #20
 80006e8:	f001 fb27 	bl	8001d3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2015      	movs	r0, #21
 80006f2:	f001 fb06 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006f6:	2015      	movs	r0, #21
 80006f8:	f001 fb1f 	bl	8001d3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2100      	movs	r1, #0
 8000700:	2016      	movs	r0, #22
 8000702:	f001 fafe 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000706:	2016      	movs	r0, #22
 8000708:	f001 fb17 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40006400 	.word	0x40006400
 8000718:	40021000 	.word	0x40021000
 800071c:	40010800 	.word	0x40010800

08000720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <HAL_UART_MspInit+0x8c>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d131      	bne.n	80007a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_UART_MspInit+0x90>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a1a      	ldr	r2, [pc, #104]	; (80007b0 <HAL_UART_MspInit+0x90>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_UART_MspInit+0x90>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_UART_MspInit+0x90>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <HAL_UART_MspInit+0x90>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_UART_MspInit+0x90>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000774:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	4619      	mov	r1, r3
 8000784:	480b      	ldr	r0, [pc, #44]	; (80007b4 <HAL_UART_MspInit+0x94>)
 8000786:	f001 faf3 	bl	8001d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800078a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	4619      	mov	r1, r3
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <HAL_UART_MspInit+0x94>)
 80007a0:	f001 fae6 	bl	8001d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007a4:	bf00      	nop
 80007a6:	3720      	adds	r7, #32
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40013800 	.word	0x40013800
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010800 	.word	0x40010800

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr

080007ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr

080007fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fe:	f000 faf5 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800080e:	f000 ff7e 	bl	800170e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000018c 	.word	0x2000018c

0800081c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000822:	f000 ff74 	bl	800170e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000018c 	.word	0x2000018c

08000830 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <CAN1_RX1_IRQHandler+0x10>)
 8000836:	f000 ff6a 	bl	800170e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000018c 	.word	0x2000018c

08000844 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <CAN1_SCE_IRQHandler+0x10>)
 800084a:	f000 ff60 	bl	800170e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000018c 	.word	0x2000018c

08000858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return 1;
 800085c:	2301      	movs	r3, #1
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <_kill>:

int _kill(int pid, int sig)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
 800086e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000870:	f003 f8e6 	bl	8003a40 <__errno>
 8000874:	4603      	mov	r3, r0
 8000876:	2216      	movs	r2, #22
 8000878:	601a      	str	r2, [r3, #0]
  return -1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_exit>:

void _exit (int status)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800088e:	f04f 31ff 	mov.w	r1, #4294967295
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ffe7 	bl	8000866 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000898:	e7fe      	b.n	8000898 <_exit+0x12>

0800089a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	60f8      	str	r0, [r7, #12]
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	e00a      	b.n	80008c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ac:	f3af 8000 	nop.w
 80008b0:	4601      	mov	r1, r0
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	60ba      	str	r2, [r7, #8]
 80008b8:	b2ca      	uxtb	r2, r1
 80008ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	3301      	adds	r3, #1
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	dbf0      	blt.n	80008ac <_read+0x12>
  }

  return len;
 80008ca:	687b      	ldr	r3, [r7, #4]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	e009      	b.n	80008fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	60ba      	str	r2, [r7, #8]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	3301      	adds	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	429a      	cmp	r2, r3
 8000900:	dbf1      	blt.n	80008e6 <_write+0x12>
  }
  return len;
 8000902:	687b      	ldr	r3, [r7, #4]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <_close>:

int _close(int file)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000932:	605a      	str	r2, [r3, #4]
  return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <_isatty>:

int _isatty(int file)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000948:	2301      	movs	r3, #1
}
 800094a:	4618      	mov	r0, r3
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000974:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <_sbrk+0x5c>)
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <_sbrk+0x60>)
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <_sbrk+0x64>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <_sbrk+0x68>)
 800098c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	429a      	cmp	r2, r3
 800099a:	d207      	bcs.n	80009ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800099c:	f003 f850 	bl	8003a40 <__errno>
 80009a0:	4603      	mov	r3, r0
 80009a2:	220c      	movs	r2, #12
 80009a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	e009      	b.n	80009c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <_sbrk+0x64>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <_sbrk+0x64>)
 80009bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009be:	68fb      	ldr	r3, [r7, #12]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20005000 	.word	0x20005000
 80009cc:	00000400 	.word	0x00000400
 80009d0:	200001fc 	.word	0x200001fc
 80009d4:	20000350 	.word	0x20000350

080009d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e4:	f7ff fff8 	bl	80009d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009ea:	490c      	ldr	r1, [pc, #48]	; (8000a1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009ec:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a00:	4c09      	ldr	r4, [pc, #36]	; (8000a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f003 f81d 	bl	8003a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a12:	f7ff fc87 	bl	8000324 <main>
  bx lr
 8000a16:	4770      	bx	lr
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a20:	08004af0 	.word	0x08004af0
  ldr r2, =_sbss
 8000a24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a28:	20000350 	.word	0x20000350

08000a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_2_IRQHandler>

08000a2e <KeyCalculate>:
 */


#include "DiagnosticDefine.h"

void KeyCalculate(uint8_t *Keys, uint8_t *Seeds) {
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
	Keys[0] = Seeds[0] ^ Seeds[1];
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	781a      	ldrb	r2, [r3, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4053      	eors	r3, r2
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	701a      	strb	r2, [r3, #0]
	Keys[1] = Seeds[1] + Seeds[2];
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	7819      	ldrb	r1, [r3, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	3302      	adds	r3, #2
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	440a      	add	r2, r1
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	701a      	strb	r2, [r3, #0]
	Keys[2] = Seeds[2] ^ Seeds[3];
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	3302      	adds	r3, #2
 8000a64:	7819      	ldrb	r1, [r3, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	3303      	adds	r3, #3
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	404a      	eors	r2, r1
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	701a      	strb	r2, [r3, #0]
	Keys[3] = Seeds[3] + Seeds[0];
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	3303      	adds	r3, #3
 8000a7a:	7819      	ldrb	r1, [r3, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	781a      	ldrb	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3303      	adds	r3, #3
 8000a84:	440a      	add	r2, r1
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	701a      	strb	r2, [r3, #0]

	Keys[4] = Seeds[0] | Seeds[1];
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	7819      	ldrb	r1, [r3, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3304      	adds	r3, #4
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	701a      	strb	r2, [r3, #0]
	Keys[5] = Seeds[1] + Seeds[2];
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	7819      	ldrb	r1, [r3, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3305      	adds	r3, #5
 8000aae:	440a      	add	r2, r1
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	701a      	strb	r2, [r3, #0]
	Keys[6] = Seeds[2] | Seeds[3];
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	7819      	ldrb	r1, [r3, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	3303      	adds	r3, #3
 8000abe:	781a      	ldrb	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3306      	adds	r3, #6
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	701a      	strb	r2, [r3, #0]
	Keys[7] = Seeds[3] + Seeds[0];
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	3303      	adds	r3, #3
 8000ace:	7819      	ldrb	r1, [r3, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3307      	adds	r3, #7
 8000ad8:	440a      	add	r2, r1
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	701a      	strb	r2, [r3, #0]

	Keys[8] = Seeds[0] & Seeds[1];
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	7819      	ldrb	r1, [r3, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3308      	adds	r3, #8
 8000aec:	400a      	ands	r2, r1
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	701a      	strb	r2, [r3, #0]
	Keys[9] = Seeds[1] + Seeds[2];
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	7819      	ldrb	r1, [r3, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	3302      	adds	r3, #2
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3309      	adds	r3, #9
 8000b02:	440a      	add	r2, r1
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	701a      	strb	r2, [r3, #0]
	Keys[10] = Seeds[2] & Seeds[3];
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	7819      	ldrb	r1, [r3, #0]
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	3303      	adds	r3, #3
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	330a      	adds	r3, #10
 8000b18:	400a      	ands	r2, r1
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	701a      	strb	r2, [r3, #0]
	Keys[11] = Seeds[3] + Seeds[0];
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	3303      	adds	r3, #3
 8000b22:	7819      	ldrb	r1, [r3, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	781a      	ldrb	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	330b      	adds	r3, #11
 8000b2c:	440a      	add	r2, r1
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	701a      	strb	r2, [r3, #0]

	Keys[12] = Seeds[0] - Seeds[1];
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	7819      	ldrb	r1, [r3, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	781a      	ldrb	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	330c      	adds	r3, #12
 8000b40:	1a8a      	subs	r2, r1, r2
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	701a      	strb	r2, [r3, #0]
	Keys[13] = Seeds[1] + Seeds[2];
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	7819      	ldrb	r1, [r3, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	3302      	adds	r3, #2
 8000b50:	781a      	ldrb	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	330d      	adds	r3, #13
 8000b56:	440a      	add	r2, r1
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	701a      	strb	r2, [r3, #0]
	Keys[14] = Seeds[2] - Seeds[3];
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	3302      	adds	r3, #2
 8000b60:	7819      	ldrb	r1, [r3, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	3303      	adds	r3, #3
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	330e      	adds	r3, #14
 8000b6c:	1a8a      	subs	r2, r1, r2
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	701a      	strb	r2, [r3, #0]
	Keys[15] = Seeds[3] + Seeds[0];
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	3303      	adds	r3, #3
 8000b76:	7819      	ldrb	r1, [r3, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	330f      	adds	r3, #15
 8000b80:	440a      	add	r2, r1
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	701a      	strb	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <DiagnosticService_Init>:

void DiagnosticService_Init() {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
#ifdef TesterNode
	Tester_Init();
 8000b94:	f000 f802 	bl	8000b9c <Tester_Init>
#elif ECUNode
	ECU_Init();
#endif
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <Tester_Init>:
#include "main.h"
#include "CanTP.h"
#include <stdio.h>


uint8_t Tester_Init() {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	HAL_ERR(CanTP_Init(SEND_ID, RECV_ID));
 8000ba0:	f240 7112 	movw	r1, #1810	; 0x712
 8000ba4:	f240 70a2 	movw	r0, #1954	; 0x7a2
 8000ba8:	f7ff fad0 	bl	800014c <CanTP_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d007      	beq.n	8000bc2 <Tester_Init+0x26>
 8000bb2:	f240 7112 	movw	r1, #1810	; 0x712
 8000bb6:	f240 70a2 	movw	r0, #1954	; 0x7a2
 8000bba:	f7ff fac7 	bl	800014c <CanTP_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	e000      	b.n	8000bc4 <Tester_Init+0x28>
	return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <Tester_SecurityAccess_RequestService>:
	}
	HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
	printf("Write Data Failed\r\n");
	return HAL_ERROR;
}
uint8_t Tester_SecurityAccess_RequestService() {
 8000bc8:	b5b0      	push	{r4, r5, r7, lr}
 8000bca:	b090      	sub	sp, #64	; 0x40
 8000bcc:	af00      	add	r7, sp, #0
	uint8_t ReqSeedsBuff[2] =
 8000bce:	f240 1327 	movw	r3, #295	; 0x127
 8000bd2:	873b      	strh	r3, [r7, #56]	; 0x38
			{ SecurityAccess_ReqSID, SecurityAccess_ReqSeedID };
	uint8_t RespSeedsBuff[6];
	uint8_t RespSeedsLen = 6;
 8000bd4:	2306      	movs	r3, #6
 8000bd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_ERR(CanTP_Transmit(ReqSeedsBuff, 2));
 8000bda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bde:	2102      	movs	r1, #2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fb09 	bl	80001f8 <CanTP_Transmit>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d007      	beq.n	8000bfc <Tester_SecurityAccess_RequestService+0x34>
 8000bec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fb00 	bl	80001f8 <CanTP_Transmit>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	e0a4      	b.n	8000d46 <Tester_SecurityAccess_RequestService+0x17e>

	HAL_ERR(CanTP_Receive(RespSeedsBuff, RespSeedsLen, 1000));
 8000bfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c00:	4619      	mov	r1, r3
 8000c02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fb2a 	bl	8000264 <CanTP_Receive>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d00b      	beq.n	8000c2e <Tester_SecurityAccess_RequestService+0x66>
 8000c16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fb1d 	bl	8000264 <CanTP_Receive>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	e08b      	b.n	8000d46 <Tester_SecurityAccess_RequestService+0x17e>
	uint8_t RespSID = RespSeedsBuff[0];
 8000c2e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t RespSF = RespSeedsBuff[1];
 8000c36:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000c3a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	if (RespSID != Get_Positive_RespID(SecurityAccess_ReqSID)
 8000c3e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000c42:	2b67      	cmp	r3, #103	; 0x67
 8000c44:	d103      	bne.n	8000c4e <Tester_SecurityAccess_RequestService+0x86>
			|| RespSF != SecurityAccess_ReqSeedID) {
 8000c46:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d00c      	beq.n	8000c68 <Tester_SecurityAccess_RequestService+0xa0>
		printf("Security Access request Seeds error: %d", RespSeedsBuff[2]);
 8000c4e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000c52:	4619      	mov	r1, r3
 8000c54:	483e      	ldr	r0, [pc, #248]	; (8000d50 <Tester_SecurityAccess_RequestService+0x188>)
 8000c56:	f002 fd3f 	bl	80036d8 <iprintf>
//		HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 1);
		HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 8000c5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5e:	483d      	ldr	r0, [pc, #244]	; (8000d54 <Tester_SecurityAccess_RequestService+0x18c>)
 8000c60:	f001 fa22 	bl	80020a8 <HAL_GPIO_TogglePin>
		return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e06e      	b.n	8000d46 <Tester_SecurityAccess_RequestService+0x17e>
	}
	uint8_t Seeds[4];
	memcpy(Seeds, RespSeedsBuff + 2, 4);
 8000c68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t Keys[16];
	KeyCalculate(Keys, Seeds);
 8000c72:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fed6 	bl	8000a2e <KeyCalculate>

	uint8_t SendKeysBuff[18];
	SendKeysBuff[0] = SecurityAccess_ReqSID;
 8000c82:	2327      	movs	r3, #39	; 0x27
 8000c84:	723b      	strb	r3, [r7, #8]
	SendKeysBuff[1] = SecurityAccess_SendKeyID;
 8000c86:	2302      	movs	r3, #2
 8000c88:	727b      	strb	r3, [r7, #9]
	memcpy(SendKeysBuff + 2, Keys, 16);
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	3302      	adds	r3, #2
 8000c90:	461d      	mov	r5, r3
 8000c92:	f107 041c 	add.w	r4, r7, #28
 8000c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c98:	6028      	str	r0, [r5, #0]
 8000c9a:	6069      	str	r1, [r5, #4]
 8000c9c:	60aa      	str	r2, [r5, #8]
 8000c9e:	60eb      	str	r3, [r5, #12]

	HAL_ERR(CanTP_Transmit(SendKeysBuff, 18));
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	2112      	movs	r1, #18
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff faa6 	bl	80001f8 <CanTP_Transmit>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d007      	beq.n	8000cc2 <Tester_SecurityAccess_RequestService+0xfa>
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	2112      	movs	r1, #18
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fa9d 	bl	80001f8 <CanTP_Transmit>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	e041      	b.n	8000d46 <Tester_SecurityAccess_RequestService+0x17e>
//	uint16_t printSize = 0;
//	printSize = sprintf(PrintBuf, "Send successful\r\n");
//	HAL_UART_Transmit(&huart1, PrintBuf, printSize, 200);

	uint8_t RespCheckKeysBuff[3];
	uint8_t RespCheckKeyLen = 3;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	HAL_ERR(CanTP_Receive(RespCheckKeysBuff, RespCheckKeyLen, 1500));
 8000cc8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000ccc:	4619      	mov	r1, r3
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fac5 	bl	8000264 <CanTP_Receive>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00a      	beq.n	8000cf6 <Tester_SecurityAccess_RequestService+0x12e>
 8000ce0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fab9 	bl	8000264 <CanTP_Receive>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	e027      	b.n	8000d46 <Tester_SecurityAccess_RequestService+0x17e>
	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cfc:	4815      	ldr	r0, [pc, #84]	; (8000d54 <Tester_SecurityAccess_RequestService+0x18c>)
 8000cfe:	f001 f9bb 	bl	8002078 <HAL_GPIO_WritePin>
//	HAL_GPIO_TogglePin(LEDG_GPIO_Port, LEDG_Pin);
	RespSID = RespCheckKeysBuff[0];
 8000d02:	793b      	ldrb	r3, [r7, #4]
 8000d04:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	RespSF = RespCheckKeysBuff[1];
 8000d08:	797b      	ldrb	r3, [r7, #5]
 8000d0a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	if (RespSID == Get_Positive_RespID(SecurityAccess_ReqSID)
 8000d0e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000d12:	2b67      	cmp	r3, #103	; 0x67
 8000d14:	d10e      	bne.n	8000d34 <Tester_SecurityAccess_RequestService+0x16c>
			&& RespSF == SecurityAccess_SendKeyID) {
 8000d16:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d10a      	bne.n	8000d34 <Tester_SecurityAccess_RequestService+0x16c>
//		HAL_GPIO_TogglePin(LEDG_GPIO_Port, LEDG_Pin);
		printf("Security Access Success\r\n");
 8000d1e:	480e      	ldr	r0, [pc, #56]	; (8000d58 <Tester_SecurityAccess_RequestService+0x190>)
 8000d20:	f002 fd40 	bl	80037a4 <puts>
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d2a:	480a      	ldr	r0, [pc, #40]	; (8000d54 <Tester_SecurityAccess_RequestService+0x18c>)
 8000d2c:	f001 f9a4 	bl	8002078 <HAL_GPIO_WritePin>
		return HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	e008      	b.n	8000d46 <Tester_SecurityAccess_RequestService+0x17e>
	}
	HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 8000d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <Tester_SecurityAccess_RequestService+0x18c>)
 8000d3a:	f001 f9b5 	bl	80020a8 <HAL_GPIO_TogglePin>
	printf("Security Access Failed\r\n");
 8000d3e:	4807      	ldr	r0, [pc, #28]	; (8000d5c <Tester_SecurityAccess_RequestService+0x194>)
 8000d40:	f002 fd30 	bl	80037a4 <puts>
	return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3740      	adds	r7, #64	; 0x40
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	08004934 	.word	0x08004934
 8000d54:	40010c00 	.word	0x40010c00
 8000d58:	0800495c 	.word	0x0800495c
 8000d5c:	08004978 	.word	0x08004978

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_Init+0x28>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_Init+0x28>)
 8000d6a:	f043 0310 	orr.w	r3, r3, #16
 8000d6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 ffbb 	bl	8001cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	200f      	movs	r0, #15
 8000d78:	f000 f808 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fc32 	bl	80005e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40022000 	.word	0x40022000

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 ffd3 	bl	8001d56 <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 ff9b 	bl	8001d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x1c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_IncTick+0x20>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <HAL_IncTick+0x20>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000200 	.word	0x20000200

08000e10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b02      	ldr	r3, [pc, #8]	; (8000e20 <HAL_GetTick+0x10>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	20000200 	.word	0x20000200

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff fff0 	bl	8000e10 <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_Delay+0x44>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4a:	bf00      	nop
 8000e4c:	f7ff ffe0 	bl	8000e10 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008

08000e6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e0ed      	b.n	800105a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d102      	bne.n	8000e90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff fbdc 	bl	8000648 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0201 	orr.w	r2, r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ea0:	f7ff ffb6 	bl	8000e10 <HAL_GetTick>
 8000ea4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ea6:	e012      	b.n	8000ece <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ea8:	f7ff ffb2 	bl	8000e10 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b0a      	cmp	r3, #10
 8000eb4:	d90b      	bls.n	8000ece <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e0c5      	b.n	800105a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0e5      	beq.n	8000ea8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0202 	bic.w	r2, r2, #2
 8000eea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eec:	f7ff ff90 	bl	8000e10 <HAL_GetTick>
 8000ef0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ef2:	e012      	b.n	8000f1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ef4:	f7ff ff8c 	bl	8000e10 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b0a      	cmp	r3, #10
 8000f00:	d90b      	bls.n	8000f1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2205      	movs	r2, #5
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e09f      	b.n	800105a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1e5      	bne.n	8000ef4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7e1b      	ldrb	r3, [r3, #24]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d108      	bne.n	8000f42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	e007      	b.n	8000f52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7e5b      	ldrb	r3, [r3, #25]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d108      	bne.n	8000f6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	e007      	b.n	8000f7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	7e9b      	ldrb	r3, [r3, #26]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d108      	bne.n	8000f96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0220 	orr.w	r2, r2, #32
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	e007      	b.n	8000fa6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 0220 	bic.w	r2, r2, #32
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7edb      	ldrb	r3, [r3, #27]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d108      	bne.n	8000fc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0210 	bic.w	r2, r2, #16
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e007      	b.n	8000fd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0210 	orr.w	r2, r2, #16
 8000fce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	7f1b      	ldrb	r3, [r3, #28]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d108      	bne.n	8000fea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0208 	orr.w	r2, r2, #8
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e007      	b.n	8000ffa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0208 	bic.w	r2, r2, #8
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7f5b      	ldrb	r3, [r3, #29]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d108      	bne.n	8001014 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f042 0204 	orr.w	r2, r2, #4
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	e007      	b.n	8001024 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0204 	bic.w	r2, r2, #4
 8001022:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	431a      	orrs	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	ea42 0103 	orr.w	r1, r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	1e5a      	subs	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	430a      	orrs	r2, r1
 8001048:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001062:	b480      	push	{r7}
 8001064:	b087      	sub	sp, #28
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001078:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800107a:	7cfb      	ldrb	r3, [r7, #19]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d003      	beq.n	8001088 <HAL_CAN_ConfigFilter+0x26>
 8001080:	7cfb      	ldrb	r3, [r7, #19]
 8001082:	2b02      	cmp	r3, #2
 8001084:	f040 80aa 	bne.w	80011dc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800108e:	f043 0201 	orr.w	r2, r3, #1
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	f003 031f 	and.w	r3, r3, #31
 80010a0:	2201      	movs	r2, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d123      	bne.n	800110a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	401a      	ands	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3248      	adds	r2, #72	; 0x48
 80010ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001100:	6979      	ldr	r1, [r7, #20]
 8001102:	3348      	adds	r3, #72	; 0x48
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d122      	bne.n	8001158 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	431a      	orrs	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001132:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3248      	adds	r2, #72	; 0x48
 8001138:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800114c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800114e:	6979      	ldr	r1, [r7, #20]
 8001150:	3348      	adds	r3, #72	; 0x48
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	440b      	add	r3, r1
 8001156:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d109      	bne.n	8001174 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43db      	mvns	r3, r3
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001172:	e007      	b.n	8001184 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	431a      	orrs	r2, r3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d109      	bne.n	80011a0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	43db      	mvns	r3, r3
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800119e:	e007      	b.n	80011b0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d107      	bne.n	80011c8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	431a      	orrs	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011ce:	f023 0201 	bic.w	r2, r3, #1
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	e006      	b.n	80011ea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
  }
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	371c      	adds	r7, #28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b01      	cmp	r3, #1
 8001206:	d12e      	bne.n	8001266 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2202      	movs	r2, #2
 800120c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0201 	bic.w	r2, r2, #1
 800121e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001220:	f7ff fdf6 	bl	8000e10 <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001226:	e012      	b.n	800124e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001228:	f7ff fdf2 	bl	8000e10 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b0a      	cmp	r3, #10
 8001234:	d90b      	bls.n	800124e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2205      	movs	r2, #5
 8001246:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e012      	b.n	8001274 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1e5      	bne.n	8001228 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e006      	b.n	8001274 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
  }
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001290:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800129a:	7ffb      	ldrb	r3, [r7, #31]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d003      	beq.n	80012a8 <HAL_CAN_AddTxMessage+0x2c>
 80012a0:	7ffb      	ldrb	r3, [r7, #31]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	f040 80ad 	bne.w	8001402 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10a      	bne.n	80012c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d105      	bne.n	80012c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8095 	beq.w	80013f2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	0e1b      	lsrs	r3, r3, #24
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012d2:	2201      	movs	r2, #1
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10d      	bne.n	8001300 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012ee:	68f9      	ldr	r1, [r7, #12]
 80012f0:	6809      	ldr	r1, [r1, #0]
 80012f2:	431a      	orrs	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3318      	adds	r3, #24
 80012f8:	011b      	lsls	r3, r3, #4
 80012fa:	440b      	add	r3, r1
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	e00f      	b.n	8001320 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800130a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001310:	68f9      	ldr	r1, [r7, #12]
 8001312:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001314:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3318      	adds	r3, #24
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	440b      	add	r3, r1
 800131e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6819      	ldr	r1, [r3, #0]
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3318      	adds	r3, #24
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	440b      	add	r3, r1
 8001330:	3304      	adds	r3, #4
 8001332:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	7d1b      	ldrb	r3, [r3, #20]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d111      	bne.n	8001360 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3318      	adds	r3, #24
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	4413      	add	r3, r2
 8001348:	3304      	adds	r3, #4
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	6811      	ldr	r1, [r2, #0]
 8001350:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3318      	adds	r3, #24
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	440b      	add	r3, r1
 800135c:	3304      	adds	r3, #4
 800135e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3307      	adds	r3, #7
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	061a      	lsls	r2, r3, #24
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3306      	adds	r3, #6
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	041b      	lsls	r3, r3, #16
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3305      	adds	r3, #5
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	4313      	orrs	r3, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	3204      	adds	r2, #4
 8001380:	7812      	ldrb	r2, [r2, #0]
 8001382:	4610      	mov	r0, r2
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	6811      	ldr	r1, [r2, #0]
 8001388:	ea43 0200 	orr.w	r2, r3, r0
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	440b      	add	r3, r1
 8001392:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001396:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3303      	adds	r3, #3
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	061a      	lsls	r2, r3, #24
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3302      	adds	r3, #2
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	041b      	lsls	r3, r3, #16
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3301      	adds	r3, #1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	4313      	orrs	r3, r2
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	7812      	ldrb	r2, [r2, #0]
 80013b8:	4610      	mov	r0, r2
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	6811      	ldr	r1, [r2, #0]
 80013be:	ea43 0200 	orr.w	r2, r3, r0
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	440b      	add	r3, r1
 80013c8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80013cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3318      	adds	r3, #24
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	4413      	add	r3, r2
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	6811      	ldr	r1, [r2, #0]
 80013e0:	f043 0201 	orr.w	r2, r3, #1
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3318      	adds	r3, #24
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	440b      	add	r3, r1
 80013ec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e00e      	b.n	8001410 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e006      	b.n	8001410 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
  }
}
 8001410:	4618      	mov	r0, r3
 8001412:	3724      	adds	r7, #36	; 0x24
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800141a:	b480      	push	{r7}
 800141c:	b085      	sub	sp, #20
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800142c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800142e:	7afb      	ldrb	r3, [r7, #11]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d002      	beq.n	800143a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001434:	7afb      	ldrb	r3, [r7, #11]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d11d      	bne.n	8001476 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3301      	adds	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3301      	adds	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3301      	adds	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001482:	b480      	push	{r7}
 8001484:	b087      	sub	sp, #28
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001496:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d003      	beq.n	80014a6 <HAL_CAN_GetRxMessage+0x24>
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	f040 8103 	bne.w	80016ac <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10e      	bne.n	80014ca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d116      	bne.n	80014e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0f7      	b.n	80016ba <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d107      	bne.n	80014e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0e8      	b.n	80016ba <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	331b      	adds	r3, #27
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	4413      	add	r3, r2
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0204 	and.w	r2, r3, #4
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10c      	bne.n	8001520 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	331b      	adds	r3, #27
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4413      	add	r3, r2
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0d5b      	lsrs	r3, r3, #21
 8001516:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	e00b      	b.n	8001538 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	331b      	adds	r3, #27
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	4413      	add	r3, r2
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	08db      	lsrs	r3, r3, #3
 8001530:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	331b      	adds	r3, #27
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	4413      	add	r3, r2
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0202 	and.w	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	331b      	adds	r3, #27
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	4413      	add	r3, r2
 800155a:	3304      	adds	r3, #4
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2208      	movs	r2, #8
 800156a:	611a      	str	r2, [r3, #16]
 800156c:	e00b      	b.n	8001586 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	331b      	adds	r3, #27
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	3304      	adds	r3, #4
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 020f 	and.w	r2, r3, #15
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	331b      	adds	r3, #27
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	4413      	add	r3, r2
 8001592:	3304      	adds	r3, #4
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	0a1b      	lsrs	r3, r3, #8
 8001598:	b2da      	uxtb	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	331b      	adds	r3, #27
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	3304      	adds	r3, #4
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	0c1b      	lsrs	r3, r3, #16
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	4413      	add	r3, r2
 80015c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	4413      	add	r3, r2
 80015d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	0a1a      	lsrs	r2, r3, #8
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	4413      	add	r3, r2
 80015f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	0c1a      	lsrs	r2, r3, #16
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	3302      	adds	r3, #2
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	4413      	add	r3, r2
 800160a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0e1a      	lsrs	r2, r3, #24
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	3303      	adds	r3, #3
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	4413      	add	r3, r2
 8001624:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	3304      	adds	r3, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	0a1a      	lsrs	r2, r3, #8
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3305      	adds	r3, #5
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	4413      	add	r3, r2
 8001656:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	0c1a      	lsrs	r2, r3, #16
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	3306      	adds	r3, #6
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	4413      	add	r3, r2
 8001670:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	0e1a      	lsrs	r2, r3, #24
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	3307      	adds	r3, #7
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d108      	bne.n	8001698 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0220 	orr.w	r2, r2, #32
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	e007      	b.n	80016a8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0220 	orr.w	r2, r2, #32
 80016a6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e006      	b.n	80016ba <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
  }
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d002      	beq.n	80016e2 <HAL_CAN_ActivateNotification+0x1e>
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d109      	bne.n	80016f6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6959      	ldr	r1, [r3, #20]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e006      	b.n	8001704 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
  }
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b08a      	sub	sp, #40	; 0x28
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d07c      	beq.n	800184e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d023      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2201      	movs	r2, #1
 8001764:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f983 	bl	8001a7c <HAL_CAN_TxMailbox0CompleteCallback>
 8001776:	e016      	b.n	80017a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	d004      	beq.n	800178c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
 800178a:	e00c      	b.n	80017a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d004      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
 800179e:	e002      	b.n	80017a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f986 	bl	8001ab2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d024      	beq.n	80017fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f962 	bl	8001a8e <HAL_CAN_TxMailbox1CompleteCallback>
 80017ca:	e016      	b.n	80017fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
 80017de:	e00c      	b.n	80017fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d004      	beq.n	80017f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
 80017f2:	e002      	b.n	80017fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f965 	bl	8001ac4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d024      	beq.n	800184e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800180c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f941 	bl	8001aa0 <HAL_CAN_TxMailbox2CompleteCallback>
 800181e:	e016      	b.n	800184e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
 8001832:	e00c      	b.n	800184e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d004      	beq.n	8001848 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
 8001846:	e002      	b.n	800184e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f944 	bl	8001ad6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00c      	beq.n	8001872 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001868:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2210      	movs	r2, #16
 8001870:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00b      	beq.n	8001894 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2208      	movs	r2, #8
 800188c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f92a 	bl	8001ae8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7fe fe81 	bl	80005b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00c      	beq.n	80018d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2210      	movs	r2, #16
 80018d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	f003 0320 	and.w	r3, r3, #32
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00b      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d006      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2208      	movs	r2, #8
 80018f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f90a 	bl	8001b0c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f8f2 	bl	8001afa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00b      	beq.n	8001938 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2210      	movs	r2, #16
 8001930:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f8f3 	bl	8001b1e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2208      	movs	r2, #8
 8001952:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f8eb 	bl	8001b30 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d07b      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b00      	cmp	r3, #0
 800196c:	d072      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d043      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d03e      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019dc:	2b60      	cmp	r3, #96	; 0x60
 80019de:	d02b      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x32a>
 80019e0:	2b60      	cmp	r3, #96	; 0x60
 80019e2:	d82e      	bhi.n	8001a42 <HAL_CAN_IRQHandler+0x334>
 80019e4:	2b50      	cmp	r3, #80	; 0x50
 80019e6:	d022      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x320>
 80019e8:	2b50      	cmp	r3, #80	; 0x50
 80019ea:	d82a      	bhi.n	8001a42 <HAL_CAN_IRQHandler+0x334>
 80019ec:	2b40      	cmp	r3, #64	; 0x40
 80019ee:	d019      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x316>
 80019f0:	2b40      	cmp	r3, #64	; 0x40
 80019f2:	d826      	bhi.n	8001a42 <HAL_CAN_IRQHandler+0x334>
 80019f4:	2b30      	cmp	r3, #48	; 0x30
 80019f6:	d010      	beq.n	8001a1a <HAL_CAN_IRQHandler+0x30c>
 80019f8:	2b30      	cmp	r3, #48	; 0x30
 80019fa:	d822      	bhi.n	8001a42 <HAL_CAN_IRQHandler+0x334>
 80019fc:	2b10      	cmp	r3, #16
 80019fe:	d002      	beq.n	8001a06 <HAL_CAN_IRQHandler+0x2f8>
 8001a00:	2b20      	cmp	r3, #32
 8001a02:	d005      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a04:	e01d      	b.n	8001a42 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	f043 0308 	orr.w	r3, r3, #8
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a0e:	e019      	b.n	8001a44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	f043 0310 	orr.w	r3, r3, #16
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a18:	e014      	b.n	8001a44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	f043 0320 	orr.w	r3, r3, #32
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a22:	e00f      	b.n	8001a44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a2c:	e00a      	b.n	8001a44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a36:	e005      	b.n	8001a44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a40:	e000      	b.n	8001a44 <HAL_CAN_IRQHandler+0x336>
            break;
 8001a42:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699a      	ldr	r2, [r3, #24]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a52:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2204      	movs	r2, #4
 8001a5a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f867 	bl	8001b42 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b70:	4013      	ands	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b86:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	60d3      	str	r3, [r2, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	f003 0307 	and.w	r3, r3, #7
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	db0b      	blt.n	8001be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	f003 021f 	and.w	r2, r3, #31
 8001bd0:	4906      	ldr	r1, [pc, #24]	; (8001bec <__NVIC_EnableIRQ+0x34>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2001      	movs	r0, #1
 8001bda:	fa00 f202 	lsl.w	r2, r0, r2
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	; (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	; (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb8:	d301      	bcc.n	8001cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00f      	b.n	8001cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <SysTick_Config+0x40>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f7ff ff90 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <SysTick_Config+0x40>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <SysTick_Config+0x40>)
 8001cd8:	2207      	movs	r2, #7
 8001cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	e000e010 	.word	0xe000e010

08001cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ff2d 	bl	8001b54 <__NVIC_SetPriorityGrouping>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d14:	f7ff ff42 	bl	8001b9c <__NVIC_GetPriorityGrouping>
 8001d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	6978      	ldr	r0, [r7, #20]
 8001d20:	f7ff ff90 	bl	8001c44 <NVIC_EncodePriority>
 8001d24:	4602      	mov	r2, r0
 8001d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff5f 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff35 	bl	8001bb8 <__NVIC_EnableIRQ>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ffa2 	bl	8001ca8 <SysTick_Config>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b08b      	sub	sp, #44	; 0x2c
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d82:	e169      	b.n	8002058 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d84:	2201      	movs	r2, #1
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	f040 8158 	bne.w	8002052 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4a9a      	ldr	r2, [pc, #616]	; (8002010 <HAL_GPIO_Init+0x2a0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d05e      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
 8001dac:	4a98      	ldr	r2, [pc, #608]	; (8002010 <HAL_GPIO_Init+0x2a0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d875      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001db2:	4a98      	ldr	r2, [pc, #608]	; (8002014 <HAL_GPIO_Init+0x2a4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d058      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
 8001db8:	4a96      	ldr	r2, [pc, #600]	; (8002014 <HAL_GPIO_Init+0x2a4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d86f      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001dbe:	4a96      	ldr	r2, [pc, #600]	; (8002018 <HAL_GPIO_Init+0x2a8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d052      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
 8001dc4:	4a94      	ldr	r2, [pc, #592]	; (8002018 <HAL_GPIO_Init+0x2a8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d869      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001dca:	4a94      	ldr	r2, [pc, #592]	; (800201c <HAL_GPIO_Init+0x2ac>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d04c      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
 8001dd0:	4a92      	ldr	r2, [pc, #584]	; (800201c <HAL_GPIO_Init+0x2ac>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d863      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001dd6:	4a92      	ldr	r2, [pc, #584]	; (8002020 <HAL_GPIO_Init+0x2b0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d046      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
 8001ddc:	4a90      	ldr	r2, [pc, #576]	; (8002020 <HAL_GPIO_Init+0x2b0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d85d      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001de2:	2b12      	cmp	r3, #18
 8001de4:	d82a      	bhi.n	8001e3c <HAL_GPIO_Init+0xcc>
 8001de6:	2b12      	cmp	r3, #18
 8001de8:	d859      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001dea:	a201      	add	r2, pc, #4	; (adr r2, 8001df0 <HAL_GPIO_Init+0x80>)
 8001dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df0:	08001e6b 	.word	0x08001e6b
 8001df4:	08001e45 	.word	0x08001e45
 8001df8:	08001e57 	.word	0x08001e57
 8001dfc:	08001e99 	.word	0x08001e99
 8001e00:	08001e9f 	.word	0x08001e9f
 8001e04:	08001e9f 	.word	0x08001e9f
 8001e08:	08001e9f 	.word	0x08001e9f
 8001e0c:	08001e9f 	.word	0x08001e9f
 8001e10:	08001e9f 	.word	0x08001e9f
 8001e14:	08001e9f 	.word	0x08001e9f
 8001e18:	08001e9f 	.word	0x08001e9f
 8001e1c:	08001e9f 	.word	0x08001e9f
 8001e20:	08001e9f 	.word	0x08001e9f
 8001e24:	08001e9f 	.word	0x08001e9f
 8001e28:	08001e9f 	.word	0x08001e9f
 8001e2c:	08001e9f 	.word	0x08001e9f
 8001e30:	08001e9f 	.word	0x08001e9f
 8001e34:	08001e4d 	.word	0x08001e4d
 8001e38:	08001e61 	.word	0x08001e61
 8001e3c:	4a79      	ldr	r2, [pc, #484]	; (8002024 <HAL_GPIO_Init+0x2b4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e42:	e02c      	b.n	8001e9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	623b      	str	r3, [r7, #32]
          break;
 8001e4a:	e029      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	3304      	adds	r3, #4
 8001e52:	623b      	str	r3, [r7, #32]
          break;
 8001e54:	e024      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	3308      	adds	r3, #8
 8001e5c:	623b      	str	r3, [r7, #32]
          break;
 8001e5e:	e01f      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	330c      	adds	r3, #12
 8001e66:	623b      	str	r3, [r7, #32]
          break;
 8001e68:	e01a      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e72:	2304      	movs	r3, #4
 8001e74:	623b      	str	r3, [r7, #32]
          break;
 8001e76:	e013      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d105      	bne.n	8001e8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e80:	2308      	movs	r3, #8
 8001e82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	611a      	str	r2, [r3, #16]
          break;
 8001e8a:	e009      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	615a      	str	r2, [r3, #20]
          break;
 8001e96:	e003      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
          break;
 8001e9c:	e000      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          break;
 8001e9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2bff      	cmp	r3, #255	; 0xff
 8001ea4:	d801      	bhi.n	8001eaa <HAL_GPIO_Init+0x13a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	e001      	b.n	8001eae <HAL_GPIO_Init+0x13e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3304      	adds	r3, #4
 8001eae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2bff      	cmp	r3, #255	; 0xff
 8001eb4:	d802      	bhi.n	8001ebc <HAL_GPIO_Init+0x14c>
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	e002      	b.n	8001ec2 <HAL_GPIO_Init+0x152>
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	3b08      	subs	r3, #8
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	210f      	movs	r1, #15
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	6a39      	ldr	r1, [r7, #32]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	431a      	orrs	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80b1 	beq.w	8002052 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef0:	4b4d      	ldr	r3, [pc, #308]	; (8002028 <HAL_GPIO_Init+0x2b8>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a4c      	ldr	r2, [pc, #304]	; (8002028 <HAL_GPIO_Init+0x2b8>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6193      	str	r3, [r2, #24]
 8001efc:	4b4a      	ldr	r3, [pc, #296]	; (8002028 <HAL_GPIO_Init+0x2b8>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f08:	4a48      	ldr	r2, [pc, #288]	; (800202c <HAL_GPIO_Init+0x2bc>)
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	220f      	movs	r2, #15
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a40      	ldr	r2, [pc, #256]	; (8002030 <HAL_GPIO_Init+0x2c0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <HAL_GPIO_Init+0x1ec>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3f      	ldr	r2, [pc, #252]	; (8002034 <HAL_GPIO_Init+0x2c4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00d      	beq.n	8001f58 <HAL_GPIO_Init+0x1e8>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3e      	ldr	r2, [pc, #248]	; (8002038 <HAL_GPIO_Init+0x2c8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d007      	beq.n	8001f54 <HAL_GPIO_Init+0x1e4>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3d      	ldr	r2, [pc, #244]	; (800203c <HAL_GPIO_Init+0x2cc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d101      	bne.n	8001f50 <HAL_GPIO_Init+0x1e0>
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e006      	b.n	8001f5e <HAL_GPIO_Init+0x1ee>
 8001f50:	2304      	movs	r3, #4
 8001f52:	e004      	b.n	8001f5e <HAL_GPIO_Init+0x1ee>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e002      	b.n	8001f5e <HAL_GPIO_Init+0x1ee>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <HAL_GPIO_Init+0x1ee>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f60:	f002 0203 	and.w	r2, r2, #3
 8001f64:	0092      	lsls	r2, r2, #2
 8001f66:	4093      	lsls	r3, r2
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f6e:	492f      	ldr	r1, [pc, #188]	; (800202c <HAL_GPIO_Init+0x2bc>)
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	3302      	adds	r3, #2
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d006      	beq.n	8001f96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f88:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	492c      	ldr	r1, [pc, #176]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]
 8001f94:	e006      	b.n	8001fa4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f96:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	4928      	ldr	r1, [pc, #160]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d006      	beq.n	8001fbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fb0:	4b23      	ldr	r3, [pc, #140]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4922      	ldr	r1, [pc, #136]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60cb      	str	r3, [r1, #12]
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fbe:	4b20      	ldr	r3, [pc, #128]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	491e      	ldr	r1, [pc, #120]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	4918      	ldr	r1, [pc, #96]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	4914      	ldr	r1, [pc, #80]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d021      	beq.n	8002044 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	490e      	ldr	r1, [pc, #56]	; (8002040 <HAL_GPIO_Init+0x2d0>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
 800200c:	e021      	b.n	8002052 <HAL_GPIO_Init+0x2e2>
 800200e:	bf00      	nop
 8002010:	10320000 	.word	0x10320000
 8002014:	10310000 	.word	0x10310000
 8002018:	10220000 	.word	0x10220000
 800201c:	10210000 	.word	0x10210000
 8002020:	10120000 	.word	0x10120000
 8002024:	10110000 	.word	0x10110000
 8002028:	40021000 	.word	0x40021000
 800202c:	40010000 	.word	0x40010000
 8002030:	40010800 	.word	0x40010800
 8002034:	40010c00 	.word	0x40010c00
 8002038:	40011000 	.word	0x40011000
 800203c:	40011400 	.word	0x40011400
 8002040:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_GPIO_Init+0x304>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	43db      	mvns	r3, r3
 800204c:	4909      	ldr	r1, [pc, #36]	; (8002074 <HAL_GPIO_Init+0x304>)
 800204e:	4013      	ands	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	3301      	adds	r3, #1
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	fa22 f303 	lsr.w	r3, r2, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	f47f ae8e 	bne.w	8001d84 <HAL_GPIO_Init+0x14>
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	372c      	adds	r7, #44	; 0x2c
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	40010400 	.word	0x40010400

08002078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]
 8002084:	4613      	mov	r3, r2
 8002086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002088:	787b      	ldrb	r3, [r7, #1]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208e:	887a      	ldrh	r2, [r7, #2]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002094:	e003      	b.n	800209e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002096:	887b      	ldrh	r3, [r7, #2]
 8002098:	041a      	lsls	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	611a      	str	r2, [r3, #16]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020ba:	887a      	ldrh	r2, [r7, #2]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	041a      	lsls	r2, r3, #16
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	43d9      	mvns	r1, r3
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	400b      	ands	r3, r1
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	611a      	str	r2, [r3, #16]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
	...

080020dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e272      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8087 	beq.w	800220a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020fc:	4b92      	ldr	r3, [pc, #584]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b04      	cmp	r3, #4
 8002106:	d00c      	beq.n	8002122 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002108:	4b8f      	ldr	r3, [pc, #572]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b08      	cmp	r3, #8
 8002112:	d112      	bne.n	800213a <HAL_RCC_OscConfig+0x5e>
 8002114:	4b8c      	ldr	r3, [pc, #560]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002120:	d10b      	bne.n	800213a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002122:	4b89      	ldr	r3, [pc, #548]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d06c      	beq.n	8002208 <HAL_RCC_OscConfig+0x12c>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d168      	bne.n	8002208 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e24c      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x76>
 8002144:	4b80      	ldr	r3, [pc, #512]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a7f      	ldr	r2, [pc, #508]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800214a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	e02e      	b.n	80021b0 <HAL_RCC_OscConfig+0xd4>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x98>
 800215a:	4b7b      	ldr	r3, [pc, #492]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a7a      	ldr	r2, [pc, #488]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b78      	ldr	r3, [pc, #480]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a77      	ldr	r2, [pc, #476]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800216c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e01d      	b.n	80021b0 <HAL_RCC_OscConfig+0xd4>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0xbc>
 800217e:	4b72      	ldr	r3, [pc, #456]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a71      	ldr	r2, [pc, #452]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b6f      	ldr	r3, [pc, #444]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a6e      	ldr	r2, [pc, #440]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xd4>
 8002198:	4b6b      	ldr	r3, [pc, #428]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a6a      	ldr	r2, [pc, #424]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800219e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b68      	ldr	r3, [pc, #416]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a67      	ldr	r2, [pc, #412]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7fe fe2a 	bl	8000e10 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c0:	f7fe fe26 	bl	8000e10 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e200      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b5d      	ldr	r3, [pc, #372]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0xe4>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7fe fe16 	bl	8000e10 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e8:	f7fe fe12 	bl	8000e10 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	; 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e1ec      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	4b53      	ldr	r3, [pc, #332]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x10c>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d063      	beq.n	80022de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002216:	4b4c      	ldr	r3, [pc, #304]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002222:	4b49      	ldr	r3, [pc, #292]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b08      	cmp	r3, #8
 800222c:	d11c      	bne.n	8002268 <HAL_RCC_OscConfig+0x18c>
 800222e:	4b46      	ldr	r3, [pc, #280]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d116      	bne.n	8002268 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	4b43      	ldr	r3, [pc, #268]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x176>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1c0      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4939      	ldr	r1, [pc, #228]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	e03a      	b.n	80022de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002270:	4b36      	ldr	r3, [pc, #216]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7fe fdcb 	bl	8000e10 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800227e:	f7fe fdc7 	bl	8000e10 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e1a1      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4927      	ldr	r1, [pc, #156]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	e015      	b.n	80022de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <HAL_RCC_OscConfig+0x270>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7fe fdaa 	bl	8000e10 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe fda6 	bl	8000e10 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e180      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d03a      	beq.n	8002360 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d019      	beq.n	8002326 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f8:	f7fe fd8a 	bl	8000e10 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002300:	f7fe fd86 	bl	8000e10 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e160      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_RCC_OscConfig+0x26c>)
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800231e:	2001      	movs	r0, #1
 8002320:	f000 face 	bl	80028c0 <RCC_Delay>
 8002324:	e01c      	b.n	8002360 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232c:	f7fe fd70 	bl	8000e10 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002332:	e00f      	b.n	8002354 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002334:	f7fe fd6c 	bl	8000e10 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d908      	bls.n	8002354 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e146      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	42420000 	.word	0x42420000
 8002350:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002354:	4b92      	ldr	r3, [pc, #584]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e9      	bne.n	8002334 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80a6 	beq.w	80024ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002372:	4b8b      	ldr	r3, [pc, #556]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10d      	bne.n	800239a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	4b88      	ldr	r3, [pc, #544]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	4a87      	ldr	r2, [pc, #540]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002388:	61d3      	str	r3, [r2, #28]
 800238a:	4b85      	ldr	r3, [pc, #532]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002396:	2301      	movs	r3, #1
 8002398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	4b82      	ldr	r3, [pc, #520]	; (80025a4 <HAL_RCC_OscConfig+0x4c8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d118      	bne.n	80023d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a6:	4b7f      	ldr	r3, [pc, #508]	; (80025a4 <HAL_RCC_OscConfig+0x4c8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a7e      	ldr	r2, [pc, #504]	; (80025a4 <HAL_RCC_OscConfig+0x4c8>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b2:	f7fe fd2d 	bl	8000e10 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ba:	f7fe fd29 	bl	8000e10 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b64      	cmp	r3, #100	; 0x64
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e103      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023cc:	4b75      	ldr	r3, [pc, #468]	; (80025a4 <HAL_RCC_OscConfig+0x4c8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d106      	bne.n	80023ee <HAL_RCC_OscConfig+0x312>
 80023e0:	4b6f      	ldr	r3, [pc, #444]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4a6e      	ldr	r2, [pc, #440]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6213      	str	r3, [r2, #32]
 80023ec:	e02d      	b.n	800244a <HAL_RCC_OscConfig+0x36e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x334>
 80023f6:	4b6a      	ldr	r3, [pc, #424]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a69      	ldr	r2, [pc, #420]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	4b67      	ldr	r3, [pc, #412]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a66      	ldr	r2, [pc, #408]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	f023 0304 	bic.w	r3, r3, #4
 800240c:	6213      	str	r3, [r2, #32]
 800240e:	e01c      	b.n	800244a <HAL_RCC_OscConfig+0x36e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b05      	cmp	r3, #5
 8002416:	d10c      	bne.n	8002432 <HAL_RCC_OscConfig+0x356>
 8002418:	4b61      	ldr	r3, [pc, #388]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a60      	ldr	r2, [pc, #384]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	f043 0304 	orr.w	r3, r3, #4
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	4b5e      	ldr	r3, [pc, #376]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4a5d      	ldr	r2, [pc, #372]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6213      	str	r3, [r2, #32]
 8002430:	e00b      	b.n	800244a <HAL_RCC_OscConfig+0x36e>
 8002432:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4a5a      	ldr	r2, [pc, #360]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	f023 0301 	bic.w	r3, r3, #1
 800243c:	6213      	str	r3, [r2, #32]
 800243e:	4b58      	ldr	r3, [pc, #352]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4a57      	ldr	r2, [pc, #348]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	f023 0304 	bic.w	r3, r3, #4
 8002448:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d015      	beq.n	800247e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7fe fcdd 	bl	8000e10 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245a:	f7fe fcd9 	bl	8000e10 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f241 3288 	movw	r2, #5000	; 0x1388
 8002468:	4293      	cmp	r3, r2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e0b1      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002470:	4b4b      	ldr	r3, [pc, #300]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0ee      	beq.n	800245a <HAL_RCC_OscConfig+0x37e>
 800247c:	e014      	b.n	80024a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247e:	f7fe fcc7 	bl	8000e10 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002484:	e00a      	b.n	800249c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002486:	f7fe fcc3 	bl	8000e10 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f241 3288 	movw	r2, #5000	; 0x1388
 8002494:	4293      	cmp	r3, r2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e09b      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249c:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1ee      	bne.n	8002486 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d105      	bne.n	80024ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ae:	4b3c      	ldr	r3, [pc, #240]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	4a3b      	ldr	r2, [pc, #236]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8087 	beq.w	80025d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c4:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d061      	beq.n	8002594 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d146      	bne.n	8002566 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d8:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <HAL_RCC_OscConfig+0x4cc>)
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7fe fc97 	bl	8000e10 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e6:	f7fe fc93 	bl	8000e10 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e06d      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f8:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f0      	bne.n	80024e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d108      	bne.n	8002520 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800250e:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	4921      	ldr	r1, [pc, #132]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002520:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a19      	ldr	r1, [r3, #32]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	430b      	orrs	r3, r1
 8002532:	491b      	ldr	r1, [pc, #108]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_RCC_OscConfig+0x4cc>)
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253e:	f7fe fc67 	bl	8000e10 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002546:	f7fe fc63 	bl	8000e10 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e03d      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x46a>
 8002564:	e035      	b.n	80025d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <HAL_RCC_OscConfig+0x4cc>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe fc50 	bl	8000e10 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002574:	f7fe fc4c 	bl	8000e10 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e026      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x498>
 8002592:	e01e      	b.n	80025d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d107      	bne.n	80025ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e019      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40007000 	.word	0x40007000
 80025a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_OscConfig+0x500>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000

080025e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0d0      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f4:	4b6a      	ldr	r3, [pc, #424]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d910      	bls.n	8002624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b67      	ldr	r3, [pc, #412]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 0207 	bic.w	r2, r3, #7
 800260a:	4965      	ldr	r1, [pc, #404]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b63      	ldr	r3, [pc, #396]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0b8      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800263c:	4b59      	ldr	r3, [pc, #356]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a58      	ldr	r2, [pc, #352]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002646:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002654:	4b53      	ldr	r3, [pc, #332]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a52      	ldr	r2, [pc, #328]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800265e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002660:	4b50      	ldr	r3, [pc, #320]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	494d      	ldr	r1, [pc, #308]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d040      	beq.n	8002700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d115      	bne.n	80026be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e07f      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e073      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ae:	4b3d      	ldr	r3, [pc, #244]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06b      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026be:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f023 0203 	bic.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4936      	ldr	r1, [pc, #216]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d0:	f7fe fb9e 	bl	8000e10 <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d8:	f7fe fb9a 	bl	8000e10 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e053      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 020c 	and.w	r2, r3, #12
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1eb      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002700:	4b27      	ldr	r3, [pc, #156]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d210      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 0207 	bic.w	r2, r3, #7
 8002716:	4922      	ldr	r1, [pc, #136]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e032      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4916      	ldr	r1, [pc, #88]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	490e      	ldr	r1, [pc, #56]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800276e:	f000 f821 	bl	80027b4 <HAL_RCC_GetSysClockFreq>
 8002772:	4602      	mov	r2, r0
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	490a      	ldr	r1, [pc, #40]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002780:	5ccb      	ldrb	r3, [r1, r3]
 8002782:	fa22 f303 	lsr.w	r3, r2, r3
 8002786:	4a09      	ldr	r2, [pc, #36]	; (80027ac <HAL_RCC_ClockConfig+0x1cc>)
 8002788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_RCC_ClockConfig+0x1d0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fafc 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40022000 	.word	0x40022000
 80027a4:	40021000 	.word	0x40021000
 80027a8:	08004a00 	.word	0x08004a00
 80027ac:	20000000 	.word	0x20000000
 80027b0:	20000004 	.word	0x20000004

080027b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ce:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <HAL_RCC_GetSysClockFreq+0x94>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d002      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x30>
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d003      	beq.n	80027ea <HAL_RCC_GetSysClockFreq+0x36>
 80027e2:	e027      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_GetSysClockFreq+0x98>)
 80027e6:	613b      	str	r3, [r7, #16]
      break;
 80027e8:	e027      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	0c9b      	lsrs	r3, r3, #18
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	4a17      	ldr	r2, [pc, #92]	; (8002850 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027f4:	5cd3      	ldrb	r3, [r2, r3]
 80027f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d010      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002802:	4b11      	ldr	r3, [pc, #68]	; (8002848 <HAL_RCC_GetSysClockFreq+0x94>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	0c5b      	lsrs	r3, r3, #17
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	4a11      	ldr	r2, [pc, #68]	; (8002854 <HAL_RCC_GetSysClockFreq+0xa0>)
 800280e:	5cd3      	ldrb	r3, [r2, r3]
 8002810:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a0d      	ldr	r2, [pc, #52]	; (800284c <HAL_RCC_GetSysClockFreq+0x98>)
 8002816:	fb03 f202 	mul.w	r2, r3, r2
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e004      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a0c      	ldr	r2, [pc, #48]	; (8002858 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	613b      	str	r3, [r7, #16]
      break;
 8002832:	e002      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCC_GetSysClockFreq+0x98>)
 8002836:	613b      	str	r3, [r7, #16]
      break;
 8002838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283a:	693b      	ldr	r3, [r7, #16]
}
 800283c:	4618      	mov	r0, r3
 800283e:	371c      	adds	r7, #28
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	007a1200 	.word	0x007a1200
 8002850:	08004a18 	.word	0x08004a18
 8002854:	08004a28 	.word	0x08004a28
 8002858:	003d0900 	.word	0x003d0900

0800285c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002860:	4b02      	ldr	r3, [pc, #8]	; (800286c <HAL_RCC_GetHCLKFreq+0x10>)
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	20000000 	.word	0x20000000

08002870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002874:	f7ff fff2 	bl	800285c <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4903      	ldr	r1, [pc, #12]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	08004a10 	.word	0x08004a10

08002898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800289c:	f7ff ffde 	bl	800285c <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	0adb      	lsrs	r3, r3, #11
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000
 80028bc:	08004a10 	.word	0x08004a10

080028c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <RCC_Delay+0x34>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <RCC_Delay+0x38>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0a5b      	lsrs	r3, r3, #9
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028dc:	bf00      	nop
  }
  while (Delay --);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1e5a      	subs	r2, r3, #1
 80028e2:	60fa      	str	r2, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f9      	bne.n	80028dc <RCC_Delay+0x1c>
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	20000000 	.word	0x20000000
 80028f8:	10624dd3 	.word	0x10624dd3

080028fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e042      	b.n	8002994 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fd fefc 	bl	8000720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2224      	movs	r2, #36	; 0x24
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800293e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f82b 	bl	800299c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029d6:	f023 030c 	bic.w	r3, r3, #12
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a2c      	ldr	r2, [pc, #176]	; (8002ab0 <UART_SetConfig+0x114>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d103      	bne.n	8002a0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a04:	f7ff ff48 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	e002      	b.n	8002a12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a0c:	f7ff ff30 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8002a10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	009a      	lsls	r2, r3, #2
 8002a1c:	441a      	add	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <UART_SetConfig+0x118>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	0119      	lsls	r1, r3, #4
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	009a      	lsls	r2, r3, #2
 8002a3c:	441a      	add	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <UART_SetConfig+0x118>)
 8002a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2064      	movs	r0, #100	; 0x64
 8002a52:	fb00 f303 	mul.w	r3, r0, r3
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	3332      	adds	r3, #50	; 0x32
 8002a5c:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <UART_SetConfig+0x118>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a68:	4419      	add	r1, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	009a      	lsls	r2, r3, #2
 8002a74:	441a      	add	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <UART_SetConfig+0x118>)
 8002a82:	fba3 0302 	umull	r0, r3, r3, r2
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2064      	movs	r0, #100	; 0x64
 8002a8a:	fb00 f303 	mul.w	r3, r0, r3
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	3332      	adds	r3, #50	; 0x32
 8002a94:	4a07      	ldr	r2, [pc, #28]	; (8002ab4 <UART_SetConfig+0x118>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	f003 020f 	and.w	r2, r3, #15
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	440a      	add	r2, r1
 8002aa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002aa8:	bf00      	nop
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	51eb851f 	.word	0x51eb851f

08002ab8 <isotp_user_send_can>:
///////////////////////////////////////////////////////
///                 STATIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_user_send_can(const uint32_t arbitration_id, const uint8_t *data,
		const uint8_t size) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08e      	sub	sp, #56	; 0x38
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef TxHeader = { 0 };
 8002ac6:	f107 0318 	add.w	r3, r7, #24
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	609a      	str	r2, [r3, #8]
 8002ad2:	60da      	str	r2, [r3, #12]
 8002ad4:	611a      	str	r2, [r3, #16]
 8002ad6:	615a      	str	r2, [r3, #20]
	TxHeader.DLC = size;
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.RTR = CAN_RTR_DATA;
 8002adc:	2300      	movs	r3, #0
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.IDE = CAN_ID_STD;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = arbitration_id;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	61bb      	str	r3, [r7, #24]
	uint32_t TxMailBox;
	uint32_t FreeLevel = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8002ae8:	480d      	ldr	r0, [pc, #52]	; (8002b20 <isotp_user_send_can+0x68>)
 8002aea:	f7fe fc96 	bl	800141a <HAL_CAN_GetTxMailboxesFreeLevel>
 8002aee:	6378      	str	r0, [r7, #52]	; 0x34
	if (FreeLevel == 0) return ISOTP_RET_ERROR;
 8002af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <isotp_user_send_can+0x44>
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295
 8002afa:	e00c      	b.n	8002b16 <isotp_user_send_can+0x5e>
	uint8_t ret = HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailBox);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	f107 0118 	add.w	r1, r7, #24
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	4806      	ldr	r0, [pc, #24]	; (8002b20 <isotp_user_send_can+0x68>)
 8002b08:	f7fe fbb8 	bl	800127c <HAL_CAN_AddTxMessage>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	return ret;
 8002b12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3738      	adds	r7, #56	; 0x38
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	2000018c 	.word	0x2000018c

08002b24 <isotp_user_get_ms>:

uint32_t isotp_user_get_ms(void){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002b28:	f7fe f972 	bl	8000e10 <HAL_GetTick>
 8002b2c:	4603      	mov	r3, r0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <isotp_ms_to_st_min>:

/* st_min to microsecond */
static uint8_t isotp_ms_to_st_min(uint8_t ms) {
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	4603      	mov	r3, r0
 8002b3a:	71fb      	strb	r3, [r7, #7]
    uint8_t st_min;

    st_min = ms;
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	73fb      	strb	r3, [r7, #15]
    if (st_min > 0x7F) {
 8002b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	da01      	bge.n	8002b4c <isotp_ms_to_st_min+0x1a>
        st_min = 0x7F;
 8002b48:	237f      	movs	r3, #127	; 0x7f
 8002b4a:	73fb      	strb	r3, [r7, #15]
    }

    return st_min;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <isotp_st_min_to_ms>:

/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) {
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9) {
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	2bf0      	cmp	r3, #240	; 0xf0
 8002b66:	d905      	bls.n	8002b74 <isotp_st_min_to_ms+0x1c>
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	2bf9      	cmp	r3, #249	; 0xf9
 8002b6c:	d802      	bhi.n	8002b74 <isotp_st_min_to_ms+0x1c>
        ms = 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
 8002b72:	e008      	b.n	8002b86 <isotp_st_min_to_ms+0x2e>
    } else if (st_min <= 0x7F) {
 8002b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	db02      	blt.n	8002b82 <isotp_st_min_to_ms+0x2a>
        ms = st_min;
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	e001      	b.n	8002b86 <isotp_st_min_to_ms+0x2e>
    } else {
        ms = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]
    }

    return ms;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <isotp_send_flow_control>:

static int isotp_send_flow_control(IsoTpLink* link, uint8_t flow_status, uint8_t block_size, uint8_t st_min_ms) {
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	4608      	mov	r0, r1
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	70fb      	strb	r3, [r7, #3]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70bb      	strb	r3, [r7, #2]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	707b      	strb	r3, [r7, #1]

    IsoTpCanMessage message;
    int ret;

    /* setup message  */
    message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
 8002bac:	7b3b      	ldrb	r3, [r7, #12]
 8002bae:	2203      	movs	r2, #3
 8002bb0:	f362 1307 	bfi	r3, r2, #4, #4
 8002bb4:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.FS = flow_status;
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	7b3b      	ldrb	r3, [r7, #12]
 8002bc0:	f362 0303 	bfi	r3, r2, #0, #4
 8002bc4:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.BS = block_size;
 8002bc6:	78bb      	ldrb	r3, [r7, #2]
 8002bc8:	737b      	strb	r3, [r7, #13]
    message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
 8002bca:	787b      	ldrb	r3, [r7, #1]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff ffb0 	bl	8002b32 <isotp_ms_to_st_min>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	73bb      	strb	r3, [r7, #14]

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.flow_control.reserve, 0, sizeof(message.as.flow_control.reserve));
 8002bd6:	f107 030c 	add.w	r3, r7, #12
 8002bda:	3303      	adds	r3, #3
 8002bdc:	2205      	movs	r2, #5
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fedf 	bl	80039a4 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f107 010c 	add.w	r1, r7, #12
 8002bee:	2208      	movs	r2, #8
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff61 	bl	8002ab8 <isotp_user_send_can>
 8002bf6:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            3);
#endif

    return ret;
 8002bf8:	697b      	ldr	r3, [r7, #20]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <isotp_send_single_frame>:

static int isotp_send_single_frame(IsoTpLink* link, uint32_t id) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	895b      	ldrh	r3, [r3, #10]
 8002c12:	2b07      	cmp	r3, #7
 8002c14:	d905      	bls.n	8002c22 <isotp_send_single_frame+0x1e>
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <isotp_send_single_frame+0x88>)
 8002c18:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <isotp_send_single_frame+0x8c>)
 8002c1a:	2157      	movs	r1, #87	; 0x57
 8002c1c:	481d      	ldr	r0, [pc, #116]	; (8002c94 <isotp_send_single_frame+0x90>)
 8002c1e:	f000 fc69 	bl	80034f4 <__assert_func>

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
 8002c22:	7b3b      	ldrb	r3, [r7, #12]
 8002c24:	f36f 1307 	bfc	r3, #4, #4
 8002c28:	733b      	strb	r3, [r7, #12]
    message.as.single_frame.SF_DL = (uint8_t) link->send_size;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	895b      	ldrh	r3, [r3, #10]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	7b3b      	ldrb	r3, [r7, #12]
 8002c36:	f362 0303 	bfi	r3, r2, #0, #4
 8002c3a:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	895b      	ldrh	r3, [r3, #10]
 8002c44:	461a      	mov	r2, r3
 8002c46:	f107 030c 	add.w	r3, r7, #12
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 ff24 	bl	8003a9a <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.single_frame.data + link->send_size, 0, sizeof(message.as.single_frame.data) - link->send_size);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	895b      	ldrh	r3, [r3, #10]
 8002c56:	461a      	mov	r2, r3
 8002c58:	f107 030c 	add.w	r3, r7, #12
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	1898      	adds	r0, r3, r2
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	895b      	ldrh	r3, [r3, #10]
 8002c64:	f1c3 0307 	rsb	r3, r3, #7
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	f000 fe9a 	bl	80039a4 <memset>
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 8002c70:	f107 030c 	add.w	r3, r7, #12
 8002c74:	2208      	movs	r2, #8
 8002c76:	4619      	mov	r1, r3
 8002c78:	6838      	ldr	r0, [r7, #0]
 8002c7a:	f7ff ff1d 	bl	8002ab8 <isotp_user_send_can>
 8002c7e:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(id,
            message.as.data_array.ptr,
            link->send_size + 1);
#endif

    return ret;
 8002c80:	697b      	ldr	r3, [r7, #20]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	08004990 	.word	0x08004990
 8002c90:	08004a2c 	.word	0x08004a2c
 8002c94:	080049a8 	.word	0x080049a8

08002c98 <isotp_send_first_frame>:

static int isotp_send_first_frame(IsoTpLink* link, uint32_t id) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
    
    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	895b      	ldrh	r3, [r3, #10]
 8002ca6:	2b07      	cmp	r3, #7
 8002ca8:	d805      	bhi.n	8002cb6 <isotp_send_first_frame+0x1e>
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <isotp_send_first_frame+0x88>)
 8002cac:	4a1d      	ldr	r2, [pc, #116]	; (8002d24 <isotp_send_first_frame+0x8c>)
 8002cae:	2171      	movs	r1, #113	; 0x71
 8002cb0:	481d      	ldr	r0, [pc, #116]	; (8002d28 <isotp_send_first_frame+0x90>)
 8002cb2:	f000 fc1f 	bl	80034f4 <__assert_func>

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
 8002cb6:	7b3b      	ldrb	r3, [r7, #12]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f362 1307 	bfi	r3, r2, #4, #4
 8002cbe:	733b      	strb	r3, [r7, #12]
    message.as.first_frame.FF_DL_low = (uint8_t) link->send_size;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	895b      	ldrh	r3, [r3, #10]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	737b      	strb	r3, [r7, #13]
    message.as.first_frame.FF_DL_high = (uint8_t) (0x0F & (link->send_size >> 8));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	895b      	ldrh	r3, [r3, #10]
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	7b3b      	ldrb	r3, [r7, #12]
 8002cd8:	f362 0303 	bfi	r3, r2, #0, #4
 8002cdc:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.first_frame.data, link->send_buffer, sizeof(message.as.first_frame.data));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	f107 030e 	add.w	r3, r7, #14
 8002ce6:	6811      	ldr	r1, [r2, #0]
 8002ce8:	6019      	str	r1, [r3, #0]
 8002cea:	8892      	ldrh	r2, [r2, #4]
 8002cec:	809a      	strh	r2, [r3, #4]

    /* send message */
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	6838      	ldr	r0, [r7, #0]
 8002cf8:	f7ff fede 	bl	8002ab8 <isotp_user_send_can>
 8002cfc:	6178      	str	r0, [r7, #20]
    if (ISOTP_RET_OK == ret) {
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d108      	bne.n	8002d16 <isotp_send_first_frame+0x7e>
        link->send_offset += sizeof(message.as.first_frame.data);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	899b      	ldrh	r3, [r3, #12]
 8002d08:	3306      	adds	r3, #6
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	819a      	strh	r2, [r3, #12]
        link->send_sn = 1;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	739a      	strb	r2, [r3, #14]
    }

    return ret;
 8002d16:	697b      	ldr	r3, [r7, #20]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	080049bc 	.word	0x080049bc
 8002d24:	08004a44 	.word	0x08004a44
 8002d28:	080049a8 	.word	0x080049a8

08002d2c <isotp_send_consecutive_frame>:

static int isotp_send_consecutive_frame(IsoTpLink* link) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
    IsoTpCanMessage message;
    uint16_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	895b      	ldrh	r3, [r3, #10]
 8002d38:	2b07      	cmp	r3, #7
 8002d3a:	d805      	bhi.n	8002d48 <isotp_send_consecutive_frame+0x1c>
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <isotp_send_consecutive_frame+0xc8>)
 8002d3e:	4a2e      	ldr	r2, [pc, #184]	; (8002df8 <isotp_send_consecutive_frame+0xcc>)
 8002d40:	218a      	movs	r1, #138	; 0x8a
 8002d42:	482e      	ldr	r0, [pc, #184]	; (8002dfc <isotp_send_consecutive_frame+0xd0>)
 8002d44:	f000 fbd6 	bl	80034f4 <__assert_func>

    /* setup message  */
    message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
 8002d48:	7a3b      	ldrb	r3, [r7, #8]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f362 1307 	bfi	r3, r2, #4, #4
 8002d50:	723b      	strb	r3, [r7, #8]
    message.as.consecutive_frame.SN = link->send_sn;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	7b9b      	ldrb	r3, [r3, #14]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	7a3b      	ldrb	r3, [r7, #8]
 8002d5e:	f362 0303 	bfi	r3, r2, #0, #4
 8002d62:	723b      	strb	r3, [r7, #8]
    data_length = link->send_size - link->send_offset;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	895a      	ldrh	r2, [r3, #10]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	899b      	ldrh	r3, [r3, #12]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	82fb      	strh	r3, [r7, #22]
    if (data_length > sizeof(message.as.consecutive_frame.data)) {
 8002d70:	8afb      	ldrh	r3, [r7, #22]
 8002d72:	2b07      	cmp	r3, #7
 8002d74:	d901      	bls.n	8002d7a <isotp_send_consecutive_frame+0x4e>
        data_length = sizeof(message.as.consecutive_frame.data);
 8002d76:	2307      	movs	r3, #7
 8002d78:	82fb      	strh	r3, [r7, #22]
    }
    (void) memcpy(message.as.consecutive_frame.data, link->send_buffer + link->send_offset, data_length);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	8992      	ldrh	r2, [r2, #12]
 8002d82:	1899      	adds	r1, r3, r2
 8002d84:	8afa      	ldrh	r2, [r7, #22]
 8002d86:	f107 0308 	add.w	r3, r7, #8
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fe84 	bl	8003a9a <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.consecutive_frame.data + data_length, 0, sizeof(message.as.consecutive_frame.data) - data_length);
 8002d92:	8afb      	ldrh	r3, [r7, #22]
 8002d94:	f107 0208 	add.w	r2, r7, #8
 8002d98:	3201      	adds	r2, #1
 8002d9a:	18d0      	adds	r0, r2, r3
 8002d9c:	8afb      	ldrh	r3, [r7, #22]
 8002d9e:	f1c3 0307 	rsb	r3, r3, #7
 8002da2:	461a      	mov	r2, r3
 8002da4:	2100      	movs	r1, #0
 8002da6:	f000 fdfd 	bl	80039a4 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f107 0108 	add.w	r1, r7, #8
 8002db2:	2208      	movs	r2, #8
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fe7f 	bl	8002ab8 <isotp_user_send_can>
 8002dba:	6138      	str	r0, [r7, #16]
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            data_length + 1);
#endif
    if (ISOTP_RET_OK == ret) {
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d113      	bne.n	8002dea <isotp_send_consecutive_frame+0xbe>
        link->send_offset += data_length;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	899a      	ldrh	r2, [r3, #12]
 8002dc6:	8afb      	ldrh	r3, [r7, #22]
 8002dc8:	4413      	add	r3, r2
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	819a      	strh	r2, [r3, #12]
        if (++(link->send_sn) > 0x0F) {
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	7b9b      	ldrb	r3, [r3, #14]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	739a      	strb	r2, [r3, #14]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7b9b      	ldrb	r3, [r3, #14]
 8002de0:	2b0f      	cmp	r3, #15
 8002de2:	d902      	bls.n	8002dea <isotp_send_consecutive_frame+0xbe>
            link->send_sn = 0;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	739a      	strb	r2, [r3, #14]
        }
    }
    
    return ret;
 8002dea:	693b      	ldr	r3, [r7, #16]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	080049bc 	.word	0x080049bc
 8002df8:	08004a5c 	.word	0x08004a5c
 8002dfc:	080049a8 	.word	0x080049a8

08002e00 <isotp_receive_single_frame>:

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	71fb      	strb	r3, [r7, #7]
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) || (message->as.single_frame.SF_DL > (len - 1))) {
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <isotp_receive_single_frame+0x2e>
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d802      	bhi.n	8002e34 <isotp_receive_single_frame+0x34>
        // isotp_user_debug("Single-frame length too small.");
        return ISOTP_RET_LENGTH;
 8002e2e:	f06f 0306 	mvn.w	r3, #6
 8002e32:	e014      	b.n	8002e5e <isotp_receive_single_frame+0x5e>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.single_frame.data, message->as.single_frame.SF_DL);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	1c59      	adds	r1, r3, #1
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	f000 fe27 	bl	8003a9a <memcpy>
    link->receive_size = message->as.single_frame.SF_DL;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    return ISOTP_RET_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <isotp_receive_first_frame>:

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b086      	sub	sp, #24
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	4613      	mov	r3, r2
 8002e72:	71fb      	strb	r3, [r7, #7]
    uint16_t payload_length;

    if (8 != len) {
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d002      	beq.n	8002e80 <isotp_receive_first_frame+0x1a>
        // isotp_user_debug("First frame should be 8 bytes in length.");
        return ISOTP_RET_LENGTH;
 8002e7a:	f06f 0306 	mvn.w	r3, #6
 8002e7e:	e02e      	b.n	8002ede <isotp_receive_first_frame+0x78>
    }

    /* check data length */
    payload_length = message->as.first_frame.FF_DL_high;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	82fb      	strh	r3, [r7, #22]
    payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
 8002e8c:	8afb      	ldrh	r3, [r7, #22]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	785b      	ldrb	r3, [r3, #1]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	82fb      	strh	r3, [r7, #22]

    /* should not use multiple frame transmition */
    if (payload_length <= 7) {
 8002e9c:	8afb      	ldrh	r3, [r7, #22]
 8002e9e:	2b07      	cmp	r3, #7
 8002ea0:	d802      	bhi.n	8002ea8 <isotp_receive_first_frame+0x42>
        // isotp_user_debug("Should not use multiple frame transmission.");
        return ISOTP_RET_LENGTH;
 8002ea2:	f06f 0306 	mvn.w	r3, #6
 8002ea6:	e01a      	b.n	8002ede <isotp_receive_first_frame+0x78>
    }
    
    if (payload_length > link->receive_buf_size) {
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eac:	8afa      	ldrh	r2, [r7, #22]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d902      	bls.n	8002eb8 <isotp_receive_first_frame+0x52>
        // isotp_user_debug("Multi-frame response too large for receiving buffer.");
        return ISOTP_RET_OVERFLOW;
 8002eb2:	f06f 0302 	mvn.w	r3, #2
 8002eb6:	e012      	b.n	8002ede <isotp_receive_first_frame+0x78>
    }
    
    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.first_frame.data, sizeof(message->as.first_frame.data));
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	2206      	movs	r2, #6
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	f000 fde9 	bl	8003a9a <memcpy>
    link->receive_size = payload_length;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8afa      	ldrh	r2, [r7, #22]
 8002ecc:	85da      	strh	r2, [r3, #46]	; 0x2e
    link->receive_offset = sizeof(message->as.first_frame.data);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2206      	movs	r2, #6
 8002ed2:	861a      	strh	r2, [r3, #48]	; 0x30
    link->receive_sn = 1;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    return ISOTP_RET_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <isotp_receive_consecutive_frame>:

static int isotp_receive_consecutive_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	71fb      	strb	r3, [r7, #7]
    uint16_t remaining_bytes;
    
    /* check sn */
    if (link->receive_sn != message->as.consecutive_frame.SN) {
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	7812      	ldrb	r2, [r2, #0]
 8002efe:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d002      	beq.n	8002f0e <isotp_receive_consecutive_frame+0x28>
        return ISOTP_RET_WRONG_SN;
 8002f08:	f06f 0303 	mvn.w	r3, #3
 8002f0c:	e035      	b.n	8002f7a <isotp_receive_consecutive_frame+0x94>
    }

    /* check data length */
    remaining_bytes = link->receive_size - link->receive_offset;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	82fb      	strh	r3, [r7, #22]
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)) {
 8002f1a:	8afb      	ldrh	r3, [r7, #22]
 8002f1c:	2b07      	cmp	r3, #7
 8002f1e:	d901      	bls.n	8002f24 <isotp_receive_consecutive_frame+0x3e>
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
 8002f20:	2307      	movs	r3, #7
 8002f22:	82fb      	strh	r3, [r7, #22]
    }
    if (remaining_bytes > len - 1) {
 8002f24:	79fa      	ldrb	r2, [r7, #7]
 8002f26:	8afb      	ldrh	r3, [r7, #22]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	dc02      	bgt.n	8002f32 <isotp_receive_consecutive_frame+0x4c>
        // isotp_user_debug("Consecutive frame too short.");
        return ISOTP_RET_LENGTH;
 8002f2c:	f06f 0306 	mvn.w	r3, #6
 8002f30:	e023      	b.n	8002f7a <isotp_receive_consecutive_frame+0x94>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer + link->receive_offset, message->as.consecutive_frame.data, remaining_bytes);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8002f3a:	1898      	adds	r0, r3, r2
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	8afa      	ldrh	r2, [r7, #22]
 8002f42:	4619      	mov	r1, r3
 8002f44:	f000 fda9 	bl	8003a9a <memcpy>

    link->receive_offset += remaining_bytes;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8002f4c:	8afb      	ldrh	r3, [r7, #22]
 8002f4e:	4413      	add	r3, r2
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	861a      	strh	r2, [r3, #48]	; 0x30
    if (++(link->receive_sn) > 0x0F) {
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002f6c:	2b0f      	cmp	r3, #15
 8002f6e:	d903      	bls.n	8002f78 <isotp_receive_consecutive_frame+0x92>
        link->receive_sn = 0;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }

    return ISOTP_RET_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <isotp_receive_flow_control_frame>:

static int isotp_receive_flow_control_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8002f82:	b480      	push	{r7}
 8002f84:	b085      	sub	sp, #20
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	71fb      	strb	r3, [r7, #7]
    /* check message length */
    if (len < 3) {
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d802      	bhi.n	8002f9c <isotp_receive_flow_control_frame+0x1a>
        // isotp_user_debug("Flow control frame too short.");
        return ISOTP_RET_LENGTH;
 8002f96:	f06f 0306 	mvn.w	r3, #6
 8002f9a:	e000      	b.n	8002f9e <isotp_receive_flow_control_frame+0x1c>
    }

    return ISOTP_RET_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <isotp_send>:

///////////////////////////////////////////////////////
///                 PUBLIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	80fb      	strh	r3, [r7, #6]
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f806 	bl	8002fd0 <isotp_send_with_id>
 8002fc4:	4603      	mov	r3, r0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <isotp_send_with_id>:

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b0a6      	sub	sp, #152	; 0x98
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	807b      	strh	r3, [r7, #2]
    int ret;

    if (link == 0x0) {
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d102      	bne.n	8002fea <isotp_send_with_id+0x1a>
        // isotp_user_debug("Link is null!");
        return ISOTP_RET_ERROR;
 8002fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe8:	e057      	b.n	800309a <isotp_send_with_id+0xca>
    }

    if (size > link->send_buf_size) {
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	891b      	ldrh	r3, [r3, #8]
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d90a      	bls.n	800300a <isotp_send_with_id+0x3a>
        // isotp_user_debug("Message size too large. Increase ISO_TP_MAX_MESSAGE_SIZE to set a larger buffer\n");
        char message[128];
        sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n", size, link->send_buf_size);
 8002ff4:	887a      	ldrh	r2, [r7, #2]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	891b      	ldrh	r3, [r3, #8]
 8002ffa:	f107 0014 	add.w	r0, r7, #20
 8002ffe:	4929      	ldr	r1, [pc, #164]	; (80030a4 <isotp_send_with_id+0xd4>)
 8003000:	f000 fbd8 	bl	80037b4 <siprintf>
        return ISOTP_RET_OVERFLOW;
 8003004:	f06f 0302 	mvn.w	r3, #2
 8003008:	e047      	b.n	800309a <isotp_send_with_id+0xca>
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d102      	bne.n	800301a <isotp_send_with_id+0x4a>
        // isotp_user_debug("Abort previous message, transmission in progress.\n");
        return ISOTP_RET_INPROGRESS;
 8003014:	f06f 0301 	mvn.w	r3, #1
 8003018:	e03f      	b.n	800309a <isotp_send_with_id+0xca>
    }

    /* copy into local buffer */
    link->send_size = size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	887a      	ldrh	r2, [r7, #2]
 800301e:	815a      	strh	r2, [r3, #10]
    link->send_offset = 0;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	819a      	strh	r2, [r3, #12]
    (void) memcpy(link->send_buffer, payload, size);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fd33 	bl	8003a9a <memcpy>

    if (link->send_size < 8) {
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	895b      	ldrh	r3, [r3, #10]
 8003038:	2b07      	cmp	r3, #7
 800303a:	d806      	bhi.n	800304a <isotp_send_with_id+0x7a>
        /* send single frame */
        ret = isotp_send_single_frame(link, id);
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff fde0 	bl	8002c04 <isotp_send_single_frame>
 8003044:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8003048:	e025      	b.n	8003096 <isotp_send_with_id+0xc6>
    } else {
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id);
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7ff fe23 	bl	8002c98 <isotp_send_first_frame>
 8003052:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret) {
 8003056:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800305a:	2b00      	cmp	r3, #0
 800305c:	d11b      	bne.n	8003096 <isotp_send_with_id+0xc6>
            link->send_bs_remain = 0;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	821a      	strh	r2, [r3, #16]
            link->send_st_min = 0;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	749a      	strb	r2, [r3, #18]
            link->send_wtf_count = 0;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	74da      	strb	r2, [r3, #19]
            link->send_timer_st = isotp_user_get_ms();
 8003070:	f7ff fd58 	bl	8002b24 <isotp_user_get_ms>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	615a      	str	r2, [r3, #20]
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800307a:	f7ff fd53 	bl	8002b24 <isotp_user_get_ms>
 800307e:	4603      	mov	r3, r0
 8003080:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	619a      	str	r2, [r3, #24]
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    return ret;
 8003096:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 800309a:	4618      	mov	r0, r3
 800309c:	3798      	adds	r7, #152	; 0x98
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	080049d0 	.word	0x080049d0

080030a8 <isotp_on_can_message>:

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	4613      	mov	r3, r2
 80030b4:	71fb      	strb	r3, [r7, #7]
    IsoTpCanMessage message;
    int ret;
    
    if (len < 2 || len > 8) {
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	f240 8143 	bls.w	8003344 <isotp_on_can_message+0x29c>
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	f200 813f 	bhi.w	8003344 <isotp_on_can_message+0x29c>
        return;
    }

    memcpy(message.as.data_array.ptr, data, len);
 80030c6:	79fa      	ldrb	r2, [r7, #7]
 80030c8:	f107 0314 	add.w	r3, r7, #20
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fce3 	bl	8003a9a <memcpy>
    memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	f107 0214 	add.w	r2, r7, #20
 80030da:	18d0      	adds	r0, r2, r3
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	f1c3 0308 	rsb	r3, r3, #8
 80030e2:	461a      	mov	r2, r3
 80030e4:	2100      	movs	r1, #0
 80030e6:	f000 fc5d 	bl	80039a4 <memset>

    switch (message.as.common.type) {
 80030ea:	7d3b      	ldrb	r3, [r7, #20]
 80030ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	f200 811a 	bhi.w	800332c <isotp_on_can_message+0x284>
 80030f8:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <isotp_on_can_message+0x58>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003111 	.word	0x08003111
 8003104:	0800314d 	.word	0x0800314d
 8003108:	080031d5 	.word	0x080031d5
 800310c:	08003273 	.word	0x08003273
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003116:	2b01      	cmp	r3, #1
 8003118:	d104      	bne.n	8003124 <isotp_on_can_message+0x7c>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f06f 0205 	mvn.w	r2, #5
 8003120:	639a      	str	r2, [r3, #56]	; 0x38
 8003122:	e002      	b.n	800312a <isotp_on_can_message+0x82>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* handle message */
            ret = isotp_receive_single_frame(link, &message, len);
 800312a:	79fa      	ldrb	r2, [r7, #7]
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	4619      	mov	r1, r3
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f7ff fe64 	bl	8002e00 <isotp_receive_single_frame>
 8003138:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	2b00      	cmp	r3, #0
 800313e:	f040 80f7 	bne.w	8003330 <isotp_on_can_message+0x288>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2202      	movs	r2, #2
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }
            break;
 800314a:	e0f1      	b.n	8003330 <isotp_on_can_message+0x288>
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003152:	2b01      	cmp	r3, #1
 8003154:	d104      	bne.n	8003160 <isotp_on_can_message+0xb8>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f06f 0205 	mvn.w	r2, #5
 800315c:	639a      	str	r2, [r3, #56]	; 0x38
 800315e:	e002      	b.n	8003166 <isotp_on_can_message+0xbe>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* handle message */
            ret = isotp_receive_first_frame(link, &message, len);
 8003166:	79fa      	ldrb	r2, [r7, #7]
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	4619      	mov	r1, r3
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f7ff fe79 	bl	8002e66 <isotp_receive_first_frame>
 8003174:	61f8      	str	r0, [r7, #28]

            /* if overflow happened */
            if (ISOTP_RET_OVERFLOW == ret) {
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f113 0f03 	cmn.w	r3, #3
 800317c:	d10e      	bne.n	800319c <isotp_on_can_message+0xf4>
                /* update protocol result */
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f06f 0207 	mvn.w	r2, #7
 8003184:	639a      	str	r2, [r3, #56]	; 0x38
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                /* send error message */
                isotp_send_flow_control(link, PCI_FLOW_STATUS_OVERFLOW, 0, 0);
 800318e:	2300      	movs	r3, #0
 8003190:	2200      	movs	r2, #0
 8003192:	2102      	movs	r1, #2
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff fcfc 	bl	8002b92 <isotp_send_flow_control>
                break;
 800319a:	e0d2      	b.n	8003342 <isotp_on_can_message+0x29a>
            }

            /* if receive successful */
            if (ISOTP_RET_OK == ret) {
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 80c8 	bne.w	8003334 <isotp_on_can_message+0x28c>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                /* send fc frame */
                link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2208      	movs	r2, #8
 80031b0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80031ba:	2319      	movs	r3, #25
 80031bc:	2100      	movs	r1, #0
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff fce7 	bl	8002b92 <isotp_send_flow_control>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80031c4:	f7ff fcae 	bl	8002b24 <isotp_user_get_ms>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	635a      	str	r2, [r3, #52]	; 0x34
            }
            
            break;
 80031d2:	e0af      	b.n	8003334 <isotp_on_can_message+0x28c>
        }
        case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
            /* check if in receiving status */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status) {
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d004      	beq.n	80031e8 <isotp_on_can_message+0x140>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f06f 0205 	mvn.w	r2, #5
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38
                break;
 80031e6:	e0ac      	b.n	8003342 <isotp_on_can_message+0x29a>
            }

            /* handle message */
            ret = isotp_receive_consecutive_frame(link, &message, len);
 80031e8:	79fa      	ldrb	r2, [r7, #7]
 80031ea:	f107 0314 	add.w	r3, r7, #20
 80031ee:	4619      	mov	r1, r3
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff fe78 	bl	8002ee6 <isotp_receive_consecutive_frame>
 80031f6:	61f8      	str	r0, [r7, #28]

            /* if wrong sn */
            if (ISOTP_RET_WRONG_SN == ret) {
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f113 0f04 	cmn.w	r3, #4
 80031fe:	d108      	bne.n	8003212 <isotp_on_can_message+0x16a>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_WRONG_SN;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f06f 0203 	mvn.w	r2, #3
 8003206:	639a      	str	r2, [r3, #56]	; 0x38
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                break;
 8003210:	e097      	b.n	8003342 <isotp_on_can_message+0x29a>
            }

            /* if success */
            if (ISOTP_RET_OK == ret) {
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f040 808f 	bne.w	8003338 <isotp_on_can_message+0x290>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800321a:	f7ff fc83 	bl	8002b24 <isotp_user_get_ms>
 800321e:	4603      	mov	r3, r0
 8003220:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	635a      	str	r2, [r3, #52]	; 0x34
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size) {
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003230:	429a      	cmp	r2, r3
 8003232:	d304      	bcc.n	800323e <isotp_on_can_message+0x196>
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
                    }
                }
            }
            
            break;
 800323c:	e07c      	b.n	8003338 <isotp_on_can_message+0x290>
                    if (0 == --link->receive_bs_count) {
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003244:	3b01      	subs	r3, #1
 8003246:	b2da      	uxtb	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003254:	2b00      	cmp	r3, #0
 8003256:	d16f      	bne.n	8003338 <isotp_on_can_message+0x290>
                        link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2208      	movs	r2, #8
 800325c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8003266:	2319      	movs	r3, #25
 8003268:	2100      	movs	r1, #0
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f7ff fc91 	bl	8002b92 <isotp_send_flow_control>
            break;
 8003270:	e062      	b.n	8003338 <isotp_on_can_message+0x290>
        }
        case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
            /* handle fc frame only when sending in progress  */
            if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status) {
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d15f      	bne.n	800333c <isotp_on_can_message+0x294>
                break;
            }

            /* handle message */
            ret = isotp_receive_flow_control_frame(link, &message, len);
 800327c:	79fa      	ldrb	r2, [r7, #7]
 800327e:	f107 0314 	add.w	r3, r7, #20
 8003282:	4619      	mov	r1, r3
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7ff fe7c 	bl	8002f82 <isotp_receive_flow_control_frame>
 800328a:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d156      	bne.n	8003340 <isotp_on_can_message+0x298>
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8003292:	f7ff fc47 	bl	8002b24 <isotp_user_get_ms>
 8003296:	4603      	mov	r3, r0
 8003298:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	619a      	str	r2, [r3, #24]

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
 80032a0:	7d3b      	ldrb	r3, [r7, #20]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d108      	bne.n	80032be <isotp_on_can_message+0x216>
                    link->send_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f06f 0207 	mvn.w	r2, #7
 80032b2:	61da      	str	r2, [r3, #28]
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 2020 	strb.w	r2, [r3, #32]
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
                    link->send_wtf_count = 0;
                }
            }
            break;
 80032bc:	e040      	b.n	8003340 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
 80032be:	7d3b      	ldrb	r3, [r7, #20]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d112      	bne.n	80032f0 <isotp_on_can_message+0x248>
                    link->send_wtf_count += 1;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	7cdb      	ldrb	r3, [r3, #19]
 80032ce:	3301      	adds	r3, #1
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	74da      	strb	r2, [r3, #19]
                    if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER) {
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	7cdb      	ldrb	r3, [r3, #19]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d930      	bls.n	8003340 <isotp_on_can_message+0x298>
                        link->send_protocol_result = ISOTP_PROTOCOL_RESULT_WFT_OVRN;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f06f 0206 	mvn.w	r2, #6
 80032e4:	61da      	str	r2, [r3, #28]
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 80032ee:	e027      	b.n	8003340 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS) {
 80032f0:	7d3b      	ldrb	r3, [r7, #20]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d121      	bne.n	8003340 <isotp_on_can_message+0x298>
                    if (0 == message.as.flow_control.BS) {
 80032fc:	7d7b      	ldrb	r3, [r7, #21]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d104      	bne.n	800330c <isotp_on_can_message+0x264>
                        link->send_bs_remain = ISOTP_INVALID_BS;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003308:	821a      	strh	r2, [r3, #16]
 800330a:	e003      	b.n	8003314 <isotp_on_can_message+0x26c>
                        link->send_bs_remain = message.as.flow_control.BS;
 800330c:	7d7b      	ldrb	r3, [r7, #21]
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	821a      	strh	r2, [r3, #16]
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
 8003314:	7dbb      	ldrb	r3, [r7, #22]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fc1e 	bl	8002b58 <isotp_st_min_to_ms>
 800331c:	4603      	mov	r3, r0
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	749a      	strb	r2, [r3, #18]
                    link->send_wtf_count = 0;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	74da      	strb	r2, [r3, #19]
            break;
 800332a:	e009      	b.n	8003340 <isotp_on_can_message+0x298>
        default:
            break;
 800332c:	bf00      	nop
 800332e:	e00a      	b.n	8003346 <isotp_on_can_message+0x29e>
            break;
 8003330:	bf00      	nop
 8003332:	e008      	b.n	8003346 <isotp_on_can_message+0x29e>
            break;
 8003334:	bf00      	nop
 8003336:	e006      	b.n	8003346 <isotp_on_can_message+0x29e>
            break;
 8003338:	bf00      	nop
 800333a:	e004      	b.n	8003346 <isotp_on_can_message+0x29e>
                break;
 800333c:	bf00      	nop
 800333e:	e002      	b.n	8003346 <isotp_on_can_message+0x29e>
            break;
 8003340:	bf00      	nop
    };
    
    return;
 8003342:	e000      	b.n	8003346 <isotp_on_can_message+0x29e>
        return;
 8003344:	bf00      	nop
}
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <isotp_receive>:

int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size) {
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	80fb      	strh	r3, [r7, #6]
    uint16_t copylen;
    
    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status) {
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003362:	2b02      	cmp	r3, #2
 8003364:	d002      	beq.n	800336c <isotp_receive+0x20>
        return ISOTP_RET_NO_DATA;
 8003366:	f06f 0304 	mvn.w	r3, #4
 800336a:	e017      	b.n	800339c <isotp_receive+0x50>
    }

    copylen = link->receive_size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003370:	82fb      	strh	r3, [r7, #22]
    if (copylen > payload_size) {
 8003372:	8afa      	ldrh	r2, [r7, #22]
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	429a      	cmp	r2, r3
 8003378:	d901      	bls.n	800337e <isotp_receive+0x32>
        copylen = payload_size;
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	82fb      	strh	r3, [r7, #22]
    }

    memcpy(payload, link->receive_buffer, copylen);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	8afa      	ldrh	r2, [r7, #22]
 8003384:	4619      	mov	r1, r3
 8003386:	68b8      	ldr	r0, [r7, #8]
 8003388:	f000 fb87 	bl	8003a9a <memcpy>
    *out_size = copylen;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	8afa      	ldrh	r2, [r7, #22]
 8003390:	801a      	strh	r2, [r3, #0]

    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return ISOTP_RET_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <isotp_init_link>:

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf, uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	807b      	strh	r3, [r7, #2]
    memset(link, 0, sizeof(*link));
 80033b2:	2240      	movs	r2, #64	; 0x40
 80033b4:	2100      	movs	r1, #0
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 faf4 	bl	80039a4 <memset>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    link->send_status = ISOTP_SEND_STATUS_IDLE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2020 	strb.w	r2, [r3, #32]
    link->send_arbitration_id = sendid;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	601a      	str	r2, [r3, #0]
    link->send_buffer = sendbuf;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	605a      	str	r2, [r3, #4]
    link->send_buf_size = sendbufsize;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	887a      	ldrh	r2, [r7, #2]
 80033dc:	811a      	strh	r2, [r3, #8]
    link->receive_buffer = recvbuf;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28
    link->receive_buf_size = recvbufsize;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8bba      	ldrh	r2, [r7, #28]
 80033e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    return;
 80033ea:	bf00      	nop
}
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <isotp_poll>:

void isotp_poll(IsoTpLink *link) {
 80033f2:	b590      	push	{r4, r7, lr}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
    int ret;

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d15c      	bne.n	80034be <isotp_poll+0xcc>

        /* continue send data */
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8a1b      	ldrh	r3, [r3, #16]
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
 8003408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800340c:	4293      	cmp	r3, r2
 800340e:	d003      	beq.n	8003418 <isotp_poll+0x26>
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	8a1b      	ldrh	r3, [r3, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d041      	beq.n	800349c <isotp_poll+0xaa>
        /* and if st_min is zero or go beyond interval time */
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	7c9b      	ldrb	r3, [r3, #18]
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00c      	beq.n	800343a <isotp_poll+0x48>
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7c9b      	ldrb	r3, [r3, #18]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d039      	beq.n	800349c <isotp_poll+0xaa>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	461c      	mov	r4, r3
 800342e:	f7ff fb79 	bl	8002b24 <isotp_user_get_ms>
 8003432:	4603      	mov	r3, r0
 8003434:	1ae3      	subs	r3, r4, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	da30      	bge.n	800349c <isotp_poll+0xaa>
            
            ret = isotp_send_consecutive_frame(link);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff fc76 	bl	8002d2c <isotp_send_consecutive_frame>
 8003440:	60f8      	str	r0, [r7, #12]
            if (ISOTP_RET_OK == ret) {
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d125      	bne.n	8003494 <isotp_poll+0xa2>
                if (ISOTP_INVALID_BS != link->send_bs_remain) {
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8a1b      	ldrh	r3, [r3, #16]
 800344c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003450:	4293      	cmp	r3, r2
 8003452:	d005      	beq.n	8003460 <isotp_poll+0x6e>
                    link->send_bs_remain -= 1;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8a1b      	ldrh	r3, [r3, #16]
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	821a      	strh	r2, [r3, #16]
                }
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8003460:	f7ff fb60 	bl	8002b24 <isotp_user_get_ms>
 8003464:	4603      	mov	r3, r0
 8003466:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	619a      	str	r2, [r3, #24]
                link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
 800346e:	f7ff fb59 	bl	8002b24 <isotp_user_get_ms>
 8003472:	4602      	mov	r2, r0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	7c9b      	ldrb	r3, [r3, #18]
 8003478:	441a      	add	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	615a      	str	r2, [r3, #20]

                /* check if send finish */
                if (link->send_offset >= link->send_size) {
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	899a      	ldrh	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	895b      	ldrh	r3, [r3, #10]
 8003486:	429a      	cmp	r2, r3
 8003488:	d308      	bcc.n	800349c <isotp_poll+0xaa>
                    link->send_status = ISOTP_SEND_STATUS_IDLE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2020 	strb.w	r2, [r3, #32]
 8003492:	e003      	b.n	800349c <isotp_poll+0xaa>
                }
            } else {
                link->send_status = ISOTP_SEND_STATUS_ERROR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)) {
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	461c      	mov	r4, r3
 80034a2:	f7ff fb3f 	bl	8002b24 <isotp_user_get_ms>
 80034a6:	4603      	mov	r3, r0
 80034a8:	1ae3      	subs	r3, r4, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	da07      	bge.n	80034be <isotp_poll+0xcc>
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_BS;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f06f 0201 	mvn.w	r2, #1
 80034b4:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_ERROR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2202      	movs	r2, #2
 80034ba:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d111      	bne.n	80034ec <isotp_poll+0xfa>
        
        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)) {
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034cc:	461c      	mov	r4, r3
 80034ce:	f7ff fb29 	bl	8002b24 <isotp_user_get_ms>
 80034d2:	4603      	mov	r3, r0
 80034d4:	1ae3      	subs	r3, r4, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	da08      	bge.n	80034ec <isotp_poll+0xfa>
            link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_CR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f06f 0202 	mvn.w	r2, #2
 80034e0:	639a      	str	r2, [r3, #56]	; 0x38
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        }
    }

    return;
 80034ea:	bf00      	nop
 80034ec:	bf00      	nop
}
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd90      	pop	{r4, r7, pc}

080034f4 <__assert_func>:
 80034f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80034f6:	4614      	mov	r4, r2
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b09      	ldr	r3, [pc, #36]	; (8003520 <__assert_func+0x2c>)
 80034fc:	4605      	mov	r5, r0
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68d8      	ldr	r0, [r3, #12]
 8003502:	b14c      	cbz	r4, 8003518 <__assert_func+0x24>
 8003504:	4b07      	ldr	r3, [pc, #28]	; (8003524 <__assert_func+0x30>)
 8003506:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800350a:	9100      	str	r1, [sp, #0]
 800350c:	462b      	mov	r3, r5
 800350e:	4906      	ldr	r1, [pc, #24]	; (8003528 <__assert_func+0x34>)
 8003510:	f000 f8b2 	bl	8003678 <fiprintf>
 8003514:	f000 facf 	bl	8003ab6 <abort>
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <__assert_func+0x38>)
 800351a:	461c      	mov	r4, r3
 800351c:	e7f3      	b.n	8003506 <__assert_func+0x12>
 800351e:	bf00      	nop
 8003520:	20000064 	.word	0x20000064
 8003524:	08004a79 	.word	0x08004a79
 8003528:	08004a86 	.word	0x08004a86
 800352c:	08004ab4 	.word	0x08004ab4

08003530 <std>:
 8003530:	2300      	movs	r3, #0
 8003532:	b510      	push	{r4, lr}
 8003534:	4604      	mov	r4, r0
 8003536:	e9c0 3300 	strd	r3, r3, [r0]
 800353a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800353e:	6083      	str	r3, [r0, #8]
 8003540:	8181      	strh	r1, [r0, #12]
 8003542:	6643      	str	r3, [r0, #100]	; 0x64
 8003544:	81c2      	strh	r2, [r0, #14]
 8003546:	6183      	str	r3, [r0, #24]
 8003548:	4619      	mov	r1, r3
 800354a:	2208      	movs	r2, #8
 800354c:	305c      	adds	r0, #92	; 0x5c
 800354e:	f000 fa29 	bl	80039a4 <memset>
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <std+0x58>)
 8003554:	6224      	str	r4, [r4, #32]
 8003556:	6263      	str	r3, [r4, #36]	; 0x24
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <std+0x5c>)
 800355a:	62a3      	str	r3, [r4, #40]	; 0x28
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <std+0x60>)
 800355e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <std+0x64>)
 8003562:	6323      	str	r3, [r4, #48]	; 0x30
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <std+0x68>)
 8003566:	429c      	cmp	r4, r3
 8003568:	d006      	beq.n	8003578 <std+0x48>
 800356a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800356e:	4294      	cmp	r4, r2
 8003570:	d002      	beq.n	8003578 <std+0x48>
 8003572:	33d0      	adds	r3, #208	; 0xd0
 8003574:	429c      	cmp	r4, r3
 8003576:	d105      	bne.n	8003584 <std+0x54>
 8003578:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800357c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003580:	f000 ba88 	b.w	8003a94 <__retarget_lock_init_recursive>
 8003584:	bd10      	pop	{r4, pc}
 8003586:	bf00      	nop
 8003588:	080037f5 	.word	0x080037f5
 800358c:	08003817 	.word	0x08003817
 8003590:	0800384f 	.word	0x0800384f
 8003594:	08003873 	.word	0x08003873
 8003598:	20000204 	.word	0x20000204

0800359c <stdio_exit_handler>:
 800359c:	4a02      	ldr	r2, [pc, #8]	; (80035a8 <stdio_exit_handler+0xc>)
 800359e:	4903      	ldr	r1, [pc, #12]	; (80035ac <stdio_exit_handler+0x10>)
 80035a0:	4803      	ldr	r0, [pc, #12]	; (80035b0 <stdio_exit_handler+0x14>)
 80035a2:	f000 b87b 	b.w	800369c <_fwalk_sglue>
 80035a6:	bf00      	nop
 80035a8:	2000000c 	.word	0x2000000c
 80035ac:	0800460d 	.word	0x0800460d
 80035b0:	20000018 	.word	0x20000018

080035b4 <cleanup_stdio>:
 80035b4:	6841      	ldr	r1, [r0, #4]
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <cleanup_stdio+0x34>)
 80035b8:	b510      	push	{r4, lr}
 80035ba:	4299      	cmp	r1, r3
 80035bc:	4604      	mov	r4, r0
 80035be:	d001      	beq.n	80035c4 <cleanup_stdio+0x10>
 80035c0:	f001 f824 	bl	800460c <_fflush_r>
 80035c4:	68a1      	ldr	r1, [r4, #8]
 80035c6:	4b09      	ldr	r3, [pc, #36]	; (80035ec <cleanup_stdio+0x38>)
 80035c8:	4299      	cmp	r1, r3
 80035ca:	d002      	beq.n	80035d2 <cleanup_stdio+0x1e>
 80035cc:	4620      	mov	r0, r4
 80035ce:	f001 f81d 	bl	800460c <_fflush_r>
 80035d2:	68e1      	ldr	r1, [r4, #12]
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <cleanup_stdio+0x3c>)
 80035d6:	4299      	cmp	r1, r3
 80035d8:	d004      	beq.n	80035e4 <cleanup_stdio+0x30>
 80035da:	4620      	mov	r0, r4
 80035dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035e0:	f001 b814 	b.w	800460c <_fflush_r>
 80035e4:	bd10      	pop	{r4, pc}
 80035e6:	bf00      	nop
 80035e8:	20000204 	.word	0x20000204
 80035ec:	2000026c 	.word	0x2000026c
 80035f0:	200002d4 	.word	0x200002d4

080035f4 <global_stdio_init.part.0>:
 80035f4:	b510      	push	{r4, lr}
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <global_stdio_init.part.0+0x30>)
 80035f8:	4c0b      	ldr	r4, [pc, #44]	; (8003628 <global_stdio_init.part.0+0x34>)
 80035fa:	4a0c      	ldr	r2, [pc, #48]	; (800362c <global_stdio_init.part.0+0x38>)
 80035fc:	4620      	mov	r0, r4
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	2104      	movs	r1, #4
 8003602:	2200      	movs	r2, #0
 8003604:	f7ff ff94 	bl	8003530 <std>
 8003608:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800360c:	2201      	movs	r2, #1
 800360e:	2109      	movs	r1, #9
 8003610:	f7ff ff8e 	bl	8003530 <std>
 8003614:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003618:	2202      	movs	r2, #2
 800361a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800361e:	2112      	movs	r1, #18
 8003620:	f7ff bf86 	b.w	8003530 <std>
 8003624:	2000033c 	.word	0x2000033c
 8003628:	20000204 	.word	0x20000204
 800362c:	0800359d 	.word	0x0800359d

08003630 <__sfp_lock_acquire>:
 8003630:	4801      	ldr	r0, [pc, #4]	; (8003638 <__sfp_lock_acquire+0x8>)
 8003632:	f000 ba30 	b.w	8003a96 <__retarget_lock_acquire_recursive>
 8003636:	bf00      	nop
 8003638:	20000345 	.word	0x20000345

0800363c <__sfp_lock_release>:
 800363c:	4801      	ldr	r0, [pc, #4]	; (8003644 <__sfp_lock_release+0x8>)
 800363e:	f000 ba2b 	b.w	8003a98 <__retarget_lock_release_recursive>
 8003642:	bf00      	nop
 8003644:	20000345 	.word	0x20000345

08003648 <__sinit>:
 8003648:	b510      	push	{r4, lr}
 800364a:	4604      	mov	r4, r0
 800364c:	f7ff fff0 	bl	8003630 <__sfp_lock_acquire>
 8003650:	6a23      	ldr	r3, [r4, #32]
 8003652:	b11b      	cbz	r3, 800365c <__sinit+0x14>
 8003654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003658:	f7ff bff0 	b.w	800363c <__sfp_lock_release>
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <__sinit+0x28>)
 800365e:	6223      	str	r3, [r4, #32]
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <__sinit+0x2c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f5      	bne.n	8003654 <__sinit+0xc>
 8003668:	f7ff ffc4 	bl	80035f4 <global_stdio_init.part.0>
 800366c:	e7f2      	b.n	8003654 <__sinit+0xc>
 800366e:	bf00      	nop
 8003670:	080035b5 	.word	0x080035b5
 8003674:	2000033c 	.word	0x2000033c

08003678 <fiprintf>:
 8003678:	b40e      	push	{r1, r2, r3}
 800367a:	b503      	push	{r0, r1, lr}
 800367c:	4601      	mov	r1, r0
 800367e:	ab03      	add	r3, sp, #12
 8003680:	4805      	ldr	r0, [pc, #20]	; (8003698 <fiprintf+0x20>)
 8003682:	f853 2b04 	ldr.w	r2, [r3], #4
 8003686:	6800      	ldr	r0, [r0, #0]
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	f000 fc8f 	bl	8003fac <_vfiprintf_r>
 800368e:	b002      	add	sp, #8
 8003690:	f85d eb04 	ldr.w	lr, [sp], #4
 8003694:	b003      	add	sp, #12
 8003696:	4770      	bx	lr
 8003698:	20000064 	.word	0x20000064

0800369c <_fwalk_sglue>:
 800369c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036a0:	4607      	mov	r7, r0
 80036a2:	4688      	mov	r8, r1
 80036a4:	4614      	mov	r4, r2
 80036a6:	2600      	movs	r6, #0
 80036a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036ac:	f1b9 0901 	subs.w	r9, r9, #1
 80036b0:	d505      	bpl.n	80036be <_fwalk_sglue+0x22>
 80036b2:	6824      	ldr	r4, [r4, #0]
 80036b4:	2c00      	cmp	r4, #0
 80036b6:	d1f7      	bne.n	80036a8 <_fwalk_sglue+0xc>
 80036b8:	4630      	mov	r0, r6
 80036ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036be:	89ab      	ldrh	r3, [r5, #12]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d907      	bls.n	80036d4 <_fwalk_sglue+0x38>
 80036c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036c8:	3301      	adds	r3, #1
 80036ca:	d003      	beq.n	80036d4 <_fwalk_sglue+0x38>
 80036cc:	4629      	mov	r1, r5
 80036ce:	4638      	mov	r0, r7
 80036d0:	47c0      	blx	r8
 80036d2:	4306      	orrs	r6, r0
 80036d4:	3568      	adds	r5, #104	; 0x68
 80036d6:	e7e9      	b.n	80036ac <_fwalk_sglue+0x10>

080036d8 <iprintf>:
 80036d8:	b40f      	push	{r0, r1, r2, r3}
 80036da:	b507      	push	{r0, r1, r2, lr}
 80036dc:	4906      	ldr	r1, [pc, #24]	; (80036f8 <iprintf+0x20>)
 80036de:	ab04      	add	r3, sp, #16
 80036e0:	6808      	ldr	r0, [r1, #0]
 80036e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80036e6:	6881      	ldr	r1, [r0, #8]
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	f000 fc5f 	bl	8003fac <_vfiprintf_r>
 80036ee:	b003      	add	sp, #12
 80036f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80036f4:	b004      	add	sp, #16
 80036f6:	4770      	bx	lr
 80036f8:	20000064 	.word	0x20000064

080036fc <_puts_r>:
 80036fc:	6a03      	ldr	r3, [r0, #32]
 80036fe:	b570      	push	{r4, r5, r6, lr}
 8003700:	4605      	mov	r5, r0
 8003702:	460e      	mov	r6, r1
 8003704:	6884      	ldr	r4, [r0, #8]
 8003706:	b90b      	cbnz	r3, 800370c <_puts_r+0x10>
 8003708:	f7ff ff9e 	bl	8003648 <__sinit>
 800370c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800370e:	07db      	lsls	r3, r3, #31
 8003710:	d405      	bmi.n	800371e <_puts_r+0x22>
 8003712:	89a3      	ldrh	r3, [r4, #12]
 8003714:	0598      	lsls	r0, r3, #22
 8003716:	d402      	bmi.n	800371e <_puts_r+0x22>
 8003718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800371a:	f000 f9bc 	bl	8003a96 <__retarget_lock_acquire_recursive>
 800371e:	89a3      	ldrh	r3, [r4, #12]
 8003720:	0719      	lsls	r1, r3, #28
 8003722:	d513      	bpl.n	800374c <_puts_r+0x50>
 8003724:	6923      	ldr	r3, [r4, #16]
 8003726:	b18b      	cbz	r3, 800374c <_puts_r+0x50>
 8003728:	3e01      	subs	r6, #1
 800372a:	68a3      	ldr	r3, [r4, #8]
 800372c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003730:	3b01      	subs	r3, #1
 8003732:	60a3      	str	r3, [r4, #8]
 8003734:	b9e9      	cbnz	r1, 8003772 <_puts_r+0x76>
 8003736:	2b00      	cmp	r3, #0
 8003738:	da2e      	bge.n	8003798 <_puts_r+0x9c>
 800373a:	4622      	mov	r2, r4
 800373c:	210a      	movs	r1, #10
 800373e:	4628      	mov	r0, r5
 8003740:	f000 f89b 	bl	800387a <__swbuf_r>
 8003744:	3001      	adds	r0, #1
 8003746:	d007      	beq.n	8003758 <_puts_r+0x5c>
 8003748:	250a      	movs	r5, #10
 800374a:	e007      	b.n	800375c <_puts_r+0x60>
 800374c:	4621      	mov	r1, r4
 800374e:	4628      	mov	r0, r5
 8003750:	f000 f8d0 	bl	80038f4 <__swsetup_r>
 8003754:	2800      	cmp	r0, #0
 8003756:	d0e7      	beq.n	8003728 <_puts_r+0x2c>
 8003758:	f04f 35ff 	mov.w	r5, #4294967295
 800375c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800375e:	07da      	lsls	r2, r3, #31
 8003760:	d405      	bmi.n	800376e <_puts_r+0x72>
 8003762:	89a3      	ldrh	r3, [r4, #12]
 8003764:	059b      	lsls	r3, r3, #22
 8003766:	d402      	bmi.n	800376e <_puts_r+0x72>
 8003768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800376a:	f000 f995 	bl	8003a98 <__retarget_lock_release_recursive>
 800376e:	4628      	mov	r0, r5
 8003770:	bd70      	pop	{r4, r5, r6, pc}
 8003772:	2b00      	cmp	r3, #0
 8003774:	da04      	bge.n	8003780 <_puts_r+0x84>
 8003776:	69a2      	ldr	r2, [r4, #24]
 8003778:	429a      	cmp	r2, r3
 800377a:	dc06      	bgt.n	800378a <_puts_r+0x8e>
 800377c:	290a      	cmp	r1, #10
 800377e:	d004      	beq.n	800378a <_puts_r+0x8e>
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	6022      	str	r2, [r4, #0]
 8003786:	7019      	strb	r1, [r3, #0]
 8003788:	e7cf      	b.n	800372a <_puts_r+0x2e>
 800378a:	4622      	mov	r2, r4
 800378c:	4628      	mov	r0, r5
 800378e:	f000 f874 	bl	800387a <__swbuf_r>
 8003792:	3001      	adds	r0, #1
 8003794:	d1c9      	bne.n	800372a <_puts_r+0x2e>
 8003796:	e7df      	b.n	8003758 <_puts_r+0x5c>
 8003798:	250a      	movs	r5, #10
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	6022      	str	r2, [r4, #0]
 80037a0:	701d      	strb	r5, [r3, #0]
 80037a2:	e7db      	b.n	800375c <_puts_r+0x60>

080037a4 <puts>:
 80037a4:	4b02      	ldr	r3, [pc, #8]	; (80037b0 <puts+0xc>)
 80037a6:	4601      	mov	r1, r0
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	f7ff bfa7 	b.w	80036fc <_puts_r>
 80037ae:	bf00      	nop
 80037b0:	20000064 	.word	0x20000064

080037b4 <siprintf>:
 80037b4:	b40e      	push	{r1, r2, r3}
 80037b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037ba:	b500      	push	{lr}
 80037bc:	b09c      	sub	sp, #112	; 0x70
 80037be:	ab1d      	add	r3, sp, #116	; 0x74
 80037c0:	9002      	str	r0, [sp, #8]
 80037c2:	9006      	str	r0, [sp, #24]
 80037c4:	9107      	str	r1, [sp, #28]
 80037c6:	9104      	str	r1, [sp, #16]
 80037c8:	4808      	ldr	r0, [pc, #32]	; (80037ec <siprintf+0x38>)
 80037ca:	4909      	ldr	r1, [pc, #36]	; (80037f0 <siprintf+0x3c>)
 80037cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80037d0:	9105      	str	r1, [sp, #20]
 80037d2:	6800      	ldr	r0, [r0, #0]
 80037d4:	a902      	add	r1, sp, #8
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	f000 fac2 	bl	8003d60 <_svfiprintf_r>
 80037dc:	2200      	movs	r2, #0
 80037de:	9b02      	ldr	r3, [sp, #8]
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	b01c      	add	sp, #112	; 0x70
 80037e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037e8:	b003      	add	sp, #12
 80037ea:	4770      	bx	lr
 80037ec:	20000064 	.word	0x20000064
 80037f0:	ffff0208 	.word	0xffff0208

080037f4 <__sread>:
 80037f4:	b510      	push	{r4, lr}
 80037f6:	460c      	mov	r4, r1
 80037f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037fc:	f000 f8fc 	bl	80039f8 <_read_r>
 8003800:	2800      	cmp	r0, #0
 8003802:	bfab      	itete	ge
 8003804:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003806:	89a3      	ldrhlt	r3, [r4, #12]
 8003808:	181b      	addge	r3, r3, r0
 800380a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800380e:	bfac      	ite	ge
 8003810:	6563      	strge	r3, [r4, #84]	; 0x54
 8003812:	81a3      	strhlt	r3, [r4, #12]
 8003814:	bd10      	pop	{r4, pc}

08003816 <__swrite>:
 8003816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800381a:	461f      	mov	r7, r3
 800381c:	898b      	ldrh	r3, [r1, #12]
 800381e:	4605      	mov	r5, r0
 8003820:	05db      	lsls	r3, r3, #23
 8003822:	460c      	mov	r4, r1
 8003824:	4616      	mov	r6, r2
 8003826:	d505      	bpl.n	8003834 <__swrite+0x1e>
 8003828:	2302      	movs	r3, #2
 800382a:	2200      	movs	r2, #0
 800382c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003830:	f000 f8d0 	bl	80039d4 <_lseek_r>
 8003834:	89a3      	ldrh	r3, [r4, #12]
 8003836:	4632      	mov	r2, r6
 8003838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800383c:	81a3      	strh	r3, [r4, #12]
 800383e:	4628      	mov	r0, r5
 8003840:	463b      	mov	r3, r7
 8003842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800384a:	f000 b8e7 	b.w	8003a1c <_write_r>

0800384e <__sseek>:
 800384e:	b510      	push	{r4, lr}
 8003850:	460c      	mov	r4, r1
 8003852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003856:	f000 f8bd 	bl	80039d4 <_lseek_r>
 800385a:	1c43      	adds	r3, r0, #1
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	bf15      	itete	ne
 8003860:	6560      	strne	r0, [r4, #84]	; 0x54
 8003862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800386a:	81a3      	strheq	r3, [r4, #12]
 800386c:	bf18      	it	ne
 800386e:	81a3      	strhne	r3, [r4, #12]
 8003870:	bd10      	pop	{r4, pc}

08003872 <__sclose>:
 8003872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003876:	f000 b89d 	b.w	80039b4 <_close_r>

0800387a <__swbuf_r>:
 800387a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387c:	460e      	mov	r6, r1
 800387e:	4614      	mov	r4, r2
 8003880:	4605      	mov	r5, r0
 8003882:	b118      	cbz	r0, 800388c <__swbuf_r+0x12>
 8003884:	6a03      	ldr	r3, [r0, #32]
 8003886:	b90b      	cbnz	r3, 800388c <__swbuf_r+0x12>
 8003888:	f7ff fede 	bl	8003648 <__sinit>
 800388c:	69a3      	ldr	r3, [r4, #24]
 800388e:	60a3      	str	r3, [r4, #8]
 8003890:	89a3      	ldrh	r3, [r4, #12]
 8003892:	071a      	lsls	r2, r3, #28
 8003894:	d525      	bpl.n	80038e2 <__swbuf_r+0x68>
 8003896:	6923      	ldr	r3, [r4, #16]
 8003898:	b31b      	cbz	r3, 80038e2 <__swbuf_r+0x68>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	6922      	ldr	r2, [r4, #16]
 800389e:	b2f6      	uxtb	r6, r6
 80038a0:	1a98      	subs	r0, r3, r2
 80038a2:	6963      	ldr	r3, [r4, #20]
 80038a4:	4637      	mov	r7, r6
 80038a6:	4283      	cmp	r3, r0
 80038a8:	dc04      	bgt.n	80038b4 <__swbuf_r+0x3a>
 80038aa:	4621      	mov	r1, r4
 80038ac:	4628      	mov	r0, r5
 80038ae:	f000 fead 	bl	800460c <_fflush_r>
 80038b2:	b9e0      	cbnz	r0, 80038ee <__swbuf_r+0x74>
 80038b4:	68a3      	ldr	r3, [r4, #8]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	60a3      	str	r3, [r4, #8]
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	6022      	str	r2, [r4, #0]
 80038c0:	701e      	strb	r6, [r3, #0]
 80038c2:	6962      	ldr	r2, [r4, #20]
 80038c4:	1c43      	adds	r3, r0, #1
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d004      	beq.n	80038d4 <__swbuf_r+0x5a>
 80038ca:	89a3      	ldrh	r3, [r4, #12]
 80038cc:	07db      	lsls	r3, r3, #31
 80038ce:	d506      	bpl.n	80038de <__swbuf_r+0x64>
 80038d0:	2e0a      	cmp	r6, #10
 80038d2:	d104      	bne.n	80038de <__swbuf_r+0x64>
 80038d4:	4621      	mov	r1, r4
 80038d6:	4628      	mov	r0, r5
 80038d8:	f000 fe98 	bl	800460c <_fflush_r>
 80038dc:	b938      	cbnz	r0, 80038ee <__swbuf_r+0x74>
 80038de:	4638      	mov	r0, r7
 80038e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038e2:	4621      	mov	r1, r4
 80038e4:	4628      	mov	r0, r5
 80038e6:	f000 f805 	bl	80038f4 <__swsetup_r>
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d0d5      	beq.n	800389a <__swbuf_r+0x20>
 80038ee:	f04f 37ff 	mov.w	r7, #4294967295
 80038f2:	e7f4      	b.n	80038de <__swbuf_r+0x64>

080038f4 <__swsetup_r>:
 80038f4:	b538      	push	{r3, r4, r5, lr}
 80038f6:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <__swsetup_r+0xac>)
 80038f8:	4605      	mov	r5, r0
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	460c      	mov	r4, r1
 80038fe:	b118      	cbz	r0, 8003908 <__swsetup_r+0x14>
 8003900:	6a03      	ldr	r3, [r0, #32]
 8003902:	b90b      	cbnz	r3, 8003908 <__swsetup_r+0x14>
 8003904:	f7ff fea0 	bl	8003648 <__sinit>
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800390e:	0718      	lsls	r0, r3, #28
 8003910:	d422      	bmi.n	8003958 <__swsetup_r+0x64>
 8003912:	06d9      	lsls	r1, r3, #27
 8003914:	d407      	bmi.n	8003926 <__swsetup_r+0x32>
 8003916:	2309      	movs	r3, #9
 8003918:	602b      	str	r3, [r5, #0]
 800391a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800391e:	f04f 30ff 	mov.w	r0, #4294967295
 8003922:	81a3      	strh	r3, [r4, #12]
 8003924:	e034      	b.n	8003990 <__swsetup_r+0x9c>
 8003926:	0758      	lsls	r0, r3, #29
 8003928:	d512      	bpl.n	8003950 <__swsetup_r+0x5c>
 800392a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800392c:	b141      	cbz	r1, 8003940 <__swsetup_r+0x4c>
 800392e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003932:	4299      	cmp	r1, r3
 8003934:	d002      	beq.n	800393c <__swsetup_r+0x48>
 8003936:	4628      	mov	r0, r5
 8003938:	f000 f8c4 	bl	8003ac4 <_free_r>
 800393c:	2300      	movs	r3, #0
 800393e:	6363      	str	r3, [r4, #52]	; 0x34
 8003940:	89a3      	ldrh	r3, [r4, #12]
 8003942:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003946:	81a3      	strh	r3, [r4, #12]
 8003948:	2300      	movs	r3, #0
 800394a:	6063      	str	r3, [r4, #4]
 800394c:	6923      	ldr	r3, [r4, #16]
 800394e:	6023      	str	r3, [r4, #0]
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	f043 0308 	orr.w	r3, r3, #8
 8003956:	81a3      	strh	r3, [r4, #12]
 8003958:	6923      	ldr	r3, [r4, #16]
 800395a:	b94b      	cbnz	r3, 8003970 <__swsetup_r+0x7c>
 800395c:	89a3      	ldrh	r3, [r4, #12]
 800395e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003966:	d003      	beq.n	8003970 <__swsetup_r+0x7c>
 8003968:	4621      	mov	r1, r4
 800396a:	4628      	mov	r0, r5
 800396c:	f000 fe9b 	bl	80046a6 <__smakebuf_r>
 8003970:	89a0      	ldrh	r0, [r4, #12]
 8003972:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003976:	f010 0301 	ands.w	r3, r0, #1
 800397a:	d00a      	beq.n	8003992 <__swsetup_r+0x9e>
 800397c:	2300      	movs	r3, #0
 800397e:	60a3      	str	r3, [r4, #8]
 8003980:	6963      	ldr	r3, [r4, #20]
 8003982:	425b      	negs	r3, r3
 8003984:	61a3      	str	r3, [r4, #24]
 8003986:	6923      	ldr	r3, [r4, #16]
 8003988:	b943      	cbnz	r3, 800399c <__swsetup_r+0xa8>
 800398a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800398e:	d1c4      	bne.n	800391a <__swsetup_r+0x26>
 8003990:	bd38      	pop	{r3, r4, r5, pc}
 8003992:	0781      	lsls	r1, r0, #30
 8003994:	bf58      	it	pl
 8003996:	6963      	ldrpl	r3, [r4, #20]
 8003998:	60a3      	str	r3, [r4, #8]
 800399a:	e7f4      	b.n	8003986 <__swsetup_r+0x92>
 800399c:	2000      	movs	r0, #0
 800399e:	e7f7      	b.n	8003990 <__swsetup_r+0x9c>
 80039a0:	20000064 	.word	0x20000064

080039a4 <memset>:
 80039a4:	4603      	mov	r3, r0
 80039a6:	4402      	add	r2, r0
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d100      	bne.n	80039ae <memset+0xa>
 80039ac:	4770      	bx	lr
 80039ae:	f803 1b01 	strb.w	r1, [r3], #1
 80039b2:	e7f9      	b.n	80039a8 <memset+0x4>

080039b4 <_close_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	2300      	movs	r3, #0
 80039b8:	4d05      	ldr	r5, [pc, #20]	; (80039d0 <_close_r+0x1c>)
 80039ba:	4604      	mov	r4, r0
 80039bc:	4608      	mov	r0, r1
 80039be:	602b      	str	r3, [r5, #0]
 80039c0:	f7fc ffa4 	bl	800090c <_close>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_close_r+0x1a>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_close_r+0x1a>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	20000340 	.word	0x20000340

080039d4 <_lseek_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4604      	mov	r4, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	4611      	mov	r1, r2
 80039dc:	2200      	movs	r2, #0
 80039de:	4d05      	ldr	r5, [pc, #20]	; (80039f4 <_lseek_r+0x20>)
 80039e0:	602a      	str	r2, [r5, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f7fc ffb6 	bl	8000954 <_lseek>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d102      	bne.n	80039f2 <_lseek_r+0x1e>
 80039ec:	682b      	ldr	r3, [r5, #0]
 80039ee:	b103      	cbz	r3, 80039f2 <_lseek_r+0x1e>
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
 80039f4:	20000340 	.word	0x20000340

080039f8 <_read_r>:
 80039f8:	b538      	push	{r3, r4, r5, lr}
 80039fa:	4604      	mov	r4, r0
 80039fc:	4608      	mov	r0, r1
 80039fe:	4611      	mov	r1, r2
 8003a00:	2200      	movs	r2, #0
 8003a02:	4d05      	ldr	r5, [pc, #20]	; (8003a18 <_read_r+0x20>)
 8003a04:	602a      	str	r2, [r5, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f7fc ff47 	bl	800089a <_read>
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	d102      	bne.n	8003a16 <_read_r+0x1e>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	b103      	cbz	r3, 8003a16 <_read_r+0x1e>
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	bd38      	pop	{r3, r4, r5, pc}
 8003a18:	20000340 	.word	0x20000340

08003a1c <_write_r>:
 8003a1c:	b538      	push	{r3, r4, r5, lr}
 8003a1e:	4604      	mov	r4, r0
 8003a20:	4608      	mov	r0, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	2200      	movs	r2, #0
 8003a26:	4d05      	ldr	r5, [pc, #20]	; (8003a3c <_write_r+0x20>)
 8003a28:	602a      	str	r2, [r5, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f7fc ff52 	bl	80008d4 <_write>
 8003a30:	1c43      	adds	r3, r0, #1
 8003a32:	d102      	bne.n	8003a3a <_write_r+0x1e>
 8003a34:	682b      	ldr	r3, [r5, #0]
 8003a36:	b103      	cbz	r3, 8003a3a <_write_r+0x1e>
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	bd38      	pop	{r3, r4, r5, pc}
 8003a3c:	20000340 	.word	0x20000340

08003a40 <__errno>:
 8003a40:	4b01      	ldr	r3, [pc, #4]	; (8003a48 <__errno+0x8>)
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20000064 	.word	0x20000064

08003a4c <__libc_init_array>:
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	2600      	movs	r6, #0
 8003a50:	4d0c      	ldr	r5, [pc, #48]	; (8003a84 <__libc_init_array+0x38>)
 8003a52:	4c0d      	ldr	r4, [pc, #52]	; (8003a88 <__libc_init_array+0x3c>)
 8003a54:	1b64      	subs	r4, r4, r5
 8003a56:	10a4      	asrs	r4, r4, #2
 8003a58:	42a6      	cmp	r6, r4
 8003a5a:	d109      	bne.n	8003a70 <__libc_init_array+0x24>
 8003a5c:	f000 ff36 	bl	80048cc <_init>
 8003a60:	2600      	movs	r6, #0
 8003a62:	4d0a      	ldr	r5, [pc, #40]	; (8003a8c <__libc_init_array+0x40>)
 8003a64:	4c0a      	ldr	r4, [pc, #40]	; (8003a90 <__libc_init_array+0x44>)
 8003a66:	1b64      	subs	r4, r4, r5
 8003a68:	10a4      	asrs	r4, r4, #2
 8003a6a:	42a6      	cmp	r6, r4
 8003a6c:	d105      	bne.n	8003a7a <__libc_init_array+0x2e>
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a74:	4798      	blx	r3
 8003a76:	3601      	adds	r6, #1
 8003a78:	e7ee      	b.n	8003a58 <__libc_init_array+0xc>
 8003a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a7e:	4798      	blx	r3
 8003a80:	3601      	adds	r6, #1
 8003a82:	e7f2      	b.n	8003a6a <__libc_init_array+0x1e>
 8003a84:	08004ae8 	.word	0x08004ae8
 8003a88:	08004ae8 	.word	0x08004ae8
 8003a8c:	08004ae8 	.word	0x08004ae8
 8003a90:	08004aec 	.word	0x08004aec

08003a94 <__retarget_lock_init_recursive>:
 8003a94:	4770      	bx	lr

08003a96 <__retarget_lock_acquire_recursive>:
 8003a96:	4770      	bx	lr

08003a98 <__retarget_lock_release_recursive>:
 8003a98:	4770      	bx	lr

08003a9a <memcpy>:
 8003a9a:	440a      	add	r2, r1
 8003a9c:	4291      	cmp	r1, r2
 8003a9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8003aa2:	d100      	bne.n	8003aa6 <memcpy+0xc>
 8003aa4:	4770      	bx	lr
 8003aa6:	b510      	push	{r4, lr}
 8003aa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003aac:	4291      	cmp	r1, r2
 8003aae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ab2:	d1f9      	bne.n	8003aa8 <memcpy+0xe>
 8003ab4:	bd10      	pop	{r4, pc}

08003ab6 <abort>:
 8003ab6:	2006      	movs	r0, #6
 8003ab8:	b508      	push	{r3, lr}
 8003aba:	f000 fe73 	bl	80047a4 <raise>
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f7fc fee1 	bl	8000886 <_exit>

08003ac4 <_free_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	4605      	mov	r5, r0
 8003ac8:	2900      	cmp	r1, #0
 8003aca:	d040      	beq.n	8003b4e <_free_r+0x8a>
 8003acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ad0:	1f0c      	subs	r4, r1, #4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bfb8      	it	lt
 8003ad6:	18e4      	addlt	r4, r4, r3
 8003ad8:	f000 f8dc 	bl	8003c94 <__malloc_lock>
 8003adc:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <_free_r+0x8c>)
 8003ade:	6813      	ldr	r3, [r2, #0]
 8003ae0:	b933      	cbnz	r3, 8003af0 <_free_r+0x2c>
 8003ae2:	6063      	str	r3, [r4, #4]
 8003ae4:	6014      	str	r4, [r2, #0]
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aec:	f000 b8d8 	b.w	8003ca0 <__malloc_unlock>
 8003af0:	42a3      	cmp	r3, r4
 8003af2:	d908      	bls.n	8003b06 <_free_r+0x42>
 8003af4:	6820      	ldr	r0, [r4, #0]
 8003af6:	1821      	adds	r1, r4, r0
 8003af8:	428b      	cmp	r3, r1
 8003afa:	bf01      	itttt	eq
 8003afc:	6819      	ldreq	r1, [r3, #0]
 8003afe:	685b      	ldreq	r3, [r3, #4]
 8003b00:	1809      	addeq	r1, r1, r0
 8003b02:	6021      	streq	r1, [r4, #0]
 8003b04:	e7ed      	b.n	8003ae2 <_free_r+0x1e>
 8003b06:	461a      	mov	r2, r3
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	b10b      	cbz	r3, 8003b10 <_free_r+0x4c>
 8003b0c:	42a3      	cmp	r3, r4
 8003b0e:	d9fa      	bls.n	8003b06 <_free_r+0x42>
 8003b10:	6811      	ldr	r1, [r2, #0]
 8003b12:	1850      	adds	r0, r2, r1
 8003b14:	42a0      	cmp	r0, r4
 8003b16:	d10b      	bne.n	8003b30 <_free_r+0x6c>
 8003b18:	6820      	ldr	r0, [r4, #0]
 8003b1a:	4401      	add	r1, r0
 8003b1c:	1850      	adds	r0, r2, r1
 8003b1e:	4283      	cmp	r3, r0
 8003b20:	6011      	str	r1, [r2, #0]
 8003b22:	d1e0      	bne.n	8003ae6 <_free_r+0x22>
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4408      	add	r0, r1
 8003b2a:	6010      	str	r0, [r2, #0]
 8003b2c:	6053      	str	r3, [r2, #4]
 8003b2e:	e7da      	b.n	8003ae6 <_free_r+0x22>
 8003b30:	d902      	bls.n	8003b38 <_free_r+0x74>
 8003b32:	230c      	movs	r3, #12
 8003b34:	602b      	str	r3, [r5, #0]
 8003b36:	e7d6      	b.n	8003ae6 <_free_r+0x22>
 8003b38:	6820      	ldr	r0, [r4, #0]
 8003b3a:	1821      	adds	r1, r4, r0
 8003b3c:	428b      	cmp	r3, r1
 8003b3e:	bf01      	itttt	eq
 8003b40:	6819      	ldreq	r1, [r3, #0]
 8003b42:	685b      	ldreq	r3, [r3, #4]
 8003b44:	1809      	addeq	r1, r1, r0
 8003b46:	6021      	streq	r1, [r4, #0]
 8003b48:	6063      	str	r3, [r4, #4]
 8003b4a:	6054      	str	r4, [r2, #4]
 8003b4c:	e7cb      	b.n	8003ae6 <_free_r+0x22>
 8003b4e:	bd38      	pop	{r3, r4, r5, pc}
 8003b50:	20000348 	.word	0x20000348

08003b54 <sbrk_aligned>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	4e0e      	ldr	r6, [pc, #56]	; (8003b90 <sbrk_aligned+0x3c>)
 8003b58:	460c      	mov	r4, r1
 8003b5a:	6831      	ldr	r1, [r6, #0]
 8003b5c:	4605      	mov	r5, r0
 8003b5e:	b911      	cbnz	r1, 8003b66 <sbrk_aligned+0x12>
 8003b60:	f000 fe5e 	bl	8004820 <_sbrk_r>
 8003b64:	6030      	str	r0, [r6, #0]
 8003b66:	4621      	mov	r1, r4
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f000 fe59 	bl	8004820 <_sbrk_r>
 8003b6e:	1c43      	adds	r3, r0, #1
 8003b70:	d00a      	beq.n	8003b88 <sbrk_aligned+0x34>
 8003b72:	1cc4      	adds	r4, r0, #3
 8003b74:	f024 0403 	bic.w	r4, r4, #3
 8003b78:	42a0      	cmp	r0, r4
 8003b7a:	d007      	beq.n	8003b8c <sbrk_aligned+0x38>
 8003b7c:	1a21      	subs	r1, r4, r0
 8003b7e:	4628      	mov	r0, r5
 8003b80:	f000 fe4e 	bl	8004820 <_sbrk_r>
 8003b84:	3001      	adds	r0, #1
 8003b86:	d101      	bne.n	8003b8c <sbrk_aligned+0x38>
 8003b88:	f04f 34ff 	mov.w	r4, #4294967295
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	2000034c 	.word	0x2000034c

08003b94 <_malloc_r>:
 8003b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b98:	1ccd      	adds	r5, r1, #3
 8003b9a:	f025 0503 	bic.w	r5, r5, #3
 8003b9e:	3508      	adds	r5, #8
 8003ba0:	2d0c      	cmp	r5, #12
 8003ba2:	bf38      	it	cc
 8003ba4:	250c      	movcc	r5, #12
 8003ba6:	2d00      	cmp	r5, #0
 8003ba8:	4607      	mov	r7, r0
 8003baa:	db01      	blt.n	8003bb0 <_malloc_r+0x1c>
 8003bac:	42a9      	cmp	r1, r5
 8003bae:	d905      	bls.n	8003bbc <_malloc_r+0x28>
 8003bb0:	230c      	movs	r3, #12
 8003bb2:	2600      	movs	r6, #0
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c90 <_malloc_r+0xfc>
 8003bc0:	f000 f868 	bl	8003c94 <__malloc_lock>
 8003bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8003bc8:	461c      	mov	r4, r3
 8003bca:	bb5c      	cbnz	r4, 8003c24 <_malloc_r+0x90>
 8003bcc:	4629      	mov	r1, r5
 8003bce:	4638      	mov	r0, r7
 8003bd0:	f7ff ffc0 	bl	8003b54 <sbrk_aligned>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	d155      	bne.n	8003c86 <_malloc_r+0xf2>
 8003bda:	f8d8 4000 	ldr.w	r4, [r8]
 8003bde:	4626      	mov	r6, r4
 8003be0:	2e00      	cmp	r6, #0
 8003be2:	d145      	bne.n	8003c70 <_malloc_r+0xdc>
 8003be4:	2c00      	cmp	r4, #0
 8003be6:	d048      	beq.n	8003c7a <_malloc_r+0xe6>
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	4631      	mov	r1, r6
 8003bec:	4638      	mov	r0, r7
 8003bee:	eb04 0903 	add.w	r9, r4, r3
 8003bf2:	f000 fe15 	bl	8004820 <_sbrk_r>
 8003bf6:	4581      	cmp	r9, r0
 8003bf8:	d13f      	bne.n	8003c7a <_malloc_r+0xe6>
 8003bfa:	6821      	ldr	r1, [r4, #0]
 8003bfc:	4638      	mov	r0, r7
 8003bfe:	1a6d      	subs	r5, r5, r1
 8003c00:	4629      	mov	r1, r5
 8003c02:	f7ff ffa7 	bl	8003b54 <sbrk_aligned>
 8003c06:	3001      	adds	r0, #1
 8003c08:	d037      	beq.n	8003c7a <_malloc_r+0xe6>
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	442b      	add	r3, r5
 8003c0e:	6023      	str	r3, [r4, #0]
 8003c10:	f8d8 3000 	ldr.w	r3, [r8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d038      	beq.n	8003c8a <_malloc_r+0xf6>
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	42a2      	cmp	r2, r4
 8003c1c:	d12b      	bne.n	8003c76 <_malloc_r+0xe2>
 8003c1e:	2200      	movs	r2, #0
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	e00f      	b.n	8003c44 <_malloc_r+0xb0>
 8003c24:	6822      	ldr	r2, [r4, #0]
 8003c26:	1b52      	subs	r2, r2, r5
 8003c28:	d41f      	bmi.n	8003c6a <_malloc_r+0xd6>
 8003c2a:	2a0b      	cmp	r2, #11
 8003c2c:	d917      	bls.n	8003c5e <_malloc_r+0xca>
 8003c2e:	1961      	adds	r1, r4, r5
 8003c30:	42a3      	cmp	r3, r4
 8003c32:	6025      	str	r5, [r4, #0]
 8003c34:	bf18      	it	ne
 8003c36:	6059      	strne	r1, [r3, #4]
 8003c38:	6863      	ldr	r3, [r4, #4]
 8003c3a:	bf08      	it	eq
 8003c3c:	f8c8 1000 	streq.w	r1, [r8]
 8003c40:	5162      	str	r2, [r4, r5]
 8003c42:	604b      	str	r3, [r1, #4]
 8003c44:	4638      	mov	r0, r7
 8003c46:	f104 060b 	add.w	r6, r4, #11
 8003c4a:	f000 f829 	bl	8003ca0 <__malloc_unlock>
 8003c4e:	f026 0607 	bic.w	r6, r6, #7
 8003c52:	1d23      	adds	r3, r4, #4
 8003c54:	1af2      	subs	r2, r6, r3
 8003c56:	d0ae      	beq.n	8003bb6 <_malloc_r+0x22>
 8003c58:	1b9b      	subs	r3, r3, r6
 8003c5a:	50a3      	str	r3, [r4, r2]
 8003c5c:	e7ab      	b.n	8003bb6 <_malloc_r+0x22>
 8003c5e:	42a3      	cmp	r3, r4
 8003c60:	6862      	ldr	r2, [r4, #4]
 8003c62:	d1dd      	bne.n	8003c20 <_malloc_r+0x8c>
 8003c64:	f8c8 2000 	str.w	r2, [r8]
 8003c68:	e7ec      	b.n	8003c44 <_malloc_r+0xb0>
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	6864      	ldr	r4, [r4, #4]
 8003c6e:	e7ac      	b.n	8003bca <_malloc_r+0x36>
 8003c70:	4634      	mov	r4, r6
 8003c72:	6876      	ldr	r6, [r6, #4]
 8003c74:	e7b4      	b.n	8003be0 <_malloc_r+0x4c>
 8003c76:	4613      	mov	r3, r2
 8003c78:	e7cc      	b.n	8003c14 <_malloc_r+0x80>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	f000 f80e 	bl	8003ca0 <__malloc_unlock>
 8003c84:	e797      	b.n	8003bb6 <_malloc_r+0x22>
 8003c86:	6025      	str	r5, [r4, #0]
 8003c88:	e7dc      	b.n	8003c44 <_malloc_r+0xb0>
 8003c8a:	605b      	str	r3, [r3, #4]
 8003c8c:	deff      	udf	#255	; 0xff
 8003c8e:	bf00      	nop
 8003c90:	20000348 	.word	0x20000348

08003c94 <__malloc_lock>:
 8003c94:	4801      	ldr	r0, [pc, #4]	; (8003c9c <__malloc_lock+0x8>)
 8003c96:	f7ff befe 	b.w	8003a96 <__retarget_lock_acquire_recursive>
 8003c9a:	bf00      	nop
 8003c9c:	20000344 	.word	0x20000344

08003ca0 <__malloc_unlock>:
 8003ca0:	4801      	ldr	r0, [pc, #4]	; (8003ca8 <__malloc_unlock+0x8>)
 8003ca2:	f7ff bef9 	b.w	8003a98 <__retarget_lock_release_recursive>
 8003ca6:	bf00      	nop
 8003ca8:	20000344 	.word	0x20000344

08003cac <__ssputs_r>:
 8003cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb0:	461f      	mov	r7, r3
 8003cb2:	688e      	ldr	r6, [r1, #8]
 8003cb4:	4682      	mov	sl, r0
 8003cb6:	42be      	cmp	r6, r7
 8003cb8:	460c      	mov	r4, r1
 8003cba:	4690      	mov	r8, r2
 8003cbc:	680b      	ldr	r3, [r1, #0]
 8003cbe:	d82c      	bhi.n	8003d1a <__ssputs_r+0x6e>
 8003cc0:	898a      	ldrh	r2, [r1, #12]
 8003cc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cc6:	d026      	beq.n	8003d16 <__ssputs_r+0x6a>
 8003cc8:	6965      	ldr	r5, [r4, #20]
 8003cca:	6909      	ldr	r1, [r1, #16]
 8003ccc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cd0:	eba3 0901 	sub.w	r9, r3, r1
 8003cd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cd8:	1c7b      	adds	r3, r7, #1
 8003cda:	444b      	add	r3, r9
 8003cdc:	106d      	asrs	r5, r5, #1
 8003cde:	429d      	cmp	r5, r3
 8003ce0:	bf38      	it	cc
 8003ce2:	461d      	movcc	r5, r3
 8003ce4:	0553      	lsls	r3, r2, #21
 8003ce6:	d527      	bpl.n	8003d38 <__ssputs_r+0x8c>
 8003ce8:	4629      	mov	r1, r5
 8003cea:	f7ff ff53 	bl	8003b94 <_malloc_r>
 8003cee:	4606      	mov	r6, r0
 8003cf0:	b360      	cbz	r0, 8003d4c <__ssputs_r+0xa0>
 8003cf2:	464a      	mov	r2, r9
 8003cf4:	6921      	ldr	r1, [r4, #16]
 8003cf6:	f7ff fed0 	bl	8003a9a <memcpy>
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d04:	81a3      	strh	r3, [r4, #12]
 8003d06:	6126      	str	r6, [r4, #16]
 8003d08:	444e      	add	r6, r9
 8003d0a:	6026      	str	r6, [r4, #0]
 8003d0c:	463e      	mov	r6, r7
 8003d0e:	6165      	str	r5, [r4, #20]
 8003d10:	eba5 0509 	sub.w	r5, r5, r9
 8003d14:	60a5      	str	r5, [r4, #8]
 8003d16:	42be      	cmp	r6, r7
 8003d18:	d900      	bls.n	8003d1c <__ssputs_r+0x70>
 8003d1a:	463e      	mov	r6, r7
 8003d1c:	4632      	mov	r2, r6
 8003d1e:	4641      	mov	r1, r8
 8003d20:	6820      	ldr	r0, [r4, #0]
 8003d22:	f000 fcfc 	bl	800471e <memmove>
 8003d26:	2000      	movs	r0, #0
 8003d28:	68a3      	ldr	r3, [r4, #8]
 8003d2a:	1b9b      	subs	r3, r3, r6
 8003d2c:	60a3      	str	r3, [r4, #8]
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	4433      	add	r3, r6
 8003d32:	6023      	str	r3, [r4, #0]
 8003d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d38:	462a      	mov	r2, r5
 8003d3a:	f000 fd8f 	bl	800485c <_realloc_r>
 8003d3e:	4606      	mov	r6, r0
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d1e0      	bne.n	8003d06 <__ssputs_r+0x5a>
 8003d44:	4650      	mov	r0, sl
 8003d46:	6921      	ldr	r1, [r4, #16]
 8003d48:	f7ff febc 	bl	8003ac4 <_free_r>
 8003d4c:	230c      	movs	r3, #12
 8003d4e:	f8ca 3000 	str.w	r3, [sl]
 8003d52:	89a3      	ldrh	r3, [r4, #12]
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d5c:	81a3      	strh	r3, [r4, #12]
 8003d5e:	e7e9      	b.n	8003d34 <__ssputs_r+0x88>

08003d60 <_svfiprintf_r>:
 8003d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d64:	4698      	mov	r8, r3
 8003d66:	898b      	ldrh	r3, [r1, #12]
 8003d68:	4607      	mov	r7, r0
 8003d6a:	061b      	lsls	r3, r3, #24
 8003d6c:	460d      	mov	r5, r1
 8003d6e:	4614      	mov	r4, r2
 8003d70:	b09d      	sub	sp, #116	; 0x74
 8003d72:	d50e      	bpl.n	8003d92 <_svfiprintf_r+0x32>
 8003d74:	690b      	ldr	r3, [r1, #16]
 8003d76:	b963      	cbnz	r3, 8003d92 <_svfiprintf_r+0x32>
 8003d78:	2140      	movs	r1, #64	; 0x40
 8003d7a:	f7ff ff0b 	bl	8003b94 <_malloc_r>
 8003d7e:	6028      	str	r0, [r5, #0]
 8003d80:	6128      	str	r0, [r5, #16]
 8003d82:	b920      	cbnz	r0, 8003d8e <_svfiprintf_r+0x2e>
 8003d84:	230c      	movs	r3, #12
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8c:	e0d0      	b.n	8003f30 <_svfiprintf_r+0x1d0>
 8003d8e:	2340      	movs	r3, #64	; 0x40
 8003d90:	616b      	str	r3, [r5, #20]
 8003d92:	2300      	movs	r3, #0
 8003d94:	9309      	str	r3, [sp, #36]	; 0x24
 8003d96:	2320      	movs	r3, #32
 8003d98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d9c:	2330      	movs	r3, #48	; 0x30
 8003d9e:	f04f 0901 	mov.w	r9, #1
 8003da2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003da6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003f48 <_svfiprintf_r+0x1e8>
 8003daa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dae:	4623      	mov	r3, r4
 8003db0:	469a      	mov	sl, r3
 8003db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003db6:	b10a      	cbz	r2, 8003dbc <_svfiprintf_r+0x5c>
 8003db8:	2a25      	cmp	r2, #37	; 0x25
 8003dba:	d1f9      	bne.n	8003db0 <_svfiprintf_r+0x50>
 8003dbc:	ebba 0b04 	subs.w	fp, sl, r4
 8003dc0:	d00b      	beq.n	8003dda <_svfiprintf_r+0x7a>
 8003dc2:	465b      	mov	r3, fp
 8003dc4:	4622      	mov	r2, r4
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	4638      	mov	r0, r7
 8003dca:	f7ff ff6f 	bl	8003cac <__ssputs_r>
 8003dce:	3001      	adds	r0, #1
 8003dd0:	f000 80a9 	beq.w	8003f26 <_svfiprintf_r+0x1c6>
 8003dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dd6:	445a      	add	r2, fp
 8003dd8:	9209      	str	r2, [sp, #36]	; 0x24
 8003dda:	f89a 3000 	ldrb.w	r3, [sl]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80a1 	beq.w	8003f26 <_svfiprintf_r+0x1c6>
 8003de4:	2300      	movs	r3, #0
 8003de6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dee:	f10a 0a01 	add.w	sl, sl, #1
 8003df2:	9304      	str	r3, [sp, #16]
 8003df4:	9307      	str	r3, [sp, #28]
 8003df6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dfa:	931a      	str	r3, [sp, #104]	; 0x68
 8003dfc:	4654      	mov	r4, sl
 8003dfe:	2205      	movs	r2, #5
 8003e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e04:	4850      	ldr	r0, [pc, #320]	; (8003f48 <_svfiprintf_r+0x1e8>)
 8003e06:	f000 fd1b 	bl	8004840 <memchr>
 8003e0a:	9a04      	ldr	r2, [sp, #16]
 8003e0c:	b9d8      	cbnz	r0, 8003e46 <_svfiprintf_r+0xe6>
 8003e0e:	06d0      	lsls	r0, r2, #27
 8003e10:	bf44      	itt	mi
 8003e12:	2320      	movmi	r3, #32
 8003e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e18:	0711      	lsls	r1, r2, #28
 8003e1a:	bf44      	itt	mi
 8003e1c:	232b      	movmi	r3, #43	; 0x2b
 8003e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e22:	f89a 3000 	ldrb.w	r3, [sl]
 8003e26:	2b2a      	cmp	r3, #42	; 0x2a
 8003e28:	d015      	beq.n	8003e56 <_svfiprintf_r+0xf6>
 8003e2a:	4654      	mov	r4, sl
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	f04f 0c0a 	mov.w	ip, #10
 8003e32:	9a07      	ldr	r2, [sp, #28]
 8003e34:	4621      	mov	r1, r4
 8003e36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e3a:	3b30      	subs	r3, #48	; 0x30
 8003e3c:	2b09      	cmp	r3, #9
 8003e3e:	d94d      	bls.n	8003edc <_svfiprintf_r+0x17c>
 8003e40:	b1b0      	cbz	r0, 8003e70 <_svfiprintf_r+0x110>
 8003e42:	9207      	str	r2, [sp, #28]
 8003e44:	e014      	b.n	8003e70 <_svfiprintf_r+0x110>
 8003e46:	eba0 0308 	sub.w	r3, r0, r8
 8003e4a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	46a2      	mov	sl, r4
 8003e52:	9304      	str	r3, [sp, #16]
 8003e54:	e7d2      	b.n	8003dfc <_svfiprintf_r+0x9c>
 8003e56:	9b03      	ldr	r3, [sp, #12]
 8003e58:	1d19      	adds	r1, r3, #4
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	9103      	str	r1, [sp, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bfbb      	ittet	lt
 8003e62:	425b      	neglt	r3, r3
 8003e64:	f042 0202 	orrlt.w	r2, r2, #2
 8003e68:	9307      	strge	r3, [sp, #28]
 8003e6a:	9307      	strlt	r3, [sp, #28]
 8003e6c:	bfb8      	it	lt
 8003e6e:	9204      	strlt	r2, [sp, #16]
 8003e70:	7823      	ldrb	r3, [r4, #0]
 8003e72:	2b2e      	cmp	r3, #46	; 0x2e
 8003e74:	d10c      	bne.n	8003e90 <_svfiprintf_r+0x130>
 8003e76:	7863      	ldrb	r3, [r4, #1]
 8003e78:	2b2a      	cmp	r3, #42	; 0x2a
 8003e7a:	d134      	bne.n	8003ee6 <_svfiprintf_r+0x186>
 8003e7c:	9b03      	ldr	r3, [sp, #12]
 8003e7e:	3402      	adds	r4, #2
 8003e80:	1d1a      	adds	r2, r3, #4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	9203      	str	r2, [sp, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bfb8      	it	lt
 8003e8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e8e:	9305      	str	r3, [sp, #20]
 8003e90:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003f4c <_svfiprintf_r+0x1ec>
 8003e94:	2203      	movs	r2, #3
 8003e96:	4650      	mov	r0, sl
 8003e98:	7821      	ldrb	r1, [r4, #0]
 8003e9a:	f000 fcd1 	bl	8004840 <memchr>
 8003e9e:	b138      	cbz	r0, 8003eb0 <_svfiprintf_r+0x150>
 8003ea0:	2240      	movs	r2, #64	; 0x40
 8003ea2:	9b04      	ldr	r3, [sp, #16]
 8003ea4:	eba0 000a 	sub.w	r0, r0, sl
 8003ea8:	4082      	lsls	r2, r0
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	3401      	adds	r4, #1
 8003eae:	9304      	str	r3, [sp, #16]
 8003eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eb4:	2206      	movs	r2, #6
 8003eb6:	4826      	ldr	r0, [pc, #152]	; (8003f50 <_svfiprintf_r+0x1f0>)
 8003eb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ebc:	f000 fcc0 	bl	8004840 <memchr>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	d038      	beq.n	8003f36 <_svfiprintf_r+0x1d6>
 8003ec4:	4b23      	ldr	r3, [pc, #140]	; (8003f54 <_svfiprintf_r+0x1f4>)
 8003ec6:	bb1b      	cbnz	r3, 8003f10 <_svfiprintf_r+0x1b0>
 8003ec8:	9b03      	ldr	r3, [sp, #12]
 8003eca:	3307      	adds	r3, #7
 8003ecc:	f023 0307 	bic.w	r3, r3, #7
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	9303      	str	r3, [sp, #12]
 8003ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed6:	4433      	add	r3, r6
 8003ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8003eda:	e768      	b.n	8003dae <_svfiprintf_r+0x4e>
 8003edc:	460c      	mov	r4, r1
 8003ede:	2001      	movs	r0, #1
 8003ee0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ee4:	e7a6      	b.n	8003e34 <_svfiprintf_r+0xd4>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f04f 0c0a 	mov.w	ip, #10
 8003eec:	4619      	mov	r1, r3
 8003eee:	3401      	adds	r4, #1
 8003ef0:	9305      	str	r3, [sp, #20]
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ef8:	3a30      	subs	r2, #48	; 0x30
 8003efa:	2a09      	cmp	r2, #9
 8003efc:	d903      	bls.n	8003f06 <_svfiprintf_r+0x1a6>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0c6      	beq.n	8003e90 <_svfiprintf_r+0x130>
 8003f02:	9105      	str	r1, [sp, #20]
 8003f04:	e7c4      	b.n	8003e90 <_svfiprintf_r+0x130>
 8003f06:	4604      	mov	r4, r0
 8003f08:	2301      	movs	r3, #1
 8003f0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f0e:	e7f0      	b.n	8003ef2 <_svfiprintf_r+0x192>
 8003f10:	ab03      	add	r3, sp, #12
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	462a      	mov	r2, r5
 8003f16:	4638      	mov	r0, r7
 8003f18:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <_svfiprintf_r+0x1f8>)
 8003f1a:	a904      	add	r1, sp, #16
 8003f1c:	f3af 8000 	nop.w
 8003f20:	1c42      	adds	r2, r0, #1
 8003f22:	4606      	mov	r6, r0
 8003f24:	d1d6      	bne.n	8003ed4 <_svfiprintf_r+0x174>
 8003f26:	89ab      	ldrh	r3, [r5, #12]
 8003f28:	065b      	lsls	r3, r3, #25
 8003f2a:	f53f af2d 	bmi.w	8003d88 <_svfiprintf_r+0x28>
 8003f2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f30:	b01d      	add	sp, #116	; 0x74
 8003f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f36:	ab03      	add	r3, sp, #12
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	462a      	mov	r2, r5
 8003f3c:	4638      	mov	r0, r7
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <_svfiprintf_r+0x1f8>)
 8003f40:	a904      	add	r1, sp, #16
 8003f42:	f000 f9bf 	bl	80042c4 <_printf_i>
 8003f46:	e7eb      	b.n	8003f20 <_svfiprintf_r+0x1c0>
 8003f48:	08004ab5 	.word	0x08004ab5
 8003f4c:	08004abb 	.word	0x08004abb
 8003f50:	08004abf 	.word	0x08004abf
 8003f54:	00000000 	.word	0x00000000
 8003f58:	08003cad 	.word	0x08003cad

08003f5c <__sfputc_r>:
 8003f5c:	6893      	ldr	r3, [r2, #8]
 8003f5e:	b410      	push	{r4}
 8003f60:	3b01      	subs	r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	6093      	str	r3, [r2, #8]
 8003f66:	da07      	bge.n	8003f78 <__sfputc_r+0x1c>
 8003f68:	6994      	ldr	r4, [r2, #24]
 8003f6a:	42a3      	cmp	r3, r4
 8003f6c:	db01      	blt.n	8003f72 <__sfputc_r+0x16>
 8003f6e:	290a      	cmp	r1, #10
 8003f70:	d102      	bne.n	8003f78 <__sfputc_r+0x1c>
 8003f72:	bc10      	pop	{r4}
 8003f74:	f7ff bc81 	b.w	800387a <__swbuf_r>
 8003f78:	6813      	ldr	r3, [r2, #0]
 8003f7a:	1c58      	adds	r0, r3, #1
 8003f7c:	6010      	str	r0, [r2, #0]
 8003f7e:	7019      	strb	r1, [r3, #0]
 8003f80:	4608      	mov	r0, r1
 8003f82:	bc10      	pop	{r4}
 8003f84:	4770      	bx	lr

08003f86 <__sfputs_r>:
 8003f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f88:	4606      	mov	r6, r0
 8003f8a:	460f      	mov	r7, r1
 8003f8c:	4614      	mov	r4, r2
 8003f8e:	18d5      	adds	r5, r2, r3
 8003f90:	42ac      	cmp	r4, r5
 8003f92:	d101      	bne.n	8003f98 <__sfputs_r+0x12>
 8003f94:	2000      	movs	r0, #0
 8003f96:	e007      	b.n	8003fa8 <__sfputs_r+0x22>
 8003f98:	463a      	mov	r2, r7
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa0:	f7ff ffdc 	bl	8003f5c <__sfputc_r>
 8003fa4:	1c43      	adds	r3, r0, #1
 8003fa6:	d1f3      	bne.n	8003f90 <__sfputs_r+0xa>
 8003fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fac <_vfiprintf_r>:
 8003fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb0:	460d      	mov	r5, r1
 8003fb2:	4614      	mov	r4, r2
 8003fb4:	4698      	mov	r8, r3
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	b09d      	sub	sp, #116	; 0x74
 8003fba:	b118      	cbz	r0, 8003fc4 <_vfiprintf_r+0x18>
 8003fbc:	6a03      	ldr	r3, [r0, #32]
 8003fbe:	b90b      	cbnz	r3, 8003fc4 <_vfiprintf_r+0x18>
 8003fc0:	f7ff fb42 	bl	8003648 <__sinit>
 8003fc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fc6:	07d9      	lsls	r1, r3, #31
 8003fc8:	d405      	bmi.n	8003fd6 <_vfiprintf_r+0x2a>
 8003fca:	89ab      	ldrh	r3, [r5, #12]
 8003fcc:	059a      	lsls	r2, r3, #22
 8003fce:	d402      	bmi.n	8003fd6 <_vfiprintf_r+0x2a>
 8003fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fd2:	f7ff fd60 	bl	8003a96 <__retarget_lock_acquire_recursive>
 8003fd6:	89ab      	ldrh	r3, [r5, #12]
 8003fd8:	071b      	lsls	r3, r3, #28
 8003fda:	d501      	bpl.n	8003fe0 <_vfiprintf_r+0x34>
 8003fdc:	692b      	ldr	r3, [r5, #16]
 8003fde:	b99b      	cbnz	r3, 8004008 <_vfiprintf_r+0x5c>
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	f7ff fc86 	bl	80038f4 <__swsetup_r>
 8003fe8:	b170      	cbz	r0, 8004008 <_vfiprintf_r+0x5c>
 8003fea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fec:	07dc      	lsls	r4, r3, #31
 8003fee:	d504      	bpl.n	8003ffa <_vfiprintf_r+0x4e>
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff4:	b01d      	add	sp, #116	; 0x74
 8003ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ffa:	89ab      	ldrh	r3, [r5, #12]
 8003ffc:	0598      	lsls	r0, r3, #22
 8003ffe:	d4f7      	bmi.n	8003ff0 <_vfiprintf_r+0x44>
 8004000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004002:	f7ff fd49 	bl	8003a98 <__retarget_lock_release_recursive>
 8004006:	e7f3      	b.n	8003ff0 <_vfiprintf_r+0x44>
 8004008:	2300      	movs	r3, #0
 800400a:	9309      	str	r3, [sp, #36]	; 0x24
 800400c:	2320      	movs	r3, #32
 800400e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004012:	2330      	movs	r3, #48	; 0x30
 8004014:	f04f 0901 	mov.w	r9, #1
 8004018:	f8cd 800c 	str.w	r8, [sp, #12]
 800401c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80041cc <_vfiprintf_r+0x220>
 8004020:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004024:	4623      	mov	r3, r4
 8004026:	469a      	mov	sl, r3
 8004028:	f813 2b01 	ldrb.w	r2, [r3], #1
 800402c:	b10a      	cbz	r2, 8004032 <_vfiprintf_r+0x86>
 800402e:	2a25      	cmp	r2, #37	; 0x25
 8004030:	d1f9      	bne.n	8004026 <_vfiprintf_r+0x7a>
 8004032:	ebba 0b04 	subs.w	fp, sl, r4
 8004036:	d00b      	beq.n	8004050 <_vfiprintf_r+0xa4>
 8004038:	465b      	mov	r3, fp
 800403a:	4622      	mov	r2, r4
 800403c:	4629      	mov	r1, r5
 800403e:	4630      	mov	r0, r6
 8004040:	f7ff ffa1 	bl	8003f86 <__sfputs_r>
 8004044:	3001      	adds	r0, #1
 8004046:	f000 80a9 	beq.w	800419c <_vfiprintf_r+0x1f0>
 800404a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800404c:	445a      	add	r2, fp
 800404e:	9209      	str	r2, [sp, #36]	; 0x24
 8004050:	f89a 3000 	ldrb.w	r3, [sl]
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80a1 	beq.w	800419c <_vfiprintf_r+0x1f0>
 800405a:	2300      	movs	r3, #0
 800405c:	f04f 32ff 	mov.w	r2, #4294967295
 8004060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004064:	f10a 0a01 	add.w	sl, sl, #1
 8004068:	9304      	str	r3, [sp, #16]
 800406a:	9307      	str	r3, [sp, #28]
 800406c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004070:	931a      	str	r3, [sp, #104]	; 0x68
 8004072:	4654      	mov	r4, sl
 8004074:	2205      	movs	r2, #5
 8004076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800407a:	4854      	ldr	r0, [pc, #336]	; (80041cc <_vfiprintf_r+0x220>)
 800407c:	f000 fbe0 	bl	8004840 <memchr>
 8004080:	9a04      	ldr	r2, [sp, #16]
 8004082:	b9d8      	cbnz	r0, 80040bc <_vfiprintf_r+0x110>
 8004084:	06d1      	lsls	r1, r2, #27
 8004086:	bf44      	itt	mi
 8004088:	2320      	movmi	r3, #32
 800408a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800408e:	0713      	lsls	r3, r2, #28
 8004090:	bf44      	itt	mi
 8004092:	232b      	movmi	r3, #43	; 0x2b
 8004094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004098:	f89a 3000 	ldrb.w	r3, [sl]
 800409c:	2b2a      	cmp	r3, #42	; 0x2a
 800409e:	d015      	beq.n	80040cc <_vfiprintf_r+0x120>
 80040a0:	4654      	mov	r4, sl
 80040a2:	2000      	movs	r0, #0
 80040a4:	f04f 0c0a 	mov.w	ip, #10
 80040a8:	9a07      	ldr	r2, [sp, #28]
 80040aa:	4621      	mov	r1, r4
 80040ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040b0:	3b30      	subs	r3, #48	; 0x30
 80040b2:	2b09      	cmp	r3, #9
 80040b4:	d94d      	bls.n	8004152 <_vfiprintf_r+0x1a6>
 80040b6:	b1b0      	cbz	r0, 80040e6 <_vfiprintf_r+0x13a>
 80040b8:	9207      	str	r2, [sp, #28]
 80040ba:	e014      	b.n	80040e6 <_vfiprintf_r+0x13a>
 80040bc:	eba0 0308 	sub.w	r3, r0, r8
 80040c0:	fa09 f303 	lsl.w	r3, r9, r3
 80040c4:	4313      	orrs	r3, r2
 80040c6:	46a2      	mov	sl, r4
 80040c8:	9304      	str	r3, [sp, #16]
 80040ca:	e7d2      	b.n	8004072 <_vfiprintf_r+0xc6>
 80040cc:	9b03      	ldr	r3, [sp, #12]
 80040ce:	1d19      	adds	r1, r3, #4
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	9103      	str	r1, [sp, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bfbb      	ittet	lt
 80040d8:	425b      	neglt	r3, r3
 80040da:	f042 0202 	orrlt.w	r2, r2, #2
 80040de:	9307      	strge	r3, [sp, #28]
 80040e0:	9307      	strlt	r3, [sp, #28]
 80040e2:	bfb8      	it	lt
 80040e4:	9204      	strlt	r2, [sp, #16]
 80040e6:	7823      	ldrb	r3, [r4, #0]
 80040e8:	2b2e      	cmp	r3, #46	; 0x2e
 80040ea:	d10c      	bne.n	8004106 <_vfiprintf_r+0x15a>
 80040ec:	7863      	ldrb	r3, [r4, #1]
 80040ee:	2b2a      	cmp	r3, #42	; 0x2a
 80040f0:	d134      	bne.n	800415c <_vfiprintf_r+0x1b0>
 80040f2:	9b03      	ldr	r3, [sp, #12]
 80040f4:	3402      	adds	r4, #2
 80040f6:	1d1a      	adds	r2, r3, #4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	9203      	str	r2, [sp, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bfb8      	it	lt
 8004100:	f04f 33ff 	movlt.w	r3, #4294967295
 8004104:	9305      	str	r3, [sp, #20]
 8004106:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041d0 <_vfiprintf_r+0x224>
 800410a:	2203      	movs	r2, #3
 800410c:	4650      	mov	r0, sl
 800410e:	7821      	ldrb	r1, [r4, #0]
 8004110:	f000 fb96 	bl	8004840 <memchr>
 8004114:	b138      	cbz	r0, 8004126 <_vfiprintf_r+0x17a>
 8004116:	2240      	movs	r2, #64	; 0x40
 8004118:	9b04      	ldr	r3, [sp, #16]
 800411a:	eba0 000a 	sub.w	r0, r0, sl
 800411e:	4082      	lsls	r2, r0
 8004120:	4313      	orrs	r3, r2
 8004122:	3401      	adds	r4, #1
 8004124:	9304      	str	r3, [sp, #16]
 8004126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800412a:	2206      	movs	r2, #6
 800412c:	4829      	ldr	r0, [pc, #164]	; (80041d4 <_vfiprintf_r+0x228>)
 800412e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004132:	f000 fb85 	bl	8004840 <memchr>
 8004136:	2800      	cmp	r0, #0
 8004138:	d03f      	beq.n	80041ba <_vfiprintf_r+0x20e>
 800413a:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <_vfiprintf_r+0x22c>)
 800413c:	bb1b      	cbnz	r3, 8004186 <_vfiprintf_r+0x1da>
 800413e:	9b03      	ldr	r3, [sp, #12]
 8004140:	3307      	adds	r3, #7
 8004142:	f023 0307 	bic.w	r3, r3, #7
 8004146:	3308      	adds	r3, #8
 8004148:	9303      	str	r3, [sp, #12]
 800414a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800414c:	443b      	add	r3, r7
 800414e:	9309      	str	r3, [sp, #36]	; 0x24
 8004150:	e768      	b.n	8004024 <_vfiprintf_r+0x78>
 8004152:	460c      	mov	r4, r1
 8004154:	2001      	movs	r0, #1
 8004156:	fb0c 3202 	mla	r2, ip, r2, r3
 800415a:	e7a6      	b.n	80040aa <_vfiprintf_r+0xfe>
 800415c:	2300      	movs	r3, #0
 800415e:	f04f 0c0a 	mov.w	ip, #10
 8004162:	4619      	mov	r1, r3
 8004164:	3401      	adds	r4, #1
 8004166:	9305      	str	r3, [sp, #20]
 8004168:	4620      	mov	r0, r4
 800416a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800416e:	3a30      	subs	r2, #48	; 0x30
 8004170:	2a09      	cmp	r2, #9
 8004172:	d903      	bls.n	800417c <_vfiprintf_r+0x1d0>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0c6      	beq.n	8004106 <_vfiprintf_r+0x15a>
 8004178:	9105      	str	r1, [sp, #20]
 800417a:	e7c4      	b.n	8004106 <_vfiprintf_r+0x15a>
 800417c:	4604      	mov	r4, r0
 800417e:	2301      	movs	r3, #1
 8004180:	fb0c 2101 	mla	r1, ip, r1, r2
 8004184:	e7f0      	b.n	8004168 <_vfiprintf_r+0x1bc>
 8004186:	ab03      	add	r3, sp, #12
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	462a      	mov	r2, r5
 800418c:	4630      	mov	r0, r6
 800418e:	4b13      	ldr	r3, [pc, #76]	; (80041dc <_vfiprintf_r+0x230>)
 8004190:	a904      	add	r1, sp, #16
 8004192:	f3af 8000 	nop.w
 8004196:	4607      	mov	r7, r0
 8004198:	1c78      	adds	r0, r7, #1
 800419a:	d1d6      	bne.n	800414a <_vfiprintf_r+0x19e>
 800419c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800419e:	07d9      	lsls	r1, r3, #31
 80041a0:	d405      	bmi.n	80041ae <_vfiprintf_r+0x202>
 80041a2:	89ab      	ldrh	r3, [r5, #12]
 80041a4:	059a      	lsls	r2, r3, #22
 80041a6:	d402      	bmi.n	80041ae <_vfiprintf_r+0x202>
 80041a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041aa:	f7ff fc75 	bl	8003a98 <__retarget_lock_release_recursive>
 80041ae:	89ab      	ldrh	r3, [r5, #12]
 80041b0:	065b      	lsls	r3, r3, #25
 80041b2:	f53f af1d 	bmi.w	8003ff0 <_vfiprintf_r+0x44>
 80041b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041b8:	e71c      	b.n	8003ff4 <_vfiprintf_r+0x48>
 80041ba:	ab03      	add	r3, sp, #12
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	462a      	mov	r2, r5
 80041c0:	4630      	mov	r0, r6
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <_vfiprintf_r+0x230>)
 80041c4:	a904      	add	r1, sp, #16
 80041c6:	f000 f87d 	bl	80042c4 <_printf_i>
 80041ca:	e7e4      	b.n	8004196 <_vfiprintf_r+0x1ea>
 80041cc:	08004ab5 	.word	0x08004ab5
 80041d0:	08004abb 	.word	0x08004abb
 80041d4:	08004abf 	.word	0x08004abf
 80041d8:	00000000 	.word	0x00000000
 80041dc:	08003f87 	.word	0x08003f87

080041e0 <_printf_common>:
 80041e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e4:	4616      	mov	r6, r2
 80041e6:	4699      	mov	r9, r3
 80041e8:	688a      	ldr	r2, [r1, #8]
 80041ea:	690b      	ldr	r3, [r1, #16]
 80041ec:	4607      	mov	r7, r0
 80041ee:	4293      	cmp	r3, r2
 80041f0:	bfb8      	it	lt
 80041f2:	4613      	movlt	r3, r2
 80041f4:	6033      	str	r3, [r6, #0]
 80041f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041fa:	460c      	mov	r4, r1
 80041fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004200:	b10a      	cbz	r2, 8004206 <_printf_common+0x26>
 8004202:	3301      	adds	r3, #1
 8004204:	6033      	str	r3, [r6, #0]
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	0699      	lsls	r1, r3, #26
 800420a:	bf42      	ittt	mi
 800420c:	6833      	ldrmi	r3, [r6, #0]
 800420e:	3302      	addmi	r3, #2
 8004210:	6033      	strmi	r3, [r6, #0]
 8004212:	6825      	ldr	r5, [r4, #0]
 8004214:	f015 0506 	ands.w	r5, r5, #6
 8004218:	d106      	bne.n	8004228 <_printf_common+0x48>
 800421a:	f104 0a19 	add.w	sl, r4, #25
 800421e:	68e3      	ldr	r3, [r4, #12]
 8004220:	6832      	ldr	r2, [r6, #0]
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	42ab      	cmp	r3, r5
 8004226:	dc2b      	bgt.n	8004280 <_printf_common+0xa0>
 8004228:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800422c:	1e13      	subs	r3, r2, #0
 800422e:	6822      	ldr	r2, [r4, #0]
 8004230:	bf18      	it	ne
 8004232:	2301      	movne	r3, #1
 8004234:	0692      	lsls	r2, r2, #26
 8004236:	d430      	bmi.n	800429a <_printf_common+0xba>
 8004238:	4649      	mov	r1, r9
 800423a:	4638      	mov	r0, r7
 800423c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004240:	47c0      	blx	r8
 8004242:	3001      	adds	r0, #1
 8004244:	d023      	beq.n	800428e <_printf_common+0xae>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	6922      	ldr	r2, [r4, #16]
 800424a:	f003 0306 	and.w	r3, r3, #6
 800424e:	2b04      	cmp	r3, #4
 8004250:	bf14      	ite	ne
 8004252:	2500      	movne	r5, #0
 8004254:	6833      	ldreq	r3, [r6, #0]
 8004256:	f04f 0600 	mov.w	r6, #0
 800425a:	bf08      	it	eq
 800425c:	68e5      	ldreq	r5, [r4, #12]
 800425e:	f104 041a 	add.w	r4, r4, #26
 8004262:	bf08      	it	eq
 8004264:	1aed      	subeq	r5, r5, r3
 8004266:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800426a:	bf08      	it	eq
 800426c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004270:	4293      	cmp	r3, r2
 8004272:	bfc4      	itt	gt
 8004274:	1a9b      	subgt	r3, r3, r2
 8004276:	18ed      	addgt	r5, r5, r3
 8004278:	42b5      	cmp	r5, r6
 800427a:	d11a      	bne.n	80042b2 <_printf_common+0xd2>
 800427c:	2000      	movs	r0, #0
 800427e:	e008      	b.n	8004292 <_printf_common+0xb2>
 8004280:	2301      	movs	r3, #1
 8004282:	4652      	mov	r2, sl
 8004284:	4649      	mov	r1, r9
 8004286:	4638      	mov	r0, r7
 8004288:	47c0      	blx	r8
 800428a:	3001      	adds	r0, #1
 800428c:	d103      	bne.n	8004296 <_printf_common+0xb6>
 800428e:	f04f 30ff 	mov.w	r0, #4294967295
 8004292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004296:	3501      	adds	r5, #1
 8004298:	e7c1      	b.n	800421e <_printf_common+0x3e>
 800429a:	2030      	movs	r0, #48	; 0x30
 800429c:	18e1      	adds	r1, r4, r3
 800429e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042a8:	4422      	add	r2, r4
 80042aa:	3302      	adds	r3, #2
 80042ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042b0:	e7c2      	b.n	8004238 <_printf_common+0x58>
 80042b2:	2301      	movs	r3, #1
 80042b4:	4622      	mov	r2, r4
 80042b6:	4649      	mov	r1, r9
 80042b8:	4638      	mov	r0, r7
 80042ba:	47c0      	blx	r8
 80042bc:	3001      	adds	r0, #1
 80042be:	d0e6      	beq.n	800428e <_printf_common+0xae>
 80042c0:	3601      	adds	r6, #1
 80042c2:	e7d9      	b.n	8004278 <_printf_common+0x98>

080042c4 <_printf_i>:
 80042c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042c8:	7e0f      	ldrb	r7, [r1, #24]
 80042ca:	4691      	mov	r9, r2
 80042cc:	2f78      	cmp	r7, #120	; 0x78
 80042ce:	4680      	mov	r8, r0
 80042d0:	460c      	mov	r4, r1
 80042d2:	469a      	mov	sl, r3
 80042d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042da:	d807      	bhi.n	80042ec <_printf_i+0x28>
 80042dc:	2f62      	cmp	r7, #98	; 0x62
 80042de:	d80a      	bhi.n	80042f6 <_printf_i+0x32>
 80042e0:	2f00      	cmp	r7, #0
 80042e2:	f000 80d5 	beq.w	8004490 <_printf_i+0x1cc>
 80042e6:	2f58      	cmp	r7, #88	; 0x58
 80042e8:	f000 80c1 	beq.w	800446e <_printf_i+0x1aa>
 80042ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042f4:	e03a      	b.n	800436c <_printf_i+0xa8>
 80042f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042fa:	2b15      	cmp	r3, #21
 80042fc:	d8f6      	bhi.n	80042ec <_printf_i+0x28>
 80042fe:	a101      	add	r1, pc, #4	; (adr r1, 8004304 <_printf_i+0x40>)
 8004300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004304:	0800435d 	.word	0x0800435d
 8004308:	08004371 	.word	0x08004371
 800430c:	080042ed 	.word	0x080042ed
 8004310:	080042ed 	.word	0x080042ed
 8004314:	080042ed 	.word	0x080042ed
 8004318:	080042ed 	.word	0x080042ed
 800431c:	08004371 	.word	0x08004371
 8004320:	080042ed 	.word	0x080042ed
 8004324:	080042ed 	.word	0x080042ed
 8004328:	080042ed 	.word	0x080042ed
 800432c:	080042ed 	.word	0x080042ed
 8004330:	08004477 	.word	0x08004477
 8004334:	0800439d 	.word	0x0800439d
 8004338:	08004431 	.word	0x08004431
 800433c:	080042ed 	.word	0x080042ed
 8004340:	080042ed 	.word	0x080042ed
 8004344:	08004499 	.word	0x08004499
 8004348:	080042ed 	.word	0x080042ed
 800434c:	0800439d 	.word	0x0800439d
 8004350:	080042ed 	.word	0x080042ed
 8004354:	080042ed 	.word	0x080042ed
 8004358:	08004439 	.word	0x08004439
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	1d1a      	adds	r2, r3, #4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	602a      	str	r2, [r5, #0]
 8004364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800436c:	2301      	movs	r3, #1
 800436e:	e0a0      	b.n	80044b2 <_printf_i+0x1ee>
 8004370:	6820      	ldr	r0, [r4, #0]
 8004372:	682b      	ldr	r3, [r5, #0]
 8004374:	0607      	lsls	r7, r0, #24
 8004376:	f103 0104 	add.w	r1, r3, #4
 800437a:	6029      	str	r1, [r5, #0]
 800437c:	d501      	bpl.n	8004382 <_printf_i+0xbe>
 800437e:	681e      	ldr	r6, [r3, #0]
 8004380:	e003      	b.n	800438a <_printf_i+0xc6>
 8004382:	0646      	lsls	r6, r0, #25
 8004384:	d5fb      	bpl.n	800437e <_printf_i+0xba>
 8004386:	f9b3 6000 	ldrsh.w	r6, [r3]
 800438a:	2e00      	cmp	r6, #0
 800438c:	da03      	bge.n	8004396 <_printf_i+0xd2>
 800438e:	232d      	movs	r3, #45	; 0x2d
 8004390:	4276      	negs	r6, r6
 8004392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004396:	230a      	movs	r3, #10
 8004398:	4859      	ldr	r0, [pc, #356]	; (8004500 <_printf_i+0x23c>)
 800439a:	e012      	b.n	80043c2 <_printf_i+0xfe>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	6820      	ldr	r0, [r4, #0]
 80043a0:	1d19      	adds	r1, r3, #4
 80043a2:	6029      	str	r1, [r5, #0]
 80043a4:	0605      	lsls	r5, r0, #24
 80043a6:	d501      	bpl.n	80043ac <_printf_i+0xe8>
 80043a8:	681e      	ldr	r6, [r3, #0]
 80043aa:	e002      	b.n	80043b2 <_printf_i+0xee>
 80043ac:	0641      	lsls	r1, r0, #25
 80043ae:	d5fb      	bpl.n	80043a8 <_printf_i+0xe4>
 80043b0:	881e      	ldrh	r6, [r3, #0]
 80043b2:	2f6f      	cmp	r7, #111	; 0x6f
 80043b4:	bf0c      	ite	eq
 80043b6:	2308      	moveq	r3, #8
 80043b8:	230a      	movne	r3, #10
 80043ba:	4851      	ldr	r0, [pc, #324]	; (8004500 <_printf_i+0x23c>)
 80043bc:	2100      	movs	r1, #0
 80043be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043c2:	6865      	ldr	r5, [r4, #4]
 80043c4:	2d00      	cmp	r5, #0
 80043c6:	bfa8      	it	ge
 80043c8:	6821      	ldrge	r1, [r4, #0]
 80043ca:	60a5      	str	r5, [r4, #8]
 80043cc:	bfa4      	itt	ge
 80043ce:	f021 0104 	bicge.w	r1, r1, #4
 80043d2:	6021      	strge	r1, [r4, #0]
 80043d4:	b90e      	cbnz	r6, 80043da <_printf_i+0x116>
 80043d6:	2d00      	cmp	r5, #0
 80043d8:	d04b      	beq.n	8004472 <_printf_i+0x1ae>
 80043da:	4615      	mov	r5, r2
 80043dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80043e0:	fb03 6711 	mls	r7, r3, r1, r6
 80043e4:	5dc7      	ldrb	r7, [r0, r7]
 80043e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043ea:	4637      	mov	r7, r6
 80043ec:	42bb      	cmp	r3, r7
 80043ee:	460e      	mov	r6, r1
 80043f0:	d9f4      	bls.n	80043dc <_printf_i+0x118>
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d10b      	bne.n	800440e <_printf_i+0x14a>
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	07de      	lsls	r6, r3, #31
 80043fa:	d508      	bpl.n	800440e <_printf_i+0x14a>
 80043fc:	6923      	ldr	r3, [r4, #16]
 80043fe:	6861      	ldr	r1, [r4, #4]
 8004400:	4299      	cmp	r1, r3
 8004402:	bfde      	ittt	le
 8004404:	2330      	movle	r3, #48	; 0x30
 8004406:	f805 3c01 	strble.w	r3, [r5, #-1]
 800440a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800440e:	1b52      	subs	r2, r2, r5
 8004410:	6122      	str	r2, [r4, #16]
 8004412:	464b      	mov	r3, r9
 8004414:	4621      	mov	r1, r4
 8004416:	4640      	mov	r0, r8
 8004418:	f8cd a000 	str.w	sl, [sp]
 800441c:	aa03      	add	r2, sp, #12
 800441e:	f7ff fedf 	bl	80041e0 <_printf_common>
 8004422:	3001      	adds	r0, #1
 8004424:	d14a      	bne.n	80044bc <_printf_i+0x1f8>
 8004426:	f04f 30ff 	mov.w	r0, #4294967295
 800442a:	b004      	add	sp, #16
 800442c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	f043 0320 	orr.w	r3, r3, #32
 8004436:	6023      	str	r3, [r4, #0]
 8004438:	2778      	movs	r7, #120	; 0x78
 800443a:	4832      	ldr	r0, [pc, #200]	; (8004504 <_printf_i+0x240>)
 800443c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	6829      	ldr	r1, [r5, #0]
 8004444:	061f      	lsls	r7, r3, #24
 8004446:	f851 6b04 	ldr.w	r6, [r1], #4
 800444a:	d402      	bmi.n	8004452 <_printf_i+0x18e>
 800444c:	065f      	lsls	r7, r3, #25
 800444e:	bf48      	it	mi
 8004450:	b2b6      	uxthmi	r6, r6
 8004452:	07df      	lsls	r7, r3, #31
 8004454:	bf48      	it	mi
 8004456:	f043 0320 	orrmi.w	r3, r3, #32
 800445a:	6029      	str	r1, [r5, #0]
 800445c:	bf48      	it	mi
 800445e:	6023      	strmi	r3, [r4, #0]
 8004460:	b91e      	cbnz	r6, 800446a <_printf_i+0x1a6>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	f023 0320 	bic.w	r3, r3, #32
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	2310      	movs	r3, #16
 800446c:	e7a6      	b.n	80043bc <_printf_i+0xf8>
 800446e:	4824      	ldr	r0, [pc, #144]	; (8004500 <_printf_i+0x23c>)
 8004470:	e7e4      	b.n	800443c <_printf_i+0x178>
 8004472:	4615      	mov	r5, r2
 8004474:	e7bd      	b.n	80043f2 <_printf_i+0x12e>
 8004476:	682b      	ldr	r3, [r5, #0]
 8004478:	6826      	ldr	r6, [r4, #0]
 800447a:	1d18      	adds	r0, r3, #4
 800447c:	6961      	ldr	r1, [r4, #20]
 800447e:	6028      	str	r0, [r5, #0]
 8004480:	0635      	lsls	r5, r6, #24
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	d501      	bpl.n	800448a <_printf_i+0x1c6>
 8004486:	6019      	str	r1, [r3, #0]
 8004488:	e002      	b.n	8004490 <_printf_i+0x1cc>
 800448a:	0670      	lsls	r0, r6, #25
 800448c:	d5fb      	bpl.n	8004486 <_printf_i+0x1c2>
 800448e:	8019      	strh	r1, [r3, #0]
 8004490:	2300      	movs	r3, #0
 8004492:	4615      	mov	r5, r2
 8004494:	6123      	str	r3, [r4, #16]
 8004496:	e7bc      	b.n	8004412 <_printf_i+0x14e>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	2100      	movs	r1, #0
 800449c:	1d1a      	adds	r2, r3, #4
 800449e:	602a      	str	r2, [r5, #0]
 80044a0:	681d      	ldr	r5, [r3, #0]
 80044a2:	6862      	ldr	r2, [r4, #4]
 80044a4:	4628      	mov	r0, r5
 80044a6:	f000 f9cb 	bl	8004840 <memchr>
 80044aa:	b108      	cbz	r0, 80044b0 <_printf_i+0x1ec>
 80044ac:	1b40      	subs	r0, r0, r5
 80044ae:	6060      	str	r0, [r4, #4]
 80044b0:	6863      	ldr	r3, [r4, #4]
 80044b2:	6123      	str	r3, [r4, #16]
 80044b4:	2300      	movs	r3, #0
 80044b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ba:	e7aa      	b.n	8004412 <_printf_i+0x14e>
 80044bc:	462a      	mov	r2, r5
 80044be:	4649      	mov	r1, r9
 80044c0:	4640      	mov	r0, r8
 80044c2:	6923      	ldr	r3, [r4, #16]
 80044c4:	47d0      	blx	sl
 80044c6:	3001      	adds	r0, #1
 80044c8:	d0ad      	beq.n	8004426 <_printf_i+0x162>
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	079b      	lsls	r3, r3, #30
 80044ce:	d413      	bmi.n	80044f8 <_printf_i+0x234>
 80044d0:	68e0      	ldr	r0, [r4, #12]
 80044d2:	9b03      	ldr	r3, [sp, #12]
 80044d4:	4298      	cmp	r0, r3
 80044d6:	bfb8      	it	lt
 80044d8:	4618      	movlt	r0, r3
 80044da:	e7a6      	b.n	800442a <_printf_i+0x166>
 80044dc:	2301      	movs	r3, #1
 80044de:	4632      	mov	r2, r6
 80044e0:	4649      	mov	r1, r9
 80044e2:	4640      	mov	r0, r8
 80044e4:	47d0      	blx	sl
 80044e6:	3001      	adds	r0, #1
 80044e8:	d09d      	beq.n	8004426 <_printf_i+0x162>
 80044ea:	3501      	adds	r5, #1
 80044ec:	68e3      	ldr	r3, [r4, #12]
 80044ee:	9903      	ldr	r1, [sp, #12]
 80044f0:	1a5b      	subs	r3, r3, r1
 80044f2:	42ab      	cmp	r3, r5
 80044f4:	dcf2      	bgt.n	80044dc <_printf_i+0x218>
 80044f6:	e7eb      	b.n	80044d0 <_printf_i+0x20c>
 80044f8:	2500      	movs	r5, #0
 80044fa:	f104 0619 	add.w	r6, r4, #25
 80044fe:	e7f5      	b.n	80044ec <_printf_i+0x228>
 8004500:	08004ac6 	.word	0x08004ac6
 8004504:	08004ad7 	.word	0x08004ad7

08004508 <__sflush_r>:
 8004508:	898a      	ldrh	r2, [r1, #12]
 800450a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450c:	4605      	mov	r5, r0
 800450e:	0710      	lsls	r0, r2, #28
 8004510:	460c      	mov	r4, r1
 8004512:	d457      	bmi.n	80045c4 <__sflush_r+0xbc>
 8004514:	684b      	ldr	r3, [r1, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	dc04      	bgt.n	8004524 <__sflush_r+0x1c>
 800451a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	dc01      	bgt.n	8004524 <__sflush_r+0x1c>
 8004520:	2000      	movs	r0, #0
 8004522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004524:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004526:	2e00      	cmp	r6, #0
 8004528:	d0fa      	beq.n	8004520 <__sflush_r+0x18>
 800452a:	2300      	movs	r3, #0
 800452c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004530:	682f      	ldr	r7, [r5, #0]
 8004532:	6a21      	ldr	r1, [r4, #32]
 8004534:	602b      	str	r3, [r5, #0]
 8004536:	d032      	beq.n	800459e <__sflush_r+0x96>
 8004538:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800453a:	89a3      	ldrh	r3, [r4, #12]
 800453c:	075a      	lsls	r2, r3, #29
 800453e:	d505      	bpl.n	800454c <__sflush_r+0x44>
 8004540:	6863      	ldr	r3, [r4, #4]
 8004542:	1ac0      	subs	r0, r0, r3
 8004544:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004546:	b10b      	cbz	r3, 800454c <__sflush_r+0x44>
 8004548:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800454a:	1ac0      	subs	r0, r0, r3
 800454c:	2300      	movs	r3, #0
 800454e:	4602      	mov	r2, r0
 8004550:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004552:	4628      	mov	r0, r5
 8004554:	6a21      	ldr	r1, [r4, #32]
 8004556:	47b0      	blx	r6
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	89a3      	ldrh	r3, [r4, #12]
 800455c:	d106      	bne.n	800456c <__sflush_r+0x64>
 800455e:	6829      	ldr	r1, [r5, #0]
 8004560:	291d      	cmp	r1, #29
 8004562:	d82b      	bhi.n	80045bc <__sflush_r+0xb4>
 8004564:	4a28      	ldr	r2, [pc, #160]	; (8004608 <__sflush_r+0x100>)
 8004566:	410a      	asrs	r2, r1
 8004568:	07d6      	lsls	r6, r2, #31
 800456a:	d427      	bmi.n	80045bc <__sflush_r+0xb4>
 800456c:	2200      	movs	r2, #0
 800456e:	6062      	str	r2, [r4, #4]
 8004570:	6922      	ldr	r2, [r4, #16]
 8004572:	04d9      	lsls	r1, r3, #19
 8004574:	6022      	str	r2, [r4, #0]
 8004576:	d504      	bpl.n	8004582 <__sflush_r+0x7a>
 8004578:	1c42      	adds	r2, r0, #1
 800457a:	d101      	bne.n	8004580 <__sflush_r+0x78>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	b903      	cbnz	r3, 8004582 <__sflush_r+0x7a>
 8004580:	6560      	str	r0, [r4, #84]	; 0x54
 8004582:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004584:	602f      	str	r7, [r5, #0]
 8004586:	2900      	cmp	r1, #0
 8004588:	d0ca      	beq.n	8004520 <__sflush_r+0x18>
 800458a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800458e:	4299      	cmp	r1, r3
 8004590:	d002      	beq.n	8004598 <__sflush_r+0x90>
 8004592:	4628      	mov	r0, r5
 8004594:	f7ff fa96 	bl	8003ac4 <_free_r>
 8004598:	2000      	movs	r0, #0
 800459a:	6360      	str	r0, [r4, #52]	; 0x34
 800459c:	e7c1      	b.n	8004522 <__sflush_r+0x1a>
 800459e:	2301      	movs	r3, #1
 80045a0:	4628      	mov	r0, r5
 80045a2:	47b0      	blx	r6
 80045a4:	1c41      	adds	r1, r0, #1
 80045a6:	d1c8      	bne.n	800453a <__sflush_r+0x32>
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0c5      	beq.n	800453a <__sflush_r+0x32>
 80045ae:	2b1d      	cmp	r3, #29
 80045b0:	d001      	beq.n	80045b6 <__sflush_r+0xae>
 80045b2:	2b16      	cmp	r3, #22
 80045b4:	d101      	bne.n	80045ba <__sflush_r+0xb2>
 80045b6:	602f      	str	r7, [r5, #0]
 80045b8:	e7b2      	b.n	8004520 <__sflush_r+0x18>
 80045ba:	89a3      	ldrh	r3, [r4, #12]
 80045bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c0:	81a3      	strh	r3, [r4, #12]
 80045c2:	e7ae      	b.n	8004522 <__sflush_r+0x1a>
 80045c4:	690f      	ldr	r7, [r1, #16]
 80045c6:	2f00      	cmp	r7, #0
 80045c8:	d0aa      	beq.n	8004520 <__sflush_r+0x18>
 80045ca:	0793      	lsls	r3, r2, #30
 80045cc:	bf18      	it	ne
 80045ce:	2300      	movne	r3, #0
 80045d0:	680e      	ldr	r6, [r1, #0]
 80045d2:	bf08      	it	eq
 80045d4:	694b      	ldreq	r3, [r1, #20]
 80045d6:	1bf6      	subs	r6, r6, r7
 80045d8:	600f      	str	r7, [r1, #0]
 80045da:	608b      	str	r3, [r1, #8]
 80045dc:	2e00      	cmp	r6, #0
 80045de:	dd9f      	ble.n	8004520 <__sflush_r+0x18>
 80045e0:	4633      	mov	r3, r6
 80045e2:	463a      	mov	r2, r7
 80045e4:	4628      	mov	r0, r5
 80045e6:	6a21      	ldr	r1, [r4, #32]
 80045e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80045ec:	47e0      	blx	ip
 80045ee:	2800      	cmp	r0, #0
 80045f0:	dc06      	bgt.n	8004600 <__sflush_r+0xf8>
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	e790      	b.n	8004522 <__sflush_r+0x1a>
 8004600:	4407      	add	r7, r0
 8004602:	1a36      	subs	r6, r6, r0
 8004604:	e7ea      	b.n	80045dc <__sflush_r+0xd4>
 8004606:	bf00      	nop
 8004608:	dfbffffe 	.word	0xdfbffffe

0800460c <_fflush_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	690b      	ldr	r3, [r1, #16]
 8004610:	4605      	mov	r5, r0
 8004612:	460c      	mov	r4, r1
 8004614:	b913      	cbnz	r3, 800461c <_fflush_r+0x10>
 8004616:	2500      	movs	r5, #0
 8004618:	4628      	mov	r0, r5
 800461a:	bd38      	pop	{r3, r4, r5, pc}
 800461c:	b118      	cbz	r0, 8004626 <_fflush_r+0x1a>
 800461e:	6a03      	ldr	r3, [r0, #32]
 8004620:	b90b      	cbnz	r3, 8004626 <_fflush_r+0x1a>
 8004622:	f7ff f811 	bl	8003648 <__sinit>
 8004626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f3      	beq.n	8004616 <_fflush_r+0xa>
 800462e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004630:	07d0      	lsls	r0, r2, #31
 8004632:	d404      	bmi.n	800463e <_fflush_r+0x32>
 8004634:	0599      	lsls	r1, r3, #22
 8004636:	d402      	bmi.n	800463e <_fflush_r+0x32>
 8004638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800463a:	f7ff fa2c 	bl	8003a96 <__retarget_lock_acquire_recursive>
 800463e:	4628      	mov	r0, r5
 8004640:	4621      	mov	r1, r4
 8004642:	f7ff ff61 	bl	8004508 <__sflush_r>
 8004646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004648:	4605      	mov	r5, r0
 800464a:	07da      	lsls	r2, r3, #31
 800464c:	d4e4      	bmi.n	8004618 <_fflush_r+0xc>
 800464e:	89a3      	ldrh	r3, [r4, #12]
 8004650:	059b      	lsls	r3, r3, #22
 8004652:	d4e1      	bmi.n	8004618 <_fflush_r+0xc>
 8004654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004656:	f7ff fa1f 	bl	8003a98 <__retarget_lock_release_recursive>
 800465a:	e7dd      	b.n	8004618 <_fflush_r+0xc>

0800465c <__swhatbuf_r>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	460c      	mov	r4, r1
 8004660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004664:	4615      	mov	r5, r2
 8004666:	2900      	cmp	r1, #0
 8004668:	461e      	mov	r6, r3
 800466a:	b096      	sub	sp, #88	; 0x58
 800466c:	da0c      	bge.n	8004688 <__swhatbuf_r+0x2c>
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	2100      	movs	r1, #0
 8004672:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004676:	bf0c      	ite	eq
 8004678:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800467c:	2340      	movne	r3, #64	; 0x40
 800467e:	2000      	movs	r0, #0
 8004680:	6031      	str	r1, [r6, #0]
 8004682:	602b      	str	r3, [r5, #0]
 8004684:	b016      	add	sp, #88	; 0x58
 8004686:	bd70      	pop	{r4, r5, r6, pc}
 8004688:	466a      	mov	r2, sp
 800468a:	f000 f893 	bl	80047b4 <_fstat_r>
 800468e:	2800      	cmp	r0, #0
 8004690:	dbed      	blt.n	800466e <__swhatbuf_r+0x12>
 8004692:	9901      	ldr	r1, [sp, #4]
 8004694:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004698:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800469c:	4259      	negs	r1, r3
 800469e:	4159      	adcs	r1, r3
 80046a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046a4:	e7eb      	b.n	800467e <__swhatbuf_r+0x22>

080046a6 <__smakebuf_r>:
 80046a6:	898b      	ldrh	r3, [r1, #12]
 80046a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046aa:	079d      	lsls	r5, r3, #30
 80046ac:	4606      	mov	r6, r0
 80046ae:	460c      	mov	r4, r1
 80046b0:	d507      	bpl.n	80046c2 <__smakebuf_r+0x1c>
 80046b2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046b6:	6023      	str	r3, [r4, #0]
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	2301      	movs	r3, #1
 80046bc:	6163      	str	r3, [r4, #20]
 80046be:	b002      	add	sp, #8
 80046c0:	bd70      	pop	{r4, r5, r6, pc}
 80046c2:	466a      	mov	r2, sp
 80046c4:	ab01      	add	r3, sp, #4
 80046c6:	f7ff ffc9 	bl	800465c <__swhatbuf_r>
 80046ca:	9900      	ldr	r1, [sp, #0]
 80046cc:	4605      	mov	r5, r0
 80046ce:	4630      	mov	r0, r6
 80046d0:	f7ff fa60 	bl	8003b94 <_malloc_r>
 80046d4:	b948      	cbnz	r0, 80046ea <__smakebuf_r+0x44>
 80046d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046da:	059a      	lsls	r2, r3, #22
 80046dc:	d4ef      	bmi.n	80046be <__smakebuf_r+0x18>
 80046de:	f023 0303 	bic.w	r3, r3, #3
 80046e2:	f043 0302 	orr.w	r3, r3, #2
 80046e6:	81a3      	strh	r3, [r4, #12]
 80046e8:	e7e3      	b.n	80046b2 <__smakebuf_r+0xc>
 80046ea:	89a3      	ldrh	r3, [r4, #12]
 80046ec:	6020      	str	r0, [r4, #0]
 80046ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f2:	81a3      	strh	r3, [r4, #12]
 80046f4:	9b00      	ldr	r3, [sp, #0]
 80046f6:	6120      	str	r0, [r4, #16]
 80046f8:	6163      	str	r3, [r4, #20]
 80046fa:	9b01      	ldr	r3, [sp, #4]
 80046fc:	b15b      	cbz	r3, 8004716 <__smakebuf_r+0x70>
 80046fe:	4630      	mov	r0, r6
 8004700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004704:	f000 f868 	bl	80047d8 <_isatty_r>
 8004708:	b128      	cbz	r0, 8004716 <__smakebuf_r+0x70>
 800470a:	89a3      	ldrh	r3, [r4, #12]
 800470c:	f023 0303 	bic.w	r3, r3, #3
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	81a3      	strh	r3, [r4, #12]
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	431d      	orrs	r5, r3
 800471a:	81a5      	strh	r5, [r4, #12]
 800471c:	e7cf      	b.n	80046be <__smakebuf_r+0x18>

0800471e <memmove>:
 800471e:	4288      	cmp	r0, r1
 8004720:	b510      	push	{r4, lr}
 8004722:	eb01 0402 	add.w	r4, r1, r2
 8004726:	d902      	bls.n	800472e <memmove+0x10>
 8004728:	4284      	cmp	r4, r0
 800472a:	4623      	mov	r3, r4
 800472c:	d807      	bhi.n	800473e <memmove+0x20>
 800472e:	1e43      	subs	r3, r0, #1
 8004730:	42a1      	cmp	r1, r4
 8004732:	d008      	beq.n	8004746 <memmove+0x28>
 8004734:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004738:	f803 2f01 	strb.w	r2, [r3, #1]!
 800473c:	e7f8      	b.n	8004730 <memmove+0x12>
 800473e:	4601      	mov	r1, r0
 8004740:	4402      	add	r2, r0
 8004742:	428a      	cmp	r2, r1
 8004744:	d100      	bne.n	8004748 <memmove+0x2a>
 8004746:	bd10      	pop	{r4, pc}
 8004748:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800474c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004750:	e7f7      	b.n	8004742 <memmove+0x24>

08004752 <_raise_r>:
 8004752:	291f      	cmp	r1, #31
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	4604      	mov	r4, r0
 8004758:	460d      	mov	r5, r1
 800475a:	d904      	bls.n	8004766 <_raise_r+0x14>
 800475c:	2316      	movs	r3, #22
 800475e:	6003      	str	r3, [r0, #0]
 8004760:	f04f 30ff 	mov.w	r0, #4294967295
 8004764:	bd38      	pop	{r3, r4, r5, pc}
 8004766:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004768:	b112      	cbz	r2, 8004770 <_raise_r+0x1e>
 800476a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800476e:	b94b      	cbnz	r3, 8004784 <_raise_r+0x32>
 8004770:	4620      	mov	r0, r4
 8004772:	f000 f853 	bl	800481c <_getpid_r>
 8004776:	462a      	mov	r2, r5
 8004778:	4601      	mov	r1, r0
 800477a:	4620      	mov	r0, r4
 800477c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004780:	f000 b83a 	b.w	80047f8 <_kill_r>
 8004784:	2b01      	cmp	r3, #1
 8004786:	d00a      	beq.n	800479e <_raise_r+0x4c>
 8004788:	1c59      	adds	r1, r3, #1
 800478a:	d103      	bne.n	8004794 <_raise_r+0x42>
 800478c:	2316      	movs	r3, #22
 800478e:	6003      	str	r3, [r0, #0]
 8004790:	2001      	movs	r0, #1
 8004792:	e7e7      	b.n	8004764 <_raise_r+0x12>
 8004794:	2400      	movs	r4, #0
 8004796:	4628      	mov	r0, r5
 8004798:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800479c:	4798      	blx	r3
 800479e:	2000      	movs	r0, #0
 80047a0:	e7e0      	b.n	8004764 <_raise_r+0x12>
	...

080047a4 <raise>:
 80047a4:	4b02      	ldr	r3, [pc, #8]	; (80047b0 <raise+0xc>)
 80047a6:	4601      	mov	r1, r0
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	f7ff bfd2 	b.w	8004752 <_raise_r>
 80047ae:	bf00      	nop
 80047b0:	20000064 	.word	0x20000064

080047b4 <_fstat_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	2300      	movs	r3, #0
 80047b8:	4d06      	ldr	r5, [pc, #24]	; (80047d4 <_fstat_r+0x20>)
 80047ba:	4604      	mov	r4, r0
 80047bc:	4608      	mov	r0, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	602b      	str	r3, [r5, #0]
 80047c2:	f7fc f8ae 	bl	8000922 <_fstat>
 80047c6:	1c43      	adds	r3, r0, #1
 80047c8:	d102      	bne.n	80047d0 <_fstat_r+0x1c>
 80047ca:	682b      	ldr	r3, [r5, #0]
 80047cc:	b103      	cbz	r3, 80047d0 <_fstat_r+0x1c>
 80047ce:	6023      	str	r3, [r4, #0]
 80047d0:	bd38      	pop	{r3, r4, r5, pc}
 80047d2:	bf00      	nop
 80047d4:	20000340 	.word	0x20000340

080047d8 <_isatty_r>:
 80047d8:	b538      	push	{r3, r4, r5, lr}
 80047da:	2300      	movs	r3, #0
 80047dc:	4d05      	ldr	r5, [pc, #20]	; (80047f4 <_isatty_r+0x1c>)
 80047de:	4604      	mov	r4, r0
 80047e0:	4608      	mov	r0, r1
 80047e2:	602b      	str	r3, [r5, #0]
 80047e4:	f7fc f8ac 	bl	8000940 <_isatty>
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	d102      	bne.n	80047f2 <_isatty_r+0x1a>
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	b103      	cbz	r3, 80047f2 <_isatty_r+0x1a>
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	bd38      	pop	{r3, r4, r5, pc}
 80047f4:	20000340 	.word	0x20000340

080047f8 <_kill_r>:
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	2300      	movs	r3, #0
 80047fc:	4d06      	ldr	r5, [pc, #24]	; (8004818 <_kill_r+0x20>)
 80047fe:	4604      	mov	r4, r0
 8004800:	4608      	mov	r0, r1
 8004802:	4611      	mov	r1, r2
 8004804:	602b      	str	r3, [r5, #0]
 8004806:	f7fc f82e 	bl	8000866 <_kill>
 800480a:	1c43      	adds	r3, r0, #1
 800480c:	d102      	bne.n	8004814 <_kill_r+0x1c>
 800480e:	682b      	ldr	r3, [r5, #0]
 8004810:	b103      	cbz	r3, 8004814 <_kill_r+0x1c>
 8004812:	6023      	str	r3, [r4, #0]
 8004814:	bd38      	pop	{r3, r4, r5, pc}
 8004816:	bf00      	nop
 8004818:	20000340 	.word	0x20000340

0800481c <_getpid_r>:
 800481c:	f7fc b81c 	b.w	8000858 <_getpid>

08004820 <_sbrk_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	2300      	movs	r3, #0
 8004824:	4d05      	ldr	r5, [pc, #20]	; (800483c <_sbrk_r+0x1c>)
 8004826:	4604      	mov	r4, r0
 8004828:	4608      	mov	r0, r1
 800482a:	602b      	str	r3, [r5, #0]
 800482c:	f7fc f89e 	bl	800096c <_sbrk>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d102      	bne.n	800483a <_sbrk_r+0x1a>
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	b103      	cbz	r3, 800483a <_sbrk_r+0x1a>
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	bd38      	pop	{r3, r4, r5, pc}
 800483c:	20000340 	.word	0x20000340

08004840 <memchr>:
 8004840:	4603      	mov	r3, r0
 8004842:	b510      	push	{r4, lr}
 8004844:	b2c9      	uxtb	r1, r1
 8004846:	4402      	add	r2, r0
 8004848:	4293      	cmp	r3, r2
 800484a:	4618      	mov	r0, r3
 800484c:	d101      	bne.n	8004852 <memchr+0x12>
 800484e:	2000      	movs	r0, #0
 8004850:	e003      	b.n	800485a <memchr+0x1a>
 8004852:	7804      	ldrb	r4, [r0, #0]
 8004854:	3301      	adds	r3, #1
 8004856:	428c      	cmp	r4, r1
 8004858:	d1f6      	bne.n	8004848 <memchr+0x8>
 800485a:	bd10      	pop	{r4, pc}

0800485c <_realloc_r>:
 800485c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004860:	4680      	mov	r8, r0
 8004862:	4614      	mov	r4, r2
 8004864:	460e      	mov	r6, r1
 8004866:	b921      	cbnz	r1, 8004872 <_realloc_r+0x16>
 8004868:	4611      	mov	r1, r2
 800486a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800486e:	f7ff b991 	b.w	8003b94 <_malloc_r>
 8004872:	b92a      	cbnz	r2, 8004880 <_realloc_r+0x24>
 8004874:	f7ff f926 	bl	8003ac4 <_free_r>
 8004878:	4625      	mov	r5, r4
 800487a:	4628      	mov	r0, r5
 800487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004880:	f000 f81b 	bl	80048ba <_malloc_usable_size_r>
 8004884:	4284      	cmp	r4, r0
 8004886:	4607      	mov	r7, r0
 8004888:	d802      	bhi.n	8004890 <_realloc_r+0x34>
 800488a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800488e:	d812      	bhi.n	80048b6 <_realloc_r+0x5a>
 8004890:	4621      	mov	r1, r4
 8004892:	4640      	mov	r0, r8
 8004894:	f7ff f97e 	bl	8003b94 <_malloc_r>
 8004898:	4605      	mov	r5, r0
 800489a:	2800      	cmp	r0, #0
 800489c:	d0ed      	beq.n	800487a <_realloc_r+0x1e>
 800489e:	42bc      	cmp	r4, r7
 80048a0:	4622      	mov	r2, r4
 80048a2:	4631      	mov	r1, r6
 80048a4:	bf28      	it	cs
 80048a6:	463a      	movcs	r2, r7
 80048a8:	f7ff f8f7 	bl	8003a9a <memcpy>
 80048ac:	4631      	mov	r1, r6
 80048ae:	4640      	mov	r0, r8
 80048b0:	f7ff f908 	bl	8003ac4 <_free_r>
 80048b4:	e7e1      	b.n	800487a <_realloc_r+0x1e>
 80048b6:	4635      	mov	r5, r6
 80048b8:	e7df      	b.n	800487a <_realloc_r+0x1e>

080048ba <_malloc_usable_size_r>:
 80048ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048be:	1f18      	subs	r0, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bfbc      	itt	lt
 80048c4:	580b      	ldrlt	r3, [r1, r0]
 80048c6:	18c0      	addlt	r0, r0, r3
 80048c8:	4770      	bx	lr
	...

080048cc <_init>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	bf00      	nop
 80048d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	469e      	mov	lr, r3
 80048d6:	4770      	bx	lr

080048d8 <_fini>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	bf00      	nop
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr

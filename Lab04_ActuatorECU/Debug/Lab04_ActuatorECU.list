
Lab04_ActuatorECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  0800500c  0800500c  0001500c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a8  080052a8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080052a8  080052a8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052a8  080052a8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052ac  080052ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080052b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  2000006c  0800531c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  0800531c  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b189  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022aa  00000000  00000000  0002b261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000990  00000000  00000000  0002d510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000735  00000000  00000000  0002dea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018bdb  00000000  00000000  0002e5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c4f6  00000000  00000000  000471b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000872a1  00000000  00000000  000536a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003094  00000000  00000000  000da948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000dd9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ff4 	.word	0x08004ff4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08004ff4 	.word	0x08004ff4

0800014c <CanTP_Init>:
#define CANTP_BUFF_SIZE			100

uint8_t SendBuffer[CANTP_BUFF_SIZE];
uint8_t RecvBuffer[CANTP_BUFF_SIZE];

uint8_t CanTP_Init(uint16_t SendId, uint16_t RecvId) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b08e      	sub	sp, #56	; 0x38
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	80fb      	strh	r3, [r7, #6]
 8000158:	4613      	mov	r3, r2
 800015a:	80bb      	strh	r3, [r7, #4]
	CAN_FilterTypeDef Can_Filter;
	Can_Filter.FilterActivation = CAN_FILTER_ENABLE;
 800015c:	2301      	movs	r3, #1
 800015e:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_Filter.FilterBank = 0;
 8000160:	2300      	movs	r3, #0
 8000162:	61fb      	str	r3, [r7, #28]
	Can_Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000164:	2300      	movs	r3, #0
 8000166:	61bb      	str	r3, [r7, #24]
	Can_Filter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000168:	2301      	movs	r3, #1
 800016a:	623b      	str	r3, [r7, #32]
	Can_Filter.FilterScale = CAN_FILTERSCALE_16BIT;
 800016c:	2300      	movs	r3, #0
 800016e:	627b      	str	r3, [r7, #36]	; 0x24
	Can_Filter.FilterIdHigh = RecvId << 5;
 8000170:	88bb      	ldrh	r3, [r7, #4]
 8000172:	015b      	lsls	r3, r3, #5
 8000174:	60bb      	str	r3, [r7, #8]
	HAL_ERR(HAL_CAN_ConfigFilter(&hcan, &Can_Filter));
 8000176:	f107 0308 	add.w	r3, r7, #8
 800017a:	4619      	mov	r1, r3
 800017c:	481a      	ldr	r0, [pc, #104]	; (80001e8 <CanTP_Init+0x9c>)
 800017e:	f001 f9d6 	bl	800152e <HAL_CAN_ConfigFilter>
 8000182:	4603      	mov	r3, r0
 8000184:	2b00      	cmp	r3, #0
 8000186:	d007      	beq.n	8000198 <CanTP_Init+0x4c>
 8000188:	f107 0308 	add.w	r3, r7, #8
 800018c:	4619      	mov	r1, r3
 800018e:	4816      	ldr	r0, [pc, #88]	; (80001e8 <CanTP_Init+0x9c>)
 8000190:	f001 f9cd 	bl	800152e <HAL_CAN_ConfigFilter>
 8000194:	4603      	mov	r3, r0
 8000196:	e022      	b.n	80001de <CanTP_Init+0x92>

	HAL_ERR(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING));
 8000198:	2102      	movs	r1, #2
 800019a:	4813      	ldr	r0, [pc, #76]	; (80001e8 <CanTP_Init+0x9c>)
 800019c:	f001 fcf8 	bl	8001b90 <HAL_CAN_ActivateNotification>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d005      	beq.n	80001b2 <CanTP_Init+0x66>
 80001a6:	2102      	movs	r1, #2
 80001a8:	480f      	ldr	r0, [pc, #60]	; (80001e8 <CanTP_Init+0x9c>)
 80001aa:	f001 fcf1 	bl	8001b90 <HAL_CAN_ActivateNotification>
 80001ae:	4603      	mov	r3, r0
 80001b0:	e015      	b.n	80001de <CanTP_Init+0x92>

	HAL_ERR(HAL_CAN_Start(&hcan));
 80001b2:	480d      	ldr	r0, [pc, #52]	; (80001e8 <CanTP_Init+0x9c>)
 80001b4:	f001 fa84 	bl	80016c0 <HAL_CAN_Start>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d004      	beq.n	80001c8 <CanTP_Init+0x7c>
 80001be:	480a      	ldr	r0, [pc, #40]	; (80001e8 <CanTP_Init+0x9c>)
 80001c0:	f001 fa7e 	bl	80016c0 <HAL_CAN_Start>
 80001c4:	4603      	mov	r3, r0
 80001c6:	e00a      	b.n	80001de <CanTP_Init+0x92>
//	uint8_t status = 0;
	isotp_init_link(&isoTP, SendId, SendBuffer, CANTP_BUFF_SIZE, RecvBuffer,
 80001c8:	88f9      	ldrh	r1, [r7, #6]
 80001ca:	2364      	movs	r3, #100	; 0x64
 80001cc:	9301      	str	r3, [sp, #4]
 80001ce:	4b07      	ldr	r3, [pc, #28]	; (80001ec <CanTP_Init+0xa0>)
 80001d0:	9300      	str	r3, [sp, #0]
 80001d2:	2364      	movs	r3, #100	; 0x64
 80001d4:	4a06      	ldr	r2, [pc, #24]	; (80001f0 <CanTP_Init+0xa4>)
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <CanTP_Init+0xa8>)
 80001d8:	f003 fc44 	bl	8003a64 <isotp_init_link>
	CANTP_BUFF_SIZE);
	return HAL_OK;
 80001dc:	2300      	movs	r3, #0
}
 80001de:	4618      	mov	r0, r3
 80001e0:	3730      	adds	r7, #48	; 0x30
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000190 	.word	0x20000190
 80001ec:	2000012c 	.word	0x2000012c
 80001f0:	200000c8 	.word	0x200000c8
 80001f4:	20000088 	.word	0x20000088

080001f8 <CanTP_Transmit>:

uint8_t CanTP_Transmit(uint8_t *pData, uint16_t len) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	460b      	mov	r3, r1
 8000202:	807b      	strh	r3, [r7, #2]
	HAL_ERR(isotp_send(&isoTP, pData, len));
 8000204:	887b      	ldrh	r3, [r7, #2]
 8000206:	461a      	mov	r2, r3
 8000208:	6879      	ldr	r1, [r7, #4]
 800020a:	4814      	ldr	r0, [pc, #80]	; (800025c <CanTP_Transmit+0x64>)
 800020c:	f003 fa24 	bl	8003658 <isotp_send>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d00b      	beq.n	800022e <CanTP_Transmit+0x36>
 8000216:	887b      	ldrh	r3, [r7, #2]
 8000218:	461a      	mov	r2, r3
 800021a:	6879      	ldr	r1, [r7, #4]
 800021c:	480f      	ldr	r0, [pc, #60]	; (800025c <CanTP_Transmit+0x64>)
 800021e:	f003 fa1b 	bl	8003658 <isotp_send>
 8000222:	4603      	mov	r3, r0
 8000224:	b2db      	uxtb	r3, r3
 8000226:	e014      	b.n	8000252 <CanTP_Transmit+0x5a>
	while (isoTP.send_status == ISOTP_SEND_STATUS_INPROGRESS) {
		isotp_poll(&isoTP);
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <CanTP_Transmit+0x64>)
 800022a:	f003 fc42 	bl	8003ab2 <isotp_poll>
	while (isoTP.send_status == ISOTP_SEND_STATUS_INPROGRESS) {
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <CanTP_Transmit+0x64>)
 8000230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d0f7      	beq.n	8000228 <CanTP_Transmit+0x30>
	}
	if (ISOTP_SEND_STATUS_IDLE != isoTP.send_status) {
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <CanTP_Transmit+0x64>)
 800023a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d006      	beq.n	8000250 <CanTP_Transmit+0x58>
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 8000242:	2201      	movs	r2, #1
 8000244:	2110      	movs	r1, #16
 8000246:	4806      	ldr	r0, [pc, #24]	; (8000260 <CanTP_Transmit+0x68>)
 8000248:	f002 f97c 	bl	8002544 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 800024c:	2301      	movs	r3, #1
 800024e:	e000      	b.n	8000252 <CanTP_Transmit+0x5a>
	}
	return HAL_OK;
 8000250:	2300      	movs	r3, #0
}
 8000252:	4618      	mov	r0, r3
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000088 	.word	0x20000088
 8000260:	40010c00 	.word	0x40010c00

08000264 <CanTP_Receive>:

uint8_t CanTP_Receive(uint8_t *pData, uint16_t *len, uint32_t timeout) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b088      	sub	sp, #32
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	607a      	str	r2, [r7, #4]
	uint32_t startTime = HAL_GetTick();
 8000270:	f001 f858 	bl	8001324 <HAL_GetTick>
 8000274:	6178      	str	r0, [r7, #20]
	while ((HAL_GetTick() - startTime) < timeout) {
 8000276:	e007      	b.n	8000288 <CanTP_Receive+0x24>
		isotp_poll(&isoTP);
 8000278:	4825      	ldr	r0, [pc, #148]	; (8000310 <CanTP_Receive+0xac>)
 800027a:	f003 fc1a 	bl	8003ab2 <isotp_poll>
		if (isoTP.receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 800027e:	4b24      	ldr	r3, [pc, #144]	; (8000310 <CanTP_Receive+0xac>)
 8000280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000284:	2b02      	cmp	r3, #2
 8000286:	d008      	beq.n	800029a <CanTP_Receive+0x36>
	while ((HAL_GetTick() - startTime) < timeout) {
 8000288:	f001 f84c 	bl	8001324 <HAL_GetTick>
 800028c:	4602      	mov	r2, r0
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	1ad3      	subs	r3, r2, r3
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	429a      	cmp	r2, r3
 8000296:	d8ef      	bhi.n	8000278 <CanTP_Receive+0x14>
 8000298:	e000      	b.n	800029c <CanTP_Receive+0x38>
//			HAL_GPIO_WritePin(LEDIn_GPIO_Port, LEDIn_Pin,0);
			break;
 800029a:	bf00      	nop
		}
	}
	uint8_t status = 0;
 800029c:	2300      	movs	r3, #0
 800029e:	74fb      	strb	r3, [r7, #19]
	if (ISOTP_RECEIVE_STATUS_FULL == isoTP.receive_status) {
 80002a0:	4b1b      	ldr	r3, [pc, #108]	; (8000310 <CanTP_Receive+0xac>)
 80002a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d128      	bne.n	80002fc <CanTP_Receive+0x98>
//		char PrintBuf[20] = "";
//		uint16_t printSize = 0;
//		printSize = sprintf(PrintBuf, "%x %x %x\r\n", isoTP.receive_buffer[0],
//				isoTP.receive_buffer[1], isoTP.receive_buffer[2]);
//		HAL_UART_Transmit(&huart1, PrintBuf, printSize, 200);
		status = isotp_receive(&isoTP, pData, *len, len);
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	881a      	ldrh	r2, [r3, #0]
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	68f9      	ldr	r1, [r7, #12]
 80002b2:	4817      	ldr	r0, [pc, #92]	; (8000310 <CanTP_Receive+0xac>)
 80002b4:	f003 fbaa 	bl	8003a0c <isotp_receive>
 80002b8:	4603      	mov	r3, r0
 80002ba:	74fb      	strb	r3, [r7, #19]
		uint16_t copylen = isoTP.receive_size;
 80002bc:	4b14      	ldr	r3, [pc, #80]	; (8000310 <CanTP_Receive+0xac>)
 80002be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80002c0:	83fb      	strh	r3, [r7, #30]
		if (copylen > *len) {
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	8bfa      	ldrh	r2, [r7, #30]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d902      	bls.n	80002d2 <CanTP_Receive+0x6e>
			copylen = *len;
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	881b      	ldrh	r3, [r3, #0]
 80002d0:	83fb      	strh	r3, [r7, #30]
		}
		for (int i = 0;i < copylen;i++) {
 80002d2:	2300      	movs	r3, #0
 80002d4:	61bb      	str	r3, [r7, #24]
 80002d6:	e00b      	b.n	80002f0 <CanTP_Receive+0x8c>
			pData[i] = isoTP.receive_buffer[i];
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <CanTP_Receive+0xac>)
 80002da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80002dc:	69bb      	ldr	r3, [r7, #24]
 80002de:	441a      	add	r2, r3
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	68f9      	ldr	r1, [r7, #12]
 80002e4:	440b      	add	r3, r1
 80002e6:	7812      	ldrb	r2, [r2, #0]
 80002e8:	701a      	strb	r2, [r3, #0]
		for (int i = 0;i < copylen;i++) {
 80002ea:	69bb      	ldr	r3, [r7, #24]
 80002ec:	3301      	adds	r3, #1
 80002ee:	61bb      	str	r3, [r7, #24]
 80002f0:	8bfb      	ldrh	r3, [r7, #30]
 80002f2:	69ba      	ldr	r2, [r7, #24]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	dbef      	blt.n	80002d8 <CanTP_Receive+0x74>
//		}
//		char PrintBuf[20] = "";
//		uint16_t printSize = 0;
//		printSize = sprintf(PrintBuf, "Rsuccessful\r\n");
//		HAL_UART_Transmit(&huart1, PrintBuf, printSize, 200);
		return HAL_OK;
 80002f8:	2300      	movs	r3, #0
 80002fa:	e005      	b.n	8000308 <CanTP_Receive+0xa4>
	}
	HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, 1);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2108      	movs	r1, #8
 8000300:	4804      	ldr	r0, [pc, #16]	; (8000314 <CanTP_Receive+0xb0>)
 8000302:	f002 f91f 	bl	8002544 <HAL_GPIO_WritePin>
//	char PrintBuf[20] = "";
//	uint16_t printSize = 0;
//	printSize = sprintf(PrintBuf, "Rtimeout\r\n");
//	HAL_UART_Transmit(&huart1, PrintBuf, printSize, 200);
	return HAL_TIMEOUT;
 8000306:	2303      	movs	r3, #3
}
 8000308:	4618      	mov	r0, r3
 800030a:	3720      	adds	r7, #32
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000088 	.word	0x20000088
 8000314:	40010c00 	.word	0x40010c00

08000318 <CanTP_RcvCallback>:

void CanTP_RcvCallback() {
 8000318:	b580      	push	{r7, lr}
 800031a:	b08a      	sub	sp, #40	; 0x28
 800031c:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8] = { 0 };
 800031e:	2300      	movs	r3, #0
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	2300      	movs	r3, #0
 8000324:	60bb      	str	r3, [r7, #8]
	HAL_CAN_GetRxMessage(&hcan, CAN_FILTER_FIFO0, &RxHeader, RxData);
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	f107 020c 	add.w	r2, r7, #12
 800032c:	2100      	movs	r1, #0
 800032e:	4807      	ldr	r0, [pc, #28]	; (800034c <CanTP_RcvCallback+0x34>)
 8000330:	f001 fb0d 	bl	800194e <HAL_CAN_GetRxMessage>
	isotp_on_can_message(&isoTP, RxData, RxHeader.DLC);
 8000334:	69fb      	ldr	r3, [r7, #28]
 8000336:	b2da      	uxtb	r2, r3
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4619      	mov	r1, r3
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <CanTP_RcvCallback+0x38>)
 800033e:	f003 fa0b 	bl	8003758 <isotp_on_can_message>
}
 8000342:	bf00      	nop
 8000344:	3728      	adds	r7, #40	; 0x28
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000190 	.word	0x20000190
 8000350:	20000088 	.word	0x20000088

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035a:	f000 ff8b 	bl	8001274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035e:	f000 f82f 	bl	80003c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000362:	f000 f8d5 	bl	8000510 <MX_GPIO_Init>
  MX_CAN_Init();
 8000366:	f000 f871 	bl	800044c <MX_CAN_Init>
  MX_USART1_UART_Init();
 800036a:	f000 f8a7 	bl	80004bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	uint8_t state = DiagnosticService_Init();
 800036e:	f000 fc3d 	bl	8000bec <DiagnosticService_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
	if (state != HAL_OK) {
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d004      	beq.n	8000386 <main+0x32>
		HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_SET);
 800037c:	2201      	movs	r2, #1
 800037e:	2108      	movs	r1, #8
 8000380:	480d      	ldr	r0, [pc, #52]	; (80003b8 <main+0x64>)
 8000382:	f002 f8df 	bl	8002544 <HAL_GPIO_WritePin>
	}
//	uint8_t SendBuff[] = {15,15,15,15,0,0,0,0,0,0,0,0,15,15,15,15};
	HAL_GPIO_WritePin(LEDIn_GPIO_Port, LEDIn_Pin,1);
 8000386:	2201      	movs	r2, #1
 8000388:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038c:	480b      	ldr	r0, [pc, #44]	; (80003bc <main+0x68>)
 800038e:	f002 f8d9 	bl	8002544 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin,0);
 8000392:	2200      	movs	r2, #0
 8000394:	2120      	movs	r1, #32
 8000396:	4808      	ldr	r0, [pc, #32]	; (80003b8 <main+0x64>)
 8000398:	f002 f8d4 	bl	8002544 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin,0);
 800039c:	2200      	movs	r2, #0
 800039e:	2110      	movs	r1, #16
 80003a0:	4805      	ldr	r0, [pc, #20]	; (80003b8 <main+0x64>)
 80003a2:	f002 f8cf 	bl	8002544 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin,0);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2108      	movs	r1, #8
 80003aa:	4803      	ldr	r0, [pc, #12]	; (80003b8 <main+0x64>)
 80003ac:	f002 f8ca 	bl	8002544 <HAL_GPIO_WritePin>
//	  HAL_GPIO_WritePin(LEDIn_GPIO_Port, LEDIn_Pin,1);
	  Diagnostic_Handler();
 80003b0:	f000 fc24 	bl	8000bfc <Diagnostic_Handler>
	  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin,0);
 80003b4:	e7ed      	b.n	8000392 <main+0x3e>
 80003b6:	bf00      	nop
 80003b8:	40010c00 	.word	0x40010c00
 80003bc:	40011000 	.word	0x40011000

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b090      	sub	sp, #64	; 0x40
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 0318 	add.w	r3, r7, #24
 80003ca:	2228      	movs	r2, #40	; 0x28
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f003 fe74 	bl	80040bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003e2:	2301      	movs	r3, #1
 80003e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f0:	2301      	movs	r3, #1
 80003f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f4:	2302      	movs	r3, #2
 80003f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000402:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000404:	f107 0318 	add.w	r3, r7, #24
 8000408:	4618      	mov	r0, r3
 800040a:	f002 f8cd 	bl	80025a8 <HAL_RCC_OscConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000414:	f000 f8fa 	bl	800060c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000418:	230f      	movs	r3, #15
 800041a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041c:	2302      	movs	r3, #2
 800041e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000428:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2102      	movs	r1, #2
 8000432:	4618      	mov	r0, r3
 8000434:	f002 fb3a 	bl	8002aac <HAL_RCC_ClockConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800043e:	f000 f8e5 	bl	800060c <Error_Handler>
  }
}
 8000442:	bf00      	nop
 8000444:	3740      	adds	r7, #64	; 0x40
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_CAN_Init+0x68>)
 8000452:	4a19      	ldr	r2, [pc, #100]	; (80004b8 <MX_CAN_Init+0x6c>)
 8000454:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000456:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <MX_CAN_Init+0x68>)
 8000458:	2204      	movs	r2, #4
 800045a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <MX_CAN_Init+0x68>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000462:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_CAN_Init+0x68>)
 8000464:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000468:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800046a:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <MX_CAN_Init+0x68>)
 800046c:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000470:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <MX_CAN_Init+0x68>)
 8000474:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000478:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_CAN_Init+0x68>)
 800047c:	2200      	movs	r2, #0
 800047e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_CAN_Init+0x68>)
 8000482:	2200      	movs	r2, #0
 8000484:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_CAN_Init+0x68>)
 8000488:	2200      	movs	r2, #0
 800048a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_CAN_Init+0x68>)
 800048e:	2200      	movs	r2, #0
 8000490:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_CAN_Init+0x68>)
 8000494:	2200      	movs	r2, #0
 8000496:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_CAN_Init+0x68>)
 800049a:	2200      	movs	r2, #0
 800049c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_CAN_Init+0x68>)
 80004a0:	f000 ff4a 	bl	8001338 <HAL_CAN_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80004aa:	f000 f8af 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000190 	.word	0x20000190
 80004b8:	40006400 	.word	0x40006400

080004bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_USART1_UART_Init+0x4c>)
 80004c2:	4a12      	ldr	r2, [pc, #72]	; (800050c <MX_USART1_UART_Init+0x50>)
 80004c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <MX_USART1_UART_Init+0x4c>)
 80004c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_USART1_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_USART1_UART_Init+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <MX_USART1_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_USART1_UART_Init+0x4c>)
 80004e2:	220c      	movs	r2, #12
 80004e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <MX_USART1_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_USART1_UART_Init+0x4c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <MX_USART1_UART_Init+0x4c>)
 80004f4:	f002 fc68 	bl	8002dc8 <HAL_UART_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004fe:	f000 f885 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200001b8 	.word	0x200001b8
 800050c:	40013800 	.word	0x40013800

08000510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000524:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <MX_GPIO_Init+0xcc>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a2c      	ldr	r2, [pc, #176]	; (80005dc <MX_GPIO_Init+0xcc>)
 800052a:	f043 0310 	orr.w	r3, r3, #16
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <MX_GPIO_Init+0xcc>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0310 	and.w	r3, r3, #16
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053c:	4b27      	ldr	r3, [pc, #156]	; (80005dc <MX_GPIO_Init+0xcc>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a26      	ldr	r2, [pc, #152]	; (80005dc <MX_GPIO_Init+0xcc>)
 8000542:	f043 0320 	orr.w	r3, r3, #32
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b24      	ldr	r3, [pc, #144]	; (80005dc <MX_GPIO_Init+0xcc>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0320 	and.w	r3, r3, #32
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4b21      	ldr	r3, [pc, #132]	; (80005dc <MX_GPIO_Init+0xcc>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a20      	ldr	r2, [pc, #128]	; (80005dc <MX_GPIO_Init+0xcc>)
 800055a:	f043 0304 	orr.w	r3, r3, #4
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <MX_GPIO_Init+0xcc>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0304 	and.w	r3, r3, #4
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <MX_GPIO_Init+0xcc>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a1a      	ldr	r2, [pc, #104]	; (80005dc <MX_GPIO_Init+0xcc>)
 8000572:	f043 0308 	orr.w	r3, r3, #8
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <MX_GPIO_Init+0xcc>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0308 	and.w	r3, r3, #8
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDIn_GPIO_Port, LEDIn_Pin, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058a:	4815      	ldr	r0, [pc, #84]	; (80005e0 <MX_GPIO_Init+0xd0>)
 800058c:	f001 ffda 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin|LEDG_Pin|LEDB_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2138      	movs	r1, #56	; 0x38
 8000594:	4813      	ldr	r0, [pc, #76]	; (80005e4 <MX_GPIO_Init+0xd4>)
 8000596:	f001 ffd5 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDIn_Pin */
  GPIO_InitStruct.Pin = LEDIn_Pin;
 800059a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a0:	2301      	movs	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDIn_GPIO_Port, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <MX_GPIO_Init+0xd0>)
 80005b4:	f001 fe42 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDR_Pin LEDG_Pin LEDB_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDG_Pin|LEDB_Pin;
 80005b8:	2338      	movs	r3, #56	; 0x38
 80005ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2302      	movs	r3, #2
 80005c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_GPIO_Init+0xd4>)
 80005d0:	f001 fe34 	bl	800223c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40011000 	.word	0x40011000
 80005e4:	40010c00 	.word	0x40010c00

080005e8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin,1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2120      	movs	r1, #32
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80005f6:	f001 ffa5 	bl	8002544 <HAL_GPIO_WritePin>
	CanTP_RcvCallback();
 80005fa:	f7ff fe8d 	bl	8000318 <CanTP_RcvCallback>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40010c00 	.word	0x40010c00

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000614:	e7fe      	b.n	8000614 <Error_Handler+0x8>
	...

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <HAL_MspInit+0x5c>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a14      	ldr	r2, [pc, #80]	; (8000674 <HAL_MspInit+0x5c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_MspInit+0x5c>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <HAL_MspInit+0x5c>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <HAL_MspInit+0x5c>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <HAL_MspInit+0x5c>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <HAL_MspInit+0x60>)
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_MspInit+0x60>)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	40021000 	.word	0x40021000
 8000678:	40010000 	.word	0x40010000

0800067c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a35      	ldr	r2, [pc, #212]	; (800076c <HAL_CAN_MspInit+0xf0>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d163      	bne.n	8000764 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800069c:	4b34      	ldr	r3, [pc, #208]	; (8000770 <HAL_CAN_MspInit+0xf4>)
 800069e:	69db      	ldr	r3, [r3, #28]
 80006a0:	4a33      	ldr	r2, [pc, #204]	; (8000770 <HAL_CAN_MspInit+0xf4>)
 80006a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a6:	61d3      	str	r3, [r2, #28]
 80006a8:	4b31      	ldr	r3, [pc, #196]	; (8000770 <HAL_CAN_MspInit+0xf4>)
 80006aa:	69db      	ldr	r3, [r3, #28]
 80006ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b4:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <HAL_CAN_MspInit+0xf4>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a2d      	ldr	r2, [pc, #180]	; (8000770 <HAL_CAN_MspInit+0xf4>)
 80006ba:	f043 0308 	orr.w	r3, r3, #8
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <HAL_CAN_MspInit+0xf4>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0308 	and.w	r3, r3, #8
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	4824      	ldr	r0, [pc, #144]	; (8000774 <HAL_CAN_MspInit+0xf8>)
 80006e2:	f001 fdab 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4619      	mov	r1, r3
 80006fa:	481e      	ldr	r0, [pc, #120]	; (8000774 <HAL_CAN_MspInit+0xf8>)
 80006fc:	f001 fd9e 	bl	800223c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <HAL_CAN_MspInit+0xfc>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
 800070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000710:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
 8000716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
 800071e:	4a16      	ldr	r2, [pc, #88]	; (8000778 <HAL_CAN_MspInit+0xfc>)
 8000720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000722:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	2013      	movs	r0, #19
 800072a:	f001 fd50 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800072e:	2013      	movs	r0, #19
 8000730:	f001 fd69 	bl	8002206 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	2014      	movs	r0, #20
 800073a:	f001 fd48 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800073e:	2014      	movs	r0, #20
 8000740:	f001 fd61 	bl	8002206 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	2015      	movs	r0, #21
 800074a:	f001 fd40 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800074e:	2015      	movs	r0, #21
 8000750:	f001 fd59 	bl	8002206 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2100      	movs	r1, #0
 8000758:	2016      	movs	r0, #22
 800075a:	f001 fd38 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800075e:	2016      	movs	r0, #22
 8000760:	f001 fd51 	bl	8002206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40006400 	.word	0x40006400
 8000770:	40021000 	.word	0x40021000
 8000774:	40010c00 	.word	0x40010c00
 8000778:	40010000 	.word	0x40010000

0800077c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <HAL_UART_MspInit+0x8c>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d131      	bne.n	8000800 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <HAL_UART_MspInit+0x90>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a1a      	ldr	r2, [pc, #104]	; (800080c <HAL_UART_MspInit+0x90>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <HAL_UART_MspInit+0x90>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <HAL_UART_MspInit+0x90>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a14      	ldr	r2, [pc, #80]	; (800080c <HAL_UART_MspInit+0x90>)
 80007ba:	f043 0304 	orr.w	r3, r3, #4
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_UART_MspInit+0x90>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	4619      	mov	r1, r3
 80007e0:	480b      	ldr	r0, [pc, #44]	; (8000810 <HAL_UART_MspInit+0x94>)
 80007e2:	f001 fd2b 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4619      	mov	r1, r3
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <HAL_UART_MspInit+0x94>)
 80007fc:	f001 fd1e 	bl	800223c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40013800 	.word	0x40013800
 800080c:	40021000 	.word	0x40021000
 8000810:	40010800 	.word	0x40010800

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <NMI_Handler+0x4>

0800081a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler+0x4>

08000820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <MemManage_Handler+0x4>

08000826 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <BusFault_Handler+0x4>

0800082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <UsageFault_Handler+0x4>

08000832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085a:	f000 fd51 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800086a:	f001 f9b6 	bl	8001bda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000190 	.word	0x20000190

08000878 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800087e:	f001 f9ac 	bl	8001bda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000190 	.word	0x20000190

0800088c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <CAN1_RX1_IRQHandler+0x10>)
 8000892:	f001 f9a2 	bl	8001bda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000190 	.word	0x20000190

080008a0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <CAN1_SCE_IRQHandler+0x10>)
 80008a6:	f001 f998 	bl	8001bda <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000190 	.word	0x20000190

080008b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return 1;
 80008b8:	2301      	movs	r3, #1
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <_kill>:

int _kill(int pid, int sig)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80008cc:	f003 fc44 	bl	8004158 <__errno>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2216      	movs	r2, #22
 80008d4:	601a      	str	r2, [r3, #0]
  return -1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <_exit>:

void _exit (int status)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80008ea:	f04f 31ff 	mov.w	r1, #4294967295
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ffe7 	bl	80008c2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80008f4:	e7fe      	b.n	80008f4 <_exit+0x12>

080008f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b086      	sub	sp, #24
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	e00a      	b.n	800091e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000908:	f3af 8000 	nop.w
 800090c:	4601      	mov	r1, r0
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	60ba      	str	r2, [r7, #8]
 8000914:	b2ca      	uxtb	r2, r1
 8000916:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3301      	adds	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	697a      	ldr	r2, [r7, #20]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	429a      	cmp	r2, r3
 8000924:	dbf0      	blt.n	8000908 <_read+0x12>
  }

  return len;
 8000926:	687b      	ldr	r3, [r7, #4]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	e009      	b.n	8000956 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	60ba      	str	r2, [r7, #8]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	3301      	adds	r3, #1
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	429a      	cmp	r2, r3
 800095c:	dbf1      	blt.n	8000942 <_write+0x12>
  }
  return len;
 800095e:	687b      	ldr	r3, [r7, #4]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <_close>:

int _close(int file)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr

0800097e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800098e:	605a      	str	r2, [r3, #4]
  return 0;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <_isatty>:

int _isatty(int file)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009a4:	2301      	movs	r3, #1
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <_sbrk+0x5c>)
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <_sbrk+0x60>)
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <_sbrk+0x64>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <_sbrk+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d207      	bcs.n	8000a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f8:	f003 fbae 	bl	8004158 <__errno>
 80009fc:	4603      	mov	r3, r0
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	e009      	b.n	8000a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <_sbrk+0x64>)
 8000a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20005000 	.word	0x20005000
 8000a28:	00000400 	.word	0x00000400
 8000a2c:	20000200 	.word	0x20000200
 8000a30:	20000368 	.word	0x20000368

08000a34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a40:	f7ff fff8 	bl	8000a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480b      	ldr	r0, [pc, #44]	; (8000a74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a46:	490c      	ldr	r1, [pc, #48]	; (8000a78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a5c:	4c09      	ldr	r4, [pc, #36]	; (8000a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f003 fb7b 	bl	8004164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6e:	f7ff fc71 	bl	8000354 <main>
  bx lr
 8000a72:	4770      	bx	lr
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a7c:	080052b0 	.word	0x080052b0
  ldr r2, =_sbss
 8000a80:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a84:	20000368 	.word	0x20000368

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>

08000a8a <KeyCalculate>:
 */

#include "DiagnosticDefine.h"
#include "CanTP.h"

void KeyCalculate(uint8_t *Keys, uint8_t *Seeds) {
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
	Keys[0] = Seeds[0] ^ Seeds[1];
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	4053      	eors	r3, r2
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	701a      	strb	r2, [r3, #0]
	Keys[1] = Seeds[1] + Seeds[2];
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	7819      	ldrb	r1, [r3, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	3302      	adds	r3, #2
 8000ab0:	781a      	ldrb	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	440a      	add	r2, r1
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	701a      	strb	r2, [r3, #0]
	Keys[2] = Seeds[2] ^ Seeds[3];
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	3302      	adds	r3, #2
 8000ac0:	7819      	ldrb	r1, [r3, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	3303      	adds	r3, #3
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3302      	adds	r3, #2
 8000acc:	404a      	eors	r2, r1
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	701a      	strb	r2, [r3, #0]
	Keys[3] = Seeds[3] + Seeds[0];
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	3303      	adds	r3, #3
 8000ad6:	7819      	ldrb	r1, [r3, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3303      	adds	r3, #3
 8000ae0:	440a      	add	r2, r1
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	701a      	strb	r2, [r3, #0]

	Keys[4] = Seeds[0] | Seeds[1];
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	7819      	ldrb	r1, [r3, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3304      	adds	r3, #4
 8000af4:	430a      	orrs	r2, r1
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	701a      	strb	r2, [r3, #0]
	Keys[5] = Seeds[1] + Seeds[2];
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	7819      	ldrb	r1, [r3, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	3302      	adds	r3, #2
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3305      	adds	r3, #5
 8000b0a:	440a      	add	r2, r1
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	701a      	strb	r2, [r3, #0]
	Keys[6] = Seeds[2] | Seeds[3];
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	3302      	adds	r3, #2
 8000b14:	7819      	ldrb	r1, [r3, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	3303      	adds	r3, #3
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3306      	adds	r3, #6
 8000b20:	430a      	orrs	r2, r1
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	701a      	strb	r2, [r3, #0]
	Keys[7] = Seeds[3] + Seeds[0];
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	3303      	adds	r3, #3
 8000b2a:	7819      	ldrb	r1, [r3, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3307      	adds	r3, #7
 8000b34:	440a      	add	r2, r1
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	701a      	strb	r2, [r3, #0]

	Keys[8] = Seeds[0] & Seeds[1];
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	7819      	ldrb	r1, [r3, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3308      	adds	r3, #8
 8000b48:	400a      	ands	r2, r1
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	701a      	strb	r2, [r3, #0]
	Keys[9] = Seeds[1] + Seeds[2];
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	7819      	ldrb	r1, [r3, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	3302      	adds	r3, #2
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3309      	adds	r3, #9
 8000b5e:	440a      	add	r2, r1
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	701a      	strb	r2, [r3, #0]
	Keys[10] = Seeds[2] & Seeds[3];
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	3302      	adds	r3, #2
 8000b68:	7819      	ldrb	r1, [r3, #0]
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	3303      	adds	r3, #3
 8000b6e:	781a      	ldrb	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	330a      	adds	r3, #10
 8000b74:	400a      	ands	r2, r1
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	701a      	strb	r2, [r3, #0]
	Keys[11] = Seeds[3] + Seeds[0];
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	3303      	adds	r3, #3
 8000b7e:	7819      	ldrb	r1, [r3, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	330b      	adds	r3, #11
 8000b88:	440a      	add	r2, r1
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	701a      	strb	r2, [r3, #0]

	Keys[12] = Seeds[0] - Seeds[1];
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	7819      	ldrb	r1, [r3, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	781a      	ldrb	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	330c      	adds	r3, #12
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	701a      	strb	r2, [r3, #0]
	Keys[13] = Seeds[1] + Seeds[2];
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	7819      	ldrb	r1, [r3, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	3302      	adds	r3, #2
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	330d      	adds	r3, #13
 8000bb2:	440a      	add	r2, r1
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	701a      	strb	r2, [r3, #0]
	Keys[14] = Seeds[2] - Seeds[3];
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	3302      	adds	r3, #2
 8000bbc:	7819      	ldrb	r1, [r3, #0]
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	3303      	adds	r3, #3
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	330e      	adds	r3, #14
 8000bc8:	1a8a      	subs	r2, r1, r2
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	701a      	strb	r2, [r3, #0]
	Keys[15] = Seeds[3] + Seeds[0];
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	3303      	adds	r3, #3
 8000bd2:	7819      	ldrb	r1, [r3, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	330f      	adds	r3, #15
 8000bdc:	440a      	add	r2, r1
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	701a      	strb	r2, [r3, #0]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <DiagnosticService_Init>:

uint8_t DiagnosticService_Init() {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
#ifdef TesterNode
	return Tester_Init();
#elif ECUNode
	return ECU_Init();
 8000bf0:	f000 f8c0 	bl	8000d74 <ECU_Init>
 8000bf4:	4603      	mov	r3, r0
#endif
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <Diagnostic_Handler>:


uint8_t RecvData[20] = { 0 };
uint16_t RecvLen = 20;
void Diagnostic_Handler() {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
	uint8_t Recv_State = CanTP_Receive(RecvData, RecvLen, 500);
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <Diagnostic_Handler+0x74>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4819      	ldr	r0, [pc, #100]	; (8000c74 <Diagnostic_Handler+0x78>)
 8000c0e:	f7ff fb29 	bl	8000264 <CanTP_Receive>
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]

	if (Recv_State == HAL_OK) {
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d124      	bne.n	8000c66 <Diagnostic_Handler+0x6a>
		int ReqSID = RecvData[0];
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <Diagnostic_Handler+0x78>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	603b      	str	r3, [r7, #0]
		switch (ReqSID) {
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	2b2e      	cmp	r3, #46	; 0x2e
 8000c26:	d010      	beq.n	8000c4a <Diagnostic_Handler+0x4e>
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2b2e      	cmp	r3, #46	; 0x2e
 8000c2c:	dc1a      	bgt.n	8000c64 <Diagnostic_Handler+0x68>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2b22      	cmp	r3, #34	; 0x22
 8000c32:	d003      	beq.n	8000c3c <Diagnostic_Handler+0x40>
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2b27      	cmp	r3, #39	; 0x27
 8000c38:	d00e      	beq.n	8000c58 <Diagnostic_Handler+0x5c>
			ECU_WriteDataByID_RequestService(RecvData, RecvLen);
			break;
		case SecurityAccess_ReqSID:
			ECU_SecurityAccess_RequestService(RecvData, RecvLen);
		default:
			break;
 8000c3a:	e013      	b.n	8000c64 <Diagnostic_Handler+0x68>
			ECU_ReadDataByID_RequestService(RecvData, RecvLen);
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <Diagnostic_Handler+0x74>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	480c      	ldr	r0, [pc, #48]	; (8000c74 <Diagnostic_Handler+0x78>)
 8000c44:	f000 f8ac 	bl	8000da0 <ECU_ReadDataByID_RequestService>
			break;
 8000c48:	e00d      	b.n	8000c66 <Diagnostic_Handler+0x6a>
			ECU_WriteDataByID_RequestService(RecvData, RecvLen);
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <Diagnostic_Handler+0x74>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4808      	ldr	r0, [pc, #32]	; (8000c74 <Diagnostic_Handler+0x78>)
 8000c52:	f000 f911 	bl	8000e78 <ECU_WriteDataByID_RequestService>
			break;
 8000c56:	e006      	b.n	8000c66 <Diagnostic_Handler+0x6a>
			ECU_SecurityAccess_RequestService(RecvData, RecvLen);
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <Diagnostic_Handler+0x74>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <Diagnostic_Handler+0x78>)
 8000c60:	f000 f99a 	bl	8000f98 <ECU_SecurityAccess_RequestService>
			break;
 8000c64:	bf00      	nop
		}
	}
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000004 	.word	0x20000004
 8000c74:	20000204 	.word	0x20000204

08000c78 <ECU_SeedsGen>:
extern UART_HandleTypeDef huart1;

//static uint8_t Security_Access = 0;
static uint8_t Security_State = Security_Lock;

static void ECU_SeedsGen(uint8_t Seeds[]) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	Seeds[0] = rand() % 256;
 8000c80:	f002 ffb6 	bl	8003bf0 <rand>
 8000c84:	4603      	mov	r3, r0
 8000c86:	425a      	negs	r2, r3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	bf58      	it	pl
 8000c8e:	4253      	negpl	r3, r2
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	701a      	strb	r2, [r3, #0]
	Seeds[1] = rand() % 256;
 8000c96:	f002 ffab 	bl	8003bf0 <rand>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	425a      	negs	r2, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	bf58      	it	pl
 8000ca4:	4253      	negpl	r3, r2
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	3201      	adds	r2, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	7013      	strb	r3, [r2, #0]
	Seeds[2] = rand() % 256;
 8000cae:	f002 ff9f 	bl	8003bf0 <rand>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	425a      	negs	r2, r3
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	bf58      	it	pl
 8000cbc:	4253      	negpl	r3, r2
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	3202      	adds	r2, #2
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	7013      	strb	r3, [r2, #0]
	Seeds[3] = rand() % 256;
 8000cc6:	f002 ff93 	bl	8003bf0 <rand>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	425a      	negs	r2, r3
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	bf58      	it	pl
 8000cd4:	4253      	negpl	r3, r2
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	3203      	adds	r2, #3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	7013      	strb	r3, [r2, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <ECU_CheckKey>:

static uint8_t ECU_CheckKey(uint8_t RecvKey[], uint8_t CalKey[]) {
 8000ce6:	b480      	push	{r7}
 8000ce8:	b085      	sub	sp, #20
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 16; i++) {
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	e00e      	b.n	8000d14 <ECU_CheckKey+0x2e>
		if (RecvKey[i] != CalKey[i])
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781a      	ldrb	r2, [r3, #0]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	6839      	ldr	r1, [r7, #0]
 8000d02:	440b      	add	r3, r1
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d001      	beq.n	8000d0e <ECU_CheckKey+0x28>
			return 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e006      	b.n	8000d1c <ECU_CheckKey+0x36>
	for (int i = 0; i < 16; i++) {
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	3301      	adds	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b0f      	cmp	r3, #15
 8000d18:	dded      	ble.n	8000cf6 <ECU_CheckKey+0x10>
	}
	return 1;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
	...

08000d28 <Security_ChangeState>:

void Security_ChangeState(uint8_t State) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	if (Security_State == Security_Unlock)
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <Security_ChangeState+0x44>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d013      	beq.n	8000d62 <Security_ChangeState+0x3a>
		return;
	if (State == Security_Lock) {
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d106      	bne.n	8000d4e <Security_ChangeState+0x26>
		// on LEd
		HAL_GPIO_WritePin(LEDIn_GPIO_Port, LEDIn_Pin, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d46:	480a      	ldr	r0, [pc, #40]	; (8000d70 <Security_ChangeState+0x48>)
 8000d48:	f001 fbfc 	bl	8002544 <HAL_GPIO_WritePin>
 8000d4c:	e005      	b.n	8000d5a <Security_ChangeState+0x32>
	} else {
		// off led
		HAL_GPIO_WritePin(LEDIn_GPIO_Port, LEDIn_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d54:	4806      	ldr	r0, [pc, #24]	; (8000d70 <Security_ChangeState+0x48>)
 8000d56:	f001 fbf5 	bl	8002544 <HAL_GPIO_WritePin>
	}
	Security_State = State;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <Security_ChangeState+0x44>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	7013      	strb	r3, [r2, #0]
 8000d60:	e000      	b.n	8000d64 <Security_ChangeState+0x3c>
		return;
 8000d62:	bf00      	nop
}
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000006 	.word	0x20000006
 8000d70:	40011000 	.word	0x40011000

08000d74 <ECU_Init>:

uint8_t ECU_Init() {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	HAL_ERR(CanTP_Init(SEND_ID, RECV_ID));
 8000d78:	f240 71a2 	movw	r1, #1954	; 0x7a2
 8000d7c:	f240 7012 	movw	r0, #1810	; 0x712
 8000d80:	f7ff f9e4 	bl	800014c <CanTP_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d007      	beq.n	8000d9a <ECU_Init+0x26>
 8000d8a:	f240 71a2 	movw	r1, #1954	; 0x7a2
 8000d8e:	f240 7012 	movw	r0, #1810	; 0x712
 8000d92:	f7ff f9db 	bl	800014c <CanTP_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e000      	b.n	8000d9c <ECU_Init+0x28>
	return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <ECU_ReadDataByID_RequestService>:

uint8_t ECU_ReadDataByID_RequestService(uint8_t pData[], uint16_t Len) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
	uint16_t ReqDID = Get_Resp_DID(pData[1], pData[2]);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3301      	adds	r3, #1
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	021b      	lsls	r3, r3, #8
 8000db4:	b21a      	sxth	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3302      	adds	r3, #2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	82fb      	strh	r3, [r7, #22]
	if (ReqDID != ReadData_CanID_DID) {
 8000dc4:	8afb      	ldrh	r3, [r7, #22]
 8000dc6:	f240 1223 	movw	r2, #291	; 0x123
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d023      	beq.n	8000e16 <ECU_ReadDataByID_RequestService+0x76>
		uint8_t RespPacket[3] = { 0x7F, ReadData_ByID_ReqSID,
 8000dce:	4a27      	ldr	r2, [pc, #156]	; (8000e6c <ECU_ReadDataByID_RequestService+0xcc>)
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	6812      	ldr	r2, [r2, #0]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	8019      	strh	r1, [r3, #0]
 8000dda:	3302      	adds	r3, #2
 8000ddc:	0c12      	lsrs	r2, r2, #16
 8000dde:	701a      	strb	r2, [r3, #0]
		NegResp_InvalidLen };
		HAL_ERR(CanTP_Transmit(RespPacket, 3));
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2103      	movs	r1, #3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fa06 	bl	80001f8 <CanTP_Transmit>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d007      	beq.n	8000e02 <ECU_ReadDataByID_RequestService+0x62>
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	2103      	movs	r1, #3
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff f9fd 	bl	80001f8 <CanTP_Transmit>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	e030      	b.n	8000e64 <ECU_ReadDataByID_RequestService+0xc4>
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2110      	movs	r1, #16
 8000e06:	481a      	ldr	r0, [pc, #104]	; (8000e70 <ECU_ReadDataByID_RequestService+0xd0>)
 8000e08:	f001 fb9c 	bl	8002544 <HAL_GPIO_WritePin>
		printf("Read data DID not support\r\n");
 8000e0c:	4819      	ldr	r0, [pc, #100]	; (8000e74 <ECU_ReadDataByID_RequestService+0xd4>)
 8000e0e:	f003 f855 	bl	8003ebc <puts>
		return HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e026      	b.n	8000e64 <ECU_ReadDataByID_RequestService+0xc4>
	}
	uint8_t RespBuff[5] = { Get_Positive_RespID(ReadData_ByID_ReqSID), pData[1],
 8000e16:	2362      	movs	r3, #98	; 0x62
 8000e18:	743b      	strb	r3, [r7, #16]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	785b      	ldrb	r3, [r3, #1]
 8000e1e:	747b      	strb	r3, [r7, #17]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	789b      	ldrb	r3, [r3, #2]
 8000e24:	74bb      	strb	r3, [r7, #18]
 8000e26:	2300      	movs	r3, #0
 8000e28:	74fb      	strb	r3, [r7, #19]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	753b      	strb	r3, [r7, #20]
			pData[2], 0, 0 };
	RespBuff[3] = RECV_ID >> 8;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	74fb      	strb	r3, [r7, #19]
	RespBuff[4] = RECV_ID & 0xFF;
 8000e32:	23a2      	movs	r3, #162	; 0xa2
 8000e34:	753b      	strb	r3, [r7, #20]
	HAL_ERR(CanTP_Transmit(RespBuff, 5));
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	2105      	movs	r1, #5
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff f9db 	bl	80001f8 <CanTP_Transmit>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d007      	beq.n	8000e58 <ECU_ReadDataByID_RequestService+0xb8>
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	2105      	movs	r1, #5
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff f9d2 	bl	80001f8 <CanTP_Transmit>
 8000e54:	4603      	mov	r3, r0
 8000e56:	e005      	b.n	8000e64 <ECU_ReadDataByID_RequestService+0xc4>
	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <ECU_ReadDataByID_RequestService+0xd0>)
 8000e5e:	f001 fb71 	bl	8002544 <HAL_GPIO_WritePin>
	return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	08005028 	.word	0x08005028
 8000e70:	40010c00 	.word	0x40010c00
 8000e74:	0800500c 	.word	0x0800500c

08000e78 <ECU_WriteDataByID_RequestService>:
uint8_t ECU_WriteDataByID_RequestService(uint8_t *pData, uint16_t Len) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
//		uint8_t NegResp[3] = { 0x7F, WriteData_ByID_ReqSID, 0x33 };
//		HAL_ERR(CanTP_Transmit(NegResp, 3));
//		printf("Security Access denied\r\n");
//		return HAL_OK;
//	}
	if (Len < 4) {
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d822      	bhi.n	8000ed0 <ECU_WriteDataByID_RequestService+0x58>
		uint8_t NegResp[3] = { 0x7F, WriteData_ByID_ReqSID,
 8000e8a:	4a3e      	ldr	r2, [pc, #248]	; (8000f84 <ECU_WriteDataByID_RequestService+0x10c>)
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	6812      	ldr	r2, [r2, #0]
 8000e92:	4611      	mov	r1, r2
 8000e94:	8019      	strh	r1, [r3, #0]
 8000e96:	3302      	adds	r3, #2
 8000e98:	0c12      	lsrs	r2, r2, #16
 8000e9a:	701a      	strb	r2, [r3, #0]
		NegResp_InvalidLen };
		HAL_ERR(CanTP_Transmit(NegResp, 3));
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	2103      	movs	r1, #3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff f9a8 	bl	80001f8 <CanTP_Transmit>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d007      	beq.n	8000ebe <ECU_WriteDataByID_RequestService+0x46>
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	2103      	movs	r1, #3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff f99f 	bl	80001f8 <CanTP_Transmit>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	e05e      	b.n	8000f7c <ECU_WriteDataByID_RequestService+0x104>
		printf("Write Data len not vaild\r\n");
 8000ebe:	4832      	ldr	r0, [pc, #200]	; (8000f88 <ECU_WriteDataByID_RequestService+0x110>)
 8000ec0:	f002 fffc 	bl	8003ebc <puts>
		HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4831      	ldr	r0, [pc, #196]	; (8000f8c <ECU_WriteDataByID_RequestService+0x114>)
 8000ec8:	f001 fb54 	bl	8002574 <HAL_GPIO_TogglePin>
		return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e055      	b.n	8000f7c <ECU_WriteDataByID_RequestService+0x104>
	}
	uint16_t ReqDID = Get_Resp_DID(pData[1], pData[2]);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3302      	adds	r3, #2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	b21b      	sxth	r3, r3
 8000ee6:	82fb      	strh	r3, [r7, #22]
	if (ReqDID != WriteData_CanID_DID) {
 8000ee8:	8afb      	ldrh	r3, [r7, #22]
 8000eea:	f240 1223 	movw	r2, #291	; 0x123
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d022      	beq.n	8000f38 <ECU_WriteDataByID_RequestService+0xc0>
		uint8_t NegResp[3] = { 0x7F, WriteData_ByID_ReqSID,
 8000ef2:	4a27      	ldr	r2, [pc, #156]	; (8000f90 <ECU_WriteDataByID_RequestService+0x118>)
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	6812      	ldr	r2, [r2, #0]
 8000efa:	4611      	mov	r1, r2
 8000efc:	8019      	strh	r1, [r3, #0]
 8000efe:	3302      	adds	r3, #2
 8000f00:	0c12      	lsrs	r2, r2, #16
 8000f02:	701a      	strb	r2, [r3, #0]
		NegResp_DID_notSupport };
		HAL_ERR(CanTP_Transmit(NegResp, 3));
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	2103      	movs	r1, #3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff f974 	bl	80001f8 <CanTP_Transmit>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d007      	beq.n	8000f26 <ECU_WriteDataByID_RequestService+0xae>
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff f96b 	bl	80001f8 <CanTP_Transmit>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e02a      	b.n	8000f7c <ECU_WriteDataByID_RequestService+0x104>
		printf("Write Data DID not support\r\n");
 8000f26:	481b      	ldr	r0, [pc, #108]	; (8000f94 <ECU_WriteDataByID_RequestService+0x11c>)
 8000f28:	f002 ffc8 	bl	8003ebc <puts>
		HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	4817      	ldr	r0, [pc, #92]	; (8000f8c <ECU_WriteDataByID_RequestService+0x114>)
 8000f30:	f001 fb20 	bl	8002574 <HAL_GPIO_TogglePin>
		return HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	e021      	b.n	8000f7c <ECU_WriteDataByID_RequestService+0x104>
	}
	if (pData[3] == 0x12 && pData[4] == 0x13) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3303      	adds	r3, #3
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b12      	cmp	r3, #18
 8000f40:	d108      	bne.n	8000f54 <ECU_WriteDataByID_RequestService+0xdc>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3304      	adds	r3, #4
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b13      	cmp	r3, #19
 8000f4a:	d103      	bne.n	8000f54 <ECU_WriteDataByID_RequestService+0xdc>
		HAL_GPIO_TogglePin(LEDG_GPIO_Port, LEDG_Pin);
 8000f4c:	2110      	movs	r1, #16
 8000f4e:	480f      	ldr	r0, [pc, #60]	; (8000f8c <ECU_WriteDataByID_RequestService+0x114>)
 8000f50:	f001 fb10 	bl	8002574 <HAL_GPIO_TogglePin>
	}
	uint8_t PosResp[] = { Get_Positive_RespID(WriteData_ByID_ReqSID) };
 8000f54:	236e      	movs	r3, #110	; 0x6e
 8000f56:	753b      	strb	r3, [r7, #20]
	HAL_ERR(CanTP_Transmit(PosResp, 1));
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff f94a 	bl	80001f8 <CanTP_Transmit>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d007      	beq.n	8000f7a <ECU_WriteDataByID_RequestService+0x102>
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff f941 	bl	80001f8 <CanTP_Transmit>
 8000f76:	4603      	mov	r3, r0
 8000f78:	e000      	b.n	8000f7c <ECU_WriteDataByID_RequestService+0x104>
	return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	08005064 	.word	0x08005064
 8000f88:	0800502c 	.word	0x0800502c
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	08005068 	.word	0x08005068
 8000f94:	08005048 	.word	0x08005048

08000f98 <ECU_SecurityAccess_RequestService>:
uint8_t ECU_SecurityAccess_RequestService(uint8_t *pData, uint16_t Len) {
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b09f      	sub	sp, #124	; 0x7c
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
	uint8_t ReqSF = pData[1];
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	785b      	ldrb	r3, [r3, #1]
 8000fa8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (ReqSF != SecurityAccess_ReqSeedID) {
 8000fac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d001      	beq.n	8000fb8 <ECU_SecurityAccess_RequestService+0x20>
//		uint8_t RespPacket[3] = { 0x7F, SecurityAccess_ReqSID,
//		NegResp_ReadData_Service };
//		HAL_ERR(CanTP_Transmit(RespPacket, 3));
//		printf("Security Access SF invalid\r\n");
//		HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
		return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e145      	b.n	8001244 <ECU_SecurityAccess_RequestService+0x2ac>
	}
	uint8_t RespBuff[6] = { Get_Positive_RespID(SecurityAccess_ReqSID),
 8000fb8:	4aa4      	ldr	r2, [pc, #656]	; (800124c <ECU_SecurityAccess_RequestService+0x2b4>)
 8000fba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc2:	6018      	str	r0, [r3, #0]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	8019      	strh	r1, [r3, #0]
	SecurityAccess_ReqSeedID, 0, 0, 0, 0 };
	uint8_t Seeds[4];
	ECU_SeedsGen(Seeds);
 8000fc8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe53 	bl	8000c78 <ECU_SeedsGen>
	memcpy(RespBuff + 2, Seeds, 4);
 8000fd2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000fda:	601a      	str	r2, [r3, #0]

	HAL_ERR(CanTP_Transmit(RespBuff, 6));
 8000fdc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fe0:	2106      	movs	r1, #6
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff f908 	bl	80001f8 <CanTP_Transmit>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <ECU_SecurityAccess_RequestService+0x66>
 8000fee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ff2:	2106      	movs	r1, #6
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff f8ff 	bl	80001f8 <CanTP_Transmit>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	e122      	b.n	8001244 <ECU_SecurityAccess_RequestService+0x2ac>
	uint8_t RecvKeyBuff[18] = { 0 };
 8000ffe:	2300      	movs	r3, #0
 8001000:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001002:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	819a      	strh	r2, [r3, #12]
	memset(RecvKeyBuff,0,18);
 8001010:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001014:	2212      	movs	r2, #18
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f003 f84f 	bl	80040bc <memset>
	uint8_t RecvKeyLen = 18;
 800101e:	2312      	movs	r3, #18
 8001020:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	char PrintBuf[20] = "";
 8001024:	2300      	movs	r3, #0
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
 8001028:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
	uint16_t printSize = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
//	printSize = sprintf(PrintBuf, "SSS\r\n");
//	HAL_UART_Transmit(&huart1, PrintBuf, printSize, 200);
	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 800103c:	2201      	movs	r2, #1
 800103e:	2110      	movs	r1, #16
 8001040:	4883      	ldr	r0, [pc, #524]	; (8001250 <ECU_SecurityAccess_RequestService+0x2b8>)
 8001042:	f001 fa7f 	bl	8002544 <HAL_GPIO_WritePin>
	uint8_t Keys[16] = { 0 };
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
 800104a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
	uint8_t RecvKey[16] = { 0 };
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
	KeyCalculate(Keys, Seeds);
 8001066:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fd0a 	bl	8000a8a <KeyCalculate>

	HAL_ERR(CanTP_Receive(RecvKeyBuff, &RecvKeyLen, 1500));
 8001076:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 800107a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800107e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f8ee 	bl	8000264 <CanTP_Receive>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00a      	beq.n	80010a4 <ECU_SecurityAccess_RequestService+0x10c>
 800108e:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8001092:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001096:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f8e2 	bl	8000264 <CanTP_Receive>
 80010a0:	4603      	mov	r3, r0
 80010a2:	e0cf      	b.n	8001244 <ECU_SecurityAccess_RequestService+0x2ac>
	printSize = sprintf(PrintBuf, "RKS\r\n");
 80010a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010a8:	496a      	ldr	r1, [pc, #424]	; (8001254 <ECU_SecurityAccess_RequestService+0x2bc>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 ff0e 	bl	8003ecc <siprintf>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	HAL_UART_Transmit(&huart1, PrintBuf, printSize, 200);
 80010b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80010ba:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80010be:	23c8      	movs	r3, #200	; 0xc8
 80010c0:	4865      	ldr	r0, [pc, #404]	; (8001258 <ECU_SecurityAccess_RequestService+0x2c0>)
 80010c2:	f001 fed1 	bl	8002e68 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2110      	movs	r1, #16
 80010ca:	4861      	ldr	r0, [pc, #388]	; (8001250 <ECU_SecurityAccess_RequestService+0x2b8>)
 80010cc:	f001 fa3a 	bl	8002544 <HAL_GPIO_WritePin>
	uint8_t ReqSID = RecvKeyBuff[0];
 80010d0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80010d4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	ReqSF = RecvKeyBuff[1];
 80010d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80010dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (ReqSID != SecurityAccess_ReqSID) {
 80010e0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80010e4:	2b27      	cmp	r3, #39	; 0x27
 80010e6:	d024      	beq.n	8001132 <ECU_SecurityAccess_RequestService+0x19a>
		HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 80010e8:	2108      	movs	r1, #8
 80010ea:	4859      	ldr	r0, [pc, #356]	; (8001250 <ECU_SecurityAccess_RequestService+0x2b8>)
 80010ec:	f001 fa42 	bl	8002574 <HAL_GPIO_TogglePin>
		printSize = sprintf(PrintBuf, "WSID: %x,%x,%x\r\n",RecvKeyBuff[0],RecvKeyBuff[1],RecvKeyBuff[2]);
 80010f0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80010f4:	461a      	mov	r2, r3
 80010f6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80010fa:	4619      	mov	r1, r3
 80010fc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001100:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	460b      	mov	r3, r1
 8001108:	4954      	ldr	r1, [pc, #336]	; (800125c <ECU_SecurityAccess_RequestService+0x2c4>)
 800110a:	f002 fedf 	bl	8003ecc <siprintf>
 800110e:	4603      	mov	r3, r0
 8001110:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart1, PrintBuf, printSize, 200);
 8001114:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001118:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800111c:	23c8      	movs	r3, #200	; 0xc8
 800111e:	484e      	ldr	r0, [pc, #312]	; (8001258 <ECU_SecurityAccess_RequestService+0x2c0>)
 8001120:	f001 fea2 	bl	8002e68 <HAL_UART_Transmit>
//		printf("Security Access wrong SID\r\n");
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 8001124:	2201      	movs	r2, #1
 8001126:	2110      	movs	r1, #16
 8001128:	4849      	ldr	r0, [pc, #292]	; (8001250 <ECU_SecurityAccess_RequestService+0x2b8>)
 800112a:	f001 fa0b 	bl	8002544 <HAL_GPIO_WritePin>
		return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e088      	b.n	8001244 <ECU_SecurityAccess_RequestService+0x2ac>
	} else if (ReqSF != SecurityAccess_SendKeyID) {
 8001132:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001136:	2b02      	cmp	r3, #2
 8001138:	d01b      	beq.n	8001172 <ECU_SecurityAccess_RequestService+0x1da>
		HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 800113a:	2108      	movs	r1, #8
 800113c:	4844      	ldr	r0, [pc, #272]	; (8001250 <ECU_SecurityAccess_RequestService+0x2b8>)
 800113e:	f001 fa19 	bl	8002574 <HAL_GPIO_TogglePin>
		printSize = sprintf(PrintBuf, "WSF\r\n");
 8001142:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001146:	4946      	ldr	r1, [pc, #280]	; (8001260 <ECU_SecurityAccess_RequestService+0x2c8>)
 8001148:	4618      	mov	r0, r3
 800114a:	f002 febf 	bl	8003ecc <siprintf>
 800114e:	4603      	mov	r3, r0
 8001150:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart1, PrintBuf, printSize, 200);
 8001154:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001158:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800115c:	23c8      	movs	r3, #200	; 0xc8
 800115e:	483e      	ldr	r0, [pc, #248]	; (8001258 <ECU_SecurityAccess_RequestService+0x2c0>)
 8001160:	f001 fe82 	bl	8002e68 <HAL_UART_Transmit>
//		printf("Security Access wrong SF\r\n");
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 8001164:	2201      	movs	r2, #1
 8001166:	2110      	movs	r1, #16
 8001168:	4839      	ldr	r0, [pc, #228]	; (8001250 <ECU_SecurityAccess_RequestService+0x2b8>)
 800116a:	f001 f9eb 	bl	8002544 <HAL_GPIO_WritePin>
		return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e068      	b.n	8001244 <ECU_SecurityAccess_RequestService+0x2ac>
	}
	memcpy(RecvKey, RecvKeyBuff + 2, 16);
 8001172:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001176:	3302      	adds	r3, #2
 8001178:	f107 0414 	add.w	r4, r7, #20
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	6859      	ldr	r1, [r3, #4]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (!ECU_CheckKey(RecvKey, Keys)) {
 8001186:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fda8 	bl	8000ce6 <ECU_CheckKey>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d133      	bne.n	8001204 <ECU_SecurityAccess_RequestService+0x26c>
		uint8_t RespPacket[3] = { 0x7F, SecurityAccess_ReqSID,
 800119c:	4a31      	ldr	r2, [pc, #196]	; (8001264 <ECU_SecurityAccess_RequestService+0x2cc>)
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	4611      	mov	r1, r2
 80011a6:	8019      	strh	r1, [r3, #0]
 80011a8:	3302      	adds	r3, #2
 80011aa:	0c12      	lsrs	r2, r2, #16
 80011ac:	701a      	strb	r2, [r3, #0]
		NegResp_SecurityAccess_InvalidKey };
		HAL_ERR(CanTP_Transmit(RespPacket, 3));
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	2103      	movs	r1, #3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f81f 	bl	80001f8 <CanTP_Transmit>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d007      	beq.n	80011d0 <ECU_SecurityAccess_RequestService+0x238>
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2103      	movs	r1, #3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f816 	bl	80001f8 <CanTP_Transmit>
 80011cc:	4603      	mov	r3, r0
 80011ce:	e039      	b.n	8001244 <ECU_SecurityAccess_RequestService+0x2ac>
		printf("Security Access Key invalid\r\n");
 80011d0:	4825      	ldr	r0, [pc, #148]	; (8001268 <ECU_SecurityAccess_RequestService+0x2d0>)
 80011d2:	f002 fe73 	bl	8003ebc <puts>
		HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 80011d6:	2108      	movs	r1, #8
 80011d8:	481d      	ldr	r0, [pc, #116]	; (8001250 <ECU_SecurityAccess_RequestService+0x2b8>)
 80011da:	f001 f9cb 	bl	8002574 <HAL_GPIO_TogglePin>
		printSize = sprintf(PrintBuf, "WK\r\n");
 80011de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011e2:	4922      	ldr	r1, [pc, #136]	; (800126c <ECU_SecurityAccess_RequestService+0x2d4>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 fe71 	bl	8003ecc <siprintf>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart1, PrintBuf, printSize, 200);
 80011f0:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80011f4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80011f8:	23c8      	movs	r3, #200	; 0xc8
 80011fa:	4817      	ldr	r0, [pc, #92]	; (8001258 <ECU_SecurityAccess_RequestService+0x2c0>)
 80011fc:	f001 fe34 	bl	8002e68 <HAL_UART_Transmit>
		return HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	e01f      	b.n	8001244 <ECU_SecurityAccess_RequestService+0x2ac>
	}

	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	2110      	movs	r1, #16
 8001208:	4811      	ldr	r0, [pc, #68]	; (8001250 <ECU_SecurityAccess_RequestService+0x2b8>)
 800120a:	f001 f99b 	bl	8002544 <HAL_GPIO_WritePin>
	Security_ChangeState(Security_Unlock);
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff fd8a 	bl	8000d28 <Security_ChangeState>
	uint8_t RespKey[2] = { Get_Positive_RespID(SecurityAccess_ReqSID),
 8001214:	f240 2367 	movw	r3, #615	; 0x267
 8001218:	823b      	strh	r3, [r7, #16]
	SecurityAccess_SendKeyID };
	HAL_ERR(CanTP_Transmit(RespKey, 2));
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	2102      	movs	r1, #2
 8001220:	4618      	mov	r0, r3
 8001222:	f7fe ffe9 	bl	80001f8 <CanTP_Transmit>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d007      	beq.n	800123c <ECU_SecurityAccess_RequestService+0x2a4>
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	2102      	movs	r1, #2
 8001232:	4618      	mov	r0, r3
 8001234:	f7fe ffe0 	bl	80001f8 <CanTP_Transmit>
 8001238:	4603      	mov	r3, r0
 800123a:	e003      	b.n	8001244 <ECU_SecurityAccess_RequestService+0x2ac>
	printf("Security Access success\r\n");
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <ECU_SecurityAccess_RequestService+0x2d8>)
 800123e:	f002 fe3d 	bl	8003ebc <puts>
	return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3774      	adds	r7, #116	; 0x74
 8001248:	46bd      	mov	sp, r7
 800124a:	bd90      	pop	{r4, r7, pc}
 800124c:	080050d4 	.word	0x080050d4
 8001250:	40010c00 	.word	0x40010c00
 8001254:	0800506c 	.word	0x0800506c
 8001258:	200001b8 	.word	0x200001b8
 800125c:	08005074 	.word	0x08005074
 8001260:	08005088 	.word	0x08005088
 8001264:	080050dc 	.word	0x080050dc
 8001268:	08005090 	.word	0x08005090
 800126c:	080050b0 	.word	0x080050b0
 8001270:	080050b8 	.word	0x080050b8

08001274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_Init+0x28>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <HAL_Init+0x28>)
 800127e:	f043 0310 	orr.w	r3, r3, #16
 8001282:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 ff97 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128a:	200f      	movs	r0, #15
 800128c:	f000 f808 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001290:	f7ff f9c2 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40022000 	.word	0x40022000

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_InitTick+0x54>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_InitTick+0x58>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 ffaf 	bl	8002222 <HAL_SYSTICK_Config>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00e      	b.n	80012ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d80a      	bhi.n	80012ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d4:	2200      	movs	r2, #0
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f000 ff77 	bl	80021ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e0:	4a06      	ldr	r2, [pc, #24]	; (80012fc <HAL_InitTick+0x5c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000000 	.word	0x20000000
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	20000008 	.word	0x20000008

08001300 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_IncTick+0x1c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_IncTick+0x20>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a03      	ldr	r2, [pc, #12]	; (8001320 <HAL_IncTick+0x20>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	2000000c 	.word	0x2000000c
 8001320:	20000218 	.word	0x20000218

08001324 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b02      	ldr	r3, [pc, #8]	; (8001334 <HAL_GetTick+0x10>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	20000218 	.word	0x20000218

08001338 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e0ed      	b.n	8001526 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff f990 	bl	800067c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 0201 	orr.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800136c:	f7ff ffda 	bl	8001324 <HAL_GetTick>
 8001370:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001372:	e012      	b.n	800139a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001374:	f7ff ffd6 	bl	8001324 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b0a      	cmp	r3, #10
 8001380:	d90b      	bls.n	800139a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2205      	movs	r2, #5
 8001392:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e0c5      	b.n	8001526 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0e5      	beq.n	8001374 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0202 	bic.w	r2, r2, #2
 80013b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013b8:	f7ff ffb4 	bl	8001324 <HAL_GetTick>
 80013bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013be:	e012      	b.n	80013e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013c0:	f7ff ffb0 	bl	8001324 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b0a      	cmp	r3, #10
 80013cc:	d90b      	bls.n	80013e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2205      	movs	r2, #5
 80013de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e09f      	b.n	8001526 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e5      	bne.n	80013c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7e1b      	ldrb	r3, [r3, #24]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d108      	bne.n	800140e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	e007      	b.n	800141e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800141c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7e5b      	ldrb	r3, [r3, #25]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d108      	bne.n	8001438 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e007      	b.n	8001448 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001446:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7e9b      	ldrb	r3, [r3, #26]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d108      	bne.n	8001462 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0220 	orr.w	r2, r2, #32
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	e007      	b.n	8001472 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0220 	bic.w	r2, r2, #32
 8001470:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7edb      	ldrb	r3, [r3, #27]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d108      	bne.n	800148c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0210 	bic.w	r2, r2, #16
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	e007      	b.n	800149c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0210 	orr.w	r2, r2, #16
 800149a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7f1b      	ldrb	r3, [r3, #28]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d108      	bne.n	80014b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0208 	orr.w	r2, r2, #8
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	e007      	b.n	80014c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0208 	bic.w	r2, r2, #8
 80014c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7f5b      	ldrb	r3, [r3, #29]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d108      	bne.n	80014e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f042 0204 	orr.w	r2, r2, #4
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e007      	b.n	80014f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0204 	bic.w	r2, r2, #4
 80014ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	ea42 0103 	orr.w	r1, r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	1e5a      	subs	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800152e:	b480      	push	{r7}
 8001530:	b087      	sub	sp, #28
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001544:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001546:	7cfb      	ldrb	r3, [r7, #19]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d003      	beq.n	8001554 <HAL_CAN_ConfigFilter+0x26>
 800154c:	7cfb      	ldrb	r3, [r7, #19]
 800154e:	2b02      	cmp	r3, #2
 8001550:	f040 80aa 	bne.w	80016a8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800155a:	f043 0201 	orr.w	r2, r3, #1
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f003 031f 	and.w	r3, r3, #31
 800156c:	2201      	movs	r2, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43db      	mvns	r3, r3
 800157e:	401a      	ands	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d123      	bne.n	80015d6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	43db      	mvns	r3, r3
 8001598:	401a      	ands	r2, r3
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3248      	adds	r2, #72	; 0x48
 80015b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015cc:	6979      	ldr	r1, [r7, #20]
 80015ce:	3348      	adds	r3, #72	; 0x48
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d122      	bne.n	8001624 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3248      	adds	r2, #72	; 0x48
 8001604:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001618:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800161a:	6979      	ldr	r1, [r7, #20]
 800161c:	3348      	adds	r3, #72	; 0x48
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d109      	bne.n	8001640 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	43db      	mvns	r3, r3
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800163e:	e007      	b.n	8001650 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	431a      	orrs	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d109      	bne.n	800166c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	43db      	mvns	r3, r3
 8001662:	401a      	ands	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800166a:	e007      	b.n	800167c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d107      	bne.n	8001694 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	431a      	orrs	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800169a:	f023 0201 	bic.w	r2, r3, #1
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e006      	b.n	80016b6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
  }
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d12e      	bne.n	8001732 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2202      	movs	r2, #2
 80016d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016ec:	f7ff fe1a 	bl	8001324 <HAL_GetTick>
 80016f0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016f2:	e012      	b.n	800171a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016f4:	f7ff fe16 	bl	8001324 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b0a      	cmp	r3, #10
 8001700:	d90b      	bls.n	800171a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2205      	movs	r2, #5
 8001712:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e012      	b.n	8001740 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e5      	bne.n	80016f4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e006      	b.n	8001740 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
  }
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800175c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d003      	beq.n	8001774 <HAL_CAN_AddTxMessage+0x2c>
 800176c:	7ffb      	ldrb	r3, [r7, #31]
 800176e:	2b02      	cmp	r3, #2
 8001770:	f040 80ad 	bne.w	80018ce <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10a      	bne.n	8001794 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001784:	2b00      	cmp	r3, #0
 8001786:	d105      	bne.n	8001794 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8095 	beq.w	80018be <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	0e1b      	lsrs	r3, r3, #24
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800179e:	2201      	movs	r2, #1
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10d      	bne.n	80017cc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017ba:	68f9      	ldr	r1, [r7, #12]
 80017bc:	6809      	ldr	r1, [r1, #0]
 80017be:	431a      	orrs	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3318      	adds	r3, #24
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	440b      	add	r3, r1
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e00f      	b.n	80017ec <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017d6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80017e0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3318      	adds	r3, #24
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	440b      	add	r3, r1
 80017ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6819      	ldr	r1, [r3, #0]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3318      	adds	r3, #24
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	440b      	add	r3, r1
 80017fc:	3304      	adds	r3, #4
 80017fe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	7d1b      	ldrb	r3, [r3, #20]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d111      	bne.n	800182c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3318      	adds	r3, #24
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	4413      	add	r3, r2
 8001814:	3304      	adds	r3, #4
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	6811      	ldr	r1, [r2, #0]
 800181c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3318      	adds	r3, #24
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	440b      	add	r3, r1
 8001828:	3304      	adds	r3, #4
 800182a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3307      	adds	r3, #7
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	061a      	lsls	r2, r3, #24
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3306      	adds	r3, #6
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	041b      	lsls	r3, r3, #16
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3305      	adds	r3, #5
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	4313      	orrs	r3, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	3204      	adds	r2, #4
 800184c:	7812      	ldrb	r2, [r2, #0]
 800184e:	4610      	mov	r0, r2
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	6811      	ldr	r1, [r2, #0]
 8001854:	ea43 0200 	orr.w	r2, r3, r0
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	440b      	add	r3, r1
 800185e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001862:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3303      	adds	r3, #3
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	061a      	lsls	r2, r3, #24
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3302      	adds	r3, #2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	041b      	lsls	r3, r3, #16
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3301      	adds	r3, #1
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	4313      	orrs	r3, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	7812      	ldrb	r2, [r2, #0]
 8001884:	4610      	mov	r0, r2
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	6811      	ldr	r1, [r2, #0]
 800188a:	ea43 0200 	orr.w	r2, r3, r0
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	440b      	add	r3, r1
 8001894:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001898:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3318      	adds	r3, #24
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	6811      	ldr	r1, [r2, #0]
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3318      	adds	r3, #24
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	440b      	add	r3, r1
 80018b8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e00e      	b.n	80018dc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e006      	b.n	80018dc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
  }
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3724      	adds	r7, #36	; 0x24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b085      	sub	sp, #20
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80018fa:	7afb      	ldrb	r3, [r7, #11]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d002      	beq.n	8001906 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001900:	7afb      	ldrb	r3, [r7, #11]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d11d      	bne.n	8001942 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d002      	beq.n	800191a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3301      	adds	r3, #1
 8001918:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3301      	adds	r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3301      	adds	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800194e:	b480      	push	{r7}
 8001950:	b087      	sub	sp, #28
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001962:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001964:	7dfb      	ldrb	r3, [r7, #23]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d003      	beq.n	8001972 <HAL_CAN_GetRxMessage+0x24>
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	2b02      	cmp	r3, #2
 800196e:	f040 8103 	bne.w	8001b78 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10e      	bne.n	8001996 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d116      	bne.n	80019b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e0f7      	b.n	8001b86 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0e8      	b.n	8001b86 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	331b      	adds	r3, #27
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4413      	add	r3, r2
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0204 	and.w	r2, r3, #4
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	331b      	adds	r3, #27
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	4413      	add	r3, r2
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0d5b      	lsrs	r3, r3, #21
 80019e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e00b      	b.n	8001a04 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	331b      	adds	r3, #27
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	4413      	add	r3, r2
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	08db      	lsrs	r3, r3, #3
 80019fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	331b      	adds	r3, #27
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	4413      	add	r3, r2
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0202 	and.w	r2, r3, #2
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	331b      	adds	r3, #27
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	4413      	add	r3, r2
 8001a26:	3304      	adds	r3, #4
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2208      	movs	r2, #8
 8001a36:	611a      	str	r2, [r3, #16]
 8001a38:	e00b      	b.n	8001a52 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	331b      	adds	r3, #27
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	4413      	add	r3, r2
 8001a46:	3304      	adds	r3, #4
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 020f 	and.w	r2, r3, #15
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	331b      	adds	r3, #27
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3304      	adds	r3, #4
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	331b      	adds	r3, #27
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	4413      	add	r3, r2
 8001a76:	3304      	adds	r3, #4
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	0c1b      	lsrs	r3, r3, #16
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0a1a      	lsrs	r2, r3, #8
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	3301      	adds	r3, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0c1a      	lsrs	r2, r3, #16
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0e1a      	lsrs	r2, r3, #24
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	3303      	adds	r3, #3
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	3304      	adds	r3, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0a1a      	lsrs	r2, r3, #8
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	3305      	adds	r3, #5
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0c1a      	lsrs	r2, r3, #16
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3306      	adds	r3, #6
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	0e1a      	lsrs	r2, r3, #24
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	3307      	adds	r3, #7
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d108      	bne.n	8001b64 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0220 	orr.w	r2, r2, #32
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	e007      	b.n	8001b74 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0220 	orr.w	r2, r2, #32
 8001b72:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e006      	b.n	8001b86 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
  }
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	371c      	adds	r7, #28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d002      	beq.n	8001bae <HAL_CAN_ActivateNotification+0x1e>
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d109      	bne.n	8001bc2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6959      	ldr	r1, [r3, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e006      	b.n	8001bd0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
  }
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b08a      	sub	sp, #40	; 0x28
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d07c      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d023      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f983 	bl	8001f48 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c42:	e016      	b.n	8001c72 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d004      	beq.n	8001c58 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
 8001c56:	e00c      	b.n	8001c72 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d004      	beq.n	8001c6c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6a:	e002      	b.n	8001c72 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f986 	bl	8001f7e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d024      	beq.n	8001cc6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f962 	bl	8001f5a <HAL_CAN_TxMailbox1CompleteCallback>
 8001c96:	e016      	b.n	8001cc6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d004      	beq.n	8001cac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8001caa:	e00c      	b.n	8001cc6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d004      	beq.n	8001cc0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbe:	e002      	b.n	8001cc6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f965 	bl	8001f90 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d024      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f941 	bl	8001f6c <HAL_CAN_TxMailbox2CompleteCallback>
 8001cea:	e016      	b.n	8001d1a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfe:	e00c      	b.n	8001d1a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
 8001d12:	e002      	b.n	8001d1a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f944 	bl	8001fa2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00c      	beq.n	8001d3e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d007      	beq.n	8001d3e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2210      	movs	r2, #16
 8001d3c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00b      	beq.n	8001d60 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d006      	beq.n	8001d60 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2208      	movs	r2, #8
 8001d58:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f92a 	bl	8001fb4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7fe fc35 	bl	80005e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00c      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d007      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2210      	movs	r2, #16
 8001da0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00b      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2208      	movs	r2, #8
 8001dbc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f90a 	bl	8001fd8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d009      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8f2 	bl	8001fc6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00b      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2210      	movs	r2, #16
 8001dfc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8f3 	bl	8001fea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f8eb 	bl	8001ffc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d07b      	beq.n	8001f28 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d072      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d043      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d03e      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ea8:	2b60      	cmp	r3, #96	; 0x60
 8001eaa:	d02b      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x32a>
 8001eac:	2b60      	cmp	r3, #96	; 0x60
 8001eae:	d82e      	bhi.n	8001f0e <HAL_CAN_IRQHandler+0x334>
 8001eb0:	2b50      	cmp	r3, #80	; 0x50
 8001eb2:	d022      	beq.n	8001efa <HAL_CAN_IRQHandler+0x320>
 8001eb4:	2b50      	cmp	r3, #80	; 0x50
 8001eb6:	d82a      	bhi.n	8001f0e <HAL_CAN_IRQHandler+0x334>
 8001eb8:	2b40      	cmp	r3, #64	; 0x40
 8001eba:	d019      	beq.n	8001ef0 <HAL_CAN_IRQHandler+0x316>
 8001ebc:	2b40      	cmp	r3, #64	; 0x40
 8001ebe:	d826      	bhi.n	8001f0e <HAL_CAN_IRQHandler+0x334>
 8001ec0:	2b30      	cmp	r3, #48	; 0x30
 8001ec2:	d010      	beq.n	8001ee6 <HAL_CAN_IRQHandler+0x30c>
 8001ec4:	2b30      	cmp	r3, #48	; 0x30
 8001ec6:	d822      	bhi.n	8001f0e <HAL_CAN_IRQHandler+0x334>
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d002      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0x2f8>
 8001ecc:	2b20      	cmp	r3, #32
 8001ece:	d005      	beq.n	8001edc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ed0:	e01d      	b.n	8001f0e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eda:	e019      	b.n	8001f10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ee4:	e014      	b.n	8001f10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	f043 0320 	orr.w	r3, r3, #32
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eee:	e00f      	b.n	8001f10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ef8:	e00a      	b.n	8001f10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f02:	e005      	b.n	8001f10 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f0c:	e000      	b.n	8001f10 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f0e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f1e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2204      	movs	r2, #4
 8001f26:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f867 	bl	800200e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr

08001f7e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr

0800200e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800204c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	2b00      	cmp	r3, #0
 8002094:	db0b      	blt.n	80020ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	4906      	ldr	r1, [pc, #24]	; (80020b8 <__NVIC_EnableIRQ+0x34>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	2001      	movs	r0, #1
 80020a6:	fa00 f202 	lsl.w	r2, r0, r2
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100

080020bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	db0a      	blt.n	80020e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	490c      	ldr	r1, [pc, #48]	; (8002108 <__NVIC_SetPriority+0x4c>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	440b      	add	r3, r1
 80020e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e4:	e00a      	b.n	80020fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4908      	ldr	r1, [pc, #32]	; (800210c <__NVIC_SetPriority+0x50>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3b04      	subs	r3, #4
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	440b      	add	r3, r1
 80020fa:	761a      	strb	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f1c3 0307 	rsb	r3, r3, #7
 800212a:	2b04      	cmp	r3, #4
 800212c:	bf28      	it	cs
 800212e:	2304      	movcs	r3, #4
 8002130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3304      	adds	r3, #4
 8002136:	2b06      	cmp	r3, #6
 8002138:	d902      	bls.n	8002140 <NVIC_EncodePriority+0x30>
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3b03      	subs	r3, #3
 800213e:	e000      	b.n	8002142 <NVIC_EncodePriority+0x32>
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	401a      	ands	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002158:	f04f 31ff 	mov.w	r1, #4294967295
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43d9      	mvns	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	4313      	orrs	r3, r2
         );
}
 800216a:	4618      	mov	r0, r3
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002184:	d301      	bcc.n	800218a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002186:	2301      	movs	r3, #1
 8002188:	e00f      	b.n	80021aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218a:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <SysTick_Config+0x40>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002192:	210f      	movs	r1, #15
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f7ff ff90 	bl	80020bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SysTick_Config+0x40>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <SysTick_Config+0x40>)
 80021a4:	2207      	movs	r2, #7
 80021a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	e000e010 	.word	0xe000e010

080021b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff2d 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e0:	f7ff ff42 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7ff ff90 	bl	8002110 <NVIC_EncodePriority>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff5f 	bl	80020bc <__NVIC_SetPriority>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff35 	bl	8002084 <__NVIC_EnableIRQ>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ffa2 	bl	8002174 <SysTick_Config>
 8002230:	4603      	mov	r3, r0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800223c:	b480      	push	{r7}
 800223e:	b08b      	sub	sp, #44	; 0x2c
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224e:	e169      	b.n	8002524 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002250:	2201      	movs	r2, #1
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	429a      	cmp	r2, r3
 800226a:	f040 8158 	bne.w	800251e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4a9a      	ldr	r2, [pc, #616]	; (80024dc <HAL_GPIO_Init+0x2a0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d05e      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 8002278:	4a98      	ldr	r2, [pc, #608]	; (80024dc <HAL_GPIO_Init+0x2a0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d875      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 800227e:	4a98      	ldr	r2, [pc, #608]	; (80024e0 <HAL_GPIO_Init+0x2a4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d058      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 8002284:	4a96      	ldr	r2, [pc, #600]	; (80024e0 <HAL_GPIO_Init+0x2a4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d86f      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 800228a:	4a96      	ldr	r2, [pc, #600]	; (80024e4 <HAL_GPIO_Init+0x2a8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d052      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 8002290:	4a94      	ldr	r2, [pc, #592]	; (80024e4 <HAL_GPIO_Init+0x2a8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d869      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 8002296:	4a94      	ldr	r2, [pc, #592]	; (80024e8 <HAL_GPIO_Init+0x2ac>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d04c      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 800229c:	4a92      	ldr	r2, [pc, #584]	; (80024e8 <HAL_GPIO_Init+0x2ac>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d863      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 80022a2:	4a92      	ldr	r2, [pc, #584]	; (80024ec <HAL_GPIO_Init+0x2b0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d046      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 80022a8:	4a90      	ldr	r2, [pc, #576]	; (80024ec <HAL_GPIO_Init+0x2b0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d85d      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 80022ae:	2b12      	cmp	r3, #18
 80022b0:	d82a      	bhi.n	8002308 <HAL_GPIO_Init+0xcc>
 80022b2:	2b12      	cmp	r3, #18
 80022b4:	d859      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <HAL_GPIO_Init+0x80>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	08002337 	.word	0x08002337
 80022c0:	08002311 	.word	0x08002311
 80022c4:	08002323 	.word	0x08002323
 80022c8:	08002365 	.word	0x08002365
 80022cc:	0800236b 	.word	0x0800236b
 80022d0:	0800236b 	.word	0x0800236b
 80022d4:	0800236b 	.word	0x0800236b
 80022d8:	0800236b 	.word	0x0800236b
 80022dc:	0800236b 	.word	0x0800236b
 80022e0:	0800236b 	.word	0x0800236b
 80022e4:	0800236b 	.word	0x0800236b
 80022e8:	0800236b 	.word	0x0800236b
 80022ec:	0800236b 	.word	0x0800236b
 80022f0:	0800236b 	.word	0x0800236b
 80022f4:	0800236b 	.word	0x0800236b
 80022f8:	0800236b 	.word	0x0800236b
 80022fc:	0800236b 	.word	0x0800236b
 8002300:	08002319 	.word	0x08002319
 8002304:	0800232d 	.word	0x0800232d
 8002308:	4a79      	ldr	r2, [pc, #484]	; (80024f0 <HAL_GPIO_Init+0x2b4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800230e:	e02c      	b.n	800236a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	623b      	str	r3, [r7, #32]
          break;
 8002316:	e029      	b.n	800236c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	3304      	adds	r3, #4
 800231e:	623b      	str	r3, [r7, #32]
          break;
 8002320:	e024      	b.n	800236c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	3308      	adds	r3, #8
 8002328:	623b      	str	r3, [r7, #32]
          break;
 800232a:	e01f      	b.n	800236c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	330c      	adds	r3, #12
 8002332:	623b      	str	r3, [r7, #32]
          break;
 8002334:	e01a      	b.n	800236c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800233e:	2304      	movs	r3, #4
 8002340:	623b      	str	r3, [r7, #32]
          break;
 8002342:	e013      	b.n	800236c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d105      	bne.n	8002358 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800234c:	2308      	movs	r3, #8
 800234e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	611a      	str	r2, [r3, #16]
          break;
 8002356:	e009      	b.n	800236c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002358:	2308      	movs	r3, #8
 800235a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	615a      	str	r2, [r3, #20]
          break;
 8002362:	e003      	b.n	800236c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
          break;
 8002368:	e000      	b.n	800236c <HAL_GPIO_Init+0x130>
          break;
 800236a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2bff      	cmp	r3, #255	; 0xff
 8002370:	d801      	bhi.n	8002376 <HAL_GPIO_Init+0x13a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	e001      	b.n	800237a <HAL_GPIO_Init+0x13e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3304      	adds	r3, #4
 800237a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2bff      	cmp	r3, #255	; 0xff
 8002380:	d802      	bhi.n	8002388 <HAL_GPIO_Init+0x14c>
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	e002      	b.n	800238e <HAL_GPIO_Init+0x152>
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	3b08      	subs	r3, #8
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	210f      	movs	r1, #15
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	401a      	ands	r2, r3
 80023a0:	6a39      	ldr	r1, [r7, #32]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	431a      	orrs	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80b1 	beq.w	800251e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023bc:	4b4d      	ldr	r3, [pc, #308]	; (80024f4 <HAL_GPIO_Init+0x2b8>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	4a4c      	ldr	r2, [pc, #304]	; (80024f4 <HAL_GPIO_Init+0x2b8>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6193      	str	r3, [r2, #24]
 80023c8:	4b4a      	ldr	r3, [pc, #296]	; (80024f4 <HAL_GPIO_Init+0x2b8>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023d4:	4a48      	ldr	r2, [pc, #288]	; (80024f8 <HAL_GPIO_Init+0x2bc>)
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	220f      	movs	r2, #15
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a40      	ldr	r2, [pc, #256]	; (80024fc <HAL_GPIO_Init+0x2c0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d013      	beq.n	8002428 <HAL_GPIO_Init+0x1ec>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a3f      	ldr	r2, [pc, #252]	; (8002500 <HAL_GPIO_Init+0x2c4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00d      	beq.n	8002424 <HAL_GPIO_Init+0x1e8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a3e      	ldr	r2, [pc, #248]	; (8002504 <HAL_GPIO_Init+0x2c8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d007      	beq.n	8002420 <HAL_GPIO_Init+0x1e4>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a3d      	ldr	r2, [pc, #244]	; (8002508 <HAL_GPIO_Init+0x2cc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d101      	bne.n	800241c <HAL_GPIO_Init+0x1e0>
 8002418:	2303      	movs	r3, #3
 800241a:	e006      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 800241c:	2304      	movs	r3, #4
 800241e:	e004      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 8002420:	2302      	movs	r3, #2
 8002422:	e002      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 8002428:	2300      	movs	r3, #0
 800242a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242c:	f002 0203 	and.w	r2, r2, #3
 8002430:	0092      	lsls	r2, r2, #2
 8002432:	4093      	lsls	r3, r2
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800243a:	492f      	ldr	r1, [pc, #188]	; (80024f8 <HAL_GPIO_Init+0x2bc>)
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3302      	adds	r3, #2
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d006      	beq.n	8002462 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002454:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	492c      	ldr	r1, [pc, #176]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002462:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	43db      	mvns	r3, r3
 800246a:	4928      	ldr	r1, [pc, #160]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800246c:	4013      	ands	r3, r2
 800246e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	4922      	ldr	r1, [pc, #136]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	60cb      	str	r3, [r1, #12]
 8002488:	e006      	b.n	8002498 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	43db      	mvns	r3, r3
 8002492:	491e      	ldr	r1, [pc, #120]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002494:	4013      	ands	r3, r2
 8002496:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d006      	beq.n	80024b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	4918      	ldr	r1, [pc, #96]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
 80024b0:	e006      	b.n	80024c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	4914      	ldr	r1, [pc, #80]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024bc:	4013      	ands	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d021      	beq.n	8002510 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	490e      	ldr	r1, [pc, #56]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
 80024d8:	e021      	b.n	800251e <HAL_GPIO_Init+0x2e2>
 80024da:	bf00      	nop
 80024dc:	10320000 	.word	0x10320000
 80024e0:	10310000 	.word	0x10310000
 80024e4:	10220000 	.word	0x10220000
 80024e8:	10210000 	.word	0x10210000
 80024ec:	10120000 	.word	0x10120000
 80024f0:	10110000 	.word	0x10110000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40010800 	.word	0x40010800
 8002500:	40010c00 	.word	0x40010c00
 8002504:	40011000 	.word	0x40011000
 8002508:	40011400 	.word	0x40011400
 800250c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_GPIO_Init+0x304>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	43db      	mvns	r3, r3
 8002518:	4909      	ldr	r1, [pc, #36]	; (8002540 <HAL_GPIO_Init+0x304>)
 800251a:	4013      	ands	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	3301      	adds	r3, #1
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	f47f ae8e 	bne.w	8002250 <HAL_GPIO_Init+0x14>
  }
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	372c      	adds	r7, #44	; 0x2c
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	40010400 	.word	0x40010400

08002544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
 8002550:	4613      	mov	r3, r2
 8002552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002554:	787b      	ldrb	r3, [r7, #1]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002560:	e003      	b.n	800256a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	041a      	lsls	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	611a      	str	r2, [r3, #16]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4013      	ands	r3, r2
 800258c:	041a      	lsls	r2, r3, #16
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	43d9      	mvns	r1, r3
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	400b      	ands	r3, r1
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	611a      	str	r2, [r3, #16]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e272      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8087 	beq.w	80026d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c8:	4b92      	ldr	r3, [pc, #584]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d00c      	beq.n	80025ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025d4:	4b8f      	ldr	r3, [pc, #572]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d112      	bne.n	8002606 <HAL_RCC_OscConfig+0x5e>
 80025e0:	4b8c      	ldr	r3, [pc, #560]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d10b      	bne.n	8002606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	4b89      	ldr	r3, [pc, #548]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d06c      	beq.n	80026d4 <HAL_RCC_OscConfig+0x12c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d168      	bne.n	80026d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e24c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x76>
 8002610:	4b80      	ldr	r3, [pc, #512]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a7f      	ldr	r2, [pc, #508]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e02e      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x98>
 8002626:	4b7b      	ldr	r3, [pc, #492]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7a      	ldr	r2, [pc, #488]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b78      	ldr	r3, [pc, #480]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a77      	ldr	r2, [pc, #476]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0xbc>
 800264a:	4b72      	ldr	r3, [pc, #456]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a71      	ldr	r2, [pc, #452]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b6f      	ldr	r3, [pc, #444]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6e      	ldr	r2, [pc, #440]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 8002664:	4b6b      	ldr	r3, [pc, #428]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6a      	ldr	r2, [pc, #424]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b68      	ldr	r3, [pc, #416]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a67      	ldr	r2, [pc, #412]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fe4e 	bl	8001324 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe fe4a 	bl	8001324 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e200      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b5d      	ldr	r3, [pc, #372]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xe4>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe fe3a 	bl	8001324 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe fe36 	bl	8001324 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1ec      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	4b53      	ldr	r3, [pc, #332]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x10c>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d063      	beq.n	80027aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e2:	4b4c      	ldr	r3, [pc, #304]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ee:	4b49      	ldr	r3, [pc, #292]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d11c      	bne.n	8002734 <HAL_RCC_OscConfig+0x18c>
 80026fa:	4b46      	ldr	r3, [pc, #280]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	4b43      	ldr	r3, [pc, #268]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x176>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e1c0      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4939      	ldr	r1, [pc, #228]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	e03a      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <HAL_RCC_OscConfig+0x270>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7fe fdef 	bl	8001324 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274a:	f7fe fdeb 	bl	8001324 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1a1      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4927      	ldr	r1, [pc, #156]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277e:	4b26      	ldr	r3, [pc, #152]	; (8002818 <HAL_RCC_OscConfig+0x270>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe fdce 	bl	8001324 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278c:	f7fe fdca 	bl	8001324 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e180      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d03a      	beq.n	800282c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d019      	beq.n	80027f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <HAL_RCC_OscConfig+0x274>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c4:	f7fe fdae 	bl	8001324 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027cc:	f7fe fdaa 	bl	8001324 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e160      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027ea:	2001      	movs	r0, #1
 80027ec:	f000 face 	bl	8002d8c <RCC_Delay>
 80027f0:	e01c      	b.n	800282c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_RCC_OscConfig+0x274>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f8:	f7fe fd94 	bl	8001324 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fe:	e00f      	b.n	8002820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7fe fd90 	bl	8001324 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d908      	bls.n	8002820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e146      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	42420000 	.word	0x42420000
 800281c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	4b92      	ldr	r3, [pc, #584]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e9      	bne.n	8002800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a6 	beq.w	8002986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4b8b      	ldr	r3, [pc, #556]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	4b88      	ldr	r3, [pc, #544]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4a87      	ldr	r2, [pc, #540]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	61d3      	str	r3, [r2, #28]
 8002856:	4b85      	ldr	r3, [pc, #532]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b82      	ldr	r3, [pc, #520]	; (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d118      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002872:	4b7f      	ldr	r3, [pc, #508]	; (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a7e      	ldr	r2, [pc, #504]	; (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287e:	f7fe fd51 	bl	8001324 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002886:	f7fe fd4d 	bl	8001324 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	; 0x64
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e103      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	4b75      	ldr	r3, [pc, #468]	; (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x312>
 80028ac:	4b6f      	ldr	r3, [pc, #444]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4a6e      	ldr	r2, [pc, #440]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6213      	str	r3, [r2, #32]
 80028b8:	e02d      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x334>
 80028c2:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a69      	ldr	r2, [pc, #420]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	6213      	str	r3, [r2, #32]
 80028ce:	4b67      	ldr	r3, [pc, #412]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4a66      	ldr	r2, [pc, #408]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	f023 0304 	bic.w	r3, r3, #4
 80028d8:	6213      	str	r3, [r2, #32]
 80028da:	e01c      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d10c      	bne.n	80028fe <HAL_RCC_OscConfig+0x356>
 80028e4:	4b61      	ldr	r3, [pc, #388]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4a60      	ldr	r2, [pc, #384]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	6213      	str	r3, [r2, #32]
 80028f0:	4b5e      	ldr	r3, [pc, #376]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4a5d      	ldr	r2, [pc, #372]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6213      	str	r3, [r2, #32]
 80028fc:	e00b      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028fe:	4b5b      	ldr	r3, [pc, #364]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a5a      	ldr	r2, [pc, #360]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6213      	str	r3, [r2, #32]
 800290a:	4b58      	ldr	r3, [pc, #352]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4a57      	ldr	r2, [pc, #348]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d015      	beq.n	800294a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7fe fd01 	bl	8001324 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe fcfd 	bl	8001324 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	; 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e0b1      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	4b4b      	ldr	r3, [pc, #300]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ee      	beq.n	8002926 <HAL_RCC_OscConfig+0x37e>
 8002948:	e014      	b.n	8002974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7fe fceb 	bl	8001324 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe fce7 	bl	8001324 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e09b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002968:	4b40      	ldr	r3, [pc, #256]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ee      	bne.n	8002952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297a:	4b3c      	ldr	r3, [pc, #240]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4a3b      	ldr	r2, [pc, #236]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002984:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8087 	beq.w	8002a9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002990:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d061      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d146      	bne.n	8002a32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a4:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <HAL_RCC_OscConfig+0x4cc>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe fcbb 	bl	8001324 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe fcb7 	bl	8001324 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e06d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c4:	4b29      	ldr	r3, [pc, #164]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d108      	bne.n	80029ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029da:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4921      	ldr	r1, [pc, #132]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ec:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a19      	ldr	r1, [r3, #32]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	430b      	orrs	r3, r1
 80029fe:	491b      	ldr	r1, [pc, #108]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a04:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <HAL_RCC_OscConfig+0x4cc>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fc8b 	bl	8001324 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a12:	f7fe fc87 	bl	8001324 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e03d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x46a>
 8002a30:	e035      	b.n	8002a9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <HAL_RCC_OscConfig+0x4cc>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fc74 	bl	8001324 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe fc70 	bl	8001324 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e026      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x498>
 8002a5e:	e01e      	b.n	8002a9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e019      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40007000 	.word	0x40007000
 8002a74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x500>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000

08002aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0d0      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b6a      	ldr	r3, [pc, #424]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d910      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b67      	ldr	r3, [pc, #412]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 0207 	bic.w	r2, r3, #7
 8002ad6:	4965      	ldr	r1, [pc, #404]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0b8      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b08:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a58      	ldr	r2, [pc, #352]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b20:	4b53      	ldr	r3, [pc, #332]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a52      	ldr	r2, [pc, #328]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b50      	ldr	r3, [pc, #320]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	494d      	ldr	r1, [pc, #308]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d040      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d115      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e07f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6a:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e073      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e06b      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f023 0203 	bic.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4936      	ldr	r1, [pc, #216]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b9c:	f7fe fbc2 	bl	8001324 <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7fe fbbe 	bl	8001324 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e053      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 020c 	and.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1eb      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d210      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0207 	bic.w	r2, r3, #7
 8002be2:	4922      	ldr	r1, [pc, #136]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e032      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4916      	ldr	r1, [pc, #88]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	490e      	ldr	r1, [pc, #56]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c3a:	f000 f821 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	490a      	ldr	r1, [pc, #40]	; (8002c74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4c:	5ccb      	ldrb	r3, [r1, r3]
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <HAL_RCC_ClockConfig+0x1cc>)
 8002c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_ClockConfig+0x1d0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fb20 	bl	80012a0 <HAL_InitTick>

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40022000 	.word	0x40022000
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08005150 	.word	0x08005150
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	20000008 	.word	0x20000008

08002c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d002      	beq.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x30>
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d003      	beq.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x36>
 8002cae:	e027      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cb0:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cb2:	613b      	str	r3, [r7, #16]
      break;
 8002cb4:	e027      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	0c9b      	lsrs	r3, r3, #18
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	4a17      	ldr	r2, [pc, #92]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cc0:	5cd3      	ldrb	r3, [r2, r3]
 8002cc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d010      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	0c5b      	lsrs	r3, r3, #17
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	4a11      	ldr	r2, [pc, #68]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ce2:	fb03 f202 	mul.w	r2, r3, r2
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e004      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a0c      	ldr	r2, [pc, #48]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cf4:	fb02 f303 	mul.w	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	613b      	str	r3, [r7, #16]
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d02:	613b      	str	r3, [r7, #16]
      break;
 8002d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d06:	693b      	ldr	r3, [r7, #16]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	007a1200 	.word	0x007a1200
 8002d1c:	08005168 	.word	0x08005168
 8002d20:	08005178 	.word	0x08005178
 8002d24:	003d0900 	.word	0x003d0900

08002d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d2c:	4b02      	ldr	r3, [pc, #8]	; (8002d38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	20000000 	.word	0x20000000

08002d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d40:	f7ff fff2 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	4903      	ldr	r1, [pc, #12]	; (8002d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d52:	5ccb      	ldrb	r3, [r1, r3]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	08005160 	.word	0x08005160

08002d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d68:	f7ff ffde 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	0adb      	lsrs	r3, r3, #11
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4903      	ldr	r1, [pc, #12]	; (8002d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	08005160 	.word	0x08005160

08002d8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <RCC_Delay+0x34>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <RCC_Delay+0x38>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	0a5b      	lsrs	r3, r3, #9
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002da8:	bf00      	nop
  }
  while (Delay --);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1e5a      	subs	r2, r3, #1
 8002dae:	60fa      	str	r2, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f9      	bne.n	8002da8 <RCC_Delay+0x1c>
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	10624dd3 	.word	0x10624dd3

08002dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e042      	b.n	8002e60 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fd fcc4 	bl	800077c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2224      	movs	r2, #36	; 0x24
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f91d 	bl	800304c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695a      	ldr	r2, [r3, #20]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d16d      	bne.n	8002f64 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <HAL_UART_Transmit+0x2c>
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e066      	b.n	8002f66 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2221      	movs	r2, #33	; 0x21
 8002ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ea6:	f7fe fa3d 	bl	8001324 <HAL_GetTick>
 8002eaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	88fa      	ldrh	r2, [r7, #6]
 8002eb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	88fa      	ldrh	r2, [r7, #6]
 8002eb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec0:	d108      	bne.n	8002ed4 <HAL_UART_Transmit+0x6c>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d104      	bne.n	8002ed4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	e003      	b.n	8002edc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002edc:	e02a      	b.n	8002f34 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f840 	bl	8002f6e <UART_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e036      	b.n	8002f66 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10b      	bne.n	8002f16 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	3302      	adds	r3, #2
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	e007      	b.n	8002f26 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	781a      	ldrb	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	3301      	adds	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1cf      	bne.n	8002ede <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2200      	movs	r2, #0
 8002f46:	2140      	movs	r1, #64	; 0x40
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f810 	bl	8002f6e <UART_WaitOnFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e006      	b.n	8002f66 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e000      	b.n	8002f66 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f64:	2302      	movs	r3, #2
  }
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b090      	sub	sp, #64	; 0x40
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f7e:	e050      	b.n	8003022 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f86:	d04c      	beq.n	8003022 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f8e:	f7fe f9c9 	bl	8001324 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d241      	bcs.n	8003022 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fbe:	637a      	str	r2, [r7, #52]	; 0x34
 8002fc0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fc6:	e841 2300 	strex	r3, r2, [r1]
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e5      	bne.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3314      	adds	r3, #20
 8002fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	e853 3f00 	ldrex	r3, [r3]
 8002fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3314      	adds	r3, #20
 8002ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ff2:	623a      	str	r2, [r7, #32]
 8002ff4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff6:	69f9      	ldr	r1, [r7, #28]
 8002ff8:	6a3a      	ldr	r2, [r7, #32]
 8002ffa:	e841 2300 	strex	r3, r2, [r1]
 8002ffe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1e5      	bne.n	8002fd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e00f      	b.n	8003042 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4013      	ands	r3, r2
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	429a      	cmp	r2, r3
 8003030:	bf0c      	ite	eq
 8003032:	2301      	moveq	r3, #1
 8003034:	2300      	movne	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	429a      	cmp	r2, r3
 800303e:	d09f      	beq.n	8002f80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3740      	adds	r7, #64	; 0x40
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003086:	f023 030c 	bic.w	r3, r3, #12
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	68b9      	ldr	r1, [r7, #8]
 8003090:	430b      	orrs	r3, r1
 8003092:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a2c      	ldr	r2, [pc, #176]	; (8003160 <UART_SetConfig+0x114>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d103      	bne.n	80030bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030b4:	f7ff fe56 	bl	8002d64 <HAL_RCC_GetPCLK2Freq>
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	e002      	b.n	80030c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030bc:	f7ff fe3e 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 80030c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	009a      	lsls	r2, r3, #2
 80030cc:	441a      	add	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	4a22      	ldr	r2, [pc, #136]	; (8003164 <UART_SetConfig+0x118>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	0119      	lsls	r1, r3, #4
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	009a      	lsls	r2, r3, #2
 80030ec:	441a      	add	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f8:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <UART_SetConfig+0x118>)
 80030fa:	fba3 0302 	umull	r0, r3, r3, r2
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2064      	movs	r0, #100	; 0x64
 8003102:	fb00 f303 	mul.w	r3, r0, r3
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	3332      	adds	r3, #50	; 0x32
 800310c:	4a15      	ldr	r2, [pc, #84]	; (8003164 <UART_SetConfig+0x118>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003118:	4419      	add	r1, r3
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	009a      	lsls	r2, r3, #2
 8003124:	441a      	add	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <UART_SetConfig+0x118>)
 8003132:	fba3 0302 	umull	r0, r3, r3, r2
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2064      	movs	r0, #100	; 0x64
 800313a:	fb00 f303 	mul.w	r3, r0, r3
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	3332      	adds	r3, #50	; 0x32
 8003144:	4a07      	ldr	r2, [pc, #28]	; (8003164 <UART_SetConfig+0x118>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	f003 020f 	and.w	r2, r3, #15
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	440a      	add	r2, r1
 8003156:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40013800 	.word	0x40013800
 8003164:	51eb851f 	.word	0x51eb851f

08003168 <isotp_user_send_can>:
///////////////////////////////////////////////////////
///                 STATIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_user_send_can(const uint32_t arbitration_id, const uint8_t *data,
		const uint8_t size) {
 8003168:	b580      	push	{r7, lr}
 800316a:	b08e      	sub	sp, #56	; 0x38
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	4613      	mov	r3, r2
 8003174:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef TxHeader = { 0 };
 8003176:	f107 0318 	add.w	r3, r7, #24
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	605a      	str	r2, [r3, #4]
 8003180:	609a      	str	r2, [r3, #8]
 8003182:	60da      	str	r2, [r3, #12]
 8003184:	611a      	str	r2, [r3, #16]
 8003186:	615a      	str	r2, [r3, #20]
	TxHeader.DLC = size;
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.RTR = CAN_RTR_DATA;
 800318c:	2300      	movs	r3, #0
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.IDE = CAN_ID_STD;
 8003190:	2300      	movs	r3, #0
 8003192:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = arbitration_id;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	61bb      	str	r3, [r7, #24]
	uint32_t TxMailBox;
	uint32_t FreeLevel = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8003198:	480d      	ldr	r0, [pc, #52]	; (80031d0 <isotp_user_send_can+0x68>)
 800319a:	f7fe fba4 	bl	80018e6 <HAL_CAN_GetTxMailboxesFreeLevel>
 800319e:	6378      	str	r0, [r7, #52]	; 0x34
	if (FreeLevel == 0) return ISOTP_RET_ERROR;
 80031a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d102      	bne.n	80031ac <isotp_user_send_can+0x44>
 80031a6:	f04f 33ff 	mov.w	r3, #4294967295
 80031aa:	e00c      	b.n	80031c6 <isotp_user_send_can+0x5e>
	uint8_t ret = HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailBox);
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	f107 0118 	add.w	r1, r7, #24
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	4806      	ldr	r0, [pc, #24]	; (80031d0 <isotp_user_send_can+0x68>)
 80031b8:	f7fe fac6 	bl	8001748 <HAL_CAN_AddTxMessage>
 80031bc:	4603      	mov	r3, r0
 80031be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	return ret;
 80031c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3738      	adds	r7, #56	; 0x38
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000190 	.word	0x20000190

080031d4 <isotp_user_get_ms>:

uint32_t isotp_user_get_ms(void){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80031d8:	f7fe f8a4 	bl	8001324 <HAL_GetTick>
 80031dc:	4603      	mov	r3, r0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <isotp_ms_to_st_min>:

/* st_min to microsecond */
static uint8_t isotp_ms_to_st_min(uint8_t ms) {
 80031e2:	b480      	push	{r7}
 80031e4:	b085      	sub	sp, #20
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	71fb      	strb	r3, [r7, #7]
    uint8_t st_min;

    st_min = ms;
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	73fb      	strb	r3, [r7, #15]
    if (st_min > 0x7F) {
 80031f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da01      	bge.n	80031fc <isotp_ms_to_st_min+0x1a>
        st_min = 0x7F;
 80031f8:	237f      	movs	r3, #127	; 0x7f
 80031fa:	73fb      	strb	r3, [r7, #15]
    }

    return st_min;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <isotp_st_min_to_ms>:

/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) {
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9) {
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	2bf0      	cmp	r3, #240	; 0xf0
 8003216:	d905      	bls.n	8003224 <isotp_st_min_to_ms+0x1c>
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	2bf9      	cmp	r3, #249	; 0xf9
 800321c:	d802      	bhi.n	8003224 <isotp_st_min_to_ms+0x1c>
        ms = 1;
 800321e:	2301      	movs	r3, #1
 8003220:	73fb      	strb	r3, [r7, #15]
 8003222:	e008      	b.n	8003236 <isotp_st_min_to_ms+0x2e>
    } else if (st_min <= 0x7F) {
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	2b00      	cmp	r3, #0
 800322a:	db02      	blt.n	8003232 <isotp_st_min_to_ms+0x2a>
        ms = st_min;
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	73fb      	strb	r3, [r7, #15]
 8003230:	e001      	b.n	8003236 <isotp_st_min_to_ms+0x2e>
    } else {
        ms = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]
    }

    return ms;
 8003236:	7bfb      	ldrb	r3, [r7, #15]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <isotp_send_flow_control>:

static int isotp_send_flow_control(IsoTpLink* link, uint8_t flow_status, uint8_t block_size, uint8_t st_min_ms) {
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	4608      	mov	r0, r1
 800324c:	4611      	mov	r1, r2
 800324e:	461a      	mov	r2, r3
 8003250:	4603      	mov	r3, r0
 8003252:	70fb      	strb	r3, [r7, #3]
 8003254:	460b      	mov	r3, r1
 8003256:	70bb      	strb	r3, [r7, #2]
 8003258:	4613      	mov	r3, r2
 800325a:	707b      	strb	r3, [r7, #1]

    IsoTpCanMessage message;
    int ret;

    /* setup message  */
    message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
 800325c:	7b3b      	ldrb	r3, [r7, #12]
 800325e:	2203      	movs	r2, #3
 8003260:	f362 1307 	bfi	r3, r2, #4, #4
 8003264:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.FS = flow_status;
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	b2da      	uxtb	r2, r3
 800326e:	7b3b      	ldrb	r3, [r7, #12]
 8003270:	f362 0303 	bfi	r3, r2, #0, #4
 8003274:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.BS = block_size;
 8003276:	78bb      	ldrb	r3, [r7, #2]
 8003278:	737b      	strb	r3, [r7, #13]
    message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
 800327a:	787b      	ldrb	r3, [r7, #1]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ffb0 	bl	80031e2 <isotp_ms_to_st_min>
 8003282:	4603      	mov	r3, r0
 8003284:	73bb      	strb	r3, [r7, #14]

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.flow_control.reserve, 0x55, sizeof(message.as.flow_control.reserve));
 8003286:	f107 030c 	add.w	r3, r7, #12
 800328a:	3303      	adds	r3, #3
 800328c:	2205      	movs	r2, #5
 800328e:	2155      	movs	r1, #85	; 0x55
 8003290:	4618      	mov	r0, r3
 8003292:	f000 ff13 	bl	80040bc <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f107 010c 	add.w	r1, r7, #12
 800329e:	2208      	movs	r2, #8
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ff61 	bl	8003168 <isotp_user_send_can>
 80032a6:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            3);
#endif

    return ret;
 80032a8:	697b      	ldr	r3, [r7, #20]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <isotp_send_single_frame>:

static int isotp_send_single_frame(IsoTpLink* link, uint32_t id) {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	895b      	ldrh	r3, [r3, #10]
 80032c2:	2b07      	cmp	r3, #7
 80032c4:	d905      	bls.n	80032d2 <isotp_send_single_frame+0x1e>
 80032c6:	4b1d      	ldr	r3, [pc, #116]	; (800333c <isotp_send_single_frame+0x88>)
 80032c8:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <isotp_send_single_frame+0x8c>)
 80032ca:	2157      	movs	r1, #87	; 0x57
 80032cc:	481d      	ldr	r0, [pc, #116]	; (8003344 <isotp_send_single_frame+0x90>)
 80032ce:	f000 fc71 	bl	8003bb4 <__assert_func>

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
 80032d2:	7b3b      	ldrb	r3, [r7, #12]
 80032d4:	f36f 1307 	bfc	r3, #4, #4
 80032d8:	733b      	strb	r3, [r7, #12]
    message.as.single_frame.SF_DL = (uint8_t) link->send_size;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	895b      	ldrh	r3, [r3, #10]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	7b3b      	ldrb	r3, [r7, #12]
 80032e6:	f362 0303 	bfi	r3, r2, #0, #4
 80032ea:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	895b      	ldrh	r3, [r3, #10]
 80032f4:	461a      	mov	r2, r3
 80032f6:	f107 030c 	add.w	r3, r7, #12
 80032fa:	3301      	adds	r3, #1
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 ff58 	bl	80041b2 <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.single_frame.data + link->send_size, 0x55, sizeof(message.as.single_frame.data) - link->send_size);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	895b      	ldrh	r3, [r3, #10]
 8003306:	461a      	mov	r2, r3
 8003308:	f107 030c 	add.w	r3, r7, #12
 800330c:	3301      	adds	r3, #1
 800330e:	1898      	adds	r0, r3, r2
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	895b      	ldrh	r3, [r3, #10]
 8003314:	f1c3 0307 	rsb	r3, r3, #7
 8003318:	461a      	mov	r2, r3
 800331a:	2155      	movs	r1, #85	; 0x55
 800331c:	f000 fece 	bl	80040bc <memset>
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 8003320:	f107 030c 	add.w	r3, r7, #12
 8003324:	2208      	movs	r2, #8
 8003326:	4619      	mov	r1, r3
 8003328:	6838      	ldr	r0, [r7, #0]
 800332a:	f7ff ff1d 	bl	8003168 <isotp_user_send_can>
 800332e:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(id,
            message.as.data_array.ptr,
            link->send_size + 1);
#endif

    return ret;
 8003330:	697b      	ldr	r3, [r7, #20]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	080050e0 	.word	0x080050e0
 8003340:	0800517c 	.word	0x0800517c
 8003344:	080050f8 	.word	0x080050f8

08003348 <isotp_send_first_frame>:

static int isotp_send_first_frame(IsoTpLink* link, uint32_t id) {
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
    
    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	895b      	ldrh	r3, [r3, #10]
 8003356:	2b07      	cmp	r3, #7
 8003358:	d805      	bhi.n	8003366 <isotp_send_first_frame+0x1e>
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <isotp_send_first_frame+0x88>)
 800335c:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <isotp_send_first_frame+0x8c>)
 800335e:	2171      	movs	r1, #113	; 0x71
 8003360:	481d      	ldr	r0, [pc, #116]	; (80033d8 <isotp_send_first_frame+0x90>)
 8003362:	f000 fc27 	bl	8003bb4 <__assert_func>

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
 8003366:	7b3b      	ldrb	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f362 1307 	bfi	r3, r2, #4, #4
 800336e:	733b      	strb	r3, [r7, #12]
    message.as.first_frame.FF_DL_low = (uint8_t) link->send_size;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	895b      	ldrh	r3, [r3, #10]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	737b      	strb	r3, [r7, #13]
    message.as.first_frame.FF_DL_high = (uint8_t) (0x0F & (link->send_size >> 8));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	895b      	ldrh	r3, [r3, #10]
 800337c:	0a1b      	lsrs	r3, r3, #8
 800337e:	b29b      	uxth	r3, r3
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	b2da      	uxtb	r2, r3
 8003386:	7b3b      	ldrb	r3, [r7, #12]
 8003388:	f362 0303 	bfi	r3, r2, #0, #4
 800338c:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.first_frame.data, link->send_buffer, sizeof(message.as.first_frame.data));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	f107 030e 	add.w	r3, r7, #14
 8003396:	6811      	ldr	r1, [r2, #0]
 8003398:	6019      	str	r1, [r3, #0]
 800339a:	8892      	ldrh	r2, [r2, #4]
 800339c:	809a      	strh	r2, [r3, #4]

    /* send message */
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	2208      	movs	r2, #8
 80033a4:	4619      	mov	r1, r3
 80033a6:	6838      	ldr	r0, [r7, #0]
 80033a8:	f7ff fede 	bl	8003168 <isotp_user_send_can>
 80033ac:	6178      	str	r0, [r7, #20]
    if (ISOTP_RET_OK == ret) {
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d108      	bne.n	80033c6 <isotp_send_first_frame+0x7e>
        link->send_offset += sizeof(message.as.first_frame.data);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	899b      	ldrh	r3, [r3, #12]
 80033b8:	3306      	adds	r3, #6
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	819a      	strh	r2, [r3, #12]
        link->send_sn = 1;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	739a      	strb	r2, [r3, #14]
    }

    return ret;
 80033c6:	697b      	ldr	r3, [r7, #20]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	0800510c 	.word	0x0800510c
 80033d4:	08005194 	.word	0x08005194
 80033d8:	080050f8 	.word	0x080050f8

080033dc <isotp_send_consecutive_frame>:

static int isotp_send_consecutive_frame(IsoTpLink* link) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
    IsoTpCanMessage message;
    uint16_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	895b      	ldrh	r3, [r3, #10]
 80033e8:	2b07      	cmp	r3, #7
 80033ea:	d805      	bhi.n	80033f8 <isotp_send_consecutive_frame+0x1c>
 80033ec:	4b2d      	ldr	r3, [pc, #180]	; (80034a4 <isotp_send_consecutive_frame+0xc8>)
 80033ee:	4a2e      	ldr	r2, [pc, #184]	; (80034a8 <isotp_send_consecutive_frame+0xcc>)
 80033f0:	218a      	movs	r1, #138	; 0x8a
 80033f2:	482e      	ldr	r0, [pc, #184]	; (80034ac <isotp_send_consecutive_frame+0xd0>)
 80033f4:	f000 fbde 	bl	8003bb4 <__assert_func>

    /* setup message  */
    message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
 80033f8:	7a3b      	ldrb	r3, [r7, #8]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f362 1307 	bfi	r3, r2, #4, #4
 8003400:	723b      	strb	r3, [r7, #8]
    message.as.consecutive_frame.SN = link->send_sn;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	7b9b      	ldrb	r3, [r3, #14]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	b2da      	uxtb	r2, r3
 800340c:	7a3b      	ldrb	r3, [r7, #8]
 800340e:	f362 0303 	bfi	r3, r2, #0, #4
 8003412:	723b      	strb	r3, [r7, #8]
    data_length = link->send_size - link->send_offset;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	895a      	ldrh	r2, [r3, #10]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	899b      	ldrh	r3, [r3, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	82fb      	strh	r3, [r7, #22]
    if (data_length > sizeof(message.as.consecutive_frame.data)) {
 8003420:	8afb      	ldrh	r3, [r7, #22]
 8003422:	2b07      	cmp	r3, #7
 8003424:	d901      	bls.n	800342a <isotp_send_consecutive_frame+0x4e>
        data_length = sizeof(message.as.consecutive_frame.data);
 8003426:	2307      	movs	r3, #7
 8003428:	82fb      	strh	r3, [r7, #22]
    }
    (void) memcpy(message.as.consecutive_frame.data, link->send_buffer + link->send_offset, data_length);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	8992      	ldrh	r2, [r2, #12]
 8003432:	1899      	adds	r1, r3, r2
 8003434:	8afa      	ldrh	r2, [r7, #22]
 8003436:	f107 0308 	add.w	r3, r7, #8
 800343a:	3301      	adds	r3, #1
 800343c:	4618      	mov	r0, r3
 800343e:	f000 feb8 	bl	80041b2 <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.consecutive_frame.data + data_length, 0x55, sizeof(message.as.consecutive_frame.data) - data_length);
 8003442:	8afb      	ldrh	r3, [r7, #22]
 8003444:	f107 0208 	add.w	r2, r7, #8
 8003448:	3201      	adds	r2, #1
 800344a:	18d0      	adds	r0, r2, r3
 800344c:	8afb      	ldrh	r3, [r7, #22]
 800344e:	f1c3 0307 	rsb	r3, r3, #7
 8003452:	461a      	mov	r2, r3
 8003454:	2155      	movs	r1, #85	; 0x55
 8003456:	f000 fe31 	bl	80040bc <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f107 0108 	add.w	r1, r7, #8
 8003462:	2208      	movs	r2, #8
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fe7f 	bl	8003168 <isotp_user_send_can>
 800346a:	6138      	str	r0, [r7, #16]
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            data_length + 1);
#endif
    if (ISOTP_RET_OK == ret) {
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d113      	bne.n	800349a <isotp_send_consecutive_frame+0xbe>
        link->send_offset += data_length;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	899a      	ldrh	r2, [r3, #12]
 8003476:	8afb      	ldrh	r3, [r7, #22]
 8003478:	4413      	add	r3, r2
 800347a:	b29a      	uxth	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	819a      	strh	r2, [r3, #12]
        if (++(link->send_sn) > 0x0F) {
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7b9b      	ldrb	r3, [r3, #14]
 8003484:	3301      	adds	r3, #1
 8003486:	b2da      	uxtb	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	739a      	strb	r2, [r3, #14]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	7b9b      	ldrb	r3, [r3, #14]
 8003490:	2b0f      	cmp	r3, #15
 8003492:	d902      	bls.n	800349a <isotp_send_consecutive_frame+0xbe>
            link->send_sn = 0;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	739a      	strb	r2, [r3, #14]
        }
    }
    
    return ret;
 800349a:	693b      	ldr	r3, [r7, #16]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	0800510c 	.word	0x0800510c
 80034a8:	080051ac 	.word	0x080051ac
 80034ac:	080050f8 	.word	0x080050f8

080034b0 <isotp_receive_single_frame>:

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	4613      	mov	r3, r2
 80034bc:	71fb      	strb	r3, [r7, #7]
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) || (message->as.single_frame.SF_DL > (len - 1))) {
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <isotp_receive_single_frame+0x2e>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	4293      	cmp	r3, r2
 80034dc:	d802      	bhi.n	80034e4 <isotp_receive_single_frame+0x34>
        // isotp_user_debug("Single-frame length too small.");
        return ISOTP_RET_LENGTH;
 80034de:	f06f 0306 	mvn.w	r3, #6
 80034e2:	e014      	b.n	800350e <isotp_receive_single_frame+0x5e>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.single_frame.data, message->as.single_frame.SF_DL);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	1c59      	adds	r1, r3, #1
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	f000 fe5b 	bl	80041b2 <memcpy>
    link->receive_size = message->as.single_frame.SF_DL;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003504:	b2db      	uxtb	r3, r3
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    return ISOTP_RET_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <isotp_receive_first_frame>:

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	4613      	mov	r3, r2
 8003522:	71fb      	strb	r3, [r7, #7]
    uint16_t payload_length;

    if (8 != len) {
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	2b08      	cmp	r3, #8
 8003528:	d002      	beq.n	8003530 <isotp_receive_first_frame+0x1a>
        // isotp_user_debug("First frame should be 8 bytes in length.");
        return ISOTP_RET_LENGTH;
 800352a:	f06f 0306 	mvn.w	r3, #6
 800352e:	e02e      	b.n	800358e <isotp_receive_first_frame+0x78>
    }

    /* check data length */
    payload_length = message->as.first_frame.FF_DL_high;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003538:	b2db      	uxtb	r3, r3
 800353a:	82fb      	strh	r3, [r7, #22]
    payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
 800353c:	8afb      	ldrh	r3, [r7, #22]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	b29a      	uxth	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	785b      	ldrb	r3, [r3, #1]
 8003546:	b29b      	uxth	r3, r3
 8003548:	4413      	add	r3, r2
 800354a:	82fb      	strh	r3, [r7, #22]

    /* should not use multiple frame transmition */
    if (payload_length <= 7) {
 800354c:	8afb      	ldrh	r3, [r7, #22]
 800354e:	2b07      	cmp	r3, #7
 8003550:	d802      	bhi.n	8003558 <isotp_receive_first_frame+0x42>
        // isotp_user_debug("Should not use multiple frame transmission.");
        return ISOTP_RET_LENGTH;
 8003552:	f06f 0306 	mvn.w	r3, #6
 8003556:	e01a      	b.n	800358e <isotp_receive_first_frame+0x78>
    }
    
    if (payload_length > link->receive_buf_size) {
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800355c:	8afa      	ldrh	r2, [r7, #22]
 800355e:	429a      	cmp	r2, r3
 8003560:	d902      	bls.n	8003568 <isotp_receive_first_frame+0x52>
        // isotp_user_debug("Multi-frame response too large for receiving buffer.");
        return ISOTP_RET_OVERFLOW;
 8003562:	f06f 0302 	mvn.w	r3, #2
 8003566:	e012      	b.n	800358e <isotp_receive_first_frame+0x78>
    }
    
    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.first_frame.data, sizeof(message->as.first_frame.data));
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	3302      	adds	r3, #2
 8003570:	2206      	movs	r2, #6
 8003572:	4619      	mov	r1, r3
 8003574:	f000 fe1d 	bl	80041b2 <memcpy>
    link->receive_size = payload_length;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8afa      	ldrh	r2, [r7, #22]
 800357c:	85da      	strh	r2, [r3, #46]	; 0x2e
    link->receive_offset = sizeof(message->as.first_frame.data);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2206      	movs	r2, #6
 8003582:	861a      	strh	r2, [r3, #48]	; 0x30
    link->receive_sn = 1;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    return ISOTP_RET_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <isotp_receive_consecutive_frame>:

static int isotp_receive_consecutive_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8003596:	b580      	push	{r7, lr}
 8003598:	b086      	sub	sp, #24
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	4613      	mov	r3, r2
 80035a2:	71fb      	strb	r3, [r7, #7]
    uint16_t remaining_bytes;
    
    /* check sn */
    if (link->receive_sn != message->as.consecutive_frame.SN) {
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	7812      	ldrb	r2, [r2, #0]
 80035ae:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d002      	beq.n	80035be <isotp_receive_consecutive_frame+0x28>
        return ISOTP_RET_WRONG_SN;
 80035b8:	f06f 0303 	mvn.w	r3, #3
 80035bc:	e035      	b.n	800362a <isotp_receive_consecutive_frame+0x94>
    }

    /* check data length */
    remaining_bytes = link->receive_size - link->receive_offset;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	82fb      	strh	r3, [r7, #22]
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)) {
 80035ca:	8afb      	ldrh	r3, [r7, #22]
 80035cc:	2b07      	cmp	r3, #7
 80035ce:	d901      	bls.n	80035d4 <isotp_receive_consecutive_frame+0x3e>
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
 80035d0:	2307      	movs	r3, #7
 80035d2:	82fb      	strh	r3, [r7, #22]
    }
    if (remaining_bytes > len - 1) {
 80035d4:	79fa      	ldrb	r2, [r7, #7]
 80035d6:	8afb      	ldrh	r3, [r7, #22]
 80035d8:	429a      	cmp	r2, r3
 80035da:	dc02      	bgt.n	80035e2 <isotp_receive_consecutive_frame+0x4c>
        // isotp_user_debug("Consecutive frame too short.");
        return ISOTP_RET_LENGTH;
 80035dc:	f06f 0306 	mvn.w	r3, #6
 80035e0:	e023      	b.n	800362a <isotp_receive_consecutive_frame+0x94>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer + link->receive_offset, message->as.consecutive_frame.data, remaining_bytes);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80035ea:	1898      	adds	r0, r3, r2
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	3301      	adds	r3, #1
 80035f0:	8afa      	ldrh	r2, [r7, #22]
 80035f2:	4619      	mov	r1, r3
 80035f4:	f000 fddd 	bl	80041b2 <memcpy>

    link->receive_offset += remaining_bytes;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80035fc:	8afb      	ldrh	r3, [r7, #22]
 80035fe:	4413      	add	r3, r2
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	861a      	strh	r2, [r3, #48]	; 0x30
    if (++(link->receive_sn) > 0x0F) {
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800360c:	3301      	adds	r3, #1
 800360e:	b2da      	uxtb	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800361c:	2b0f      	cmp	r3, #15
 800361e:	d903      	bls.n	8003628 <isotp_receive_consecutive_frame+0x92>
        link->receive_sn = 0;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }

    return ISOTP_RET_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <isotp_receive_flow_control_frame>:

static int isotp_receive_flow_control_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8003632:	b480      	push	{r7}
 8003634:	b085      	sub	sp, #20
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	4613      	mov	r3, r2
 800363e:	71fb      	strb	r3, [r7, #7]
    /* check message length */
    if (len < 3) {
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d802      	bhi.n	800364c <isotp_receive_flow_control_frame+0x1a>
        // isotp_user_debug("Flow control frame too short.");
        return ISOTP_RET_LENGTH;
 8003646:	f06f 0306 	mvn.w	r3, #6
 800364a:	e000      	b.n	800364e <isotp_receive_flow_control_frame+0x1c>
    }

    return ISOTP_RET_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <isotp_send>:

///////////////////////////////////////////////////////
///                 PUBLIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size) {
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6819      	ldr	r1, [r3, #0]
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f806 	bl	8003680 <isotp_send_with_id>
 8003674:	4603      	mov	r3, r0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <isotp_send_with_id>:

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size) {
 8003680:	b580      	push	{r7, lr}
 8003682:	b0a6      	sub	sp, #152	; 0x98
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	807b      	strh	r3, [r7, #2]
    int ret;

    if (link == 0x0) {
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d102      	bne.n	800369a <isotp_send_with_id+0x1a>
        // isotp_user_debug("Link is null!");
        return ISOTP_RET_ERROR;
 8003694:	f04f 33ff 	mov.w	r3, #4294967295
 8003698:	e057      	b.n	800374a <isotp_send_with_id+0xca>
    }

    if (size > link->send_buf_size) {
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	891b      	ldrh	r3, [r3, #8]
 800369e:	887a      	ldrh	r2, [r7, #2]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d90a      	bls.n	80036ba <isotp_send_with_id+0x3a>
        // isotp_user_debug("Message size too large. Increase ISO_TP_MAX_MESSAGE_SIZE to set a larger buffer\n");
        char message[128];
        sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n", size, link->send_buf_size);
 80036a4:	887a      	ldrh	r2, [r7, #2]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	891b      	ldrh	r3, [r3, #8]
 80036aa:	f107 0014 	add.w	r0, r7, #20
 80036ae:	4929      	ldr	r1, [pc, #164]	; (8003754 <isotp_send_with_id+0xd4>)
 80036b0:	f000 fc0c 	bl	8003ecc <siprintf>
        return ISOTP_RET_OVERFLOW;
 80036b4:	f06f 0302 	mvn.w	r3, #2
 80036b8:	e047      	b.n	800374a <isotp_send_with_id+0xca>
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d102      	bne.n	80036ca <isotp_send_with_id+0x4a>
        // isotp_user_debug("Abort previous message, transmission in progress.\n");
        return ISOTP_RET_INPROGRESS;
 80036c4:	f06f 0301 	mvn.w	r3, #1
 80036c8:	e03f      	b.n	800374a <isotp_send_with_id+0xca>
    }

    /* copy into local buffer */
    link->send_size = size;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	887a      	ldrh	r2, [r7, #2]
 80036ce:	815a      	strh	r2, [r3, #10]
    link->send_offset = 0;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	819a      	strh	r2, [r3, #12]
    (void) memcpy(link->send_buffer, payload, size);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fd67 	bl	80041b2 <memcpy>

    if (link->send_size < 8) {
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	895b      	ldrh	r3, [r3, #10]
 80036e8:	2b07      	cmp	r3, #7
 80036ea:	d806      	bhi.n	80036fa <isotp_send_with_id+0x7a>
        /* send single frame */
        ret = isotp_send_single_frame(link, id);
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f7ff fde0 	bl	80032b4 <isotp_send_single_frame>
 80036f4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80036f8:	e025      	b.n	8003746 <isotp_send_with_id+0xc6>
    } else {
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id);
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff fe23 	bl	8003348 <isotp_send_first_frame>
 8003702:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret) {
 8003706:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800370a:	2b00      	cmp	r3, #0
 800370c:	d11b      	bne.n	8003746 <isotp_send_with_id+0xc6>
            link->send_bs_remain = 0;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	821a      	strh	r2, [r3, #16]
            link->send_st_min = 0;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	749a      	strb	r2, [r3, #18]
            link->send_wtf_count = 0;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	74da      	strb	r2, [r3, #19]
            link->send_timer_st = isotp_user_get_ms();
 8003720:	f7ff fd58 	bl	80031d4 <isotp_user_get_ms>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	615a      	str	r2, [r3, #20]
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800372a:	f7ff fd53 	bl	80031d4 <isotp_user_get_ms>
 800372e:	4603      	mov	r3, r0
 8003730:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	619a      	str	r2, [r3, #24]
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    return ret;
 8003746:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 800374a:	4618      	mov	r0, r3
 800374c:	3798      	adds	r7, #152	; 0x98
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	08005120 	.word	0x08005120

08003758 <isotp_on_can_message>:

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len) {
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	4613      	mov	r3, r2
 8003764:	71fb      	strb	r3, [r7, #7]
    IsoTpCanMessage message;
    int ret;
    
    if (len < 2 || len > 8) {
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	2b01      	cmp	r3, #1
 800376a:	f240 8149 	bls.w	8003a00 <isotp_on_can_message+0x2a8>
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	2b08      	cmp	r3, #8
 8003772:	f200 8145 	bhi.w	8003a00 <isotp_on_can_message+0x2a8>
        return;
    }

    memcpy(message.as.data_array.ptr, data, len);
 8003776:	79fa      	ldrb	r2, [r7, #7]
 8003778:	f107 0314 	add.w	r3, r7, #20
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fd17 	bl	80041b2 <memcpy>
    memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	f107 0214 	add.w	r2, r7, #20
 800378a:	18d0      	adds	r0, r2, r3
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	f1c3 0308 	rsb	r3, r3, #8
 8003792:	461a      	mov	r2, r3
 8003794:	2100      	movs	r1, #0
 8003796:	f000 fc91 	bl	80040bc <memset>

    switch (message.as.common.type) {
 800379a:	7d3b      	ldrb	r3, [r7, #20]
 800379c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	f200 8120 	bhi.w	80039e8 <isotp_on_can_message+0x290>
 80037a8:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <isotp_on_can_message+0x58>)
 80037aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ae:	bf00      	nop
 80037b0:	080037c1 	.word	0x080037c1
 80037b4:	080037fd 	.word	0x080037fd
 80037b8:	08003885 	.word	0x08003885
 80037bc:	08003923 	.word	0x08003923
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d104      	bne.n	80037d4 <isotp_on_can_message+0x7c>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f06f 0205 	mvn.w	r2, #5
 80037d0:	639a      	str	r2, [r3, #56]	; 0x38
 80037d2:	e002      	b.n	80037da <isotp_on_can_message+0x82>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* handle message */
            ret = isotp_receive_single_frame(link, &message, len);
 80037da:	79fa      	ldrb	r2, [r7, #7]
 80037dc:	f107 0314 	add.w	r3, r7, #20
 80037e0:	4619      	mov	r1, r3
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff fe64 	bl	80034b0 <isotp_receive_single_frame>
 80037e8:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f040 80fd 	bne.w	80039ec <isotp_on_can_message+0x294>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2202      	movs	r2, #2
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }
            break;
 80037fa:	e0f7      	b.n	80039ec <isotp_on_can_message+0x294>
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003802:	2b01      	cmp	r3, #1
 8003804:	d104      	bne.n	8003810 <isotp_on_can_message+0xb8>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f06f 0205 	mvn.w	r2, #5
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
 800380e:	e002      	b.n	8003816 <isotp_on_can_message+0xbe>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* handle message */
            ret = isotp_receive_first_frame(link, &message, len);
 8003816:	79fa      	ldrb	r2, [r7, #7]
 8003818:	f107 0314 	add.w	r3, r7, #20
 800381c:	4619      	mov	r1, r3
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f7ff fe79 	bl	8003516 <isotp_receive_first_frame>
 8003824:	61f8      	str	r0, [r7, #28]

            /* if overflow happened */
            if (ISOTP_RET_OVERFLOW == ret) {
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f113 0f03 	cmn.w	r3, #3
 800382c:	d10e      	bne.n	800384c <isotp_on_can_message+0xf4>
                /* update protocol result */
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f06f 0207 	mvn.w	r2, #7
 8003834:	639a      	str	r2, [r3, #56]	; 0x38
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                /* send error message */
                isotp_send_flow_control(link, PCI_FLOW_STATUS_OVERFLOW, 0, 0);
 800383e:	2300      	movs	r3, #0
 8003840:	2200      	movs	r2, #0
 8003842:	2102      	movs	r1, #2
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f7ff fcfc 	bl	8003242 <isotp_send_flow_control>
                break;
 800384a:	e0d8      	b.n	80039fe <isotp_on_can_message+0x2a6>
            }

            /* if receive successful */
            if (ISOTP_RET_OK == ret) {
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f040 80ce 	bne.w	80039f0 <isotp_on_can_message+0x298>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                /* send fc frame */
                link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2208      	movs	r2, #8
 8003860:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800386a:	2319      	movs	r3, #25
 800386c:	2100      	movs	r1, #0
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f7ff fce7 	bl	8003242 <isotp_send_flow_control>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8003874:	f7ff fcae 	bl	80031d4 <isotp_user_get_ms>
 8003878:	4603      	mov	r3, r0
 800387a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	635a      	str	r2, [r3, #52]	; 0x34
            }
            
            break;
 8003882:	e0b5      	b.n	80039f0 <isotp_on_can_message+0x298>
        }
        case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
            /* check if in receiving status */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status) {
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d004      	beq.n	8003898 <isotp_on_can_message+0x140>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f06f 0205 	mvn.w	r2, #5
 8003894:	639a      	str	r2, [r3, #56]	; 0x38
                break;
 8003896:	e0b2      	b.n	80039fe <isotp_on_can_message+0x2a6>
            }

            /* handle message */
            ret = isotp_receive_consecutive_frame(link, &message, len);
 8003898:	79fa      	ldrb	r2, [r7, #7]
 800389a:	f107 0314 	add.w	r3, r7, #20
 800389e:	4619      	mov	r1, r3
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f7ff fe78 	bl	8003596 <isotp_receive_consecutive_frame>
 80038a6:	61f8      	str	r0, [r7, #28]

            /* if wrong sn */
            if (ISOTP_RET_WRONG_SN == ret) {
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f113 0f04 	cmn.w	r3, #4
 80038ae:	d108      	bne.n	80038c2 <isotp_on_can_message+0x16a>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_WRONG_SN;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f06f 0203 	mvn.w	r2, #3
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                break;
 80038c0:	e09d      	b.n	80039fe <isotp_on_can_message+0x2a6>
            }

            /* if success */
            if (ISOTP_RET_OK == ret) {
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f040 8095 	bne.w	80039f4 <isotp_on_can_message+0x29c>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80038ca:	f7ff fc83 	bl	80031d4 <isotp_user_get_ms>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	635a      	str	r2, [r3, #52]	; 0x34
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size) {
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d304      	bcc.n	80038ee <isotp_on_can_message+0x196>
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
                    }
                }
            }
            
            break;
 80038ec:	e082      	b.n	80039f4 <isotp_on_can_message+0x29c>
                    if (0 == --link->receive_bs_count) {
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003904:	2b00      	cmp	r3, #0
 8003906:	d175      	bne.n	80039f4 <isotp_on_can_message+0x29c>
                        link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2208      	movs	r2, #8
 800390c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8003916:	2319      	movs	r3, #25
 8003918:	2100      	movs	r1, #0
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff fc91 	bl	8003242 <isotp_send_flow_control>
            break;
 8003920:	e068      	b.n	80039f4 <isotp_on_can_message+0x29c>
        }
        case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
        	HAL_GPIO_WritePin(LEDIn_GPIO_Port, LEDIn_Pin, 0);
 8003922:	2200      	movs	r2, #0
 8003924:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003928:	4837      	ldr	r0, [pc, #220]	; (8003a08 <isotp_on_can_message+0x2b0>)
 800392a:	f7fe fe0b 	bl	8002544 <HAL_GPIO_WritePin>
            /* handle fc frame only when sending in progress  */
            if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status) {
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d15f      	bne.n	80039f8 <isotp_on_can_message+0x2a0>
                break;
            }

            /* handle message */
            ret = isotp_receive_flow_control_frame(link, &message, len);
 8003938:	79fa      	ldrb	r2, [r7, #7]
 800393a:	f107 0314 	add.w	r3, r7, #20
 800393e:	4619      	mov	r1, r3
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff fe76 	bl	8003632 <isotp_receive_flow_control_frame>
 8003946:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d156      	bne.n	80039fc <isotp_on_can_message+0x2a4>
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800394e:	f7ff fc41 	bl	80031d4 <isotp_user_get_ms>
 8003952:	4603      	mov	r3, r0
 8003954:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	619a      	str	r2, [r3, #24]

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
 800395c:	7d3b      	ldrb	r3, [r7, #20]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d108      	bne.n	800397a <isotp_on_can_message+0x222>
                    link->send_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f06f 0207 	mvn.w	r2, #7
 800396e:	61da      	str	r2, [r3, #28]
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 2020 	strb.w	r2, [r3, #32]
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
                    link->send_wtf_count = 0;
                }
            }
            break;
 8003978:	e040      	b.n	80039fc <isotp_on_can_message+0x2a4>
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
 800397a:	7d3b      	ldrb	r3, [r7, #20]
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b01      	cmp	r3, #1
 8003984:	d112      	bne.n	80039ac <isotp_on_can_message+0x254>
                    link->send_wtf_count += 1;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	7cdb      	ldrb	r3, [r3, #19]
 800398a:	3301      	adds	r3, #1
 800398c:	b2da      	uxtb	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	74da      	strb	r2, [r3, #19]
                    if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER) {
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	7cdb      	ldrb	r3, [r3, #19]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d930      	bls.n	80039fc <isotp_on_can_message+0x2a4>
                        link->send_protocol_result = ISOTP_PROTOCOL_RESULT_WFT_OVRN;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f06f 0206 	mvn.w	r2, #6
 80039a0:	61da      	str	r2, [r3, #28]
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 80039aa:	e027      	b.n	80039fc <isotp_on_can_message+0x2a4>
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS) {
 80039ac:	7d3b      	ldrb	r3, [r7, #20]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d121      	bne.n	80039fc <isotp_on_can_message+0x2a4>
                    if (0 == message.as.flow_control.BS) {
 80039b8:	7d7b      	ldrb	r3, [r7, #21]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <isotp_on_can_message+0x270>
                        link->send_bs_remain = ISOTP_INVALID_BS;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039c4:	821a      	strh	r2, [r3, #16]
 80039c6:	e003      	b.n	80039d0 <isotp_on_can_message+0x278>
                        link->send_bs_remain = message.as.flow_control.BS;
 80039c8:	7d7b      	ldrb	r3, [r7, #21]
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	821a      	strh	r2, [r3, #16]
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
 80039d0:	7dbb      	ldrb	r3, [r7, #22]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff fc18 	bl	8003208 <isotp_st_min_to_ms>
 80039d8:	4603      	mov	r3, r0
 80039da:	461a      	mov	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	749a      	strb	r2, [r3, #18]
                    link->send_wtf_count = 0;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	74da      	strb	r2, [r3, #19]
            break;
 80039e6:	e009      	b.n	80039fc <isotp_on_can_message+0x2a4>
        default:
            break;
 80039e8:	bf00      	nop
 80039ea:	e00a      	b.n	8003a02 <isotp_on_can_message+0x2aa>
            break;
 80039ec:	bf00      	nop
 80039ee:	e008      	b.n	8003a02 <isotp_on_can_message+0x2aa>
            break;
 80039f0:	bf00      	nop
 80039f2:	e006      	b.n	8003a02 <isotp_on_can_message+0x2aa>
            break;
 80039f4:	bf00      	nop
 80039f6:	e004      	b.n	8003a02 <isotp_on_can_message+0x2aa>
                break;
 80039f8:	bf00      	nop
 80039fa:	e002      	b.n	8003a02 <isotp_on_can_message+0x2aa>
            break;
 80039fc:	bf00      	nop
    };
    
    return;
 80039fe:	e000      	b.n	8003a02 <isotp_on_can_message+0x2aa>
        return;
 8003a00:	bf00      	nop
}
 8003a02:	3720      	adds	r7, #32
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40011000 	.word	0x40011000

08003a0c <isotp_receive>:

int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	80fb      	strh	r3, [r7, #6]
    uint16_t copylen;
    
    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status) {
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d002      	beq.n	8003a2c <isotp_receive+0x20>
        return ISOTP_RET_NO_DATA;
 8003a26:	f06f 0304 	mvn.w	r3, #4
 8003a2a:	e017      	b.n	8003a5c <isotp_receive+0x50>
    }

    copylen = link->receive_size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a30:	82fb      	strh	r3, [r7, #22]
    if (copylen > payload_size) {
 8003a32:	8afa      	ldrh	r2, [r7, #22]
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d901      	bls.n	8003a3e <isotp_receive+0x32>
        copylen = payload_size;
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	82fb      	strh	r3, [r7, #22]
    }

    memcpy(payload, link->receive_buffer, copylen);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	8afa      	ldrh	r2, [r7, #22]
 8003a44:	4619      	mov	r1, r3
 8003a46:	68b8      	ldr	r0, [r7, #8]
 8003a48:	f000 fbb3 	bl	80041b2 <memcpy>
    *out_size = copylen;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	8afa      	ldrh	r2, [r7, #22]
 8003a50:	801a      	strh	r2, [r3, #0]

    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return ISOTP_RET_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <isotp_init_link>:

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf, uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	807b      	strh	r3, [r7, #2]
    memset(link, 0, sizeof(*link));
 8003a72:	2240      	movs	r2, #64	; 0x40
 8003a74:	2100      	movs	r1, #0
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 fb20 	bl	80040bc <memset>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    link->send_status = ISOTP_SEND_STATUS_IDLE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2020 	strb.w	r2, [r3, #32]
    link->send_arbitration_id = sendid;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	601a      	str	r2, [r3, #0]
    link->send_buffer = sendbuf;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	605a      	str	r2, [r3, #4]
    link->send_buf_size = sendbufsize;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	887a      	ldrh	r2, [r7, #2]
 8003a9c:	811a      	strh	r2, [r3, #8]
    link->receive_buffer = recvbuf;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	629a      	str	r2, [r3, #40]	; 0x28
    link->receive_buf_size = recvbufsize;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8bba      	ldrh	r2, [r7, #28]
 8003aa8:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    return;
 8003aaa:	bf00      	nop
}
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <isotp_poll>:

void isotp_poll(IsoTpLink *link) {
 8003ab2:	b590      	push	{r4, r7, lr}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
    int ret;

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d15c      	bne.n	8003b7e <isotp_poll+0xcc>

        /* continue send data */
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8a1b      	ldrh	r3, [r3, #16]
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
 8003ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <isotp_poll+0x26>
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8a1b      	ldrh	r3, [r3, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d041      	beq.n	8003b5c <isotp_poll+0xaa>
        /* and if st_min is zero or go beyond interval time */
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	7c9b      	ldrb	r3, [r3, #18]
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00c      	beq.n	8003afa <isotp_poll+0x48>
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	7c9b      	ldrb	r3, [r3, #18]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d039      	beq.n	8003b5c <isotp_poll+0xaa>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	461c      	mov	r4, r3
 8003aee:	f7ff fb71 	bl	80031d4 <isotp_user_get_ms>
 8003af2:	4603      	mov	r3, r0
 8003af4:	1ae3      	subs	r3, r4, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	da30      	bge.n	8003b5c <isotp_poll+0xaa>
            
            ret = isotp_send_consecutive_frame(link);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fc6e 	bl	80033dc <isotp_send_consecutive_frame>
 8003b00:	60f8      	str	r0, [r7, #12]
            if (ISOTP_RET_OK == ret) {
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d125      	bne.n	8003b54 <isotp_poll+0xa2>
                if (ISOTP_INVALID_BS != link->send_bs_remain) {
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8a1b      	ldrh	r3, [r3, #16]
 8003b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d005      	beq.n	8003b20 <isotp_poll+0x6e>
                    link->send_bs_remain -= 1;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8a1b      	ldrh	r3, [r3, #16]
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	821a      	strh	r2, [r3, #16]
                }
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8003b20:	f7ff fb58 	bl	80031d4 <isotp_user_get_ms>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	619a      	str	r2, [r3, #24]
                link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
 8003b2e:	f7ff fb51 	bl	80031d4 <isotp_user_get_ms>
 8003b32:	4602      	mov	r2, r0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	7c9b      	ldrb	r3, [r3, #18]
 8003b38:	441a      	add	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	615a      	str	r2, [r3, #20]

                /* check if send finish */
                if (link->send_offset >= link->send_size) {
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	899a      	ldrh	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	895b      	ldrh	r3, [r3, #10]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d308      	bcc.n	8003b5c <isotp_poll+0xaa>
                    link->send_status = ISOTP_SEND_STATUS_IDLE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2020 	strb.w	r2, [r3, #32]
 8003b52:	e003      	b.n	8003b5c <isotp_poll+0xaa>
                }
            } else {
                link->send_status = ISOTP_SEND_STATUS_ERROR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)) {
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	461c      	mov	r4, r3
 8003b62:	f7ff fb37 	bl	80031d4 <isotp_user_get_ms>
 8003b66:	4603      	mov	r3, r0
 8003b68:	1ae3      	subs	r3, r4, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	da07      	bge.n	8003b7e <isotp_poll+0xcc>
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_BS;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f06f 0201 	mvn.w	r2, #1
 8003b74:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_ERROR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d111      	bne.n	8003bac <isotp_poll+0xfa>
        
        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)) {
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	461c      	mov	r4, r3
 8003b8e:	f7ff fb21 	bl	80031d4 <isotp_user_get_ms>
 8003b92:	4603      	mov	r3, r0
 8003b94:	1ae3      	subs	r3, r4, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	da08      	bge.n	8003bac <isotp_poll+0xfa>
            link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_CR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f06f 0202 	mvn.w	r2, #2
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        }
    }

    return;
 8003baa:	bf00      	nop
 8003bac:	bf00      	nop
}
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd90      	pop	{r4, r7, pc}

08003bb4 <__assert_func>:
 8003bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003bb6:	4614      	mov	r4, r2
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <__assert_func+0x2c>)
 8003bbc:	4605      	mov	r5, r0
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68d8      	ldr	r0, [r3, #12]
 8003bc2:	b14c      	cbz	r4, 8003bd8 <__assert_func+0x24>
 8003bc4:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <__assert_func+0x30>)
 8003bc6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003bca:	9100      	str	r1, [sp, #0]
 8003bcc:	462b      	mov	r3, r5
 8003bce:	4906      	ldr	r1, [pc, #24]	; (8003be8 <__assert_func+0x34>)
 8003bd0:	f000 f8f0 	bl	8003db4 <fiprintf>
 8003bd4:	f000 fafb 	bl	80041ce <abort>
 8003bd8:	4b04      	ldr	r3, [pc, #16]	; (8003bec <__assert_func+0x38>)
 8003bda:	461c      	mov	r4, r3
 8003bdc:	e7f3      	b.n	8003bc6 <__assert_func+0x12>
 8003bde:	bf00      	nop
 8003be0:	20000068 	.word	0x20000068
 8003be4:	080051c9 	.word	0x080051c9
 8003be8:	080051d6 	.word	0x080051d6
 8003bec:	08005204 	.word	0x08005204

08003bf0 <rand>:
 8003bf0:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <rand+0x5c>)
 8003bf2:	b510      	push	{r4, lr}
 8003bf4:	681c      	ldr	r4, [r3, #0]
 8003bf6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bf8:	b9b3      	cbnz	r3, 8003c28 <rand+0x38>
 8003bfa:	2018      	movs	r0, #24
 8003bfc:	f000 fb36 	bl	800426c <malloc>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6320      	str	r0, [r4, #48]	; 0x30
 8003c04:	b920      	cbnz	r0, 8003c10 <rand+0x20>
 8003c06:	2152      	movs	r1, #82	; 0x52
 8003c08:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <rand+0x60>)
 8003c0a:	4812      	ldr	r0, [pc, #72]	; (8003c54 <rand+0x64>)
 8003c0c:	f7ff ffd2 	bl	8003bb4 <__assert_func>
 8003c10:	4911      	ldr	r1, [pc, #68]	; (8003c58 <rand+0x68>)
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <rand+0x6c>)
 8003c14:	e9c0 1300 	strd	r1, r3, [r0]
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <rand+0x70>)
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	6083      	str	r3, [r0, #8]
 8003c1e:	230b      	movs	r3, #11
 8003c20:	8183      	strh	r3, [r0, #12]
 8003c22:	2001      	movs	r0, #1
 8003c24:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003c28:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c2a:	480e      	ldr	r0, [pc, #56]	; (8003c64 <rand+0x74>)
 8003c2c:	690b      	ldr	r3, [r1, #16]
 8003c2e:	694c      	ldr	r4, [r1, #20]
 8003c30:	4358      	muls	r0, r3
 8003c32:	4a0d      	ldr	r2, [pc, #52]	; (8003c68 <rand+0x78>)
 8003c34:	fb02 0004 	mla	r0, r2, r4, r0
 8003c38:	fba3 3202 	umull	r3, r2, r3, r2
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	eb40 0002 	adc.w	r0, r0, r2
 8003c42:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003c46:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003c4a:	bd10      	pop	{r4, pc}
 8003c4c:	20000068 	.word	0x20000068
 8003c50:	08005205 	.word	0x08005205
 8003c54:	0800521c 	.word	0x0800521c
 8003c58:	abcd330e 	.word	0xabcd330e
 8003c5c:	e66d1234 	.word	0xe66d1234
 8003c60:	0005deec 	.word	0x0005deec
 8003c64:	5851f42d 	.word	0x5851f42d
 8003c68:	4c957f2d 	.word	0x4c957f2d

08003c6c <std>:
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	b510      	push	{r4, lr}
 8003c70:	4604      	mov	r4, r0
 8003c72:	e9c0 3300 	strd	r3, r3, [r0]
 8003c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c7a:	6083      	str	r3, [r0, #8]
 8003c7c:	8181      	strh	r1, [r0, #12]
 8003c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8003c80:	81c2      	strh	r2, [r0, #14]
 8003c82:	6183      	str	r3, [r0, #24]
 8003c84:	4619      	mov	r1, r3
 8003c86:	2208      	movs	r2, #8
 8003c88:	305c      	adds	r0, #92	; 0x5c
 8003c8a:	f000 fa17 	bl	80040bc <memset>
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <std+0x58>)
 8003c90:	6224      	str	r4, [r4, #32]
 8003c92:	6263      	str	r3, [r4, #36]	; 0x24
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <std+0x5c>)
 8003c96:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <std+0x60>)
 8003c9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <std+0x64>)
 8003c9e:	6323      	str	r3, [r4, #48]	; 0x30
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <std+0x68>)
 8003ca2:	429c      	cmp	r4, r3
 8003ca4:	d006      	beq.n	8003cb4 <std+0x48>
 8003ca6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003caa:	4294      	cmp	r4, r2
 8003cac:	d002      	beq.n	8003cb4 <std+0x48>
 8003cae:	33d0      	adds	r3, #208	; 0xd0
 8003cb0:	429c      	cmp	r4, r3
 8003cb2:	d105      	bne.n	8003cc0 <std+0x54>
 8003cb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cbc:	f000 ba76 	b.w	80041ac <__retarget_lock_init_recursive>
 8003cc0:	bd10      	pop	{r4, pc}
 8003cc2:	bf00      	nop
 8003cc4:	08003f0d 	.word	0x08003f0d
 8003cc8:	08003f2f 	.word	0x08003f2f
 8003ccc:	08003f67 	.word	0x08003f67
 8003cd0:	08003f8b 	.word	0x08003f8b
 8003cd4:	2000021c 	.word	0x2000021c

08003cd8 <stdio_exit_handler>:
 8003cd8:	4a02      	ldr	r2, [pc, #8]	; (8003ce4 <stdio_exit_handler+0xc>)
 8003cda:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <stdio_exit_handler+0x10>)
 8003cdc:	4803      	ldr	r0, [pc, #12]	; (8003cec <stdio_exit_handler+0x14>)
 8003cde:	f000 b87b 	b.w	8003dd8 <_fwalk_sglue>
 8003ce2:	bf00      	nop
 8003ce4:	20000010 	.word	0x20000010
 8003ce8:	08004d35 	.word	0x08004d35
 8003cec:	2000001c 	.word	0x2000001c

08003cf0 <cleanup_stdio>:
 8003cf0:	6841      	ldr	r1, [r0, #4]
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <cleanup_stdio+0x34>)
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	4299      	cmp	r1, r3
 8003cf8:	4604      	mov	r4, r0
 8003cfa:	d001      	beq.n	8003d00 <cleanup_stdio+0x10>
 8003cfc:	f001 f81a 	bl	8004d34 <_fflush_r>
 8003d00:	68a1      	ldr	r1, [r4, #8]
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <cleanup_stdio+0x38>)
 8003d04:	4299      	cmp	r1, r3
 8003d06:	d002      	beq.n	8003d0e <cleanup_stdio+0x1e>
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f001 f813 	bl	8004d34 <_fflush_r>
 8003d0e:	68e1      	ldr	r1, [r4, #12]
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <cleanup_stdio+0x3c>)
 8003d12:	4299      	cmp	r1, r3
 8003d14:	d004      	beq.n	8003d20 <cleanup_stdio+0x30>
 8003d16:	4620      	mov	r0, r4
 8003d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d1c:	f001 b80a 	b.w	8004d34 <_fflush_r>
 8003d20:	bd10      	pop	{r4, pc}
 8003d22:	bf00      	nop
 8003d24:	2000021c 	.word	0x2000021c
 8003d28:	20000284 	.word	0x20000284
 8003d2c:	200002ec 	.word	0x200002ec

08003d30 <global_stdio_init.part.0>:
 8003d30:	b510      	push	{r4, lr}
 8003d32:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <global_stdio_init.part.0+0x30>)
 8003d34:	4c0b      	ldr	r4, [pc, #44]	; (8003d64 <global_stdio_init.part.0+0x34>)
 8003d36:	4a0c      	ldr	r2, [pc, #48]	; (8003d68 <global_stdio_init.part.0+0x38>)
 8003d38:	4620      	mov	r0, r4
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	2104      	movs	r1, #4
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f7ff ff94 	bl	8003c6c <std>
 8003d44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d48:	2201      	movs	r2, #1
 8003d4a:	2109      	movs	r1, #9
 8003d4c:	f7ff ff8e 	bl	8003c6c <std>
 8003d50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d54:	2202      	movs	r2, #2
 8003d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d5a:	2112      	movs	r1, #18
 8003d5c:	f7ff bf86 	b.w	8003c6c <std>
 8003d60:	20000354 	.word	0x20000354
 8003d64:	2000021c 	.word	0x2000021c
 8003d68:	08003cd9 	.word	0x08003cd9

08003d6c <__sfp_lock_acquire>:
 8003d6c:	4801      	ldr	r0, [pc, #4]	; (8003d74 <__sfp_lock_acquire+0x8>)
 8003d6e:	f000 ba1e 	b.w	80041ae <__retarget_lock_acquire_recursive>
 8003d72:	bf00      	nop
 8003d74:	2000035d 	.word	0x2000035d

08003d78 <__sfp_lock_release>:
 8003d78:	4801      	ldr	r0, [pc, #4]	; (8003d80 <__sfp_lock_release+0x8>)
 8003d7a:	f000 ba19 	b.w	80041b0 <__retarget_lock_release_recursive>
 8003d7e:	bf00      	nop
 8003d80:	2000035d 	.word	0x2000035d

08003d84 <__sinit>:
 8003d84:	b510      	push	{r4, lr}
 8003d86:	4604      	mov	r4, r0
 8003d88:	f7ff fff0 	bl	8003d6c <__sfp_lock_acquire>
 8003d8c:	6a23      	ldr	r3, [r4, #32]
 8003d8e:	b11b      	cbz	r3, 8003d98 <__sinit+0x14>
 8003d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d94:	f7ff bff0 	b.w	8003d78 <__sfp_lock_release>
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <__sinit+0x28>)
 8003d9a:	6223      	str	r3, [r4, #32]
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <__sinit+0x2c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f5      	bne.n	8003d90 <__sinit+0xc>
 8003da4:	f7ff ffc4 	bl	8003d30 <global_stdio_init.part.0>
 8003da8:	e7f2      	b.n	8003d90 <__sinit+0xc>
 8003daa:	bf00      	nop
 8003dac:	08003cf1 	.word	0x08003cf1
 8003db0:	20000354 	.word	0x20000354

08003db4 <fiprintf>:
 8003db4:	b40e      	push	{r1, r2, r3}
 8003db6:	b503      	push	{r0, r1, lr}
 8003db8:	4601      	mov	r1, r0
 8003dba:	ab03      	add	r3, sp, #12
 8003dbc:	4805      	ldr	r0, [pc, #20]	; (8003dd4 <fiprintf+0x20>)
 8003dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dc2:	6800      	ldr	r0, [r0, #0]
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	f000 fc85 	bl	80046d4 <_vfiprintf_r>
 8003dca:	b002      	add	sp, #8
 8003dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dd0:	b003      	add	sp, #12
 8003dd2:	4770      	bx	lr
 8003dd4:	20000068 	.word	0x20000068

08003dd8 <_fwalk_sglue>:
 8003dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ddc:	4607      	mov	r7, r0
 8003dde:	4688      	mov	r8, r1
 8003de0:	4614      	mov	r4, r2
 8003de2:	2600      	movs	r6, #0
 8003de4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003de8:	f1b9 0901 	subs.w	r9, r9, #1
 8003dec:	d505      	bpl.n	8003dfa <_fwalk_sglue+0x22>
 8003dee:	6824      	ldr	r4, [r4, #0]
 8003df0:	2c00      	cmp	r4, #0
 8003df2:	d1f7      	bne.n	8003de4 <_fwalk_sglue+0xc>
 8003df4:	4630      	mov	r0, r6
 8003df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dfa:	89ab      	ldrh	r3, [r5, #12]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d907      	bls.n	8003e10 <_fwalk_sglue+0x38>
 8003e00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e04:	3301      	adds	r3, #1
 8003e06:	d003      	beq.n	8003e10 <_fwalk_sglue+0x38>
 8003e08:	4629      	mov	r1, r5
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	47c0      	blx	r8
 8003e0e:	4306      	orrs	r6, r0
 8003e10:	3568      	adds	r5, #104	; 0x68
 8003e12:	e7e9      	b.n	8003de8 <_fwalk_sglue+0x10>

08003e14 <_puts_r>:
 8003e14:	6a03      	ldr	r3, [r0, #32]
 8003e16:	b570      	push	{r4, r5, r6, lr}
 8003e18:	4605      	mov	r5, r0
 8003e1a:	460e      	mov	r6, r1
 8003e1c:	6884      	ldr	r4, [r0, #8]
 8003e1e:	b90b      	cbnz	r3, 8003e24 <_puts_r+0x10>
 8003e20:	f7ff ffb0 	bl	8003d84 <__sinit>
 8003e24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e26:	07db      	lsls	r3, r3, #31
 8003e28:	d405      	bmi.n	8003e36 <_puts_r+0x22>
 8003e2a:	89a3      	ldrh	r3, [r4, #12]
 8003e2c:	0598      	lsls	r0, r3, #22
 8003e2e:	d402      	bmi.n	8003e36 <_puts_r+0x22>
 8003e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e32:	f000 f9bc 	bl	80041ae <__retarget_lock_acquire_recursive>
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	0719      	lsls	r1, r3, #28
 8003e3a:	d513      	bpl.n	8003e64 <_puts_r+0x50>
 8003e3c:	6923      	ldr	r3, [r4, #16]
 8003e3e:	b18b      	cbz	r3, 8003e64 <_puts_r+0x50>
 8003e40:	3e01      	subs	r6, #1
 8003e42:	68a3      	ldr	r3, [r4, #8]
 8003e44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	60a3      	str	r3, [r4, #8]
 8003e4c:	b9e9      	cbnz	r1, 8003e8a <_puts_r+0x76>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	da2e      	bge.n	8003eb0 <_puts_r+0x9c>
 8003e52:	4622      	mov	r2, r4
 8003e54:	210a      	movs	r1, #10
 8003e56:	4628      	mov	r0, r5
 8003e58:	f000 f89b 	bl	8003f92 <__swbuf_r>
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	d007      	beq.n	8003e70 <_puts_r+0x5c>
 8003e60:	250a      	movs	r5, #10
 8003e62:	e007      	b.n	8003e74 <_puts_r+0x60>
 8003e64:	4621      	mov	r1, r4
 8003e66:	4628      	mov	r0, r5
 8003e68:	f000 f8d0 	bl	800400c <__swsetup_r>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d0e7      	beq.n	8003e40 <_puts_r+0x2c>
 8003e70:	f04f 35ff 	mov.w	r5, #4294967295
 8003e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e76:	07da      	lsls	r2, r3, #31
 8003e78:	d405      	bmi.n	8003e86 <_puts_r+0x72>
 8003e7a:	89a3      	ldrh	r3, [r4, #12]
 8003e7c:	059b      	lsls	r3, r3, #22
 8003e7e:	d402      	bmi.n	8003e86 <_puts_r+0x72>
 8003e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e82:	f000 f995 	bl	80041b0 <__retarget_lock_release_recursive>
 8003e86:	4628      	mov	r0, r5
 8003e88:	bd70      	pop	{r4, r5, r6, pc}
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	da04      	bge.n	8003e98 <_puts_r+0x84>
 8003e8e:	69a2      	ldr	r2, [r4, #24]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	dc06      	bgt.n	8003ea2 <_puts_r+0x8e>
 8003e94:	290a      	cmp	r1, #10
 8003e96:	d004      	beq.n	8003ea2 <_puts_r+0x8e>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	6022      	str	r2, [r4, #0]
 8003e9e:	7019      	strb	r1, [r3, #0]
 8003ea0:	e7cf      	b.n	8003e42 <_puts_r+0x2e>
 8003ea2:	4622      	mov	r2, r4
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	f000 f874 	bl	8003f92 <__swbuf_r>
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d1c9      	bne.n	8003e42 <_puts_r+0x2e>
 8003eae:	e7df      	b.n	8003e70 <_puts_r+0x5c>
 8003eb0:	250a      	movs	r5, #10
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	6022      	str	r2, [r4, #0]
 8003eb8:	701d      	strb	r5, [r3, #0]
 8003eba:	e7db      	b.n	8003e74 <_puts_r+0x60>

08003ebc <puts>:
 8003ebc:	4b02      	ldr	r3, [pc, #8]	; (8003ec8 <puts+0xc>)
 8003ebe:	4601      	mov	r1, r0
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	f7ff bfa7 	b.w	8003e14 <_puts_r>
 8003ec6:	bf00      	nop
 8003ec8:	20000068 	.word	0x20000068

08003ecc <siprintf>:
 8003ecc:	b40e      	push	{r1, r2, r3}
 8003ece:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ed2:	b500      	push	{lr}
 8003ed4:	b09c      	sub	sp, #112	; 0x70
 8003ed6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ed8:	9002      	str	r0, [sp, #8]
 8003eda:	9006      	str	r0, [sp, #24]
 8003edc:	9107      	str	r1, [sp, #28]
 8003ede:	9104      	str	r1, [sp, #16]
 8003ee0:	4808      	ldr	r0, [pc, #32]	; (8003f04 <siprintf+0x38>)
 8003ee2:	4909      	ldr	r1, [pc, #36]	; (8003f08 <siprintf+0x3c>)
 8003ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ee8:	9105      	str	r1, [sp, #20]
 8003eea:	6800      	ldr	r0, [r0, #0]
 8003eec:	a902      	add	r1, sp, #8
 8003eee:	9301      	str	r3, [sp, #4]
 8003ef0:	f000 faca 	bl	8004488 <_svfiprintf_r>
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	9b02      	ldr	r3, [sp, #8]
 8003ef8:	701a      	strb	r2, [r3, #0]
 8003efa:	b01c      	add	sp, #112	; 0x70
 8003efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f00:	b003      	add	sp, #12
 8003f02:	4770      	bx	lr
 8003f04:	20000068 	.word	0x20000068
 8003f08:	ffff0208 	.word	0xffff0208

08003f0c <__sread>:
 8003f0c:	b510      	push	{r4, lr}
 8003f0e:	460c      	mov	r4, r1
 8003f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f14:	f000 f8fc 	bl	8004110 <_read_r>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	bfab      	itete	ge
 8003f1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f20:	181b      	addge	r3, r3, r0
 8003f22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f26:	bfac      	ite	ge
 8003f28:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f2a:	81a3      	strhlt	r3, [r4, #12]
 8003f2c:	bd10      	pop	{r4, pc}

08003f2e <__swrite>:
 8003f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f32:	461f      	mov	r7, r3
 8003f34:	898b      	ldrh	r3, [r1, #12]
 8003f36:	4605      	mov	r5, r0
 8003f38:	05db      	lsls	r3, r3, #23
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	4616      	mov	r6, r2
 8003f3e:	d505      	bpl.n	8003f4c <__swrite+0x1e>
 8003f40:	2302      	movs	r3, #2
 8003f42:	2200      	movs	r2, #0
 8003f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f48:	f000 f8d0 	bl	80040ec <_lseek_r>
 8003f4c:	89a3      	ldrh	r3, [r4, #12]
 8003f4e:	4632      	mov	r2, r6
 8003f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f54:	81a3      	strh	r3, [r4, #12]
 8003f56:	4628      	mov	r0, r5
 8003f58:	463b      	mov	r3, r7
 8003f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f62:	f000 b8e7 	b.w	8004134 <_write_r>

08003f66 <__sseek>:
 8003f66:	b510      	push	{r4, lr}
 8003f68:	460c      	mov	r4, r1
 8003f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f6e:	f000 f8bd 	bl	80040ec <_lseek_r>
 8003f72:	1c43      	adds	r3, r0, #1
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	bf15      	itete	ne
 8003f78:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f82:	81a3      	strheq	r3, [r4, #12]
 8003f84:	bf18      	it	ne
 8003f86:	81a3      	strhne	r3, [r4, #12]
 8003f88:	bd10      	pop	{r4, pc}

08003f8a <__sclose>:
 8003f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f8e:	f000 b89d 	b.w	80040cc <_close_r>

08003f92 <__swbuf_r>:
 8003f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f94:	460e      	mov	r6, r1
 8003f96:	4614      	mov	r4, r2
 8003f98:	4605      	mov	r5, r0
 8003f9a:	b118      	cbz	r0, 8003fa4 <__swbuf_r+0x12>
 8003f9c:	6a03      	ldr	r3, [r0, #32]
 8003f9e:	b90b      	cbnz	r3, 8003fa4 <__swbuf_r+0x12>
 8003fa0:	f7ff fef0 	bl	8003d84 <__sinit>
 8003fa4:	69a3      	ldr	r3, [r4, #24]
 8003fa6:	60a3      	str	r3, [r4, #8]
 8003fa8:	89a3      	ldrh	r3, [r4, #12]
 8003faa:	071a      	lsls	r2, r3, #28
 8003fac:	d525      	bpl.n	8003ffa <__swbuf_r+0x68>
 8003fae:	6923      	ldr	r3, [r4, #16]
 8003fb0:	b31b      	cbz	r3, 8003ffa <__swbuf_r+0x68>
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	6922      	ldr	r2, [r4, #16]
 8003fb6:	b2f6      	uxtb	r6, r6
 8003fb8:	1a98      	subs	r0, r3, r2
 8003fba:	6963      	ldr	r3, [r4, #20]
 8003fbc:	4637      	mov	r7, r6
 8003fbe:	4283      	cmp	r3, r0
 8003fc0:	dc04      	bgt.n	8003fcc <__swbuf_r+0x3a>
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	f000 feb5 	bl	8004d34 <_fflush_r>
 8003fca:	b9e0      	cbnz	r0, 8004006 <__swbuf_r+0x74>
 8003fcc:	68a3      	ldr	r3, [r4, #8]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	60a3      	str	r3, [r4, #8]
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	6022      	str	r2, [r4, #0]
 8003fd8:	701e      	strb	r6, [r3, #0]
 8003fda:	6962      	ldr	r2, [r4, #20]
 8003fdc:	1c43      	adds	r3, r0, #1
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d004      	beq.n	8003fec <__swbuf_r+0x5a>
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	07db      	lsls	r3, r3, #31
 8003fe6:	d506      	bpl.n	8003ff6 <__swbuf_r+0x64>
 8003fe8:	2e0a      	cmp	r6, #10
 8003fea:	d104      	bne.n	8003ff6 <__swbuf_r+0x64>
 8003fec:	4621      	mov	r1, r4
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f000 fea0 	bl	8004d34 <_fflush_r>
 8003ff4:	b938      	cbnz	r0, 8004006 <__swbuf_r+0x74>
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	f000 f805 	bl	800400c <__swsetup_r>
 8004002:	2800      	cmp	r0, #0
 8004004:	d0d5      	beq.n	8003fb2 <__swbuf_r+0x20>
 8004006:	f04f 37ff 	mov.w	r7, #4294967295
 800400a:	e7f4      	b.n	8003ff6 <__swbuf_r+0x64>

0800400c <__swsetup_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4b2a      	ldr	r3, [pc, #168]	; (80040b8 <__swsetup_r+0xac>)
 8004010:	4605      	mov	r5, r0
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	460c      	mov	r4, r1
 8004016:	b118      	cbz	r0, 8004020 <__swsetup_r+0x14>
 8004018:	6a03      	ldr	r3, [r0, #32]
 800401a:	b90b      	cbnz	r3, 8004020 <__swsetup_r+0x14>
 800401c:	f7ff feb2 	bl	8003d84 <__sinit>
 8004020:	89a3      	ldrh	r3, [r4, #12]
 8004022:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004026:	0718      	lsls	r0, r3, #28
 8004028:	d422      	bmi.n	8004070 <__swsetup_r+0x64>
 800402a:	06d9      	lsls	r1, r3, #27
 800402c:	d407      	bmi.n	800403e <__swsetup_r+0x32>
 800402e:	2309      	movs	r3, #9
 8004030:	602b      	str	r3, [r5, #0]
 8004032:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004036:	f04f 30ff 	mov.w	r0, #4294967295
 800403a:	81a3      	strh	r3, [r4, #12]
 800403c:	e034      	b.n	80040a8 <__swsetup_r+0x9c>
 800403e:	0758      	lsls	r0, r3, #29
 8004040:	d512      	bpl.n	8004068 <__swsetup_r+0x5c>
 8004042:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004044:	b141      	cbz	r1, 8004058 <__swsetup_r+0x4c>
 8004046:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800404a:	4299      	cmp	r1, r3
 800404c:	d002      	beq.n	8004054 <__swsetup_r+0x48>
 800404e:	4628      	mov	r0, r5
 8004050:	f000 f8c4 	bl	80041dc <_free_r>
 8004054:	2300      	movs	r3, #0
 8004056:	6363      	str	r3, [r4, #52]	; 0x34
 8004058:	89a3      	ldrh	r3, [r4, #12]
 800405a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800405e:	81a3      	strh	r3, [r4, #12]
 8004060:	2300      	movs	r3, #0
 8004062:	6063      	str	r3, [r4, #4]
 8004064:	6923      	ldr	r3, [r4, #16]
 8004066:	6023      	str	r3, [r4, #0]
 8004068:	89a3      	ldrh	r3, [r4, #12]
 800406a:	f043 0308 	orr.w	r3, r3, #8
 800406e:	81a3      	strh	r3, [r4, #12]
 8004070:	6923      	ldr	r3, [r4, #16]
 8004072:	b94b      	cbnz	r3, 8004088 <__swsetup_r+0x7c>
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800407a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800407e:	d003      	beq.n	8004088 <__swsetup_r+0x7c>
 8004080:	4621      	mov	r1, r4
 8004082:	4628      	mov	r0, r5
 8004084:	f000 fea3 	bl	8004dce <__smakebuf_r>
 8004088:	89a0      	ldrh	r0, [r4, #12]
 800408a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800408e:	f010 0301 	ands.w	r3, r0, #1
 8004092:	d00a      	beq.n	80040aa <__swsetup_r+0x9e>
 8004094:	2300      	movs	r3, #0
 8004096:	60a3      	str	r3, [r4, #8]
 8004098:	6963      	ldr	r3, [r4, #20]
 800409a:	425b      	negs	r3, r3
 800409c:	61a3      	str	r3, [r4, #24]
 800409e:	6923      	ldr	r3, [r4, #16]
 80040a0:	b943      	cbnz	r3, 80040b4 <__swsetup_r+0xa8>
 80040a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040a6:	d1c4      	bne.n	8004032 <__swsetup_r+0x26>
 80040a8:	bd38      	pop	{r3, r4, r5, pc}
 80040aa:	0781      	lsls	r1, r0, #30
 80040ac:	bf58      	it	pl
 80040ae:	6963      	ldrpl	r3, [r4, #20]
 80040b0:	60a3      	str	r3, [r4, #8]
 80040b2:	e7f4      	b.n	800409e <__swsetup_r+0x92>
 80040b4:	2000      	movs	r0, #0
 80040b6:	e7f7      	b.n	80040a8 <__swsetup_r+0x9c>
 80040b8:	20000068 	.word	0x20000068

080040bc <memset>:
 80040bc:	4603      	mov	r3, r0
 80040be:	4402      	add	r2, r0
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d100      	bne.n	80040c6 <memset+0xa>
 80040c4:	4770      	bx	lr
 80040c6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ca:	e7f9      	b.n	80040c0 <memset+0x4>

080040cc <_close_r>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	2300      	movs	r3, #0
 80040d0:	4d05      	ldr	r5, [pc, #20]	; (80040e8 <_close_r+0x1c>)
 80040d2:	4604      	mov	r4, r0
 80040d4:	4608      	mov	r0, r1
 80040d6:	602b      	str	r3, [r5, #0]
 80040d8:	f7fc fc46 	bl	8000968 <_close>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d102      	bne.n	80040e6 <_close_r+0x1a>
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	b103      	cbz	r3, 80040e6 <_close_r+0x1a>
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	20000358 	.word	0x20000358

080040ec <_lseek_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	4604      	mov	r4, r0
 80040f0:	4608      	mov	r0, r1
 80040f2:	4611      	mov	r1, r2
 80040f4:	2200      	movs	r2, #0
 80040f6:	4d05      	ldr	r5, [pc, #20]	; (800410c <_lseek_r+0x20>)
 80040f8:	602a      	str	r2, [r5, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f7fc fc58 	bl	80009b0 <_lseek>
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	d102      	bne.n	800410a <_lseek_r+0x1e>
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	b103      	cbz	r3, 800410a <_lseek_r+0x1e>
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	bd38      	pop	{r3, r4, r5, pc}
 800410c:	20000358 	.word	0x20000358

08004110 <_read_r>:
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	4604      	mov	r4, r0
 8004114:	4608      	mov	r0, r1
 8004116:	4611      	mov	r1, r2
 8004118:	2200      	movs	r2, #0
 800411a:	4d05      	ldr	r5, [pc, #20]	; (8004130 <_read_r+0x20>)
 800411c:	602a      	str	r2, [r5, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	f7fc fbe9 	bl	80008f6 <_read>
 8004124:	1c43      	adds	r3, r0, #1
 8004126:	d102      	bne.n	800412e <_read_r+0x1e>
 8004128:	682b      	ldr	r3, [r5, #0]
 800412a:	b103      	cbz	r3, 800412e <_read_r+0x1e>
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	bd38      	pop	{r3, r4, r5, pc}
 8004130:	20000358 	.word	0x20000358

08004134 <_write_r>:
 8004134:	b538      	push	{r3, r4, r5, lr}
 8004136:	4604      	mov	r4, r0
 8004138:	4608      	mov	r0, r1
 800413a:	4611      	mov	r1, r2
 800413c:	2200      	movs	r2, #0
 800413e:	4d05      	ldr	r5, [pc, #20]	; (8004154 <_write_r+0x20>)
 8004140:	602a      	str	r2, [r5, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	f7fc fbf4 	bl	8000930 <_write>
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	d102      	bne.n	8004152 <_write_r+0x1e>
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	b103      	cbz	r3, 8004152 <_write_r+0x1e>
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	bd38      	pop	{r3, r4, r5, pc}
 8004154:	20000358 	.word	0x20000358

08004158 <__errno>:
 8004158:	4b01      	ldr	r3, [pc, #4]	; (8004160 <__errno+0x8>)
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	20000068 	.word	0x20000068

08004164 <__libc_init_array>:
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	2600      	movs	r6, #0
 8004168:	4d0c      	ldr	r5, [pc, #48]	; (800419c <__libc_init_array+0x38>)
 800416a:	4c0d      	ldr	r4, [pc, #52]	; (80041a0 <__libc_init_array+0x3c>)
 800416c:	1b64      	subs	r4, r4, r5
 800416e:	10a4      	asrs	r4, r4, #2
 8004170:	42a6      	cmp	r6, r4
 8004172:	d109      	bne.n	8004188 <__libc_init_array+0x24>
 8004174:	f000 ff3e 	bl	8004ff4 <_init>
 8004178:	2600      	movs	r6, #0
 800417a:	4d0a      	ldr	r5, [pc, #40]	; (80041a4 <__libc_init_array+0x40>)
 800417c:	4c0a      	ldr	r4, [pc, #40]	; (80041a8 <__libc_init_array+0x44>)
 800417e:	1b64      	subs	r4, r4, r5
 8004180:	10a4      	asrs	r4, r4, #2
 8004182:	42a6      	cmp	r6, r4
 8004184:	d105      	bne.n	8004192 <__libc_init_array+0x2e>
 8004186:	bd70      	pop	{r4, r5, r6, pc}
 8004188:	f855 3b04 	ldr.w	r3, [r5], #4
 800418c:	4798      	blx	r3
 800418e:	3601      	adds	r6, #1
 8004190:	e7ee      	b.n	8004170 <__libc_init_array+0xc>
 8004192:	f855 3b04 	ldr.w	r3, [r5], #4
 8004196:	4798      	blx	r3
 8004198:	3601      	adds	r6, #1
 800419a:	e7f2      	b.n	8004182 <__libc_init_array+0x1e>
 800419c:	080052a8 	.word	0x080052a8
 80041a0:	080052a8 	.word	0x080052a8
 80041a4:	080052a8 	.word	0x080052a8
 80041a8:	080052ac 	.word	0x080052ac

080041ac <__retarget_lock_init_recursive>:
 80041ac:	4770      	bx	lr

080041ae <__retarget_lock_acquire_recursive>:
 80041ae:	4770      	bx	lr

080041b0 <__retarget_lock_release_recursive>:
 80041b0:	4770      	bx	lr

080041b2 <memcpy>:
 80041b2:	440a      	add	r2, r1
 80041b4:	4291      	cmp	r1, r2
 80041b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80041ba:	d100      	bne.n	80041be <memcpy+0xc>
 80041bc:	4770      	bx	lr
 80041be:	b510      	push	{r4, lr}
 80041c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041c4:	4291      	cmp	r1, r2
 80041c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041ca:	d1f9      	bne.n	80041c0 <memcpy+0xe>
 80041cc:	bd10      	pop	{r4, pc}

080041ce <abort>:
 80041ce:	2006      	movs	r0, #6
 80041d0:	b508      	push	{r3, lr}
 80041d2:	f000 fe7b 	bl	8004ecc <raise>
 80041d6:	2001      	movs	r0, #1
 80041d8:	f7fc fb83 	bl	80008e2 <_exit>

080041dc <_free_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4605      	mov	r5, r0
 80041e0:	2900      	cmp	r1, #0
 80041e2:	d040      	beq.n	8004266 <_free_r+0x8a>
 80041e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041e8:	1f0c      	subs	r4, r1, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bfb8      	it	lt
 80041ee:	18e4      	addlt	r4, r4, r3
 80041f0:	f000 f8e4 	bl	80043bc <__malloc_lock>
 80041f4:	4a1c      	ldr	r2, [pc, #112]	; (8004268 <_free_r+0x8c>)
 80041f6:	6813      	ldr	r3, [r2, #0]
 80041f8:	b933      	cbnz	r3, 8004208 <_free_r+0x2c>
 80041fa:	6063      	str	r3, [r4, #4]
 80041fc:	6014      	str	r4, [r2, #0]
 80041fe:	4628      	mov	r0, r5
 8004200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004204:	f000 b8e0 	b.w	80043c8 <__malloc_unlock>
 8004208:	42a3      	cmp	r3, r4
 800420a:	d908      	bls.n	800421e <_free_r+0x42>
 800420c:	6820      	ldr	r0, [r4, #0]
 800420e:	1821      	adds	r1, r4, r0
 8004210:	428b      	cmp	r3, r1
 8004212:	bf01      	itttt	eq
 8004214:	6819      	ldreq	r1, [r3, #0]
 8004216:	685b      	ldreq	r3, [r3, #4]
 8004218:	1809      	addeq	r1, r1, r0
 800421a:	6021      	streq	r1, [r4, #0]
 800421c:	e7ed      	b.n	80041fa <_free_r+0x1e>
 800421e:	461a      	mov	r2, r3
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	b10b      	cbz	r3, 8004228 <_free_r+0x4c>
 8004224:	42a3      	cmp	r3, r4
 8004226:	d9fa      	bls.n	800421e <_free_r+0x42>
 8004228:	6811      	ldr	r1, [r2, #0]
 800422a:	1850      	adds	r0, r2, r1
 800422c:	42a0      	cmp	r0, r4
 800422e:	d10b      	bne.n	8004248 <_free_r+0x6c>
 8004230:	6820      	ldr	r0, [r4, #0]
 8004232:	4401      	add	r1, r0
 8004234:	1850      	adds	r0, r2, r1
 8004236:	4283      	cmp	r3, r0
 8004238:	6011      	str	r1, [r2, #0]
 800423a:	d1e0      	bne.n	80041fe <_free_r+0x22>
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4408      	add	r0, r1
 8004242:	6010      	str	r0, [r2, #0]
 8004244:	6053      	str	r3, [r2, #4]
 8004246:	e7da      	b.n	80041fe <_free_r+0x22>
 8004248:	d902      	bls.n	8004250 <_free_r+0x74>
 800424a:	230c      	movs	r3, #12
 800424c:	602b      	str	r3, [r5, #0]
 800424e:	e7d6      	b.n	80041fe <_free_r+0x22>
 8004250:	6820      	ldr	r0, [r4, #0]
 8004252:	1821      	adds	r1, r4, r0
 8004254:	428b      	cmp	r3, r1
 8004256:	bf01      	itttt	eq
 8004258:	6819      	ldreq	r1, [r3, #0]
 800425a:	685b      	ldreq	r3, [r3, #4]
 800425c:	1809      	addeq	r1, r1, r0
 800425e:	6021      	streq	r1, [r4, #0]
 8004260:	6063      	str	r3, [r4, #4]
 8004262:	6054      	str	r4, [r2, #4]
 8004264:	e7cb      	b.n	80041fe <_free_r+0x22>
 8004266:	bd38      	pop	{r3, r4, r5, pc}
 8004268:	20000360 	.word	0x20000360

0800426c <malloc>:
 800426c:	4b02      	ldr	r3, [pc, #8]	; (8004278 <malloc+0xc>)
 800426e:	4601      	mov	r1, r0
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	f000 b823 	b.w	80042bc <_malloc_r>
 8004276:	bf00      	nop
 8004278:	20000068 	.word	0x20000068

0800427c <sbrk_aligned>:
 800427c:	b570      	push	{r4, r5, r6, lr}
 800427e:	4e0e      	ldr	r6, [pc, #56]	; (80042b8 <sbrk_aligned+0x3c>)
 8004280:	460c      	mov	r4, r1
 8004282:	6831      	ldr	r1, [r6, #0]
 8004284:	4605      	mov	r5, r0
 8004286:	b911      	cbnz	r1, 800428e <sbrk_aligned+0x12>
 8004288:	f000 fe5e 	bl	8004f48 <_sbrk_r>
 800428c:	6030      	str	r0, [r6, #0]
 800428e:	4621      	mov	r1, r4
 8004290:	4628      	mov	r0, r5
 8004292:	f000 fe59 	bl	8004f48 <_sbrk_r>
 8004296:	1c43      	adds	r3, r0, #1
 8004298:	d00a      	beq.n	80042b0 <sbrk_aligned+0x34>
 800429a:	1cc4      	adds	r4, r0, #3
 800429c:	f024 0403 	bic.w	r4, r4, #3
 80042a0:	42a0      	cmp	r0, r4
 80042a2:	d007      	beq.n	80042b4 <sbrk_aligned+0x38>
 80042a4:	1a21      	subs	r1, r4, r0
 80042a6:	4628      	mov	r0, r5
 80042a8:	f000 fe4e 	bl	8004f48 <_sbrk_r>
 80042ac:	3001      	adds	r0, #1
 80042ae:	d101      	bne.n	80042b4 <sbrk_aligned+0x38>
 80042b0:	f04f 34ff 	mov.w	r4, #4294967295
 80042b4:	4620      	mov	r0, r4
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	20000364 	.word	0x20000364

080042bc <_malloc_r>:
 80042bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042c0:	1ccd      	adds	r5, r1, #3
 80042c2:	f025 0503 	bic.w	r5, r5, #3
 80042c6:	3508      	adds	r5, #8
 80042c8:	2d0c      	cmp	r5, #12
 80042ca:	bf38      	it	cc
 80042cc:	250c      	movcc	r5, #12
 80042ce:	2d00      	cmp	r5, #0
 80042d0:	4607      	mov	r7, r0
 80042d2:	db01      	blt.n	80042d8 <_malloc_r+0x1c>
 80042d4:	42a9      	cmp	r1, r5
 80042d6:	d905      	bls.n	80042e4 <_malloc_r+0x28>
 80042d8:	230c      	movs	r3, #12
 80042da:	2600      	movs	r6, #0
 80042dc:	603b      	str	r3, [r7, #0]
 80042de:	4630      	mov	r0, r6
 80042e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80043b8 <_malloc_r+0xfc>
 80042e8:	f000 f868 	bl	80043bc <__malloc_lock>
 80042ec:	f8d8 3000 	ldr.w	r3, [r8]
 80042f0:	461c      	mov	r4, r3
 80042f2:	bb5c      	cbnz	r4, 800434c <_malloc_r+0x90>
 80042f4:	4629      	mov	r1, r5
 80042f6:	4638      	mov	r0, r7
 80042f8:	f7ff ffc0 	bl	800427c <sbrk_aligned>
 80042fc:	1c43      	adds	r3, r0, #1
 80042fe:	4604      	mov	r4, r0
 8004300:	d155      	bne.n	80043ae <_malloc_r+0xf2>
 8004302:	f8d8 4000 	ldr.w	r4, [r8]
 8004306:	4626      	mov	r6, r4
 8004308:	2e00      	cmp	r6, #0
 800430a:	d145      	bne.n	8004398 <_malloc_r+0xdc>
 800430c:	2c00      	cmp	r4, #0
 800430e:	d048      	beq.n	80043a2 <_malloc_r+0xe6>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	4631      	mov	r1, r6
 8004314:	4638      	mov	r0, r7
 8004316:	eb04 0903 	add.w	r9, r4, r3
 800431a:	f000 fe15 	bl	8004f48 <_sbrk_r>
 800431e:	4581      	cmp	r9, r0
 8004320:	d13f      	bne.n	80043a2 <_malloc_r+0xe6>
 8004322:	6821      	ldr	r1, [r4, #0]
 8004324:	4638      	mov	r0, r7
 8004326:	1a6d      	subs	r5, r5, r1
 8004328:	4629      	mov	r1, r5
 800432a:	f7ff ffa7 	bl	800427c <sbrk_aligned>
 800432e:	3001      	adds	r0, #1
 8004330:	d037      	beq.n	80043a2 <_malloc_r+0xe6>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	442b      	add	r3, r5
 8004336:	6023      	str	r3, [r4, #0]
 8004338:	f8d8 3000 	ldr.w	r3, [r8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d038      	beq.n	80043b2 <_malloc_r+0xf6>
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	42a2      	cmp	r2, r4
 8004344:	d12b      	bne.n	800439e <_malloc_r+0xe2>
 8004346:	2200      	movs	r2, #0
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	e00f      	b.n	800436c <_malloc_r+0xb0>
 800434c:	6822      	ldr	r2, [r4, #0]
 800434e:	1b52      	subs	r2, r2, r5
 8004350:	d41f      	bmi.n	8004392 <_malloc_r+0xd6>
 8004352:	2a0b      	cmp	r2, #11
 8004354:	d917      	bls.n	8004386 <_malloc_r+0xca>
 8004356:	1961      	adds	r1, r4, r5
 8004358:	42a3      	cmp	r3, r4
 800435a:	6025      	str	r5, [r4, #0]
 800435c:	bf18      	it	ne
 800435e:	6059      	strne	r1, [r3, #4]
 8004360:	6863      	ldr	r3, [r4, #4]
 8004362:	bf08      	it	eq
 8004364:	f8c8 1000 	streq.w	r1, [r8]
 8004368:	5162      	str	r2, [r4, r5]
 800436a:	604b      	str	r3, [r1, #4]
 800436c:	4638      	mov	r0, r7
 800436e:	f104 060b 	add.w	r6, r4, #11
 8004372:	f000 f829 	bl	80043c8 <__malloc_unlock>
 8004376:	f026 0607 	bic.w	r6, r6, #7
 800437a:	1d23      	adds	r3, r4, #4
 800437c:	1af2      	subs	r2, r6, r3
 800437e:	d0ae      	beq.n	80042de <_malloc_r+0x22>
 8004380:	1b9b      	subs	r3, r3, r6
 8004382:	50a3      	str	r3, [r4, r2]
 8004384:	e7ab      	b.n	80042de <_malloc_r+0x22>
 8004386:	42a3      	cmp	r3, r4
 8004388:	6862      	ldr	r2, [r4, #4]
 800438a:	d1dd      	bne.n	8004348 <_malloc_r+0x8c>
 800438c:	f8c8 2000 	str.w	r2, [r8]
 8004390:	e7ec      	b.n	800436c <_malloc_r+0xb0>
 8004392:	4623      	mov	r3, r4
 8004394:	6864      	ldr	r4, [r4, #4]
 8004396:	e7ac      	b.n	80042f2 <_malloc_r+0x36>
 8004398:	4634      	mov	r4, r6
 800439a:	6876      	ldr	r6, [r6, #4]
 800439c:	e7b4      	b.n	8004308 <_malloc_r+0x4c>
 800439e:	4613      	mov	r3, r2
 80043a0:	e7cc      	b.n	800433c <_malloc_r+0x80>
 80043a2:	230c      	movs	r3, #12
 80043a4:	4638      	mov	r0, r7
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	f000 f80e 	bl	80043c8 <__malloc_unlock>
 80043ac:	e797      	b.n	80042de <_malloc_r+0x22>
 80043ae:	6025      	str	r5, [r4, #0]
 80043b0:	e7dc      	b.n	800436c <_malloc_r+0xb0>
 80043b2:	605b      	str	r3, [r3, #4]
 80043b4:	deff      	udf	#255	; 0xff
 80043b6:	bf00      	nop
 80043b8:	20000360 	.word	0x20000360

080043bc <__malloc_lock>:
 80043bc:	4801      	ldr	r0, [pc, #4]	; (80043c4 <__malloc_lock+0x8>)
 80043be:	f7ff bef6 	b.w	80041ae <__retarget_lock_acquire_recursive>
 80043c2:	bf00      	nop
 80043c4:	2000035c 	.word	0x2000035c

080043c8 <__malloc_unlock>:
 80043c8:	4801      	ldr	r0, [pc, #4]	; (80043d0 <__malloc_unlock+0x8>)
 80043ca:	f7ff bef1 	b.w	80041b0 <__retarget_lock_release_recursive>
 80043ce:	bf00      	nop
 80043d0:	2000035c 	.word	0x2000035c

080043d4 <__ssputs_r>:
 80043d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043d8:	461f      	mov	r7, r3
 80043da:	688e      	ldr	r6, [r1, #8]
 80043dc:	4682      	mov	sl, r0
 80043de:	42be      	cmp	r6, r7
 80043e0:	460c      	mov	r4, r1
 80043e2:	4690      	mov	r8, r2
 80043e4:	680b      	ldr	r3, [r1, #0]
 80043e6:	d82c      	bhi.n	8004442 <__ssputs_r+0x6e>
 80043e8:	898a      	ldrh	r2, [r1, #12]
 80043ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043ee:	d026      	beq.n	800443e <__ssputs_r+0x6a>
 80043f0:	6965      	ldr	r5, [r4, #20]
 80043f2:	6909      	ldr	r1, [r1, #16]
 80043f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043f8:	eba3 0901 	sub.w	r9, r3, r1
 80043fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004400:	1c7b      	adds	r3, r7, #1
 8004402:	444b      	add	r3, r9
 8004404:	106d      	asrs	r5, r5, #1
 8004406:	429d      	cmp	r5, r3
 8004408:	bf38      	it	cc
 800440a:	461d      	movcc	r5, r3
 800440c:	0553      	lsls	r3, r2, #21
 800440e:	d527      	bpl.n	8004460 <__ssputs_r+0x8c>
 8004410:	4629      	mov	r1, r5
 8004412:	f7ff ff53 	bl	80042bc <_malloc_r>
 8004416:	4606      	mov	r6, r0
 8004418:	b360      	cbz	r0, 8004474 <__ssputs_r+0xa0>
 800441a:	464a      	mov	r2, r9
 800441c:	6921      	ldr	r1, [r4, #16]
 800441e:	f7ff fec8 	bl	80041b2 <memcpy>
 8004422:	89a3      	ldrh	r3, [r4, #12]
 8004424:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800442c:	81a3      	strh	r3, [r4, #12]
 800442e:	6126      	str	r6, [r4, #16]
 8004430:	444e      	add	r6, r9
 8004432:	6026      	str	r6, [r4, #0]
 8004434:	463e      	mov	r6, r7
 8004436:	6165      	str	r5, [r4, #20]
 8004438:	eba5 0509 	sub.w	r5, r5, r9
 800443c:	60a5      	str	r5, [r4, #8]
 800443e:	42be      	cmp	r6, r7
 8004440:	d900      	bls.n	8004444 <__ssputs_r+0x70>
 8004442:	463e      	mov	r6, r7
 8004444:	4632      	mov	r2, r6
 8004446:	4641      	mov	r1, r8
 8004448:	6820      	ldr	r0, [r4, #0]
 800444a:	f000 fcfc 	bl	8004e46 <memmove>
 800444e:	2000      	movs	r0, #0
 8004450:	68a3      	ldr	r3, [r4, #8]
 8004452:	1b9b      	subs	r3, r3, r6
 8004454:	60a3      	str	r3, [r4, #8]
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	4433      	add	r3, r6
 800445a:	6023      	str	r3, [r4, #0]
 800445c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004460:	462a      	mov	r2, r5
 8004462:	f000 fd8f 	bl	8004f84 <_realloc_r>
 8004466:	4606      	mov	r6, r0
 8004468:	2800      	cmp	r0, #0
 800446a:	d1e0      	bne.n	800442e <__ssputs_r+0x5a>
 800446c:	4650      	mov	r0, sl
 800446e:	6921      	ldr	r1, [r4, #16]
 8004470:	f7ff feb4 	bl	80041dc <_free_r>
 8004474:	230c      	movs	r3, #12
 8004476:	f8ca 3000 	str.w	r3, [sl]
 800447a:	89a3      	ldrh	r3, [r4, #12]
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004484:	81a3      	strh	r3, [r4, #12]
 8004486:	e7e9      	b.n	800445c <__ssputs_r+0x88>

08004488 <_svfiprintf_r>:
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	4698      	mov	r8, r3
 800448e:	898b      	ldrh	r3, [r1, #12]
 8004490:	4607      	mov	r7, r0
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	460d      	mov	r5, r1
 8004496:	4614      	mov	r4, r2
 8004498:	b09d      	sub	sp, #116	; 0x74
 800449a:	d50e      	bpl.n	80044ba <_svfiprintf_r+0x32>
 800449c:	690b      	ldr	r3, [r1, #16]
 800449e:	b963      	cbnz	r3, 80044ba <_svfiprintf_r+0x32>
 80044a0:	2140      	movs	r1, #64	; 0x40
 80044a2:	f7ff ff0b 	bl	80042bc <_malloc_r>
 80044a6:	6028      	str	r0, [r5, #0]
 80044a8:	6128      	str	r0, [r5, #16]
 80044aa:	b920      	cbnz	r0, 80044b6 <_svfiprintf_r+0x2e>
 80044ac:	230c      	movs	r3, #12
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	f04f 30ff 	mov.w	r0, #4294967295
 80044b4:	e0d0      	b.n	8004658 <_svfiprintf_r+0x1d0>
 80044b6:	2340      	movs	r3, #64	; 0x40
 80044b8:	616b      	str	r3, [r5, #20]
 80044ba:	2300      	movs	r3, #0
 80044bc:	9309      	str	r3, [sp, #36]	; 0x24
 80044be:	2320      	movs	r3, #32
 80044c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044c4:	2330      	movs	r3, #48	; 0x30
 80044c6:	f04f 0901 	mov.w	r9, #1
 80044ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80044ce:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004670 <_svfiprintf_r+0x1e8>
 80044d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044d6:	4623      	mov	r3, r4
 80044d8:	469a      	mov	sl, r3
 80044da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044de:	b10a      	cbz	r2, 80044e4 <_svfiprintf_r+0x5c>
 80044e0:	2a25      	cmp	r2, #37	; 0x25
 80044e2:	d1f9      	bne.n	80044d8 <_svfiprintf_r+0x50>
 80044e4:	ebba 0b04 	subs.w	fp, sl, r4
 80044e8:	d00b      	beq.n	8004502 <_svfiprintf_r+0x7a>
 80044ea:	465b      	mov	r3, fp
 80044ec:	4622      	mov	r2, r4
 80044ee:	4629      	mov	r1, r5
 80044f0:	4638      	mov	r0, r7
 80044f2:	f7ff ff6f 	bl	80043d4 <__ssputs_r>
 80044f6:	3001      	adds	r0, #1
 80044f8:	f000 80a9 	beq.w	800464e <_svfiprintf_r+0x1c6>
 80044fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044fe:	445a      	add	r2, fp
 8004500:	9209      	str	r2, [sp, #36]	; 0x24
 8004502:	f89a 3000 	ldrb.w	r3, [sl]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 80a1 	beq.w	800464e <_svfiprintf_r+0x1c6>
 800450c:	2300      	movs	r3, #0
 800450e:	f04f 32ff 	mov.w	r2, #4294967295
 8004512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004516:	f10a 0a01 	add.w	sl, sl, #1
 800451a:	9304      	str	r3, [sp, #16]
 800451c:	9307      	str	r3, [sp, #28]
 800451e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004522:	931a      	str	r3, [sp, #104]	; 0x68
 8004524:	4654      	mov	r4, sl
 8004526:	2205      	movs	r2, #5
 8004528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800452c:	4850      	ldr	r0, [pc, #320]	; (8004670 <_svfiprintf_r+0x1e8>)
 800452e:	f000 fd1b 	bl	8004f68 <memchr>
 8004532:	9a04      	ldr	r2, [sp, #16]
 8004534:	b9d8      	cbnz	r0, 800456e <_svfiprintf_r+0xe6>
 8004536:	06d0      	lsls	r0, r2, #27
 8004538:	bf44      	itt	mi
 800453a:	2320      	movmi	r3, #32
 800453c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004540:	0711      	lsls	r1, r2, #28
 8004542:	bf44      	itt	mi
 8004544:	232b      	movmi	r3, #43	; 0x2b
 8004546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800454a:	f89a 3000 	ldrb.w	r3, [sl]
 800454e:	2b2a      	cmp	r3, #42	; 0x2a
 8004550:	d015      	beq.n	800457e <_svfiprintf_r+0xf6>
 8004552:	4654      	mov	r4, sl
 8004554:	2000      	movs	r0, #0
 8004556:	f04f 0c0a 	mov.w	ip, #10
 800455a:	9a07      	ldr	r2, [sp, #28]
 800455c:	4621      	mov	r1, r4
 800455e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004562:	3b30      	subs	r3, #48	; 0x30
 8004564:	2b09      	cmp	r3, #9
 8004566:	d94d      	bls.n	8004604 <_svfiprintf_r+0x17c>
 8004568:	b1b0      	cbz	r0, 8004598 <_svfiprintf_r+0x110>
 800456a:	9207      	str	r2, [sp, #28]
 800456c:	e014      	b.n	8004598 <_svfiprintf_r+0x110>
 800456e:	eba0 0308 	sub.w	r3, r0, r8
 8004572:	fa09 f303 	lsl.w	r3, r9, r3
 8004576:	4313      	orrs	r3, r2
 8004578:	46a2      	mov	sl, r4
 800457a:	9304      	str	r3, [sp, #16]
 800457c:	e7d2      	b.n	8004524 <_svfiprintf_r+0x9c>
 800457e:	9b03      	ldr	r3, [sp, #12]
 8004580:	1d19      	adds	r1, r3, #4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	9103      	str	r1, [sp, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	bfbb      	ittet	lt
 800458a:	425b      	neglt	r3, r3
 800458c:	f042 0202 	orrlt.w	r2, r2, #2
 8004590:	9307      	strge	r3, [sp, #28]
 8004592:	9307      	strlt	r3, [sp, #28]
 8004594:	bfb8      	it	lt
 8004596:	9204      	strlt	r2, [sp, #16]
 8004598:	7823      	ldrb	r3, [r4, #0]
 800459a:	2b2e      	cmp	r3, #46	; 0x2e
 800459c:	d10c      	bne.n	80045b8 <_svfiprintf_r+0x130>
 800459e:	7863      	ldrb	r3, [r4, #1]
 80045a0:	2b2a      	cmp	r3, #42	; 0x2a
 80045a2:	d134      	bne.n	800460e <_svfiprintf_r+0x186>
 80045a4:	9b03      	ldr	r3, [sp, #12]
 80045a6:	3402      	adds	r4, #2
 80045a8:	1d1a      	adds	r2, r3, #4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	9203      	str	r2, [sp, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bfb8      	it	lt
 80045b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80045b6:	9305      	str	r3, [sp, #20]
 80045b8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004674 <_svfiprintf_r+0x1ec>
 80045bc:	2203      	movs	r2, #3
 80045be:	4650      	mov	r0, sl
 80045c0:	7821      	ldrb	r1, [r4, #0]
 80045c2:	f000 fcd1 	bl	8004f68 <memchr>
 80045c6:	b138      	cbz	r0, 80045d8 <_svfiprintf_r+0x150>
 80045c8:	2240      	movs	r2, #64	; 0x40
 80045ca:	9b04      	ldr	r3, [sp, #16]
 80045cc:	eba0 000a 	sub.w	r0, r0, sl
 80045d0:	4082      	lsls	r2, r0
 80045d2:	4313      	orrs	r3, r2
 80045d4:	3401      	adds	r4, #1
 80045d6:	9304      	str	r3, [sp, #16]
 80045d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045dc:	2206      	movs	r2, #6
 80045de:	4826      	ldr	r0, [pc, #152]	; (8004678 <_svfiprintf_r+0x1f0>)
 80045e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045e4:	f000 fcc0 	bl	8004f68 <memchr>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d038      	beq.n	800465e <_svfiprintf_r+0x1d6>
 80045ec:	4b23      	ldr	r3, [pc, #140]	; (800467c <_svfiprintf_r+0x1f4>)
 80045ee:	bb1b      	cbnz	r3, 8004638 <_svfiprintf_r+0x1b0>
 80045f0:	9b03      	ldr	r3, [sp, #12]
 80045f2:	3307      	adds	r3, #7
 80045f4:	f023 0307 	bic.w	r3, r3, #7
 80045f8:	3308      	adds	r3, #8
 80045fa:	9303      	str	r3, [sp, #12]
 80045fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045fe:	4433      	add	r3, r6
 8004600:	9309      	str	r3, [sp, #36]	; 0x24
 8004602:	e768      	b.n	80044d6 <_svfiprintf_r+0x4e>
 8004604:	460c      	mov	r4, r1
 8004606:	2001      	movs	r0, #1
 8004608:	fb0c 3202 	mla	r2, ip, r2, r3
 800460c:	e7a6      	b.n	800455c <_svfiprintf_r+0xd4>
 800460e:	2300      	movs	r3, #0
 8004610:	f04f 0c0a 	mov.w	ip, #10
 8004614:	4619      	mov	r1, r3
 8004616:	3401      	adds	r4, #1
 8004618:	9305      	str	r3, [sp, #20]
 800461a:	4620      	mov	r0, r4
 800461c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004620:	3a30      	subs	r2, #48	; 0x30
 8004622:	2a09      	cmp	r2, #9
 8004624:	d903      	bls.n	800462e <_svfiprintf_r+0x1a6>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0c6      	beq.n	80045b8 <_svfiprintf_r+0x130>
 800462a:	9105      	str	r1, [sp, #20]
 800462c:	e7c4      	b.n	80045b8 <_svfiprintf_r+0x130>
 800462e:	4604      	mov	r4, r0
 8004630:	2301      	movs	r3, #1
 8004632:	fb0c 2101 	mla	r1, ip, r1, r2
 8004636:	e7f0      	b.n	800461a <_svfiprintf_r+0x192>
 8004638:	ab03      	add	r3, sp, #12
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	462a      	mov	r2, r5
 800463e:	4638      	mov	r0, r7
 8004640:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <_svfiprintf_r+0x1f8>)
 8004642:	a904      	add	r1, sp, #16
 8004644:	f3af 8000 	nop.w
 8004648:	1c42      	adds	r2, r0, #1
 800464a:	4606      	mov	r6, r0
 800464c:	d1d6      	bne.n	80045fc <_svfiprintf_r+0x174>
 800464e:	89ab      	ldrh	r3, [r5, #12]
 8004650:	065b      	lsls	r3, r3, #25
 8004652:	f53f af2d 	bmi.w	80044b0 <_svfiprintf_r+0x28>
 8004656:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004658:	b01d      	add	sp, #116	; 0x74
 800465a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800465e:	ab03      	add	r3, sp, #12
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	462a      	mov	r2, r5
 8004664:	4638      	mov	r0, r7
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <_svfiprintf_r+0x1f8>)
 8004668:	a904      	add	r1, sp, #16
 800466a:	f000 f9bf 	bl	80049ec <_printf_i>
 800466e:	e7eb      	b.n	8004648 <_svfiprintf_r+0x1c0>
 8004670:	08005274 	.word	0x08005274
 8004674:	0800527a 	.word	0x0800527a
 8004678:	0800527e 	.word	0x0800527e
 800467c:	00000000 	.word	0x00000000
 8004680:	080043d5 	.word	0x080043d5

08004684 <__sfputc_r>:
 8004684:	6893      	ldr	r3, [r2, #8]
 8004686:	b410      	push	{r4}
 8004688:	3b01      	subs	r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	6093      	str	r3, [r2, #8]
 800468e:	da07      	bge.n	80046a0 <__sfputc_r+0x1c>
 8004690:	6994      	ldr	r4, [r2, #24]
 8004692:	42a3      	cmp	r3, r4
 8004694:	db01      	blt.n	800469a <__sfputc_r+0x16>
 8004696:	290a      	cmp	r1, #10
 8004698:	d102      	bne.n	80046a0 <__sfputc_r+0x1c>
 800469a:	bc10      	pop	{r4}
 800469c:	f7ff bc79 	b.w	8003f92 <__swbuf_r>
 80046a0:	6813      	ldr	r3, [r2, #0]
 80046a2:	1c58      	adds	r0, r3, #1
 80046a4:	6010      	str	r0, [r2, #0]
 80046a6:	7019      	strb	r1, [r3, #0]
 80046a8:	4608      	mov	r0, r1
 80046aa:	bc10      	pop	{r4}
 80046ac:	4770      	bx	lr

080046ae <__sfputs_r>:
 80046ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b0:	4606      	mov	r6, r0
 80046b2:	460f      	mov	r7, r1
 80046b4:	4614      	mov	r4, r2
 80046b6:	18d5      	adds	r5, r2, r3
 80046b8:	42ac      	cmp	r4, r5
 80046ba:	d101      	bne.n	80046c0 <__sfputs_r+0x12>
 80046bc:	2000      	movs	r0, #0
 80046be:	e007      	b.n	80046d0 <__sfputs_r+0x22>
 80046c0:	463a      	mov	r2, r7
 80046c2:	4630      	mov	r0, r6
 80046c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046c8:	f7ff ffdc 	bl	8004684 <__sfputc_r>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d1f3      	bne.n	80046b8 <__sfputs_r+0xa>
 80046d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046d4 <_vfiprintf_r>:
 80046d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d8:	460d      	mov	r5, r1
 80046da:	4614      	mov	r4, r2
 80046dc:	4698      	mov	r8, r3
 80046de:	4606      	mov	r6, r0
 80046e0:	b09d      	sub	sp, #116	; 0x74
 80046e2:	b118      	cbz	r0, 80046ec <_vfiprintf_r+0x18>
 80046e4:	6a03      	ldr	r3, [r0, #32]
 80046e6:	b90b      	cbnz	r3, 80046ec <_vfiprintf_r+0x18>
 80046e8:	f7ff fb4c 	bl	8003d84 <__sinit>
 80046ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046ee:	07d9      	lsls	r1, r3, #31
 80046f0:	d405      	bmi.n	80046fe <_vfiprintf_r+0x2a>
 80046f2:	89ab      	ldrh	r3, [r5, #12]
 80046f4:	059a      	lsls	r2, r3, #22
 80046f6:	d402      	bmi.n	80046fe <_vfiprintf_r+0x2a>
 80046f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046fa:	f7ff fd58 	bl	80041ae <__retarget_lock_acquire_recursive>
 80046fe:	89ab      	ldrh	r3, [r5, #12]
 8004700:	071b      	lsls	r3, r3, #28
 8004702:	d501      	bpl.n	8004708 <_vfiprintf_r+0x34>
 8004704:	692b      	ldr	r3, [r5, #16]
 8004706:	b99b      	cbnz	r3, 8004730 <_vfiprintf_r+0x5c>
 8004708:	4629      	mov	r1, r5
 800470a:	4630      	mov	r0, r6
 800470c:	f7ff fc7e 	bl	800400c <__swsetup_r>
 8004710:	b170      	cbz	r0, 8004730 <_vfiprintf_r+0x5c>
 8004712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004714:	07dc      	lsls	r4, r3, #31
 8004716:	d504      	bpl.n	8004722 <_vfiprintf_r+0x4e>
 8004718:	f04f 30ff 	mov.w	r0, #4294967295
 800471c:	b01d      	add	sp, #116	; 0x74
 800471e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004722:	89ab      	ldrh	r3, [r5, #12]
 8004724:	0598      	lsls	r0, r3, #22
 8004726:	d4f7      	bmi.n	8004718 <_vfiprintf_r+0x44>
 8004728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800472a:	f7ff fd41 	bl	80041b0 <__retarget_lock_release_recursive>
 800472e:	e7f3      	b.n	8004718 <_vfiprintf_r+0x44>
 8004730:	2300      	movs	r3, #0
 8004732:	9309      	str	r3, [sp, #36]	; 0x24
 8004734:	2320      	movs	r3, #32
 8004736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800473a:	2330      	movs	r3, #48	; 0x30
 800473c:	f04f 0901 	mov.w	r9, #1
 8004740:	f8cd 800c 	str.w	r8, [sp, #12]
 8004744:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80048f4 <_vfiprintf_r+0x220>
 8004748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800474c:	4623      	mov	r3, r4
 800474e:	469a      	mov	sl, r3
 8004750:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004754:	b10a      	cbz	r2, 800475a <_vfiprintf_r+0x86>
 8004756:	2a25      	cmp	r2, #37	; 0x25
 8004758:	d1f9      	bne.n	800474e <_vfiprintf_r+0x7a>
 800475a:	ebba 0b04 	subs.w	fp, sl, r4
 800475e:	d00b      	beq.n	8004778 <_vfiprintf_r+0xa4>
 8004760:	465b      	mov	r3, fp
 8004762:	4622      	mov	r2, r4
 8004764:	4629      	mov	r1, r5
 8004766:	4630      	mov	r0, r6
 8004768:	f7ff ffa1 	bl	80046ae <__sfputs_r>
 800476c:	3001      	adds	r0, #1
 800476e:	f000 80a9 	beq.w	80048c4 <_vfiprintf_r+0x1f0>
 8004772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004774:	445a      	add	r2, fp
 8004776:	9209      	str	r2, [sp, #36]	; 0x24
 8004778:	f89a 3000 	ldrb.w	r3, [sl]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80a1 	beq.w	80048c4 <_vfiprintf_r+0x1f0>
 8004782:	2300      	movs	r3, #0
 8004784:	f04f 32ff 	mov.w	r2, #4294967295
 8004788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800478c:	f10a 0a01 	add.w	sl, sl, #1
 8004790:	9304      	str	r3, [sp, #16]
 8004792:	9307      	str	r3, [sp, #28]
 8004794:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004798:	931a      	str	r3, [sp, #104]	; 0x68
 800479a:	4654      	mov	r4, sl
 800479c:	2205      	movs	r2, #5
 800479e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a2:	4854      	ldr	r0, [pc, #336]	; (80048f4 <_vfiprintf_r+0x220>)
 80047a4:	f000 fbe0 	bl	8004f68 <memchr>
 80047a8:	9a04      	ldr	r2, [sp, #16]
 80047aa:	b9d8      	cbnz	r0, 80047e4 <_vfiprintf_r+0x110>
 80047ac:	06d1      	lsls	r1, r2, #27
 80047ae:	bf44      	itt	mi
 80047b0:	2320      	movmi	r3, #32
 80047b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047b6:	0713      	lsls	r3, r2, #28
 80047b8:	bf44      	itt	mi
 80047ba:	232b      	movmi	r3, #43	; 0x2b
 80047bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047c0:	f89a 3000 	ldrb.w	r3, [sl]
 80047c4:	2b2a      	cmp	r3, #42	; 0x2a
 80047c6:	d015      	beq.n	80047f4 <_vfiprintf_r+0x120>
 80047c8:	4654      	mov	r4, sl
 80047ca:	2000      	movs	r0, #0
 80047cc:	f04f 0c0a 	mov.w	ip, #10
 80047d0:	9a07      	ldr	r2, [sp, #28]
 80047d2:	4621      	mov	r1, r4
 80047d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047d8:	3b30      	subs	r3, #48	; 0x30
 80047da:	2b09      	cmp	r3, #9
 80047dc:	d94d      	bls.n	800487a <_vfiprintf_r+0x1a6>
 80047de:	b1b0      	cbz	r0, 800480e <_vfiprintf_r+0x13a>
 80047e0:	9207      	str	r2, [sp, #28]
 80047e2:	e014      	b.n	800480e <_vfiprintf_r+0x13a>
 80047e4:	eba0 0308 	sub.w	r3, r0, r8
 80047e8:	fa09 f303 	lsl.w	r3, r9, r3
 80047ec:	4313      	orrs	r3, r2
 80047ee:	46a2      	mov	sl, r4
 80047f0:	9304      	str	r3, [sp, #16]
 80047f2:	e7d2      	b.n	800479a <_vfiprintf_r+0xc6>
 80047f4:	9b03      	ldr	r3, [sp, #12]
 80047f6:	1d19      	adds	r1, r3, #4
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	9103      	str	r1, [sp, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bfbb      	ittet	lt
 8004800:	425b      	neglt	r3, r3
 8004802:	f042 0202 	orrlt.w	r2, r2, #2
 8004806:	9307      	strge	r3, [sp, #28]
 8004808:	9307      	strlt	r3, [sp, #28]
 800480a:	bfb8      	it	lt
 800480c:	9204      	strlt	r2, [sp, #16]
 800480e:	7823      	ldrb	r3, [r4, #0]
 8004810:	2b2e      	cmp	r3, #46	; 0x2e
 8004812:	d10c      	bne.n	800482e <_vfiprintf_r+0x15a>
 8004814:	7863      	ldrb	r3, [r4, #1]
 8004816:	2b2a      	cmp	r3, #42	; 0x2a
 8004818:	d134      	bne.n	8004884 <_vfiprintf_r+0x1b0>
 800481a:	9b03      	ldr	r3, [sp, #12]
 800481c:	3402      	adds	r4, #2
 800481e:	1d1a      	adds	r2, r3, #4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	9203      	str	r2, [sp, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	bfb8      	it	lt
 8004828:	f04f 33ff 	movlt.w	r3, #4294967295
 800482c:	9305      	str	r3, [sp, #20]
 800482e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048f8 <_vfiprintf_r+0x224>
 8004832:	2203      	movs	r2, #3
 8004834:	4650      	mov	r0, sl
 8004836:	7821      	ldrb	r1, [r4, #0]
 8004838:	f000 fb96 	bl	8004f68 <memchr>
 800483c:	b138      	cbz	r0, 800484e <_vfiprintf_r+0x17a>
 800483e:	2240      	movs	r2, #64	; 0x40
 8004840:	9b04      	ldr	r3, [sp, #16]
 8004842:	eba0 000a 	sub.w	r0, r0, sl
 8004846:	4082      	lsls	r2, r0
 8004848:	4313      	orrs	r3, r2
 800484a:	3401      	adds	r4, #1
 800484c:	9304      	str	r3, [sp, #16]
 800484e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004852:	2206      	movs	r2, #6
 8004854:	4829      	ldr	r0, [pc, #164]	; (80048fc <_vfiprintf_r+0x228>)
 8004856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800485a:	f000 fb85 	bl	8004f68 <memchr>
 800485e:	2800      	cmp	r0, #0
 8004860:	d03f      	beq.n	80048e2 <_vfiprintf_r+0x20e>
 8004862:	4b27      	ldr	r3, [pc, #156]	; (8004900 <_vfiprintf_r+0x22c>)
 8004864:	bb1b      	cbnz	r3, 80048ae <_vfiprintf_r+0x1da>
 8004866:	9b03      	ldr	r3, [sp, #12]
 8004868:	3307      	adds	r3, #7
 800486a:	f023 0307 	bic.w	r3, r3, #7
 800486e:	3308      	adds	r3, #8
 8004870:	9303      	str	r3, [sp, #12]
 8004872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004874:	443b      	add	r3, r7
 8004876:	9309      	str	r3, [sp, #36]	; 0x24
 8004878:	e768      	b.n	800474c <_vfiprintf_r+0x78>
 800487a:	460c      	mov	r4, r1
 800487c:	2001      	movs	r0, #1
 800487e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004882:	e7a6      	b.n	80047d2 <_vfiprintf_r+0xfe>
 8004884:	2300      	movs	r3, #0
 8004886:	f04f 0c0a 	mov.w	ip, #10
 800488a:	4619      	mov	r1, r3
 800488c:	3401      	adds	r4, #1
 800488e:	9305      	str	r3, [sp, #20]
 8004890:	4620      	mov	r0, r4
 8004892:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004896:	3a30      	subs	r2, #48	; 0x30
 8004898:	2a09      	cmp	r2, #9
 800489a:	d903      	bls.n	80048a4 <_vfiprintf_r+0x1d0>
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0c6      	beq.n	800482e <_vfiprintf_r+0x15a>
 80048a0:	9105      	str	r1, [sp, #20]
 80048a2:	e7c4      	b.n	800482e <_vfiprintf_r+0x15a>
 80048a4:	4604      	mov	r4, r0
 80048a6:	2301      	movs	r3, #1
 80048a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80048ac:	e7f0      	b.n	8004890 <_vfiprintf_r+0x1bc>
 80048ae:	ab03      	add	r3, sp, #12
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	462a      	mov	r2, r5
 80048b4:	4630      	mov	r0, r6
 80048b6:	4b13      	ldr	r3, [pc, #76]	; (8004904 <_vfiprintf_r+0x230>)
 80048b8:	a904      	add	r1, sp, #16
 80048ba:	f3af 8000 	nop.w
 80048be:	4607      	mov	r7, r0
 80048c0:	1c78      	adds	r0, r7, #1
 80048c2:	d1d6      	bne.n	8004872 <_vfiprintf_r+0x19e>
 80048c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048c6:	07d9      	lsls	r1, r3, #31
 80048c8:	d405      	bmi.n	80048d6 <_vfiprintf_r+0x202>
 80048ca:	89ab      	ldrh	r3, [r5, #12]
 80048cc:	059a      	lsls	r2, r3, #22
 80048ce:	d402      	bmi.n	80048d6 <_vfiprintf_r+0x202>
 80048d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048d2:	f7ff fc6d 	bl	80041b0 <__retarget_lock_release_recursive>
 80048d6:	89ab      	ldrh	r3, [r5, #12]
 80048d8:	065b      	lsls	r3, r3, #25
 80048da:	f53f af1d 	bmi.w	8004718 <_vfiprintf_r+0x44>
 80048de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048e0:	e71c      	b.n	800471c <_vfiprintf_r+0x48>
 80048e2:	ab03      	add	r3, sp, #12
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	462a      	mov	r2, r5
 80048e8:	4630      	mov	r0, r6
 80048ea:	4b06      	ldr	r3, [pc, #24]	; (8004904 <_vfiprintf_r+0x230>)
 80048ec:	a904      	add	r1, sp, #16
 80048ee:	f000 f87d 	bl	80049ec <_printf_i>
 80048f2:	e7e4      	b.n	80048be <_vfiprintf_r+0x1ea>
 80048f4:	08005274 	.word	0x08005274
 80048f8:	0800527a 	.word	0x0800527a
 80048fc:	0800527e 	.word	0x0800527e
 8004900:	00000000 	.word	0x00000000
 8004904:	080046af 	.word	0x080046af

08004908 <_printf_common>:
 8004908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800490c:	4616      	mov	r6, r2
 800490e:	4699      	mov	r9, r3
 8004910:	688a      	ldr	r2, [r1, #8]
 8004912:	690b      	ldr	r3, [r1, #16]
 8004914:	4607      	mov	r7, r0
 8004916:	4293      	cmp	r3, r2
 8004918:	bfb8      	it	lt
 800491a:	4613      	movlt	r3, r2
 800491c:	6033      	str	r3, [r6, #0]
 800491e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004922:	460c      	mov	r4, r1
 8004924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004928:	b10a      	cbz	r2, 800492e <_printf_common+0x26>
 800492a:	3301      	adds	r3, #1
 800492c:	6033      	str	r3, [r6, #0]
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	0699      	lsls	r1, r3, #26
 8004932:	bf42      	ittt	mi
 8004934:	6833      	ldrmi	r3, [r6, #0]
 8004936:	3302      	addmi	r3, #2
 8004938:	6033      	strmi	r3, [r6, #0]
 800493a:	6825      	ldr	r5, [r4, #0]
 800493c:	f015 0506 	ands.w	r5, r5, #6
 8004940:	d106      	bne.n	8004950 <_printf_common+0x48>
 8004942:	f104 0a19 	add.w	sl, r4, #25
 8004946:	68e3      	ldr	r3, [r4, #12]
 8004948:	6832      	ldr	r2, [r6, #0]
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	42ab      	cmp	r3, r5
 800494e:	dc2b      	bgt.n	80049a8 <_printf_common+0xa0>
 8004950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004954:	1e13      	subs	r3, r2, #0
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	bf18      	it	ne
 800495a:	2301      	movne	r3, #1
 800495c:	0692      	lsls	r2, r2, #26
 800495e:	d430      	bmi.n	80049c2 <_printf_common+0xba>
 8004960:	4649      	mov	r1, r9
 8004962:	4638      	mov	r0, r7
 8004964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004968:	47c0      	blx	r8
 800496a:	3001      	adds	r0, #1
 800496c:	d023      	beq.n	80049b6 <_printf_common+0xae>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	6922      	ldr	r2, [r4, #16]
 8004972:	f003 0306 	and.w	r3, r3, #6
 8004976:	2b04      	cmp	r3, #4
 8004978:	bf14      	ite	ne
 800497a:	2500      	movne	r5, #0
 800497c:	6833      	ldreq	r3, [r6, #0]
 800497e:	f04f 0600 	mov.w	r6, #0
 8004982:	bf08      	it	eq
 8004984:	68e5      	ldreq	r5, [r4, #12]
 8004986:	f104 041a 	add.w	r4, r4, #26
 800498a:	bf08      	it	eq
 800498c:	1aed      	subeq	r5, r5, r3
 800498e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004992:	bf08      	it	eq
 8004994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004998:	4293      	cmp	r3, r2
 800499a:	bfc4      	itt	gt
 800499c:	1a9b      	subgt	r3, r3, r2
 800499e:	18ed      	addgt	r5, r5, r3
 80049a0:	42b5      	cmp	r5, r6
 80049a2:	d11a      	bne.n	80049da <_printf_common+0xd2>
 80049a4:	2000      	movs	r0, #0
 80049a6:	e008      	b.n	80049ba <_printf_common+0xb2>
 80049a8:	2301      	movs	r3, #1
 80049aa:	4652      	mov	r2, sl
 80049ac:	4649      	mov	r1, r9
 80049ae:	4638      	mov	r0, r7
 80049b0:	47c0      	blx	r8
 80049b2:	3001      	adds	r0, #1
 80049b4:	d103      	bne.n	80049be <_printf_common+0xb6>
 80049b6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049be:	3501      	adds	r5, #1
 80049c0:	e7c1      	b.n	8004946 <_printf_common+0x3e>
 80049c2:	2030      	movs	r0, #48	; 0x30
 80049c4:	18e1      	adds	r1, r4, r3
 80049c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049d0:	4422      	add	r2, r4
 80049d2:	3302      	adds	r3, #2
 80049d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049d8:	e7c2      	b.n	8004960 <_printf_common+0x58>
 80049da:	2301      	movs	r3, #1
 80049dc:	4622      	mov	r2, r4
 80049de:	4649      	mov	r1, r9
 80049e0:	4638      	mov	r0, r7
 80049e2:	47c0      	blx	r8
 80049e4:	3001      	adds	r0, #1
 80049e6:	d0e6      	beq.n	80049b6 <_printf_common+0xae>
 80049e8:	3601      	adds	r6, #1
 80049ea:	e7d9      	b.n	80049a0 <_printf_common+0x98>

080049ec <_printf_i>:
 80049ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049f0:	7e0f      	ldrb	r7, [r1, #24]
 80049f2:	4691      	mov	r9, r2
 80049f4:	2f78      	cmp	r7, #120	; 0x78
 80049f6:	4680      	mov	r8, r0
 80049f8:	460c      	mov	r4, r1
 80049fa:	469a      	mov	sl, r3
 80049fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a02:	d807      	bhi.n	8004a14 <_printf_i+0x28>
 8004a04:	2f62      	cmp	r7, #98	; 0x62
 8004a06:	d80a      	bhi.n	8004a1e <_printf_i+0x32>
 8004a08:	2f00      	cmp	r7, #0
 8004a0a:	f000 80d5 	beq.w	8004bb8 <_printf_i+0x1cc>
 8004a0e:	2f58      	cmp	r7, #88	; 0x58
 8004a10:	f000 80c1 	beq.w	8004b96 <_printf_i+0x1aa>
 8004a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a1c:	e03a      	b.n	8004a94 <_printf_i+0xa8>
 8004a1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a22:	2b15      	cmp	r3, #21
 8004a24:	d8f6      	bhi.n	8004a14 <_printf_i+0x28>
 8004a26:	a101      	add	r1, pc, #4	; (adr r1, 8004a2c <_printf_i+0x40>)
 8004a28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a2c:	08004a85 	.word	0x08004a85
 8004a30:	08004a99 	.word	0x08004a99
 8004a34:	08004a15 	.word	0x08004a15
 8004a38:	08004a15 	.word	0x08004a15
 8004a3c:	08004a15 	.word	0x08004a15
 8004a40:	08004a15 	.word	0x08004a15
 8004a44:	08004a99 	.word	0x08004a99
 8004a48:	08004a15 	.word	0x08004a15
 8004a4c:	08004a15 	.word	0x08004a15
 8004a50:	08004a15 	.word	0x08004a15
 8004a54:	08004a15 	.word	0x08004a15
 8004a58:	08004b9f 	.word	0x08004b9f
 8004a5c:	08004ac5 	.word	0x08004ac5
 8004a60:	08004b59 	.word	0x08004b59
 8004a64:	08004a15 	.word	0x08004a15
 8004a68:	08004a15 	.word	0x08004a15
 8004a6c:	08004bc1 	.word	0x08004bc1
 8004a70:	08004a15 	.word	0x08004a15
 8004a74:	08004ac5 	.word	0x08004ac5
 8004a78:	08004a15 	.word	0x08004a15
 8004a7c:	08004a15 	.word	0x08004a15
 8004a80:	08004b61 	.word	0x08004b61
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	1d1a      	adds	r2, r3, #4
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	602a      	str	r2, [r5, #0]
 8004a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0a0      	b.n	8004bda <_printf_i+0x1ee>
 8004a98:	6820      	ldr	r0, [r4, #0]
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	0607      	lsls	r7, r0, #24
 8004a9e:	f103 0104 	add.w	r1, r3, #4
 8004aa2:	6029      	str	r1, [r5, #0]
 8004aa4:	d501      	bpl.n	8004aaa <_printf_i+0xbe>
 8004aa6:	681e      	ldr	r6, [r3, #0]
 8004aa8:	e003      	b.n	8004ab2 <_printf_i+0xc6>
 8004aaa:	0646      	lsls	r6, r0, #25
 8004aac:	d5fb      	bpl.n	8004aa6 <_printf_i+0xba>
 8004aae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ab2:	2e00      	cmp	r6, #0
 8004ab4:	da03      	bge.n	8004abe <_printf_i+0xd2>
 8004ab6:	232d      	movs	r3, #45	; 0x2d
 8004ab8:	4276      	negs	r6, r6
 8004aba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004abe:	230a      	movs	r3, #10
 8004ac0:	4859      	ldr	r0, [pc, #356]	; (8004c28 <_printf_i+0x23c>)
 8004ac2:	e012      	b.n	8004aea <_printf_i+0xfe>
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	1d19      	adds	r1, r3, #4
 8004aca:	6029      	str	r1, [r5, #0]
 8004acc:	0605      	lsls	r5, r0, #24
 8004ace:	d501      	bpl.n	8004ad4 <_printf_i+0xe8>
 8004ad0:	681e      	ldr	r6, [r3, #0]
 8004ad2:	e002      	b.n	8004ada <_printf_i+0xee>
 8004ad4:	0641      	lsls	r1, r0, #25
 8004ad6:	d5fb      	bpl.n	8004ad0 <_printf_i+0xe4>
 8004ad8:	881e      	ldrh	r6, [r3, #0]
 8004ada:	2f6f      	cmp	r7, #111	; 0x6f
 8004adc:	bf0c      	ite	eq
 8004ade:	2308      	moveq	r3, #8
 8004ae0:	230a      	movne	r3, #10
 8004ae2:	4851      	ldr	r0, [pc, #324]	; (8004c28 <_printf_i+0x23c>)
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aea:	6865      	ldr	r5, [r4, #4]
 8004aec:	2d00      	cmp	r5, #0
 8004aee:	bfa8      	it	ge
 8004af0:	6821      	ldrge	r1, [r4, #0]
 8004af2:	60a5      	str	r5, [r4, #8]
 8004af4:	bfa4      	itt	ge
 8004af6:	f021 0104 	bicge.w	r1, r1, #4
 8004afa:	6021      	strge	r1, [r4, #0]
 8004afc:	b90e      	cbnz	r6, 8004b02 <_printf_i+0x116>
 8004afe:	2d00      	cmp	r5, #0
 8004b00:	d04b      	beq.n	8004b9a <_printf_i+0x1ae>
 8004b02:	4615      	mov	r5, r2
 8004b04:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b08:	fb03 6711 	mls	r7, r3, r1, r6
 8004b0c:	5dc7      	ldrb	r7, [r0, r7]
 8004b0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b12:	4637      	mov	r7, r6
 8004b14:	42bb      	cmp	r3, r7
 8004b16:	460e      	mov	r6, r1
 8004b18:	d9f4      	bls.n	8004b04 <_printf_i+0x118>
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d10b      	bne.n	8004b36 <_printf_i+0x14a>
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	07de      	lsls	r6, r3, #31
 8004b22:	d508      	bpl.n	8004b36 <_printf_i+0x14a>
 8004b24:	6923      	ldr	r3, [r4, #16]
 8004b26:	6861      	ldr	r1, [r4, #4]
 8004b28:	4299      	cmp	r1, r3
 8004b2a:	bfde      	ittt	le
 8004b2c:	2330      	movle	r3, #48	; 0x30
 8004b2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b36:	1b52      	subs	r2, r2, r5
 8004b38:	6122      	str	r2, [r4, #16]
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4640      	mov	r0, r8
 8004b40:	f8cd a000 	str.w	sl, [sp]
 8004b44:	aa03      	add	r2, sp, #12
 8004b46:	f7ff fedf 	bl	8004908 <_printf_common>
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	d14a      	bne.n	8004be4 <_printf_i+0x1f8>
 8004b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b52:	b004      	add	sp, #16
 8004b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	f043 0320 	orr.w	r3, r3, #32
 8004b5e:	6023      	str	r3, [r4, #0]
 8004b60:	2778      	movs	r7, #120	; 0x78
 8004b62:	4832      	ldr	r0, [pc, #200]	; (8004c2c <_printf_i+0x240>)
 8004b64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	6829      	ldr	r1, [r5, #0]
 8004b6c:	061f      	lsls	r7, r3, #24
 8004b6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b72:	d402      	bmi.n	8004b7a <_printf_i+0x18e>
 8004b74:	065f      	lsls	r7, r3, #25
 8004b76:	bf48      	it	mi
 8004b78:	b2b6      	uxthmi	r6, r6
 8004b7a:	07df      	lsls	r7, r3, #31
 8004b7c:	bf48      	it	mi
 8004b7e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b82:	6029      	str	r1, [r5, #0]
 8004b84:	bf48      	it	mi
 8004b86:	6023      	strmi	r3, [r4, #0]
 8004b88:	b91e      	cbnz	r6, 8004b92 <_printf_i+0x1a6>
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	f023 0320 	bic.w	r3, r3, #32
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	2310      	movs	r3, #16
 8004b94:	e7a6      	b.n	8004ae4 <_printf_i+0xf8>
 8004b96:	4824      	ldr	r0, [pc, #144]	; (8004c28 <_printf_i+0x23c>)
 8004b98:	e7e4      	b.n	8004b64 <_printf_i+0x178>
 8004b9a:	4615      	mov	r5, r2
 8004b9c:	e7bd      	b.n	8004b1a <_printf_i+0x12e>
 8004b9e:	682b      	ldr	r3, [r5, #0]
 8004ba0:	6826      	ldr	r6, [r4, #0]
 8004ba2:	1d18      	adds	r0, r3, #4
 8004ba4:	6961      	ldr	r1, [r4, #20]
 8004ba6:	6028      	str	r0, [r5, #0]
 8004ba8:	0635      	lsls	r5, r6, #24
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	d501      	bpl.n	8004bb2 <_printf_i+0x1c6>
 8004bae:	6019      	str	r1, [r3, #0]
 8004bb0:	e002      	b.n	8004bb8 <_printf_i+0x1cc>
 8004bb2:	0670      	lsls	r0, r6, #25
 8004bb4:	d5fb      	bpl.n	8004bae <_printf_i+0x1c2>
 8004bb6:	8019      	strh	r1, [r3, #0]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4615      	mov	r5, r2
 8004bbc:	6123      	str	r3, [r4, #16]
 8004bbe:	e7bc      	b.n	8004b3a <_printf_i+0x14e>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	1d1a      	adds	r2, r3, #4
 8004bc6:	602a      	str	r2, [r5, #0]
 8004bc8:	681d      	ldr	r5, [r3, #0]
 8004bca:	6862      	ldr	r2, [r4, #4]
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f000 f9cb 	bl	8004f68 <memchr>
 8004bd2:	b108      	cbz	r0, 8004bd8 <_printf_i+0x1ec>
 8004bd4:	1b40      	subs	r0, r0, r5
 8004bd6:	6060      	str	r0, [r4, #4]
 8004bd8:	6863      	ldr	r3, [r4, #4]
 8004bda:	6123      	str	r3, [r4, #16]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be2:	e7aa      	b.n	8004b3a <_printf_i+0x14e>
 8004be4:	462a      	mov	r2, r5
 8004be6:	4649      	mov	r1, r9
 8004be8:	4640      	mov	r0, r8
 8004bea:	6923      	ldr	r3, [r4, #16]
 8004bec:	47d0      	blx	sl
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d0ad      	beq.n	8004b4e <_printf_i+0x162>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	079b      	lsls	r3, r3, #30
 8004bf6:	d413      	bmi.n	8004c20 <_printf_i+0x234>
 8004bf8:	68e0      	ldr	r0, [r4, #12]
 8004bfa:	9b03      	ldr	r3, [sp, #12]
 8004bfc:	4298      	cmp	r0, r3
 8004bfe:	bfb8      	it	lt
 8004c00:	4618      	movlt	r0, r3
 8004c02:	e7a6      	b.n	8004b52 <_printf_i+0x166>
 8004c04:	2301      	movs	r3, #1
 8004c06:	4632      	mov	r2, r6
 8004c08:	4649      	mov	r1, r9
 8004c0a:	4640      	mov	r0, r8
 8004c0c:	47d0      	blx	sl
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d09d      	beq.n	8004b4e <_printf_i+0x162>
 8004c12:	3501      	adds	r5, #1
 8004c14:	68e3      	ldr	r3, [r4, #12]
 8004c16:	9903      	ldr	r1, [sp, #12]
 8004c18:	1a5b      	subs	r3, r3, r1
 8004c1a:	42ab      	cmp	r3, r5
 8004c1c:	dcf2      	bgt.n	8004c04 <_printf_i+0x218>
 8004c1e:	e7eb      	b.n	8004bf8 <_printf_i+0x20c>
 8004c20:	2500      	movs	r5, #0
 8004c22:	f104 0619 	add.w	r6, r4, #25
 8004c26:	e7f5      	b.n	8004c14 <_printf_i+0x228>
 8004c28:	08005285 	.word	0x08005285
 8004c2c:	08005296 	.word	0x08005296

08004c30 <__sflush_r>:
 8004c30:	898a      	ldrh	r2, [r1, #12]
 8004c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c34:	4605      	mov	r5, r0
 8004c36:	0710      	lsls	r0, r2, #28
 8004c38:	460c      	mov	r4, r1
 8004c3a:	d457      	bmi.n	8004cec <__sflush_r+0xbc>
 8004c3c:	684b      	ldr	r3, [r1, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	dc04      	bgt.n	8004c4c <__sflush_r+0x1c>
 8004c42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	dc01      	bgt.n	8004c4c <__sflush_r+0x1c>
 8004c48:	2000      	movs	r0, #0
 8004c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c4e:	2e00      	cmp	r6, #0
 8004c50:	d0fa      	beq.n	8004c48 <__sflush_r+0x18>
 8004c52:	2300      	movs	r3, #0
 8004c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c58:	682f      	ldr	r7, [r5, #0]
 8004c5a:	6a21      	ldr	r1, [r4, #32]
 8004c5c:	602b      	str	r3, [r5, #0]
 8004c5e:	d032      	beq.n	8004cc6 <__sflush_r+0x96>
 8004c60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	075a      	lsls	r2, r3, #29
 8004c66:	d505      	bpl.n	8004c74 <__sflush_r+0x44>
 8004c68:	6863      	ldr	r3, [r4, #4]
 8004c6a:	1ac0      	subs	r0, r0, r3
 8004c6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c6e:	b10b      	cbz	r3, 8004c74 <__sflush_r+0x44>
 8004c70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c72:	1ac0      	subs	r0, r0, r3
 8004c74:	2300      	movs	r3, #0
 8004c76:	4602      	mov	r2, r0
 8004c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	6a21      	ldr	r1, [r4, #32]
 8004c7e:	47b0      	blx	r6
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	89a3      	ldrh	r3, [r4, #12]
 8004c84:	d106      	bne.n	8004c94 <__sflush_r+0x64>
 8004c86:	6829      	ldr	r1, [r5, #0]
 8004c88:	291d      	cmp	r1, #29
 8004c8a:	d82b      	bhi.n	8004ce4 <__sflush_r+0xb4>
 8004c8c:	4a28      	ldr	r2, [pc, #160]	; (8004d30 <__sflush_r+0x100>)
 8004c8e:	410a      	asrs	r2, r1
 8004c90:	07d6      	lsls	r6, r2, #31
 8004c92:	d427      	bmi.n	8004ce4 <__sflush_r+0xb4>
 8004c94:	2200      	movs	r2, #0
 8004c96:	6062      	str	r2, [r4, #4]
 8004c98:	6922      	ldr	r2, [r4, #16]
 8004c9a:	04d9      	lsls	r1, r3, #19
 8004c9c:	6022      	str	r2, [r4, #0]
 8004c9e:	d504      	bpl.n	8004caa <__sflush_r+0x7a>
 8004ca0:	1c42      	adds	r2, r0, #1
 8004ca2:	d101      	bne.n	8004ca8 <__sflush_r+0x78>
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	b903      	cbnz	r3, 8004caa <__sflush_r+0x7a>
 8004ca8:	6560      	str	r0, [r4, #84]	; 0x54
 8004caa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cac:	602f      	str	r7, [r5, #0]
 8004cae:	2900      	cmp	r1, #0
 8004cb0:	d0ca      	beq.n	8004c48 <__sflush_r+0x18>
 8004cb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cb6:	4299      	cmp	r1, r3
 8004cb8:	d002      	beq.n	8004cc0 <__sflush_r+0x90>
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f7ff fa8e 	bl	80041dc <_free_r>
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	6360      	str	r0, [r4, #52]	; 0x34
 8004cc4:	e7c1      	b.n	8004c4a <__sflush_r+0x1a>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	4628      	mov	r0, r5
 8004cca:	47b0      	blx	r6
 8004ccc:	1c41      	adds	r1, r0, #1
 8004cce:	d1c8      	bne.n	8004c62 <__sflush_r+0x32>
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0c5      	beq.n	8004c62 <__sflush_r+0x32>
 8004cd6:	2b1d      	cmp	r3, #29
 8004cd8:	d001      	beq.n	8004cde <__sflush_r+0xae>
 8004cda:	2b16      	cmp	r3, #22
 8004cdc:	d101      	bne.n	8004ce2 <__sflush_r+0xb2>
 8004cde:	602f      	str	r7, [r5, #0]
 8004ce0:	e7b2      	b.n	8004c48 <__sflush_r+0x18>
 8004ce2:	89a3      	ldrh	r3, [r4, #12]
 8004ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ce8:	81a3      	strh	r3, [r4, #12]
 8004cea:	e7ae      	b.n	8004c4a <__sflush_r+0x1a>
 8004cec:	690f      	ldr	r7, [r1, #16]
 8004cee:	2f00      	cmp	r7, #0
 8004cf0:	d0aa      	beq.n	8004c48 <__sflush_r+0x18>
 8004cf2:	0793      	lsls	r3, r2, #30
 8004cf4:	bf18      	it	ne
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	680e      	ldr	r6, [r1, #0]
 8004cfa:	bf08      	it	eq
 8004cfc:	694b      	ldreq	r3, [r1, #20]
 8004cfe:	1bf6      	subs	r6, r6, r7
 8004d00:	600f      	str	r7, [r1, #0]
 8004d02:	608b      	str	r3, [r1, #8]
 8004d04:	2e00      	cmp	r6, #0
 8004d06:	dd9f      	ble.n	8004c48 <__sflush_r+0x18>
 8004d08:	4633      	mov	r3, r6
 8004d0a:	463a      	mov	r2, r7
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	6a21      	ldr	r1, [r4, #32]
 8004d10:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004d14:	47e0      	blx	ip
 8004d16:	2800      	cmp	r0, #0
 8004d18:	dc06      	bgt.n	8004d28 <__sflush_r+0xf8>
 8004d1a:	89a3      	ldrh	r3, [r4, #12]
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d24:	81a3      	strh	r3, [r4, #12]
 8004d26:	e790      	b.n	8004c4a <__sflush_r+0x1a>
 8004d28:	4407      	add	r7, r0
 8004d2a:	1a36      	subs	r6, r6, r0
 8004d2c:	e7ea      	b.n	8004d04 <__sflush_r+0xd4>
 8004d2e:	bf00      	nop
 8004d30:	dfbffffe 	.word	0xdfbffffe

08004d34 <_fflush_r>:
 8004d34:	b538      	push	{r3, r4, r5, lr}
 8004d36:	690b      	ldr	r3, [r1, #16]
 8004d38:	4605      	mov	r5, r0
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	b913      	cbnz	r3, 8004d44 <_fflush_r+0x10>
 8004d3e:	2500      	movs	r5, #0
 8004d40:	4628      	mov	r0, r5
 8004d42:	bd38      	pop	{r3, r4, r5, pc}
 8004d44:	b118      	cbz	r0, 8004d4e <_fflush_r+0x1a>
 8004d46:	6a03      	ldr	r3, [r0, #32]
 8004d48:	b90b      	cbnz	r3, 8004d4e <_fflush_r+0x1a>
 8004d4a:	f7ff f81b 	bl	8003d84 <__sinit>
 8004d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f3      	beq.n	8004d3e <_fflush_r+0xa>
 8004d56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d58:	07d0      	lsls	r0, r2, #31
 8004d5a:	d404      	bmi.n	8004d66 <_fflush_r+0x32>
 8004d5c:	0599      	lsls	r1, r3, #22
 8004d5e:	d402      	bmi.n	8004d66 <_fflush_r+0x32>
 8004d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d62:	f7ff fa24 	bl	80041ae <__retarget_lock_acquire_recursive>
 8004d66:	4628      	mov	r0, r5
 8004d68:	4621      	mov	r1, r4
 8004d6a:	f7ff ff61 	bl	8004c30 <__sflush_r>
 8004d6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d70:	4605      	mov	r5, r0
 8004d72:	07da      	lsls	r2, r3, #31
 8004d74:	d4e4      	bmi.n	8004d40 <_fflush_r+0xc>
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	059b      	lsls	r3, r3, #22
 8004d7a:	d4e1      	bmi.n	8004d40 <_fflush_r+0xc>
 8004d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d7e:	f7ff fa17 	bl	80041b0 <__retarget_lock_release_recursive>
 8004d82:	e7dd      	b.n	8004d40 <_fflush_r+0xc>

08004d84 <__swhatbuf_r>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	460c      	mov	r4, r1
 8004d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d8c:	4615      	mov	r5, r2
 8004d8e:	2900      	cmp	r1, #0
 8004d90:	461e      	mov	r6, r3
 8004d92:	b096      	sub	sp, #88	; 0x58
 8004d94:	da0c      	bge.n	8004db0 <__swhatbuf_r+0x2c>
 8004d96:	89a3      	ldrh	r3, [r4, #12]
 8004d98:	2100      	movs	r1, #0
 8004d9a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d9e:	bf0c      	ite	eq
 8004da0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004da4:	2340      	movne	r3, #64	; 0x40
 8004da6:	2000      	movs	r0, #0
 8004da8:	6031      	str	r1, [r6, #0]
 8004daa:	602b      	str	r3, [r5, #0]
 8004dac:	b016      	add	sp, #88	; 0x58
 8004dae:	bd70      	pop	{r4, r5, r6, pc}
 8004db0:	466a      	mov	r2, sp
 8004db2:	f000 f893 	bl	8004edc <_fstat_r>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	dbed      	blt.n	8004d96 <__swhatbuf_r+0x12>
 8004dba:	9901      	ldr	r1, [sp, #4]
 8004dbc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004dc0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004dc4:	4259      	negs	r1, r3
 8004dc6:	4159      	adcs	r1, r3
 8004dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dcc:	e7eb      	b.n	8004da6 <__swhatbuf_r+0x22>

08004dce <__smakebuf_r>:
 8004dce:	898b      	ldrh	r3, [r1, #12]
 8004dd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004dd2:	079d      	lsls	r5, r3, #30
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	d507      	bpl.n	8004dea <__smakebuf_r+0x1c>
 8004dda:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004dde:	6023      	str	r3, [r4, #0]
 8004de0:	6123      	str	r3, [r4, #16]
 8004de2:	2301      	movs	r3, #1
 8004de4:	6163      	str	r3, [r4, #20]
 8004de6:	b002      	add	sp, #8
 8004de8:	bd70      	pop	{r4, r5, r6, pc}
 8004dea:	466a      	mov	r2, sp
 8004dec:	ab01      	add	r3, sp, #4
 8004dee:	f7ff ffc9 	bl	8004d84 <__swhatbuf_r>
 8004df2:	9900      	ldr	r1, [sp, #0]
 8004df4:	4605      	mov	r5, r0
 8004df6:	4630      	mov	r0, r6
 8004df8:	f7ff fa60 	bl	80042bc <_malloc_r>
 8004dfc:	b948      	cbnz	r0, 8004e12 <__smakebuf_r+0x44>
 8004dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e02:	059a      	lsls	r2, r3, #22
 8004e04:	d4ef      	bmi.n	8004de6 <__smakebuf_r+0x18>
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	f043 0302 	orr.w	r3, r3, #2
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	e7e3      	b.n	8004dda <__smakebuf_r+0xc>
 8004e12:	89a3      	ldrh	r3, [r4, #12]
 8004e14:	6020      	str	r0, [r4, #0]
 8004e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	9b00      	ldr	r3, [sp, #0]
 8004e1e:	6120      	str	r0, [r4, #16]
 8004e20:	6163      	str	r3, [r4, #20]
 8004e22:	9b01      	ldr	r3, [sp, #4]
 8004e24:	b15b      	cbz	r3, 8004e3e <__smakebuf_r+0x70>
 8004e26:	4630      	mov	r0, r6
 8004e28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e2c:	f000 f868 	bl	8004f00 <_isatty_r>
 8004e30:	b128      	cbz	r0, 8004e3e <__smakebuf_r+0x70>
 8004e32:	89a3      	ldrh	r3, [r4, #12]
 8004e34:	f023 0303 	bic.w	r3, r3, #3
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	81a3      	strh	r3, [r4, #12]
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	431d      	orrs	r5, r3
 8004e42:	81a5      	strh	r5, [r4, #12]
 8004e44:	e7cf      	b.n	8004de6 <__smakebuf_r+0x18>

08004e46 <memmove>:
 8004e46:	4288      	cmp	r0, r1
 8004e48:	b510      	push	{r4, lr}
 8004e4a:	eb01 0402 	add.w	r4, r1, r2
 8004e4e:	d902      	bls.n	8004e56 <memmove+0x10>
 8004e50:	4284      	cmp	r4, r0
 8004e52:	4623      	mov	r3, r4
 8004e54:	d807      	bhi.n	8004e66 <memmove+0x20>
 8004e56:	1e43      	subs	r3, r0, #1
 8004e58:	42a1      	cmp	r1, r4
 8004e5a:	d008      	beq.n	8004e6e <memmove+0x28>
 8004e5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e64:	e7f8      	b.n	8004e58 <memmove+0x12>
 8004e66:	4601      	mov	r1, r0
 8004e68:	4402      	add	r2, r0
 8004e6a:	428a      	cmp	r2, r1
 8004e6c:	d100      	bne.n	8004e70 <memmove+0x2a>
 8004e6e:	bd10      	pop	{r4, pc}
 8004e70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e74:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e78:	e7f7      	b.n	8004e6a <memmove+0x24>

08004e7a <_raise_r>:
 8004e7a:	291f      	cmp	r1, #31
 8004e7c:	b538      	push	{r3, r4, r5, lr}
 8004e7e:	4604      	mov	r4, r0
 8004e80:	460d      	mov	r5, r1
 8004e82:	d904      	bls.n	8004e8e <_raise_r+0x14>
 8004e84:	2316      	movs	r3, #22
 8004e86:	6003      	str	r3, [r0, #0]
 8004e88:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8c:	bd38      	pop	{r3, r4, r5, pc}
 8004e8e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004e90:	b112      	cbz	r2, 8004e98 <_raise_r+0x1e>
 8004e92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e96:	b94b      	cbnz	r3, 8004eac <_raise_r+0x32>
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f000 f853 	bl	8004f44 <_getpid_r>
 8004e9e:	462a      	mov	r2, r5
 8004ea0:	4601      	mov	r1, r0
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ea8:	f000 b83a 	b.w	8004f20 <_kill_r>
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d00a      	beq.n	8004ec6 <_raise_r+0x4c>
 8004eb0:	1c59      	adds	r1, r3, #1
 8004eb2:	d103      	bne.n	8004ebc <_raise_r+0x42>
 8004eb4:	2316      	movs	r3, #22
 8004eb6:	6003      	str	r3, [r0, #0]
 8004eb8:	2001      	movs	r0, #1
 8004eba:	e7e7      	b.n	8004e8c <_raise_r+0x12>
 8004ebc:	2400      	movs	r4, #0
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004ec4:	4798      	blx	r3
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	e7e0      	b.n	8004e8c <_raise_r+0x12>
	...

08004ecc <raise>:
 8004ecc:	4b02      	ldr	r3, [pc, #8]	; (8004ed8 <raise+0xc>)
 8004ece:	4601      	mov	r1, r0
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	f7ff bfd2 	b.w	8004e7a <_raise_r>
 8004ed6:	bf00      	nop
 8004ed8:	20000068 	.word	0x20000068

08004edc <_fstat_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	2300      	movs	r3, #0
 8004ee0:	4d06      	ldr	r5, [pc, #24]	; (8004efc <_fstat_r+0x20>)
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	4608      	mov	r0, r1
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	602b      	str	r3, [r5, #0]
 8004eea:	f7fb fd48 	bl	800097e <_fstat>
 8004eee:	1c43      	adds	r3, r0, #1
 8004ef0:	d102      	bne.n	8004ef8 <_fstat_r+0x1c>
 8004ef2:	682b      	ldr	r3, [r5, #0]
 8004ef4:	b103      	cbz	r3, 8004ef8 <_fstat_r+0x1c>
 8004ef6:	6023      	str	r3, [r4, #0]
 8004ef8:	bd38      	pop	{r3, r4, r5, pc}
 8004efa:	bf00      	nop
 8004efc:	20000358 	.word	0x20000358

08004f00 <_isatty_r>:
 8004f00:	b538      	push	{r3, r4, r5, lr}
 8004f02:	2300      	movs	r3, #0
 8004f04:	4d05      	ldr	r5, [pc, #20]	; (8004f1c <_isatty_r+0x1c>)
 8004f06:	4604      	mov	r4, r0
 8004f08:	4608      	mov	r0, r1
 8004f0a:	602b      	str	r3, [r5, #0]
 8004f0c:	f7fb fd46 	bl	800099c <_isatty>
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	d102      	bne.n	8004f1a <_isatty_r+0x1a>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	b103      	cbz	r3, 8004f1a <_isatty_r+0x1a>
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	bd38      	pop	{r3, r4, r5, pc}
 8004f1c:	20000358 	.word	0x20000358

08004f20 <_kill_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	2300      	movs	r3, #0
 8004f24:	4d06      	ldr	r5, [pc, #24]	; (8004f40 <_kill_r+0x20>)
 8004f26:	4604      	mov	r4, r0
 8004f28:	4608      	mov	r0, r1
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	f7fb fcc8 	bl	80008c2 <_kill>
 8004f32:	1c43      	adds	r3, r0, #1
 8004f34:	d102      	bne.n	8004f3c <_kill_r+0x1c>
 8004f36:	682b      	ldr	r3, [r5, #0]
 8004f38:	b103      	cbz	r3, 8004f3c <_kill_r+0x1c>
 8004f3a:	6023      	str	r3, [r4, #0]
 8004f3c:	bd38      	pop	{r3, r4, r5, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000358 	.word	0x20000358

08004f44 <_getpid_r>:
 8004f44:	f7fb bcb6 	b.w	80008b4 <_getpid>

08004f48 <_sbrk_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	4d05      	ldr	r5, [pc, #20]	; (8004f64 <_sbrk_r+0x1c>)
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4608      	mov	r0, r1
 8004f52:	602b      	str	r3, [r5, #0]
 8004f54:	f7fb fd38 	bl	80009c8 <_sbrk>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_sbrk_r+0x1a>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_sbrk_r+0x1a>
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	20000358 	.word	0x20000358

08004f68 <memchr>:
 8004f68:	4603      	mov	r3, r0
 8004f6a:	b510      	push	{r4, lr}
 8004f6c:	b2c9      	uxtb	r1, r1
 8004f6e:	4402      	add	r2, r0
 8004f70:	4293      	cmp	r3, r2
 8004f72:	4618      	mov	r0, r3
 8004f74:	d101      	bne.n	8004f7a <memchr+0x12>
 8004f76:	2000      	movs	r0, #0
 8004f78:	e003      	b.n	8004f82 <memchr+0x1a>
 8004f7a:	7804      	ldrb	r4, [r0, #0]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	428c      	cmp	r4, r1
 8004f80:	d1f6      	bne.n	8004f70 <memchr+0x8>
 8004f82:	bd10      	pop	{r4, pc}

08004f84 <_realloc_r>:
 8004f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f88:	4680      	mov	r8, r0
 8004f8a:	4614      	mov	r4, r2
 8004f8c:	460e      	mov	r6, r1
 8004f8e:	b921      	cbnz	r1, 8004f9a <_realloc_r+0x16>
 8004f90:	4611      	mov	r1, r2
 8004f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f96:	f7ff b991 	b.w	80042bc <_malloc_r>
 8004f9a:	b92a      	cbnz	r2, 8004fa8 <_realloc_r+0x24>
 8004f9c:	f7ff f91e 	bl	80041dc <_free_r>
 8004fa0:	4625      	mov	r5, r4
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa8:	f000 f81b 	bl	8004fe2 <_malloc_usable_size_r>
 8004fac:	4284      	cmp	r4, r0
 8004fae:	4607      	mov	r7, r0
 8004fb0:	d802      	bhi.n	8004fb8 <_realloc_r+0x34>
 8004fb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004fb6:	d812      	bhi.n	8004fde <_realloc_r+0x5a>
 8004fb8:	4621      	mov	r1, r4
 8004fba:	4640      	mov	r0, r8
 8004fbc:	f7ff f97e 	bl	80042bc <_malloc_r>
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d0ed      	beq.n	8004fa2 <_realloc_r+0x1e>
 8004fc6:	42bc      	cmp	r4, r7
 8004fc8:	4622      	mov	r2, r4
 8004fca:	4631      	mov	r1, r6
 8004fcc:	bf28      	it	cs
 8004fce:	463a      	movcs	r2, r7
 8004fd0:	f7ff f8ef 	bl	80041b2 <memcpy>
 8004fd4:	4631      	mov	r1, r6
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	f7ff f900 	bl	80041dc <_free_r>
 8004fdc:	e7e1      	b.n	8004fa2 <_realloc_r+0x1e>
 8004fde:	4635      	mov	r5, r6
 8004fe0:	e7df      	b.n	8004fa2 <_realloc_r+0x1e>

08004fe2 <_malloc_usable_size_r>:
 8004fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fe6:	1f18      	subs	r0, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	bfbc      	itt	lt
 8004fec:	580b      	ldrlt	r3, [r1, r0]
 8004fee:	18c0      	addlt	r0, r0, r3
 8004ff0:	4770      	bx	lr
	...

08004ff4 <_init>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	bf00      	nop
 8004ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffa:	bc08      	pop	{r3}
 8004ffc:	469e      	mov	lr, r3
 8004ffe:	4770      	bx	lr

08005000 <_fini>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	bf00      	nop
 8005004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005006:	bc08      	pop	{r3}
 8005008:	469e      	mov	lr, r3
 800500a:	4770      	bx	lr

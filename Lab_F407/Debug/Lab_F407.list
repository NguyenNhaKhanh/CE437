
Lab_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008964  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008aec  08008aec  00018aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b08  08008b08  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008b08  08008b08  00018b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b10  08008b10  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b10  08008b10  00018b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b14  08008b14  00018b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000a24  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000aa0  20000aa0  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a17b  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000401c  00000000  00000000  0003a26a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016d8  00000000  00000000  0003e288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011a5  00000000  00000000  0003f960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024f31  00000000  00000000  00040b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001de93  00000000  00000000  00065a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d373b  00000000  00000000  000838c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000063f4  00000000  00000000  00157004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0015d3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ad4 	.word	0x08008ad4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008ad4 	.word	0x08008ad4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <Button_Init>:
 *      Author: nhakh
 */

#include "Button_Handle.h"

void Button_Init(Button_Handle_t* button,uint32_t pin,TIM_HandleTypeDef* htim){
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
	button->pin = pin;
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	68ba      	ldr	r2, [r7, #8]
 80004d4:	601a      	str	r2, [r3, #0]
	button->htim = htim;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	609a      	str	r2, [r3, #8]
	button->state = RELEASED;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2200      	movs	r2, #0
 80004e0:	711a      	strb	r2, [r3, #4]
	button->lastState = RELEASED;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2200      	movs	r2, #0
 80004e6:	715a      	strb	r2, [r3, #5]
}
 80004e8:	bf00      	nop
 80004ea:	3714      	adds	r7, #20
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <Button_StartPressedCounter>:

void Button_StartPressedCounter(Button_Handle_t *button) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
//	button->state = PRESSED;
	__HAL_TIM_SET_AUTORELOAD(button->htim,4999);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f241 3287 	movw	r2, #4999	; 0x1387
 8000506:	62da      	str	r2, [r3, #44]	; 0x2c
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000510:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(button->htim);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	4618      	mov	r0, r3
 8000518:	f004 fa52 	bl	80049c0 <HAL_TIM_Base_Start_IT>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <Button_StartTimer>:

void Button_StartTimer(Button_Handle_t *button) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
//	button->state = LONGPRESSED;
	__HAL_TIM_SET_AUTORELOAD(button->htim,1999);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000540:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(button->htim);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	4618      	mov	r0, r3
 8000548:	f004 fa3a 	bl	80049c0 <HAL_TIM_Base_Start_IT>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <Button_StopTimerCounter>:

void Button_StopTimerCounter(Button_Handle_t *button){
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
//	button->state = RELEASED;
	HAL_TIM_Base_Stop_IT(button->htim);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	4618      	mov	r0, r3
 8000562:	f004 fa9d 	bl	8004aa0 <HAL_TIM_Base_Stop_IT>

}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fdf1 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f825 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 fa0b 	bl	8000998 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000582:	f000 f88b 	bl	800069c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000586:	f000 f8b7 	bl	80006f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 800058a:	f000 f8e5 	bl	8000758 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800058e:	f007 fe4d 	bl	800822c <MX_USB_HOST_Init>
  MX_TIM3_Init();
 8000592:	f000 f917 	bl	80007c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000596:	f000 f963 	bl	8000860 <MX_TIM4_Init>
  MX_TIM5_Init();
 800059a:	f000 f9af 	bl	80008fc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	Button_Init(&btn, B1_Pin, &htim4);
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <main+0x4c>)
 80005a0:	2101      	movs	r1, #1
 80005a2:	4807      	ldr	r0, [pc, #28]	; (80005c0 <main+0x50>)
 80005a4:	f7ff ff8e 	bl	80004c4 <Button_Init>
	uint8_t state = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80005a8:	2101      	movs	r1, #1
 80005aa:	4806      	ldr	r0, [pc, #24]	; (80005c4 <main+0x54>)
 80005ac:	f001 f91a 	bl	80017e4 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005b4:	f007 fe60 	bl	8008278 <MX_USB_HOST_Process>
 80005b8:	e7fc      	b.n	80005b4 <main+0x44>
 80005ba:	bf00      	nop
 80005bc:	200001d4 	.word	0x200001d4
 80005c0:	20000264 	.word	0x20000264
 80005c4:	40020000 	.word	0x40020000

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f008 f9ec 	bl	80089b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b28      	ldr	r3, [pc, #160]	; (8000694 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a27      	ldr	r2, [pc, #156]	; (8000694 <SystemClock_Config+0xcc>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <SystemClock_Config+0xd0>)
 8000612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000638:	2308      	movs	r3, #8
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800063c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000640:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000646:	2307      	movs	r3, #7
 8000648:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fb1a 	bl	8003c88 <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800065a:	f000 fb11 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2105      	movs	r1, #5
 800067c:	4618      	mov	r0, r3
 800067e:	f003 fd7b 	bl	8004178 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000688:	f000 fafa 	bl	8000c80 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	; 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <MX_I2C1_Init+0x54>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a8:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x58>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_I2C1_Init+0x50>)
 80006da:	f002 fcf1 	bl	80030c0 <HAL_I2C_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e4:	f000 facc 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000098 	.word	0x20000098
 80006f0:	40005400 	.word	0x40005400
 80006f4:	000186a0 	.word	0x000186a0

080006f8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_I2S3_Init+0x54>)
 80006fe:	4a14      	ldr	r2, [pc, #80]	; (8000750 <MX_I2S3_Init+0x58>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2S3_Init+0x54>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_I2S3_Init+0x54>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2S3_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_I2S3_Init+0x54>)
 8000718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_I2S3_Init+0x54>)
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <MX_I2S3_Init+0x5c>)
 8000722:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2S3_Init+0x54>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_I2S3_Init+0x54>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2S3_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_I2S3_Init+0x54>)
 8000738:	f002 fe06 	bl	8003348 <HAL_I2S_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000742:	f000 fa9d 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000ec 	.word	0x200000ec
 8000750:	40003c00 	.word	0x40003c00
 8000754:	00017700 	.word	0x00017700

08000758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_SPI1_Init+0x64>)
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <MX_SPI1_Init+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_SPI1_Init+0x64>)
 8000764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_SPI1_Init+0x64>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_SPI1_Init+0x64>)
 80007a4:	220a      	movs	r2, #10
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_SPI1_Init+0x64>)
 80007aa:	f004 f831 	bl	8004810 <HAL_SPI_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b4:	f000 fa64 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000134 	.word	0x20000134
 80007c0:	40013000 	.word	0x40013000

080007c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_TIM3_Init+0x94>)
 80007e2:	4a1e      	ldr	r2, [pc, #120]	; (800085c <MX_TIM3_Init+0x98>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_TIM3_Init+0x94>)
 80007e8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80007ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_TIM3_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_TIM3_Init+0x94>)
 80007f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_TIM3_Init+0x94>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_TIM3_Init+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000808:	4813      	ldr	r0, [pc, #76]	; (8000858 <MX_TIM3_Init+0x94>)
 800080a:	f004 f88a 	bl	8004922 <HAL_TIM_Base_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000814:	f000 fa34 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	4619      	mov	r1, r3
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <MX_TIM3_Init+0x94>)
 8000826:	f004 fa72 	bl	8004d0e <HAL_TIM_ConfigClockSource>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000830:	f000 fa26 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_TIM3_Init+0x94>)
 8000842:	f004 fc8d 	bl	8005160 <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800084c:	f000 fa18 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000018c 	.word	0x2000018c
 800085c:	40000400 	.word	0x40000400

08000860 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_TIM4_Init+0x94>)
 800087e:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <MX_TIM4_Init+0x98>)
 8000880:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_TIM4_Init+0x94>)
 8000884:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000888:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_TIM4_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_TIM4_Init+0x94>)
 8000892:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000896:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_TIM4_Init+0x94>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_TIM4_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008a4:	4813      	ldr	r0, [pc, #76]	; (80008f4 <MX_TIM4_Init+0x94>)
 80008a6:	f004 f83c 	bl	8004922 <HAL_TIM_Base_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80008b0:	f000 f9e6 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	4619      	mov	r1, r3
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_TIM4_Init+0x94>)
 80008c2:	f004 fa24 	bl	8004d0e <HAL_TIM_ConfigClockSource>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80008cc:	f000 f9d8 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_TIM4_Init+0x94>)
 80008de:	f004 fc3f 	bl	8005160 <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80008e8:	f000 f9ca 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200001d4 	.word	0x200001d4
 80008f8:	40000800 	.word	0x40000800

080008fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_TIM5_Init+0x94>)
 800091a:	4a1e      	ldr	r2, [pc, #120]	; (8000994 <MX_TIM5_Init+0x98>)
 800091c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8399;
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_TIM5_Init+0x94>)
 8000920:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000924:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_TIM5_Init+0x94>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_TIM5_Init+0x94>)
 800092e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000932:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_TIM5_Init+0x94>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_TIM5_Init+0x94>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000940:	4813      	ldr	r0, [pc, #76]	; (8000990 <MX_TIM5_Init+0x94>)
 8000942:	f003 ffee 	bl	8004922 <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800094c:	f000 f998 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <MX_TIM5_Init+0x94>)
 800095e:	f004 f9d6 	bl	8004d0e <HAL_TIM_ConfigClockSource>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000968:	f000 f98a 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000974:	463b      	mov	r3, r7
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_TIM5_Init+0x94>)
 800097a:	f004 fbf1 	bl	8005160 <HAL_TIMEx_MasterConfigSynchronization>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000984:	f000 f97c 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000021c 	.word	0x2000021c
 8000994:	40000c00 	.word	0x40000c00

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	4b76      	ldr	r3, [pc, #472]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a75      	ldr	r2, [pc, #468]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 80009b8:	f043 0310 	orr.w	r3, r3, #16
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b73      	ldr	r3, [pc, #460]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0310 	and.w	r3, r3, #16
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	4b6f      	ldr	r3, [pc, #444]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a6e      	ldr	r2, [pc, #440]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b6c      	ldr	r3, [pc, #432]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b68      	ldr	r3, [pc, #416]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a67      	ldr	r2, [pc, #412]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b65      	ldr	r3, [pc, #404]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b61      	ldr	r3, [pc, #388]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a60      	ldr	r2, [pc, #384]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b5e      	ldr	r3, [pc, #376]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	4b5a      	ldr	r3, [pc, #360]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a59      	ldr	r2, [pc, #356]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b57      	ldr	r3, [pc, #348]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b53      	ldr	r3, [pc, #332]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a52      	ldr	r2, [pc, #328]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b50      	ldr	r3, [pc, #320]	; (8000b8c <MX_GPIO_Init+0x1f4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2108      	movs	r1, #8
 8000a5a:	484d      	ldr	r0, [pc, #308]	; (8000b90 <MX_GPIO_Init+0x1f8>)
 8000a5c:	f000 feda 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2101      	movs	r1, #1
 8000a64:	484b      	ldr	r0, [pc, #300]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 8000a66:	f000 fed5 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a70:	4849      	ldr	r0, [pc, #292]	; (8000b98 <MX_GPIO_Init+0x200>)
 8000a72:	f000 fecf 	bl	8001814 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a76:	2308      	movs	r3, #8
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4840      	ldr	r0, [pc, #256]	; (8000b90 <MX_GPIO_Init+0x1f8>)
 8000a8e:	f000 fd0d 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	483a      	ldr	r0, [pc, #232]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 8000aaa:	f000 fcff 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000aae:	2308      	movs	r3, #8
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000abe:	2305      	movs	r3, #5
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4832      	ldr	r0, [pc, #200]	; (8000b94 <MX_GPIO_Init+0x1fc>)
 8000aca:	f000 fcef 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ad2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	482e      	ldr	r0, [pc, #184]	; (8000b9c <MX_GPIO_Init+0x204>)
 8000ae4:	f000 fce2 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4829      	ldr	r0, [pc, #164]	; (8000ba0 <MX_GPIO_Init+0x208>)
 8000afc:	f000 fcd6 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b12:	2305      	movs	r3, #5
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4820      	ldr	r0, [pc, #128]	; (8000ba0 <MX_GPIO_Init+0x208>)
 8000b1e:	f000 fcc5 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b22:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b26:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4817      	ldr	r0, [pc, #92]	; (8000b98 <MX_GPIO_Init+0x200>)
 8000b3c:	f000 fcb6 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b40:	2320      	movs	r3, #32
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4811      	ldr	r0, [pc, #68]	; (8000b98 <MX_GPIO_Init+0x200>)
 8000b54:	f000 fcaa 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b5c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4808      	ldr	r0, [pc, #32]	; (8000b90 <MX_GPIO_Init+0x1f8>)
 8000b6e:	f000 fc9d 	bl	80014ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2006      	movs	r0, #6
 8000b78:	f000 fc61 	bl	800143e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b7c:	2006      	movs	r0, #6
 8000b7e:	f000 fc7a 	bl	8001476 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b82:	bf00      	nop
 8000b84:	3730      	adds	r7, #48	; 0x30
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
	/* NOTE: This function Should not be modified, when the callback is needed,
	 the HAL_GPIO_EXTI_Callback could be implemented in the user file
	 */

	if (GPIO_Pin == btn.pin) {
 8000bae:	88fa      	ldrh	r2, [r7, #6]
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d12a      	bne.n	8000c0e <HAL_GPIO_EXTI_Callback+0x6a>
			btn.state = HAL_GPIO_ReadPin(GPIOA, btn.pin);
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4816      	ldr	r0, [pc, #88]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x78>)
 8000bc2:	f000 fe0f 	bl	80017e4 <HAL_GPIO_ReadPin>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bcc:	711a      	strb	r2, [r3, #4]
			if (btn.state == PRESSED) {
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bd0:	791b      	ldrb	r3, [r3, #4]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d108      	bne.n	8000be8 <HAL_GPIO_EXTI_Callback+0x44>
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bda:	4811      	ldr	r0, [pc, #68]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000bdc:	f000 fe33 	bl	8001846 <HAL_GPIO_TogglePin>
//				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
//				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	//			uint8_t UARTBuffer[30] = { 0 };
	//			sprintf(UARTBuffer, "\nbtn Pressed\n");
	//			HAL_UART_Transmit(&huart1, UARTBuffer, 30, 1000);
				Button_StartPressedCounter(&btn);
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x74>)
 8000be2:	f7ff fc87 	bl	80004f4 <Button_StartPressedCounter>
 8000be6:	e00e      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x62>
			} else if (btn.state == RELEASED) {
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bea:	791b      	ldrb	r3, [r3, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d10a      	bne.n	8000c06 <HAL_GPIO_EXTI_Callback+0x62>
//				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
				if (btn.lastState == PRESSED) {
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bf2:	795b      	ldrb	r3, [r3, #5]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d006      	beq.n	8000c06 <HAL_GPIO_EXTI_Callback+0x62>
					// inc/dec counter
//					LedMode++;
//					if (LedMode >= 3)
//						LedMode = 0;
				} else if (btn.lastState == LONGPRESSED) {
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bfa:	795b      	ldrb	r3, [r3, #5]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d102      	bne.n	8000c06 <HAL_GPIO_EXTI_Callback+0x62>
					Button_StopTimerCounter(&btn);
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c02:	f7ff fca7 	bl	8000554 <Button_StopTimerCounter>
				}
			}
			btn.lastState = btn.state;
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c08:	791a      	ldrb	r2, [r3, #4]
 8000c0a:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c0c:	715a      	strb	r2, [r3, #5]
		}
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000264 	.word	0x20000264
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40020c00 	.word	0x40020c00

08000c24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == btn.htim->Instance) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d11a      	bne.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x4c>
		if (btn.lastState == PRESSED) {
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c3c:	795b      	ldrb	r3, [r3, #5]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d10d      	bne.n	8000c5e <HAL_TIM_PeriodElapsedCallback+0x3a>
			Button_StopTimerCounter(&btn);
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c44:	f7ff fc86 	bl	8000554 <Button_StopTimerCounter>
//			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
			btn.state = LONGPRESSED;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	711a      	strb	r2, [r3, #4]
			btn.lastState = btn.state;
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c50:	791a      	ldrb	r2, [r3, #4]
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c54:	715a      	strb	r2, [r3, #5]
			Button_StartTimer(&btn);
 8000c56:	4808      	ldr	r0, [pc, #32]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c58:	f7ff fc64 	bl	8000524 <Button_StartTimer>
		} else if (btn.lastState == LONGPRESSED) {
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
		}
	}
}
 8000c5c:	e008      	b.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x4c>
		} else if (btn.lastState == LONGPRESSED) {
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c60:	795b      	ldrb	r3, [r3, #5]
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d104      	bne.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x4c>
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000c66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c6a:	4804      	ldr	r0, [pc, #16]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c6c:	f000 fdeb 	bl	8001846 <HAL_GPIO_TogglePin>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000264 	.word	0x20000264
 8000c7c:	40020c00 	.word	0x40020c00

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f000 fbac 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a19      	ldr	r2, [pc, #100]	; (8000d60 <HAL_I2C_MspInit+0x84>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d12c      	bne.n	8000d58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_I2C_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <HAL_I2C_MspInit+0x88>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_I2C_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d1a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d20:	2312      	movs	r3, #18
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	480c      	ldr	r0, [pc, #48]	; (8000d68 <HAL_I2C_MspInit+0x8c>)
 8000d38:	f000 fbb8 	bl	80014ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_I2C_MspInit+0x88>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_I2C_MspInit+0x88>)
 8000d46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_I2C_MspInit+0x88>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	; 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40005400 	.word	0x40005400
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020400 	.word	0x40020400

08000d6c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08e      	sub	sp, #56	; 0x38
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a31      	ldr	r2, [pc, #196]	; (8000e5c <HAL_I2S_MspInit+0xf0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d15a      	bne.n	8000e52 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000da0:	23c0      	movs	r3, #192	; 0xc0
 8000da2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 fbef 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000db8:	f7ff ff62 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <HAL_I2S_MspInit+0xf4>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	4a26      	ldr	r2, [pc, #152]	; (8000e60 <HAL_I2S_MspInit+0xf4>)
 8000dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dca:	6413      	str	r3, [r2, #64]	; 0x40
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <HAL_I2S_MspInit+0xf4>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_I2S_MspInit+0xf4>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <HAL_I2S_MspInit+0xf4>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	6313      	str	r3, [r2, #48]	; 0x30
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <HAL_I2S_MspInit+0xf4>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_I2S_MspInit+0xf4>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	4a18      	ldr	r2, [pc, #96]	; (8000e60 <HAL_I2S_MspInit+0xf4>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	6313      	str	r3, [r2, #48]	; 0x30
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_I2S_MspInit+0xf4>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e10:	2310      	movs	r3, #16
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e20:	2306      	movs	r3, #6
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480e      	ldr	r0, [pc, #56]	; (8000e64 <HAL_I2S_MspInit+0xf8>)
 8000e2c:	f000 fb3e 	bl	80014ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e30:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e42:	2306      	movs	r3, #6
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4806      	ldr	r0, [pc, #24]	; (8000e68 <HAL_I2S_MspInit+0xfc>)
 8000e4e:	f000 fb2d 	bl	80014ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3738      	adds	r7, #56	; 0x38
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40003c00 	.word	0x40003c00
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40020800 	.word	0x40020800

08000e6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <HAL_SPI_MspInit+0x84>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d12b      	bne.n	8000ee6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <HAL_SPI_MspInit+0x88>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a17      	ldr	r2, [pc, #92]	; (8000ef4 <HAL_SPI_MspInit+0x88>)
 8000e98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_SPI_MspInit+0x88>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_SPI_MspInit+0x88>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a10      	ldr	r2, [pc, #64]	; (8000ef4 <HAL_SPI_MspInit+0x88>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_SPI_MspInit+0x88>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ec6:	23e0      	movs	r3, #224	; 0xe0
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <HAL_SPI_MspInit+0x8c>)
 8000ee2:	f000 fae3 	bl	80014ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	; 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40013000 	.word	0x40013000
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020000 	.word	0x40020000

08000efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a2a      	ldr	r2, [pc, #168]	; (8000fb4 <HAL_TIM_Base_MspInit+0xb8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d116      	bne.n	8000f3c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a28      	ldr	r2, [pc, #160]	; (8000fb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	201d      	movs	r0, #29
 8000f30:	f000 fa85 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f34:	201d      	movs	r0, #29
 8000f36:	f000 fa9e 	bl	8001476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f3a:	e036      	b.n	8000faa <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a1e      	ldr	r2, [pc, #120]	; (8000fbc <HAL_TIM_Base_MspInit+0xc0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d116      	bne.n	8000f74 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a1a      	ldr	r2, [pc, #104]	; (8000fb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	201e      	movs	r0, #30
 8000f68:	f000 fa69 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f6c:	201e      	movs	r0, #30
 8000f6e:	f000 fa82 	bl	8001476 <HAL_NVIC_EnableIRQ>
}
 8000f72:	e01a      	b.n	8000faa <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <HAL_TIM_Base_MspInit+0xc4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d115      	bne.n	8000faa <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2032      	movs	r0, #50	; 0x32
 8000fa0:	f000 fa4d 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000fa4:	2032      	movs	r0, #50	; 0x32
 8000fa6:	f000 fa66 	bl	8001476 <HAL_NVIC_EnableIRQ>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40000400 	.word	0x40000400
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40000800 	.word	0x40000800
 8000fc0:	40000c00 	.word	0x40000c00

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f8f6 	bl	8001200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800101c:	2001      	movs	r0, #1
 800101e:	f000 fc2d 	bl	800187c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <TIM3_IRQHandler+0x10>)
 800102e:	f003 fd66 	bl	8004afe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000018c 	.word	0x2000018c

0800103c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <TIM4_IRQHandler+0x10>)
 8001042:	f003 fd5c 	bl	8004afe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001d4 	.word	0x200001d4

08001050 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <TIM5_IRQHandler+0x10>)
 8001056:	f003 fd52 	bl	8004afe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000021c 	.word	0x2000021c

08001064 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <OTG_FS_IRQHandler+0x10>)
 800106a:	f000 fe89 	bl	8001d80 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000654 	.word	0x20000654

08001078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <_sbrk+0x5c>)
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <_sbrk+0x60>)
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <_sbrk+0x64>)
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <_sbrk+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d207      	bcs.n	80010b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a8:	f007 fc9c 	bl	80089e4 <__errno>
 80010ac:	4603      	mov	r3, r0
 80010ae:	220c      	movs	r2, #12
 80010b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e009      	b.n	80010cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <_sbrk+0x64>)
 80010c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20020000 	.word	0x20020000
 80010d8:	00000400 	.word	0x00000400
 80010dc:	20000270 	.word	0x20000270
 80010e0:	20000aa0 	.word	0x20000aa0

080010e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001140 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800110e:	490e      	ldr	r1, [pc, #56]	; (8001148 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001110:	4a0e      	ldr	r2, [pc, #56]	; (800114c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001124:	4c0b      	ldr	r4, [pc, #44]	; (8001154 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001132:	f7ff ffd7 	bl	80010e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001136:	f007 fc5b 	bl	80089f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113a:	f7ff fa19 	bl	8000570 <main>
  bx  lr    
 800113e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800114c:	08008b18 	.word	0x08008b18
  ldr r2, =_sbss
 8001150:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001154:	20000aa0 	.word	0x20000aa0

08001158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC_IRQHandler>
	...

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <HAL_Init+0x40>)
 8001166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <HAL_Init+0x40>)
 8001172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_Init+0x40>)
 800117e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001184:	2003      	movs	r0, #3
 8001186:	f000 f94f 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118a:	2000      	movs	r0, #0
 800118c:	f000 f808 	bl	80011a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001190:	f7ff fd7c 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023c00 	.word	0x40023c00

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x54>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_InitTick+0x58>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f967 	bl	8001492 <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00e      	b.n	80011ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d80a      	bhi.n	80011ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f000 f92f 	bl	800143e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e0:	4a06      	ldr	r2, [pc, #24]	; (80011fc <HAL_InitTick+0x5c>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e000      	b.n	80011ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000004 	.word	0x20000004

08001200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x20>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x24>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4413      	add	r3, r2
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <HAL_IncTick+0x24>)
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008
 8001224:	20000274 	.word	0x20000274

08001228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_GetTick+0x14>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000274 	.word	0x20000274

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff ffee 	bl	8001228 <HAL_GetTick>
 800124c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_Delay+0x44>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001266:	bf00      	nop
 8001268:	f7ff ffde 	bl	8001228 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	; (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f4:	d301      	bcc.n	80013fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00f      	b.n	800141a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <SysTick_Config+0x40>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f7ff ff8e 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <SysTick_Config+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SysTick_Config+0x40>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff29 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001450:	f7ff ff3e 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8001454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f7ff ff8e 	bl	800137c <NVIC_EncodePriority>
 8001460:	4602      	mov	r2, r0
 8001462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff5d 	bl	8001328 <__NVIC_SetPriority>
}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff31 	bl	80012ec <__NVIC_EnableIRQ>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffa2 	bl	80013e4 <SysTick_Config>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
 80014c6:	e16b      	b.n	80017a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014c8:	2201      	movs	r2, #1
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	f040 815a 	bne.w	800179a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d005      	beq.n	80014fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d130      	bne.n	8001560 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001534:	2201      	movs	r2, #1
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	f003 0201 	and.w	r2, r3, #1
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b03      	cmp	r3, #3
 800156a:	d017      	beq.n	800159c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d123      	bne.n	80015f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	08da      	lsrs	r2, r3, #3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3208      	adds	r2, #8
 80015b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	08da      	lsrs	r2, r3, #3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3208      	adds	r2, #8
 80015ea:	69b9      	ldr	r1, [r7, #24]
 80015ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	2203      	movs	r2, #3
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0203 	and.w	r2, r3, #3
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80b4 	beq.w	800179a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b60      	ldr	r3, [pc, #384]	; (80017b8 <HAL_GPIO_Init+0x30c>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a5f      	ldr	r2, [pc, #380]	; (80017b8 <HAL_GPIO_Init+0x30c>)
 800163c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b5d      	ldr	r3, [pc, #372]	; (80017b8 <HAL_GPIO_Init+0x30c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800164e:	4a5b      	ldr	r2, [pc, #364]	; (80017bc <HAL_GPIO_Init+0x310>)
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	3302      	adds	r3, #2
 8001656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	220f      	movs	r2, #15
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a52      	ldr	r2, [pc, #328]	; (80017c0 <HAL_GPIO_Init+0x314>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d02b      	beq.n	80016d2 <HAL_GPIO_Init+0x226>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a51      	ldr	r2, [pc, #324]	; (80017c4 <HAL_GPIO_Init+0x318>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d025      	beq.n	80016ce <HAL_GPIO_Init+0x222>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a50      	ldr	r2, [pc, #320]	; (80017c8 <HAL_GPIO_Init+0x31c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01f      	beq.n	80016ca <HAL_GPIO_Init+0x21e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4f      	ldr	r2, [pc, #316]	; (80017cc <HAL_GPIO_Init+0x320>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d019      	beq.n	80016c6 <HAL_GPIO_Init+0x21a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <HAL_GPIO_Init+0x324>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <HAL_GPIO_Init+0x216>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4d      	ldr	r2, [pc, #308]	; (80017d4 <HAL_GPIO_Init+0x328>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d00d      	beq.n	80016be <HAL_GPIO_Init+0x212>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4c      	ldr	r2, [pc, #304]	; (80017d8 <HAL_GPIO_Init+0x32c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d007      	beq.n	80016ba <HAL_GPIO_Init+0x20e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4b      	ldr	r2, [pc, #300]	; (80017dc <HAL_GPIO_Init+0x330>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d101      	bne.n	80016b6 <HAL_GPIO_Init+0x20a>
 80016b2:	2307      	movs	r3, #7
 80016b4:	e00e      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016b6:	2308      	movs	r3, #8
 80016b8:	e00c      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016ba:	2306      	movs	r3, #6
 80016bc:	e00a      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016be:	2305      	movs	r3, #5
 80016c0:	e008      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016c2:	2304      	movs	r3, #4
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016c6:	2303      	movs	r3, #3
 80016c8:	e004      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <HAL_GPIO_Init+0x228>
 80016d2:	2300      	movs	r3, #0
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	f002 0203 	and.w	r2, r2, #3
 80016da:	0092      	lsls	r2, r2, #2
 80016dc:	4093      	lsls	r3, r2
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e4:	4935      	ldr	r1, [pc, #212]	; (80017bc <HAL_GPIO_Init+0x310>)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016f2:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <HAL_GPIO_Init+0x334>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001716:	4a32      	ldr	r2, [pc, #200]	; (80017e0 <HAL_GPIO_Init+0x334>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800171c:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <HAL_GPIO_Init+0x334>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001740:	4a27      	ldr	r2, [pc, #156]	; (80017e0 <HAL_GPIO_Init+0x334>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <HAL_GPIO_Init+0x334>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800176a:	4a1d      	ldr	r2, [pc, #116]	; (80017e0 <HAL_GPIO_Init+0x334>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_GPIO_Init+0x334>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001794:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <HAL_GPIO_Init+0x334>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3301      	adds	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	f67f ae90 	bls.w	80014c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3724      	adds	r7, #36	; 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40013800 	.word	0x40013800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40021400 	.word	0x40021400
 80017d8:	40021800 	.word	0x40021800
 80017dc:	40021c00 	.word	0x40021c00
 80017e0:	40013c00 	.word	0x40013c00

080017e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	e001      	b.n	8001806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
 8001820:	4613      	mov	r3, r2
 8001822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001824:	787b      	ldrb	r3, [r7, #1]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001830:	e003      	b.n	800183a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	041a      	lsls	r2, r3, #16
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	619a      	str	r2, [r3, #24]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001846:	b480      	push	{r7}
 8001848:	b085      	sub	sp, #20
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	460b      	mov	r3, r1
 8001850:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001858:	887a      	ldrh	r2, [r7, #2]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	041a      	lsls	r2, r3, #16
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43d9      	mvns	r1, r3
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	400b      	ands	r3, r1
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	619a      	str	r2, [r3, #24]
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	4013      	ands	r3, r2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d006      	beq.n	80018a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f982 	bl	8000ba4 <HAL_GPIO_EXTI_Callback>
  }
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40013c00 	.word	0x40013c00

080018ac <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ae:	b08f      	sub	sp, #60	; 0x3c
 80018b0:	af0a      	add	r7, sp, #40	; 0x28
 80018b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e054      	b.n	8001968 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d106      	bne.n	80018de <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f006 fd05 	bl	80082e8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2203      	movs	r2, #3
 80018e2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 fd31 	bl	8005364 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	687e      	ldr	r6, [r7, #4]
 800190a:	466d      	mov	r5, sp
 800190c:	f106 0410 	add.w	r4, r6, #16
 8001910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001912:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001918:	e894 0003 	ldmia.w	r4, {r0, r1}
 800191c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001920:	1d33      	adds	r3, r6, #4
 8001922:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001924:	6838      	ldr	r0, [r7, #0]
 8001926:	f003 fcab 	bl	8005280 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2101      	movs	r1, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f003 fd28 	bl	8005386 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	687e      	ldr	r6, [r7, #4]
 800193e:	466d      	mov	r5, sp
 8001940:	f106 0410 	add.w	r4, r6, #16
 8001944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001950:	e885 0003 	stmia.w	r5, {r0, r1}
 8001954:	1d33      	adds	r3, r6, #4
 8001956:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001958:	6838      	ldr	r0, [r7, #0]
 800195a:	f003 feb1 	bl	80056c0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001970 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af04      	add	r7, sp, #16
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	4608      	mov	r0, r1
 800197a:	4611      	mov	r1, r2
 800197c:	461a      	mov	r2, r3
 800197e:	4603      	mov	r3, r0
 8001980:	70fb      	strb	r3, [r7, #3]
 8001982:	460b      	mov	r3, r1
 8001984:	70bb      	strb	r3, [r7, #2]
 8001986:	4613      	mov	r3, r2
 8001988:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_HCD_HC_Init+0x28>
 8001994:	2302      	movs	r3, #2
 8001996:	e076      	b.n	8001a86 <HAL_HCD_HC_Init+0x116>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	333d      	adds	r3, #61	; 0x3d
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	212c      	movs	r1, #44	; 0x2c
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	3338      	adds	r3, #56	; 0x38
 80019c0:	787a      	ldrb	r2, [r7, #1]
 80019c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	212c      	movs	r1, #44	; 0x2c
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	3340      	adds	r3, #64	; 0x40
 80019d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019d4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	212c      	movs	r1, #44	; 0x2c
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	3339      	adds	r3, #57	; 0x39
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	212c      	movs	r1, #44	; 0x2c
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	333f      	adds	r3, #63	; 0x3f
 80019f6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	78ba      	ldrb	r2, [r7, #2]
 8001a00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a04:	b2d0      	uxtb	r0, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	212c      	movs	r1, #44	; 0x2c
 8001a0a:	fb01 f303 	mul.w	r3, r1, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	333a      	adds	r3, #58	; 0x3a
 8001a12:	4602      	mov	r2, r0
 8001a14:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	da09      	bge.n	8001a32 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	212c      	movs	r1, #44	; 0x2c
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	333b      	adds	r3, #59	; 0x3b
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	e008      	b.n	8001a44 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	212c      	movs	r1, #44	; 0x2c
 8001a38:	fb01 f303 	mul.w	r3, r1, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	333b      	adds	r3, #59	; 0x3b
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	212c      	movs	r1, #44	; 0x2c
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	333c      	adds	r3, #60	; 0x3c
 8001a52:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a56:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	787c      	ldrb	r4, [r7, #1]
 8001a5e:	78ba      	ldrb	r2, [r7, #2]
 8001a60:	78f9      	ldrb	r1, [r7, #3]
 8001a62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a64:	9302      	str	r3, [sp, #8]
 8001a66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	4623      	mov	r3, r4
 8001a74:	f003 ffaa 	bl	80059cc <USB_HC_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd90      	pop	{r4, r7, pc}

08001a8e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_HCD_HC_Halt+0x1e>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e00f      	b.n	8001acc <HAL_HCD_HC_Halt+0x3e>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f004 f9fa 	bl	8005eb6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	4608      	mov	r0, r1
 8001ade:	4611      	mov	r1, r2
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	70fb      	strb	r3, [r7, #3]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	70bb      	strb	r3, [r7, #2]
 8001aea:	4613      	mov	r3, r2
 8001aec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	212c      	movs	r1, #44	; 0x2c
 8001af4:	fb01 f303 	mul.w	r3, r1, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	333b      	adds	r3, #59	; 0x3b
 8001afc:	78ba      	ldrb	r2, [r7, #2]
 8001afe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	333f      	adds	r3, #63	; 0x3f
 8001b0e:	787a      	ldrb	r2, [r7, #1]
 8001b10:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b12:	7c3b      	ldrb	r3, [r7, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d112      	bne.n	8001b3e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	212c      	movs	r1, #44	; 0x2c
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	3342      	adds	r3, #66	; 0x42
 8001b26:	2203      	movs	r2, #3
 8001b28:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	212c      	movs	r1, #44	; 0x2c
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	333d      	adds	r3, #61	; 0x3d
 8001b38:	7f3a      	ldrb	r2, [r7, #28]
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	e008      	b.n	8001b50 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	212c      	movs	r1, #44	; 0x2c
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	3342      	adds	r3, #66	; 0x42
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b50:	787b      	ldrb	r3, [r7, #1]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	f200 80c6 	bhi.w	8001ce4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b58:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5e:	bf00      	nop
 8001b60:	08001b71 	.word	0x08001b71
 8001b64:	08001cd1 	.word	0x08001cd1
 8001b68:	08001bd5 	.word	0x08001bd5
 8001b6c:	08001c53 	.word	0x08001c53
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b70:	7c3b      	ldrb	r3, [r7, #16]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	f040 80b8 	bne.w	8001ce8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b78:	78bb      	ldrb	r3, [r7, #2]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 80b4 	bne.w	8001ce8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b80:	8b3b      	ldrh	r3, [r7, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d108      	bne.n	8001b98 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	212c      	movs	r1, #44	; 0x2c
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	3355      	adds	r3, #85	; 0x55
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	212c      	movs	r1, #44	; 0x2c
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3355      	adds	r3, #85	; 0x55
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3342      	adds	r3, #66	; 0x42
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bbe:	e093      	b.n	8001ce8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3342      	adds	r3, #66	; 0x42
 8001bce:	2202      	movs	r2, #2
 8001bd0:	701a      	strb	r2, [r3, #0]
      break;
 8001bd2:	e089      	b.n	8001ce8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001bd4:	78bb      	ldrb	r3, [r7, #2]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d11d      	bne.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	212c      	movs	r1, #44	; 0x2c
 8001be0:	fb01 f303 	mul.w	r3, r1, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	3355      	adds	r3, #85	; 0x55
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	212c      	movs	r1, #44	; 0x2c
 8001bf4:	fb01 f303 	mul.w	r3, r1, r3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3342      	adds	r3, #66	; 0x42
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c00:	e073      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	212c      	movs	r1, #44	; 0x2c
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3342      	adds	r3, #66	; 0x42
 8001c10:	2202      	movs	r2, #2
 8001c12:	701a      	strb	r2, [r3, #0]
      break;
 8001c14:	e069      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3354      	adds	r3, #84	; 0x54
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	212c      	movs	r1, #44	; 0x2c
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	3342      	adds	r3, #66	; 0x42
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
      break;
 8001c3c:	e055      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	212c      	movs	r1, #44	; 0x2c
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	3342      	adds	r3, #66	; 0x42
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	701a      	strb	r2, [r3, #0]
      break;
 8001c50:	e04b      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c52:	78bb      	ldrb	r3, [r7, #2]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d11d      	bne.n	8001c94 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	3355      	adds	r3, #85	; 0x55
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	212c      	movs	r1, #44	; 0x2c
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	3342      	adds	r3, #66	; 0x42
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c7e:	e034      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	212c      	movs	r1, #44	; 0x2c
 8001c86:	fb01 f303 	mul.w	r3, r1, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3342      	adds	r3, #66	; 0x42
 8001c8e:	2202      	movs	r2, #2
 8001c90:	701a      	strb	r2, [r3, #0]
      break;
 8001c92:	e02a      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	212c      	movs	r1, #44	; 0x2c
 8001c9a:	fb01 f303 	mul.w	r3, r1, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3354      	adds	r3, #84	; 0x54
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	212c      	movs	r1, #44	; 0x2c
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3342      	adds	r3, #66	; 0x42
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
      break;
 8001cba:	e016      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	212c      	movs	r1, #44	; 0x2c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3342      	adds	r3, #66	; 0x42
 8001cca:	2202      	movs	r2, #2
 8001ccc:	701a      	strb	r2, [r3, #0]
      break;
 8001cce:	e00c      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	212c      	movs	r1, #44	; 0x2c
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3342      	adds	r3, #66	; 0x42
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
      break;
 8001ce2:	e002      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001ce4:	bf00      	nop
 8001ce6:	e000      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ce8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	212c      	movs	r1, #44	; 0x2c
 8001cf0:	fb01 f303 	mul.w	r3, r1, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3344      	adds	r3, #68	; 0x44
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	8b3a      	ldrh	r2, [r7, #24]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	202c      	movs	r0, #44	; 0x2c
 8001d04:	fb00 f303 	mul.w	r3, r0, r3
 8001d08:	440b      	add	r3, r1
 8001d0a:	334c      	adds	r3, #76	; 0x4c
 8001d0c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	212c      	movs	r1, #44	; 0x2c
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	3360      	adds	r3, #96	; 0x60
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	212c      	movs	r1, #44	; 0x2c
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3350      	adds	r3, #80	; 0x50
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	212c      	movs	r1, #44	; 0x2c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3339      	adds	r3, #57	; 0x39
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	212c      	movs	r1, #44	; 0x2c
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	3361      	adds	r3, #97	; 0x61
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	222c      	movs	r2, #44	; 0x2c
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	3338      	adds	r3, #56	; 0x38
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	18d1      	adds	r1, r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f003 ff4e 	bl	8005c10 <USB_HC_StartXfer>
 8001d74:	4603      	mov	r3, r0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop

08001d80 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 fc4f 	bl	800563a <USB_GetMode>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	f040 80f6 	bne.w	8001f90 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 fc33 	bl	8005614 <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80ec 	beq.w	8001f8e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f003 fc2a 	bl	8005614 <USB_ReadInterrupts>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dca:	d104      	bne.n	8001dd6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001dd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 fc1a 	bl	8005614 <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dea:	d104      	bne.n	8001df6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001df4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 fc0a 	bl	8005614 <USB_ReadInterrupts>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e0a:	d104      	bne.n	8001e16 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 fbfa 	bl	8005614 <USB_ReadInterrupts>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d103      	bne.n	8001e32 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f003 fbec 	bl	8005614 <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e46:	d11c      	bne.n	8001e82 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e50:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10f      	bne.n	8001e82 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e62:	2110      	movs	r1, #16
 8001e64:	6938      	ldr	r0, [r7, #16]
 8001e66:	f003 fadb 	bl	8005420 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e6a:	6938      	ldr	r0, [r7, #16]
 8001e6c:	f003 fb0c 	bl	8005488 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 fce2 	bl	8005840 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f006 fab1 	bl	80083e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 fbc4 	bl	8005614 <USB_ReadInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e96:	d102      	bne.n	8001e9e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f001 f89e 	bl	8002fda <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fbb6 	bl	8005614 <USB_ReadInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d106      	bne.n	8001ec0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f006 fa7a 	bl	80083ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 fba5 	bl	8005614 <USB_ReadInterrupts>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d101      	bne.n	8001ed8 <HAL_HCD_IRQHandler+0x158>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <HAL_HCD_IRQHandler+0x15a>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d012      	beq.n	8001f04 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699a      	ldr	r2, [r3, #24]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0210 	bic.w	r2, r2, #16
 8001eec:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 ffa1 	bl	8002e36 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699a      	ldr	r2, [r3, #24]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0210 	orr.w	r2, r2, #16
 8001f02:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 fb83 	bl	8005614 <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f18:	d13a      	bne.n	8001f90 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 ffb8 	bl	8005e94 <USB_HC_ReadInterrupt>
 8001f24:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	e025      	b.n	8001f78 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d018      	beq.n	8001f72 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f56:	d106      	bne.n	8001f66 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8ab 	bl	80020ba <HCD_HC_IN_IRQHandler>
 8001f64:	e005      	b.n	8001f72 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fbf9 	bl	8002764 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d3d4      	bcc.n	8001f2c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f8a:	615a      	str	r2, [r3, #20]
 8001f8c:	e000      	b.n	8001f90 <HAL_HCD_IRQHandler+0x210>
      return;
 8001f8e:	bf00      	nop
    }
  }
}
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_HCD_Start+0x16>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e013      	b.n	8001fd4 <HAL_HCD_Start+0x3e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 fca4 	bl	8005908 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 f9bc 	bl	8005342 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_HCD_Stop+0x16>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e00d      	b.n	800200e <HAL_HCD_Stop+0x32>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 f892 	bl	8006128 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f003 fc46 	bl	80058b4 <USB_ResetPort>
 8002028:	4603      	mov	r3, r0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3360      	adds	r3, #96	; 0x60
 800204c:	781b      	ldrb	r3, [r3, #0]
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	3350      	adds	r3, #80	; 0x50
 8002074:	681b      	ldr	r3, [r3, #0]
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f003 fc8a 	bl	80059a8 <USB_GetCurrentFrame>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 fc65 	bl	800597a <USB_GetHostSpeed>
 80020b0:	4603      	mov	r3, r0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d11a      	bne.n	8002120 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f6:	461a      	mov	r2, r3
 80020f8:	2304      	movs	r3, #4
 80020fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3361      	adds	r3, #97	; 0x61
 800210a:	2206      	movs	r2, #6
 800210c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f003 fecc 	bl	8005eb6 <USB_HC_Halt>
 800211e:	e0af      	b.n	8002280 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002136:	d11b      	bne.n	8002170 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4413      	add	r3, r2
 8002140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002144:	461a      	mov	r2, r3
 8002146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800214a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3361      	adds	r3, #97	; 0x61
 800215a:	2207      	movs	r2, #7
 800215c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f003 fea4 	bl	8005eb6 <USB_HC_Halt>
 800216e:	e087      	b.n	8002280 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b20      	cmp	r3, #32
 8002184:	d109      	bne.n	800219a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002192:	461a      	mov	r2, r3
 8002194:	2320      	movs	r3, #32
 8002196:	6093      	str	r3, [r2, #8]
 8002198:	e072      	b.n	8002280 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d11a      	bne.n	80021e6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	461a      	mov	r2, r3
 80021be:	2308      	movs	r3, #8
 80021c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	3361      	adds	r3, #97	; 0x61
 80021d0:	2205      	movs	r2, #5
 80021d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 fe69 	bl	8005eb6 <USB_HC_Halt>
 80021e4:	e04c      	b.n	8002280 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fc:	d11b      	bne.n	8002236 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	461a      	mov	r2, r3
 800220c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002210:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	3361      	adds	r3, #97	; 0x61
 8002220:	2208      	movs	r2, #8
 8002222:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	4611      	mov	r1, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f003 fe41 	bl	8005eb6 <USB_HC_Halt>
 8002234:	e024      	b.n	8002280 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002248:	2b80      	cmp	r3, #128	; 0x80
 800224a:	d119      	bne.n	8002280 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002258:	461a      	mov	r2, r3
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	3361      	adds	r3, #97	; 0x61
 800226c:	2206      	movs	r2, #6
 800226e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f003 fe1b 	bl	8005eb6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002296:	d112      	bne.n	80022be <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 fe07 	bl	8005eb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b4:	461a      	mov	r2, r3
 80022b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ba:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022bc:	e24e      	b.n	800275c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	f040 80df 	bne.w	8002494 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d019      	beq.n	8002312 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	3348      	adds	r3, #72	; 0x48
 80022ec:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	0159      	lsls	r1, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	440b      	add	r3, r1
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002300:	1ad2      	subs	r2, r2, r3
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	202c      	movs	r0, #44	; 0x2c
 8002308:	fb00 f303 	mul.w	r3, r0, r3
 800230c:	440b      	add	r3, r1
 800230e:	3350      	adds	r3, #80	; 0x50
 8002310:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	3361      	adds	r3, #97	; 0x61
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	335c      	adds	r3, #92	; 0x5c
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002342:	461a      	mov	r2, r3
 8002344:	2301      	movs	r3, #1
 8002346:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	212c      	movs	r1, #44	; 0x2c
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	333f      	adds	r3, #63	; 0x3f
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d009      	beq.n	8002370 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	212c      	movs	r1, #44	; 0x2c
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	333f      	adds	r3, #63	; 0x3f
 800236a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800236c:	2b02      	cmp	r3, #2
 800236e:	d111      	bne.n	8002394 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f003 fd9b 	bl	8005eb6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	461a      	mov	r2, r3
 800238e:	2310      	movs	r3, #16
 8002390:	6093      	str	r3, [r2, #8]
 8002392:	e03a      	b.n	800240a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	333f      	adds	r3, #63	; 0x3f
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d009      	beq.n	80023bc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	333f      	adds	r3, #63	; 0x3f
 80023b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d126      	bne.n	800240a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	0151      	lsls	r1, r2, #5
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	440a      	add	r2, r1
 80023d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023da:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3360      	adds	r3, #96	; 0x60
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	b2d9      	uxtb	r1, r3
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	202c      	movs	r0, #44	; 0x2c
 80023f8:	fb00 f303 	mul.w	r3, r0, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	3360      	adds	r3, #96	; 0x60
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f005 fffb 	bl	8008400 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d12b      	bne.n	800246a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3348      	adds	r3, #72	; 0x48
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	202c      	movs	r0, #44	; 0x2c
 8002428:	fb00 f202 	mul.w	r2, r0, r2
 800242c:	440a      	add	r2, r1
 800242e:	3240      	adds	r2, #64	; 0x40
 8002430:	8812      	ldrh	r2, [r2, #0]
 8002432:	fbb3 f3f2 	udiv	r3, r3, r2
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 818e 	beq.w	800275c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	212c      	movs	r1, #44	; 0x2c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	3354      	adds	r3, #84	; 0x54
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	f083 0301 	eor.w	r3, r3, #1
 8002454:	b2d8      	uxtb	r0, r3
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	212c      	movs	r1, #44	; 0x2c
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	4413      	add	r3, r2
 8002462:	3354      	adds	r3, #84	; 0x54
 8002464:	4602      	mov	r2, r0
 8002466:	701a      	strb	r2, [r3, #0]
}
 8002468:	e178      	b.n	800275c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	212c      	movs	r1, #44	; 0x2c
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	4413      	add	r3, r2
 8002476:	3354      	adds	r3, #84	; 0x54
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	f083 0301 	eor.w	r3, r3, #1
 800247e:	b2d8      	uxtb	r0, r3
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3354      	adds	r3, #84	; 0x54
 800248e:	4602      	mov	r2, r0
 8002490:	701a      	strb	r2, [r3, #0]
}
 8002492:	e163      	b.n	800275c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	f040 80f6 	bne.w	8002698 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	3361      	adds	r3, #97	; 0x61
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d109      	bne.n	80024d4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	3360      	adds	r3, #96	; 0x60
 80024ce:	2201      	movs	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e0c9      	b.n	8002668 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	3361      	adds	r3, #97	; 0x61
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d109      	bne.n	80024fc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	3360      	adds	r3, #96	; 0x60
 80024f6:	2205      	movs	r2, #5
 80024f8:	701a      	strb	r2, [r3, #0]
 80024fa:	e0b5      	b.n	8002668 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	3361      	adds	r3, #97	; 0x61
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b06      	cmp	r3, #6
 800250e:	d009      	beq.n	8002524 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3361      	adds	r3, #97	; 0x61
 800251e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002520:	2b08      	cmp	r3, #8
 8002522:	d150      	bne.n	80025c6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	212c      	movs	r1, #44	; 0x2c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	335c      	adds	r3, #92	; 0x5c
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	202c      	movs	r0, #44	; 0x2c
 800253c:	fb00 f303 	mul.w	r3, r0, r3
 8002540:	440b      	add	r3, r1
 8002542:	335c      	adds	r3, #92	; 0x5c
 8002544:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	335c      	adds	r3, #92	; 0x5c
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d912      	bls.n	8002580 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	335c      	adds	r3, #92	; 0x5c
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3360      	adds	r3, #96	; 0x60
 800257a:	2204      	movs	r2, #4
 800257c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800257e:	e073      	b.n	8002668 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3360      	adds	r3, #96	; 0x60
 800258e:	2202      	movs	r2, #2
 8002590:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025a8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025b0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	461a      	mov	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025c4:	e050      	b.n	8002668 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	3361      	adds	r3, #97	; 0x61
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d122      	bne.n	8002620 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	3360      	adds	r3, #96	; 0x60
 80025e8:	2202      	movs	r2, #2
 80025ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002602:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800260a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002618:	461a      	mov	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e023      	b.n	8002668 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	3361      	adds	r3, #97	; 0x61
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b07      	cmp	r3, #7
 8002632:	d119      	bne.n	8002668 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	212c      	movs	r1, #44	; 0x2c
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	4413      	add	r3, r2
 8002640:	335c      	adds	r3, #92	; 0x5c
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	202c      	movs	r0, #44	; 0x2c
 800264c:	fb00 f303 	mul.w	r3, r0, r3
 8002650:	440b      	add	r3, r1
 8002652:	335c      	adds	r3, #92	; 0x5c
 8002654:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3360      	adds	r3, #96	; 0x60
 8002664:	2204      	movs	r2, #4
 8002666:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	461a      	mov	r2, r3
 8002676:	2302      	movs	r3, #2
 8002678:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	b2d9      	uxtb	r1, r3
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	202c      	movs	r0, #44	; 0x2c
 8002684:	fb00 f303 	mul.w	r3, r0, r3
 8002688:	4413      	add	r3, r2
 800268a:	3360      	adds	r3, #96	; 0x60
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f005 feb5 	bl	8008400 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002696:	e061      	b.n	800275c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	d156      	bne.n	800275c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	333f      	adds	r3, #63	; 0x3f
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d111      	bne.n	80026e6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	335c      	adds	r3, #92	; 0x5c
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fbe9 	bl	8005eb6 <USB_HC_Halt>
 80026e4:	e031      	b.n	800274a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	333f      	adds	r3, #63	; 0x3f
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	333f      	adds	r3, #63	; 0x3f
 8002708:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800270a:	2b02      	cmp	r3, #2
 800270c:	d11d      	bne.n	800274a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	335c      	adds	r3, #92	; 0x5c
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d110      	bne.n	800274a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	3361      	adds	r3, #97	; 0x61
 8002736:	2203      	movs	r2, #3
 8002738:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f003 fbb6 	bl	8005eb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	461a      	mov	r2, r3
 8002758:	2310      	movs	r3, #16
 800275a:	6093      	str	r3, [r2, #8]
}
 800275c:	bf00      	nop
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b04      	cmp	r3, #4
 8002792:	d11a      	bne.n	80027ca <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	461a      	mov	r2, r3
 80027a2:	2304      	movs	r3, #4
 80027a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3361      	adds	r3, #97	; 0x61
 80027b4:	2206      	movs	r2, #6
 80027b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 fb77 	bl	8005eb6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80027c8:	e331      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d12e      	bne.n	800283e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	461a      	mov	r2, r3
 80027ee:	2320      	movs	r3, #32
 80027f0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	333d      	adds	r3, #61	; 0x3d
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b01      	cmp	r3, #1
 8002804:	f040 8313 	bne.w	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	212c      	movs	r1, #44	; 0x2c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	333d      	adds	r3, #61	; 0x3d
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	3360      	adds	r3, #96	; 0x60
 8002828:	2202      	movs	r2, #2
 800282a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f003 fb3d 	bl	8005eb6 <USB_HC_Halt>
}
 800283c:	e2f7      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002854:	d112      	bne.n	800287c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	461a      	mov	r2, r3
 8002864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002868:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	4611      	mov	r1, r2
 8002874:	4618      	mov	r0, r3
 8002876:	f003 fb1e 	bl	8005eb6 <USB_HC_Halt>
}
 800287a:	e2d8      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b01      	cmp	r3, #1
 8002890:	d140      	bne.n	8002914 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	335c      	adds	r3, #92	; 0x5c
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	d111      	bne.n	80028de <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	333d      	adds	r3, #61	; 0x3d
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	461a      	mov	r2, r3
 80028da:	2340      	movs	r3, #64	; 0x40
 80028dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	461a      	mov	r2, r3
 80028ec:	2301      	movs	r3, #1
 80028ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	3361      	adds	r3, #97	; 0x61
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f003 fad2 	bl	8005eb6 <USB_HC_Halt>
}
 8002912:	e28c      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002926:	2b40      	cmp	r3, #64	; 0x40
 8002928:	d12c      	bne.n	8002984 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	3361      	adds	r3, #97	; 0x61
 8002938:	2204      	movs	r2, #4
 800293a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	333d      	adds	r3, #61	; 0x3d
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	335c      	adds	r3, #92	; 0x5c
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f003 faa3 	bl	8005eb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	461a      	mov	r2, r3
 800297e:	2340      	movs	r3, #64	; 0x40
 8002980:	6093      	str	r3, [r2, #8]
}
 8002982:	e254      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b08      	cmp	r3, #8
 8002998:	d11a      	bne.n	80029d0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a6:	461a      	mov	r2, r3
 80029a8:	2308      	movs	r3, #8
 80029aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3361      	adds	r3, #97	; 0x61
 80029ba:	2205      	movs	r2, #5
 80029bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f003 fa74 	bl	8005eb6 <USB_HC_Halt>
}
 80029ce:	e22e      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	d140      	bne.n	8002a68 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	335c      	adds	r3, #92	; 0x5c
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	3361      	adds	r3, #97	; 0x61
 8002a06:	2203      	movs	r2, #3
 8002a08:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	212c      	movs	r1, #44	; 0x2c
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	333d      	adds	r3, #61	; 0x3d
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d112      	bne.n	8002a44 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	333c      	adds	r3, #60	; 0x3c
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d108      	bne.n	8002a44 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	333d      	adds	r3, #61	; 0x3d
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 fa31 	bl	8005eb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	461a      	mov	r2, r3
 8002a62:	2310      	movs	r3, #16
 8002a64:	6093      	str	r3, [r2, #8]
}
 8002a66:	e1e2      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7a:	2b80      	cmp	r3, #128	; 0x80
 8002a7c:	d164      	bne.n	8002b48 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d111      	bne.n	8002aaa <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3361      	adds	r3, #97	; 0x61
 8002a94:	2206      	movs	r2, #6
 8002a96:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f003 fa07 	bl	8005eb6 <USB_HC_Halt>
 8002aa8:	e044      	b.n	8002b34 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	335c      	adds	r3, #92	; 0x5c
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	202c      	movs	r0, #44	; 0x2c
 8002ac2:	fb00 f303 	mul.w	r3, r0, r3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	335c      	adds	r3, #92	; 0x5c
 8002aca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	335c      	adds	r3, #92	; 0x5c
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d920      	bls.n	8002b22 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	335c      	adds	r3, #92	; 0x5c
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	3360      	adds	r3, #96	; 0x60
 8002b00:	2204      	movs	r2, #4
 8002b02:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	b2d9      	uxtb	r1, r3
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	202c      	movs	r0, #44	; 0x2c
 8002b0e:	fb00 f303 	mul.w	r3, r0, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3360      	adds	r3, #96	; 0x60
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f005 fc70 	bl	8008400 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b20:	e008      	b.n	8002b34 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3360      	adds	r3, #96	; 0x60
 8002b30:	2202      	movs	r2, #2
 8002b32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	6093      	str	r3, [r2, #8]
}
 8002b46:	e172      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5e:	d11b      	bne.n	8002b98 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3361      	adds	r3, #97	; 0x61
 8002b6e:	2208      	movs	r2, #8
 8002b70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f003 f99a 	bl	8005eb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b94:	6093      	str	r3, [r2, #8]
}
 8002b96:	e14a      	b.n	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	f040 813f 	bne.w	8002e2e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	3361      	adds	r3, #97	; 0x61
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d17d      	bne.n	8002cc0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	3360      	adds	r3, #96	; 0x60
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	333f      	adds	r3, #63	; 0x3f
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d00a      	beq.n	8002c00 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	333f      	adds	r3, #63	; 0x3f
 8002bf8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	f040 8100 	bne.w	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d113      	bne.n	8002c30 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	3355      	adds	r3, #85	; 0x55
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	f083 0301 	eor.w	r3, r3, #1
 8002c1c:	b2d8      	uxtb	r0, r3
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	3355      	adds	r3, #85	; 0x55
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	f040 80e3 	bne.w	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	334c      	adds	r3, #76	; 0x4c
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 80d8 	beq.w	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	334c      	adds	r3, #76	; 0x4c
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	202c      	movs	r0, #44	; 0x2c
 8002c66:	fb00 f202 	mul.w	r2, r0, r2
 8002c6a:	440a      	add	r2, r1
 8002c6c:	3240      	adds	r2, #64	; 0x40
 8002c6e:	8812      	ldrh	r2, [r2, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	3b01      	subs	r3, #1
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	202c      	movs	r0, #44	; 0x2c
 8002c7a:	fb00 f202 	mul.w	r2, r0, r2
 8002c7e:	440a      	add	r2, r1
 8002c80:	3240      	adds	r2, #64	; 0x40
 8002c82:	8812      	ldrh	r2, [r2, #0]
 8002c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80b5 	beq.w	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3355      	adds	r3, #85	; 0x55
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	f083 0301 	eor.w	r3, r3, #1
 8002caa:	b2d8      	uxtb	r0, r3
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3355      	adds	r3, #85	; 0x55
 8002cba:	4602      	mov	r2, r0
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e09f      	b.n	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3361      	adds	r3, #97	; 0x61
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d109      	bne.n	8002ce8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3360      	adds	r3, #96	; 0x60
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e08b      	b.n	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3361      	adds	r3, #97	; 0x61
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d109      	bne.n	8002d10 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3360      	adds	r3, #96	; 0x60
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	e077      	b.n	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3361      	adds	r3, #97	; 0x61
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b05      	cmp	r3, #5
 8002d22:	d109      	bne.n	8002d38 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3360      	adds	r3, #96	; 0x60
 8002d32:	2205      	movs	r2, #5
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e063      	b.n	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3361      	adds	r3, #97	; 0x61
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b06      	cmp	r3, #6
 8002d4a:	d009      	beq.n	8002d60 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3361      	adds	r3, #97	; 0x61
 8002d5a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d14f      	bne.n	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	335c      	adds	r3, #92	; 0x5c
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	202c      	movs	r0, #44	; 0x2c
 8002d78:	fb00 f303 	mul.w	r3, r0, r3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	335c      	adds	r3, #92	; 0x5c
 8002d80:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	335c      	adds	r3, #92	; 0x5c
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d912      	bls.n	8002dbc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	212c      	movs	r1, #44	; 0x2c
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	335c      	adds	r3, #92	; 0x5c
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3360      	adds	r3, #96	; 0x60
 8002db6:	2204      	movs	r2, #4
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e021      	b.n	8002e00 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3360      	adds	r3, #96	; 0x60
 8002dca:	2202      	movs	r2, #2
 8002dcc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002de4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dec:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2302      	movs	r3, #2
 8002e10:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	b2d9      	uxtb	r1, r3
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	202c      	movs	r0, #44	; 0x2c
 8002e1c:	fb00 f303 	mul.w	r3, r0, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	3360      	adds	r3, #96	; 0x60
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f005 fae9 	bl	8008400 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e2e:	bf00      	nop
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b08a      	sub	sp, #40	; 0x28
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	0c5b      	lsrs	r3, r3, #17
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e6a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d004      	beq.n	8002e7c <HCD_RXQLVL_IRQHandler+0x46>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	f000 80a9 	beq.w	8002fcc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e7a:	e0aa      	b.n	8002fd2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80a6 	beq.w	8002fd0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	212c      	movs	r1, #44	; 0x2c
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	3344      	adds	r3, #68	; 0x44
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 809b 	beq.w	8002fd0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3350      	adds	r3, #80	; 0x50
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	441a      	add	r2, r3
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	202c      	movs	r0, #44	; 0x2c
 8002eb4:	fb00 f303 	mul.w	r3, r0, r3
 8002eb8:	440b      	add	r3, r1
 8002eba:	334c      	adds	r3, #76	; 0x4c
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d87a      	bhi.n	8002fb8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	212c      	movs	r1, #44	; 0x2c
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3344      	adds	r3, #68	; 0x44
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	b292      	uxth	r2, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	f002 fb42 	bl	8005564 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	3344      	adds	r3, #68	; 0x44
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	441a      	add	r2, r3
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	202c      	movs	r0, #44	; 0x2c
 8002efa:	fb00 f303 	mul.w	r3, r0, r3
 8002efe:	440b      	add	r3, r1
 8002f00:	3344      	adds	r3, #68	; 0x44
 8002f02:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	3350      	adds	r3, #80	; 0x50
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	441a      	add	r2, r3
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	202c      	movs	r0, #44	; 0x2c
 8002f1e:	fb00 f303 	mul.w	r3, r0, r3
 8002f22:	440b      	add	r3, r1
 8002f24:	3350      	adds	r3, #80	; 0x50
 8002f26:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	0cdb      	lsrs	r3, r3, #19
 8002f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f3c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	212c      	movs	r1, #44	; 0x2c
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3340      	adds	r3, #64	; 0x40
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d13c      	bne.n	8002fd0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d039      	beq.n	8002fd0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f72:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f7a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3354      	adds	r3, #84	; 0x54
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	f083 0301 	eor.w	r3, r3, #1
 8002fa2:	b2d8      	uxtb	r0, r3
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	3354      	adds	r3, #84	; 0x54
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	701a      	strb	r2, [r3, #0]
      break;
 8002fb6:	e00b      	b.n	8002fd0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	212c      	movs	r1, #44	; 0x2c
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3360      	adds	r3, #96	; 0x60
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	701a      	strb	r2, [r3, #0]
      break;
 8002fca:	e001      	b.n	8002fd0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002fcc:	bf00      	nop
 8002fce:	e000      	b.n	8002fd2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002fd0:	bf00      	nop
  }
}
 8002fd2:	bf00      	nop
 8002fd4:	3728      	adds	r7, #40	; 0x28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003006:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b02      	cmp	r3, #2
 8003010:	d10b      	bne.n	800302a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d102      	bne.n	8003022 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f005 f9d3 	bl	80083c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b08      	cmp	r3, #8
 8003032:	d132      	bne.n	800309a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f043 0308 	orr.w	r3, r3, #8
 800303a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b04      	cmp	r3, #4
 8003044:	d126      	bne.n	8003094 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d113      	bne.n	8003076 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003054:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003058:	d106      	bne.n	8003068 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2102      	movs	r1, #2
 8003060:	4618      	mov	r0, r3
 8003062:	f002 fbed 	bl	8005840 <USB_InitFSLSPClkSel>
 8003066:	e011      	b.n	800308c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2101      	movs	r1, #1
 800306e:	4618      	mov	r0, r3
 8003070:	f002 fbe6 	bl	8005840 <USB_InitFSLSPClkSel>
 8003074:	e00a      	b.n	800308c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d106      	bne.n	800308c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003084:	461a      	mov	r2, r3
 8003086:	f64e 2360 	movw	r3, #60000	; 0xea60
 800308a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f005 f9c5 	bl	800841c <HAL_HCD_PortEnabled_Callback>
 8003092:	e002      	b.n	800309a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f005 f9cf 	bl	8008438 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d103      	bne.n	80030ac <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f043 0320 	orr.w	r3, r3, #32
 80030aa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030b2:	461a      	mov	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	6013      	str	r3, [r2, #0]
}
 80030b8:	bf00      	nop
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e12b      	b.n	800332a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fd fdf8 	bl	8000cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2224      	movs	r2, #36	; 0x24
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003112:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003122:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003124:	f001 fa20 	bl	8004568 <HAL_RCC_GetPCLK1Freq>
 8003128:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4a81      	ldr	r2, [pc, #516]	; (8003334 <HAL_I2C_Init+0x274>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d807      	bhi.n	8003144 <HAL_I2C_Init+0x84>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a80      	ldr	r2, [pc, #512]	; (8003338 <HAL_I2C_Init+0x278>)
 8003138:	4293      	cmp	r3, r2
 800313a:	bf94      	ite	ls
 800313c:	2301      	movls	r3, #1
 800313e:	2300      	movhi	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	e006      	b.n	8003152 <HAL_I2C_Init+0x92>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4a7d      	ldr	r2, [pc, #500]	; (800333c <HAL_I2C_Init+0x27c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	bf94      	ite	ls
 800314c:	2301      	movls	r3, #1
 800314e:	2300      	movhi	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e0e7      	b.n	800332a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4a78      	ldr	r2, [pc, #480]	; (8003340 <HAL_I2C_Init+0x280>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	0c9b      	lsrs	r3, r3, #18
 8003164:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4a6a      	ldr	r2, [pc, #424]	; (8003334 <HAL_I2C_Init+0x274>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d802      	bhi.n	8003194 <HAL_I2C_Init+0xd4>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	3301      	adds	r3, #1
 8003192:	e009      	b.n	80031a8 <HAL_I2C_Init+0xe8>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	4a69      	ldr	r2, [pc, #420]	; (8003344 <HAL_I2C_Init+0x284>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	3301      	adds	r3, #1
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	495c      	ldr	r1, [pc, #368]	; (8003334 <HAL_I2C_Init+0x274>)
 80031c4:	428b      	cmp	r3, r1
 80031c6:	d819      	bhi.n	80031fc <HAL_I2C_Init+0x13c>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1e59      	subs	r1, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031d6:	1c59      	adds	r1, r3, #1
 80031d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031dc:	400b      	ands	r3, r1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_I2C_Init+0x138>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1e59      	subs	r1, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f0:	3301      	adds	r3, #1
 80031f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f6:	e051      	b.n	800329c <HAL_I2C_Init+0x1dc>
 80031f8:	2304      	movs	r3, #4
 80031fa:	e04f      	b.n	800329c <HAL_I2C_Init+0x1dc>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d111      	bne.n	8003228 <HAL_I2C_Init+0x168>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1e58      	subs	r0, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	440b      	add	r3, r1
 8003212:	fbb0 f3f3 	udiv	r3, r0, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e012      	b.n	800324e <HAL_I2C_Init+0x18e>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1e58      	subs	r0, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	0099      	lsls	r1, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	fbb0 f3f3 	udiv	r3, r0, r3
 800323e:	3301      	adds	r3, #1
 8003240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_Init+0x196>
 8003252:	2301      	movs	r3, #1
 8003254:	e022      	b.n	800329c <HAL_I2C_Init+0x1dc>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10e      	bne.n	800327c <HAL_I2C_Init+0x1bc>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1e58      	subs	r0, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6859      	ldr	r1, [r3, #4]
 8003266:	460b      	mov	r3, r1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	440b      	add	r3, r1
 800326c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003270:	3301      	adds	r3, #1
 8003272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327a:	e00f      	b.n	800329c <HAL_I2C_Init+0x1dc>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1e58      	subs	r0, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	0099      	lsls	r1, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003292:	3301      	adds	r3, #1
 8003294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	6809      	ldr	r1, [r1, #0]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6911      	ldr	r1, [r2, #16]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68d2      	ldr	r2, [r2, #12]
 80032d6:	4311      	orrs	r1, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	430b      	orrs	r3, r1
 80032de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	000186a0 	.word	0x000186a0
 8003338:	001e847f 	.word	0x001e847f
 800333c:	003d08ff 	.word	0x003d08ff
 8003340:	431bde83 	.word	0x431bde83
 8003344:	10624dd3 	.word	0x10624dd3

08003348 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e128      	b.n	80035ac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a90      	ldr	r2, [pc, #576]	; (80035b4 <HAL_I2S_Init+0x26c>)
 8003372:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7fd fcf9 	bl	8000d6c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2202      	movs	r2, #2
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003390:	f023 030f 	bic.w	r3, r3, #15
 8003394:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2202      	movs	r2, #2
 800339c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d060      	beq.n	8003468 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033ae:	2310      	movs	r3, #16
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	e001      	b.n	80033b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033b4:	2320      	movs	r3, #32
 80033b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d802      	bhi.n	80033c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033c6:	2001      	movs	r0, #1
 80033c8:	f001 f9c4 	bl	8004754 <HAL_RCCEx_GetPeriphCLKFreq>
 80033cc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d6:	d125      	bne.n	8003424 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d010      	beq.n	8003402 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	461a      	mov	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	3305      	adds	r3, #5
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	e01f      	b.n	8003442 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	fbb2 f2f3 	udiv	r2, r2, r3
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	461a      	mov	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	fbb2 f3f3 	udiv	r3, r2, r3
 800341e:	3305      	adds	r3, #5
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	e00e      	b.n	8003442 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	fbb2 f2f3 	udiv	r2, r2, r3
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	461a      	mov	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	3305      	adds	r3, #5
 8003440:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4a5c      	ldr	r2, [pc, #368]	; (80035b8 <HAL_I2S_Init+0x270>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	08db      	lsrs	r3, r3, #3
 800344c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	e003      	b.n	8003470 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003468:	2302      	movs	r3, #2
 800346a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d902      	bls.n	800347c <HAL_I2S_Init+0x134>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	2bff      	cmp	r3, #255	; 0xff
 800347a:	d907      	bls.n	800348c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	f043 0210 	orr.w	r2, r3, #16
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e08f      	b.n	80035ac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	ea42 0103 	orr.w	r1, r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	430a      	orrs	r2, r1
 800349e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034aa:	f023 030f 	bic.w	r3, r3, #15
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6851      	ldr	r1, [r2, #4]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6892      	ldr	r2, [r2, #8]
 80034b6:	4311      	orrs	r1, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	68d2      	ldr	r2, [r2, #12]
 80034bc:	4311      	orrs	r1, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6992      	ldr	r2, [r2, #24]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d161      	bne.n	800359c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a38      	ldr	r2, [pc, #224]	; (80035bc <HAL_I2S_Init+0x274>)
 80034dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a37      	ldr	r2, [pc, #220]	; (80035c0 <HAL_I2S_Init+0x278>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d101      	bne.n	80034ec <HAL_I2S_Init+0x1a4>
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_I2S_Init+0x27c>)
 80034ea:	e001      	b.n	80034f0 <HAL_I2S_Init+0x1a8>
 80034ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	4932      	ldr	r1, [pc, #200]	; (80035c0 <HAL_I2S_Init+0x278>)
 80034f8:	428a      	cmp	r2, r1
 80034fa:	d101      	bne.n	8003500 <HAL_I2S_Init+0x1b8>
 80034fc:	4a31      	ldr	r2, [pc, #196]	; (80035c4 <HAL_I2S_Init+0x27c>)
 80034fe:	e001      	b.n	8003504 <HAL_I2S_Init+0x1bc>
 8003500:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003504:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003508:	f023 030f 	bic.w	r3, r3, #15
 800350c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2b      	ldr	r2, [pc, #172]	; (80035c0 <HAL_I2S_Init+0x278>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_I2S_Init+0x1d4>
 8003518:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <HAL_I2S_Init+0x27c>)
 800351a:	e001      	b.n	8003520 <HAL_I2S_Init+0x1d8>
 800351c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003520:	2202      	movs	r2, #2
 8003522:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a25      	ldr	r2, [pc, #148]	; (80035c0 <HAL_I2S_Init+0x278>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d101      	bne.n	8003532 <HAL_I2S_Init+0x1ea>
 800352e:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <HAL_I2S_Init+0x27c>)
 8003530:	e001      	b.n	8003536 <HAL_I2S_Init+0x1ee>
 8003532:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003542:	d003      	beq.n	800354c <HAL_I2S_Init+0x204>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800354c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	e001      	b.n	8003558 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003554:	2300      	movs	r3, #0
 8003556:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003562:	4313      	orrs	r3, r2
 8003564:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800356c:	4313      	orrs	r3, r2
 800356e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003576:	4313      	orrs	r3, r2
 8003578:	b29a      	uxth	r2, r3
 800357a:	897b      	ldrh	r3, [r7, #10]
 800357c:	4313      	orrs	r3, r2
 800357e:	b29b      	uxth	r3, r3
 8003580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003584:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a0d      	ldr	r2, [pc, #52]	; (80035c0 <HAL_I2S_Init+0x278>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d101      	bne.n	8003594 <HAL_I2S_Init+0x24c>
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <HAL_I2S_Init+0x27c>)
 8003592:	e001      	b.n	8003598 <HAL_I2S_Init+0x250>
 8003594:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003598:	897a      	ldrh	r2, [r7, #10]
 800359a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3720      	adds	r7, #32
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	080036bf 	.word	0x080036bf
 80035b8:	cccccccd 	.word	0xcccccccd
 80035bc:	080037d5 	.word	0x080037d5
 80035c0:	40003800 	.word	0x40003800
 80035c4:	40003400 	.word	0x40003400

080035c8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	881a      	ldrh	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	1c9a      	adds	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10e      	bne.n	8003658 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003648:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff ffb8 	bl	80035c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	b292      	uxth	r2, r2
 8003674:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	1c9a      	adds	r2, r3, #2
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10e      	bne.n	80036b6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036a6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff93 	bl	80035dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d13a      	bne.n	8003750 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d109      	bne.n	80036f8 <I2S_IRQHandler+0x3a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	d102      	bne.n	80036f8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ffb4 	bl	8003660 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	2b40      	cmp	r3, #64	; 0x40
 8003700:	d126      	bne.n	8003750 <I2S_IRQHandler+0x92>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b20      	cmp	r3, #32
 800370e:	d11f      	bne.n	8003750 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800371e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003720:	2300      	movs	r3, #0
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	f043 0202 	orr.w	r2, r3, #2
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ff50 	bl	80035f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b03      	cmp	r3, #3
 800375a:	d136      	bne.n	80037ca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b02      	cmp	r3, #2
 8003764:	d109      	bne.n	800377a <I2S_IRQHandler+0xbc>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d102      	bne.n	800377a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff45 	bl	8003604 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b08      	cmp	r3, #8
 8003782:	d122      	bne.n	80037ca <I2S_IRQHandler+0x10c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b20      	cmp	r3, #32
 8003790:	d11b      	bne.n	80037ca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037bc:	f043 0204 	orr.w	r2, r3, #4
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ff13 	bl	80035f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a92      	ldr	r2, [pc, #584]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d101      	bne.n	80037f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037ee:	4b92      	ldr	r3, [pc, #584]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037f0:	e001      	b.n	80037f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a8b      	ldr	r2, [pc, #556]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d101      	bne.n	8003810 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800380c:	4b8a      	ldr	r3, [pc, #552]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800380e:	e001      	b.n	8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003810:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003820:	d004      	beq.n	800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	f040 8099 	bne.w	800395e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d107      	bne.n	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f925 	bl	8003a90 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d107      	bne.n	8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f9c8 	bl	8003bf0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b40      	cmp	r3, #64	; 0x40
 8003868:	d13a      	bne.n	80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d035      	beq.n	80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a6e      	ldr	r2, [pc, #440]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d101      	bne.n	8003882 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800387e:	4b6e      	ldr	r3, [pc, #440]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003880:	e001      	b.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003882:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4969      	ldr	r1, [pc, #420]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800388e:	428b      	cmp	r3, r1
 8003890:	d101      	bne.n	8003896 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003892:	4b69      	ldr	r3, [pc, #420]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003894:	e001      	b.n	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003896:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800389e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	f043 0202 	orr.w	r2, r3, #2
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff fe88 	bl	80035f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	f040 80c3 	bne.w	8003a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 80bd 	beq.w	8003a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003906:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a49      	ldr	r2, [pc, #292]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d101      	bne.n	8003916 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003912:	4b49      	ldr	r3, [pc, #292]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003914:	e001      	b.n	800391a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003916:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4944      	ldr	r1, [pc, #272]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003922:	428b      	cmp	r3, r1
 8003924:	d101      	bne.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003926:	4b44      	ldr	r3, [pc, #272]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003928:	e001      	b.n	800392e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800392a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003932:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003934:	2300      	movs	r3, #0
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	f043 0204 	orr.w	r2, r3, #4
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff fe4a 	bl	80035f0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800395c:	e089      	b.n	8003a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b02      	cmp	r3, #2
 8003966:	d107      	bne.n	8003978 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f8be 	bl	8003af4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d107      	bne.n	8003992 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f8fd 	bl	8003b8c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003998:	2b40      	cmp	r3, #64	; 0x40
 800399a:	d12f      	bne.n	80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d02a      	beq.n	80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039b4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1e      	ldr	r2, [pc, #120]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d101      	bne.n	80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039c2:	e001      	b.n	80039c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4919      	ldr	r1, [pc, #100]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039d0:	428b      	cmp	r3, r1
 80039d2:	d101      	bne.n	80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039d4:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039d6:	e001      	b.n	80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f043 0202 	orr.w	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff fdfa 	bl	80035f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d136      	bne.n	8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d031      	beq.n	8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a07      	ldr	r2, [pc, #28]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a1c:	e001      	b.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4902      	ldr	r1, [pc, #8]	; (8003a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a2a:	428b      	cmp	r3, r1
 8003a2c:	d106      	bne.n	8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003a2e:	4b02      	ldr	r3, [pc, #8]	; (8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a30:	e006      	b.n	8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003a32:	bf00      	nop
 8003a34:	40003800 	.word	0x40003800
 8003a38:	40003400 	.word	0x40003400
 8003a3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a44:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f043 0204 	orr.w	r2, r3, #4
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fdc0 	bl	80035f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a70:	e000      	b.n	8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a72:	bf00      	nop
}
 8003a74:	bf00      	nop
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	1c99      	adds	r1, r3, #2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6251      	str	r1, [r2, #36]	; 0x24
 8003aa2:	881a      	ldrh	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d113      	bne.n	8003aea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ad0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d106      	bne.n	8003aea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ffc9 	bl	8003a7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	1c99      	adds	r1, r3, #2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6251      	str	r1, [r2, #36]	; 0x24
 8003b06:	8819      	ldrh	r1, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <I2SEx_TxISR_I2SExt+0x90>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d101      	bne.n	8003b16 <I2SEx_TxISR_I2SExt+0x22>
 8003b12:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <I2SEx_TxISR_I2SExt+0x94>)
 8003b14:	e001      	b.n	8003b1a <I2SEx_TxISR_I2SExt+0x26>
 8003b16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b1a:	460a      	mov	r2, r1
 8003b1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d121      	bne.n	8003b7a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <I2SEx_TxISR_I2SExt+0x90>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d101      	bne.n	8003b44 <I2SEx_TxISR_I2SExt+0x50>
 8003b40:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <I2SEx_TxISR_I2SExt+0x94>)
 8003b42:	e001      	b.n	8003b48 <I2SEx_TxISR_I2SExt+0x54>
 8003b44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	490d      	ldr	r1, [pc, #52]	; (8003b84 <I2SEx_TxISR_I2SExt+0x90>)
 8003b50:	428b      	cmp	r3, r1
 8003b52:	d101      	bne.n	8003b58 <I2SEx_TxISR_I2SExt+0x64>
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <I2SEx_TxISR_I2SExt+0x94>)
 8003b56:	e001      	b.n	8003b5c <I2SEx_TxISR_I2SExt+0x68>
 8003b58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d106      	bne.n	8003b7a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff81 	bl	8003a7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40003800 	.word	0x40003800
 8003b88:	40003400 	.word	0x40003400

08003b8c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68d8      	ldr	r0, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	1c99      	adds	r1, r3, #2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ba4:	b282      	uxth	r2, r0
 8003ba6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d113      	bne.n	8003be8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ff4a 	bl	8003a7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a20      	ldr	r2, [pc, #128]	; (8003c80 <I2SEx_RxISR_I2SExt+0x90>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d101      	bne.n	8003c06 <I2SEx_RxISR_I2SExt+0x16>
 8003c02:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <I2SEx_RxISR_I2SExt+0x94>)
 8003c04:	e001      	b.n	8003c0a <I2SEx_RxISR_I2SExt+0x1a>
 8003c06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c0a:	68d8      	ldr	r0, [r3, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	1c99      	adds	r1, r3, #2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c16:	b282      	uxth	r2, r0
 8003c18:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d121      	bne.n	8003c76 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a12      	ldr	r2, [pc, #72]	; (8003c80 <I2SEx_RxISR_I2SExt+0x90>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d101      	bne.n	8003c40 <I2SEx_RxISR_I2SExt+0x50>
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <I2SEx_RxISR_I2SExt+0x94>)
 8003c3e:	e001      	b.n	8003c44 <I2SEx_RxISR_I2SExt+0x54>
 8003c40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	490d      	ldr	r1, [pc, #52]	; (8003c80 <I2SEx_RxISR_I2SExt+0x90>)
 8003c4c:	428b      	cmp	r3, r1
 8003c4e:	d101      	bne.n	8003c54 <I2SEx_RxISR_I2SExt+0x64>
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <I2SEx_RxISR_I2SExt+0x94>)
 8003c52:	e001      	b.n	8003c58 <I2SEx_RxISR_I2SExt+0x68>
 8003c54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c5c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d106      	bne.n	8003c76 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff ff03 	bl	8003a7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40003800 	.word	0x40003800
 8003c84:	40003400 	.word	0x40003400

08003c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e267      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d075      	beq.n	8003d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ca6:	4b88      	ldr	r3, [pc, #544]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d00c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cb2:	4b85      	ldr	r3, [pc, #532]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d112      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cbe:	4b82      	ldr	r3, [pc, #520]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cca:	d10b      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ccc:	4b7e      	ldr	r3, [pc, #504]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d05b      	beq.n	8003d90 <HAL_RCC_OscConfig+0x108>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d157      	bne.n	8003d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e242      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cec:	d106      	bne.n	8003cfc <HAL_RCC_OscConfig+0x74>
 8003cee:	4b76      	ldr	r3, [pc, #472]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a75      	ldr	r2, [pc, #468]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e01d      	b.n	8003d38 <HAL_RCC_OscConfig+0xb0>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x98>
 8003d06:	4b70      	ldr	r3, [pc, #448]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6f      	ldr	r2, [pc, #444]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	4b6d      	ldr	r3, [pc, #436]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a6c      	ldr	r2, [pc, #432]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e00b      	b.n	8003d38 <HAL_RCC_OscConfig+0xb0>
 8003d20:	4b69      	ldr	r3, [pc, #420]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a68      	ldr	r2, [pc, #416]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	4b66      	ldr	r3, [pc, #408]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a65      	ldr	r2, [pc, #404]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d013      	beq.n	8003d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fd fa72 	bl	8001228 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d48:	f7fd fa6e 	bl	8001228 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b64      	cmp	r3, #100	; 0x64
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e207      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5a:	4b5b      	ldr	r3, [pc, #364]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0xc0>
 8003d66:	e014      	b.n	8003d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fd fa5e 	bl	8001228 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d70:	f7fd fa5a 	bl	8001228 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	; 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e1f3      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d82:	4b51      	ldr	r3, [pc, #324]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0xe8>
 8003d8e:	e000      	b.n	8003d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d063      	beq.n	8003e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d9e:	4b4a      	ldr	r3, [pc, #296]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003daa:	4b47      	ldr	r3, [pc, #284]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d11c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db6:	4b44      	ldr	r3, [pc, #272]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d116      	bne.n	8003df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc2:	4b41      	ldr	r3, [pc, #260]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_RCC_OscConfig+0x152>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d001      	beq.n	8003dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e1c7      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dda:	4b3b      	ldr	r3, [pc, #236]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4937      	ldr	r1, [pc, #220]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dee:	e03a      	b.n	8003e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d020      	beq.n	8003e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df8:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <HAL_RCC_OscConfig+0x244>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfe:	f7fd fa13 	bl	8001228 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e06:	f7fd fa0f 	bl	8001228 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e1a8      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e18:	4b2b      	ldr	r3, [pc, #172]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e24:	4b28      	ldr	r3, [pc, #160]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	4925      	ldr	r1, [pc, #148]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	600b      	str	r3, [r1, #0]
 8003e38:	e015      	b.n	8003e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e3a:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <HAL_RCC_OscConfig+0x244>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e40:	f7fd f9f2 	bl	8001228 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e48:	f7fd f9ee 	bl	8001228 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e187      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d036      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d016      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <HAL_RCC_OscConfig+0x248>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e80:	f7fd f9d2 	bl	8001228 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e88:	f7fd f9ce 	bl	8001228 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e167      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x200>
 8003ea6:	e01b      	b.n	8003ee0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea8:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_RCC_OscConfig+0x248>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eae:	f7fd f9bb 	bl	8001228 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb4:	e00e      	b.n	8003ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb6:	f7fd f9b7 	bl	8001228 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d907      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e150      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	42470000 	.word	0x42470000
 8003ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed4:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1ea      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8097 	beq.w	800401c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef2:	4b81      	ldr	r3, [pc, #516]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10f      	bne.n	8003f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	4b7d      	ldr	r3, [pc, #500]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	4a7c      	ldr	r2, [pc, #496]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0e:	4b7a      	ldr	r3, [pc, #488]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1e:	4b77      	ldr	r3, [pc, #476]	; (80040fc <HAL_RCC_OscConfig+0x474>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d118      	bne.n	8003f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f2a:	4b74      	ldr	r3, [pc, #464]	; (80040fc <HAL_RCC_OscConfig+0x474>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a73      	ldr	r2, [pc, #460]	; (80040fc <HAL_RCC_OscConfig+0x474>)
 8003f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f36:	f7fd f977 	bl	8001228 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3e:	f7fd f973 	bl	8001228 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e10c      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f50:	4b6a      	ldr	r3, [pc, #424]	; (80040fc <HAL_RCC_OscConfig+0x474>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d106      	bne.n	8003f72 <HAL_RCC_OscConfig+0x2ea>
 8003f64:	4b64      	ldr	r3, [pc, #400]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	4a63      	ldr	r2, [pc, #396]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f70:	e01c      	b.n	8003fac <HAL_RCC_OscConfig+0x324>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b05      	cmp	r3, #5
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x30c>
 8003f7a:	4b5f      	ldr	r3, [pc, #380]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	4a5e      	ldr	r2, [pc, #376]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f80:	f043 0304 	orr.w	r3, r3, #4
 8003f84:	6713      	str	r3, [r2, #112]	; 0x70
 8003f86:	4b5c      	ldr	r3, [pc, #368]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	4a5b      	ldr	r2, [pc, #364]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	6713      	str	r3, [r2, #112]	; 0x70
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0x324>
 8003f94:	4b58      	ldr	r3, [pc, #352]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	4a57      	ldr	r2, [pc, #348]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003f9a:	f023 0301 	bic.w	r3, r3, #1
 8003f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa0:	4b55      	ldr	r3, [pc, #340]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	4a54      	ldr	r2, [pc, #336]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	f023 0304 	bic.w	r3, r3, #4
 8003faa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d015      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb4:	f7fd f938 	bl	8001228 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fbc:	f7fd f934 	bl	8001228 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e0cb      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd2:	4b49      	ldr	r3, [pc, #292]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0ee      	beq.n	8003fbc <HAL_RCC_OscConfig+0x334>
 8003fde:	e014      	b.n	800400a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe0:	f7fd f922 	bl	8001228 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe6:	e00a      	b.n	8003ffe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe8:	f7fd f91e 	bl	8001228 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e0b5      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffe:	4b3e      	ldr	r3, [pc, #248]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1ee      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800400a:	7dfb      	ldrb	r3, [r7, #23]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d105      	bne.n	800401c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004010:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	4a38      	ldr	r2, [pc, #224]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8004016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800401a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80a1 	beq.w	8004168 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004026:	4b34      	ldr	r3, [pc, #208]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 030c 	and.w	r3, r3, #12
 800402e:	2b08      	cmp	r3, #8
 8004030:	d05c      	beq.n	80040ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d141      	bne.n	80040be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403a:	4b31      	ldr	r3, [pc, #196]	; (8004100 <HAL_RCC_OscConfig+0x478>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7fd f8f2 	bl	8001228 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004048:	f7fd f8ee 	bl	8001228 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e087      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405a:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69da      	ldr	r2, [r3, #28]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	019b      	lsls	r3, r3, #6
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	085b      	lsrs	r3, r3, #1
 800407e:	3b01      	subs	r3, #1
 8004080:	041b      	lsls	r3, r3, #16
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	061b      	lsls	r3, r3, #24
 800408a:	491b      	ldr	r1, [pc, #108]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <HAL_RCC_OscConfig+0x478>)
 8004092:	2201      	movs	r2, #1
 8004094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004096:	f7fd f8c7 	bl	8001228 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409e:	f7fd f8c3 	bl	8001228 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e05c      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b0:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCC_OscConfig+0x416>
 80040bc:	e054      	b.n	8004168 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <HAL_RCC_OscConfig+0x478>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fd f8b0 	bl	8001228 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fd f8ac 	bl	8001228 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e045      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_RCC_OscConfig+0x470>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x444>
 80040ea:	e03d      	b.n	8004168 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d107      	bne.n	8004104 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e038      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
 80040f8:	40023800 	.word	0x40023800
 80040fc:	40007000 	.word	0x40007000
 8004100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004104:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <HAL_RCC_OscConfig+0x4ec>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d028      	beq.n	8004164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800411c:	429a      	cmp	r2, r3
 800411e:	d121      	bne.n	8004164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412a:	429a      	cmp	r2, r3
 800412c:	d11a      	bne.n	8004164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004134:	4013      	ands	r3, r2
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800413a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800413c:	4293      	cmp	r3, r2
 800413e:	d111      	bne.n	8004164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	085b      	lsrs	r3, r3, #1
 800414c:	3b01      	subs	r3, #1
 800414e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004150:	429a      	cmp	r2, r3
 8004152:	d107      	bne.n	8004164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800

08004178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0cc      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800418c:	4b68      	ldr	r3, [pc, #416]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d90c      	bls.n	80041b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	4b65      	ldr	r3, [pc, #404]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b63      	ldr	r3, [pc, #396]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0b8      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d020      	beq.n	8004202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041cc:	4b59      	ldr	r3, [pc, #356]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4a58      	ldr	r2, [pc, #352]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041e4:	4b53      	ldr	r3, [pc, #332]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	4a52      	ldr	r2, [pc, #328]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f0:	4b50      	ldr	r3, [pc, #320]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	494d      	ldr	r1, [pc, #308]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d044      	beq.n	8004298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d107      	bne.n	8004226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004216:	4b47      	ldr	r3, [pc, #284]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d119      	bne.n	8004256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e07f      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d003      	beq.n	8004236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004232:	2b03      	cmp	r3, #3
 8004234:	d107      	bne.n	8004246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004236:	4b3f      	ldr	r3, [pc, #252]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e06f      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004246:	4b3b      	ldr	r3, [pc, #236]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e067      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004256:	4b37      	ldr	r3, [pc, #220]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f023 0203 	bic.w	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4934      	ldr	r1, [pc, #208]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004268:	f7fc ffde 	bl	8001228 <HAL_GetTick>
 800426c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	e00a      	b.n	8004286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004270:	f7fc ffda 	bl	8001228 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f241 3288 	movw	r2, #5000	; 0x1388
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e04f      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004286:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 020c 	and.w	r2, r3, #12
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	429a      	cmp	r2, r3
 8004296:	d1eb      	bne.n	8004270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004298:	4b25      	ldr	r3, [pc, #148]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d20c      	bcs.n	80042c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a6:	4b22      	ldr	r3, [pc, #136]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b20      	ldr	r3, [pc, #128]	; (8004330 <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e032      	b.n	8004326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042cc:	4b19      	ldr	r3, [pc, #100]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4916      	ldr	r1, [pc, #88]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ea:	4b12      	ldr	r3, [pc, #72]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	490e      	ldr	r1, [pc, #56]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042fe:	f000 f821 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 8004302:	4602      	mov	r2, r0
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	490a      	ldr	r1, [pc, #40]	; (8004338 <HAL_RCC_ClockConfig+0x1c0>)
 8004310:	5ccb      	ldrb	r3, [r1, r3]
 8004312:	fa22 f303 	lsr.w	r3, r2, r3
 8004316:	4a09      	ldr	r2, [pc, #36]	; (800433c <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800431a:	4b09      	ldr	r3, [pc, #36]	; (8004340 <HAL_RCC_ClockConfig+0x1c8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc ff3e 	bl	80011a0 <HAL_InitTick>

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40023c00 	.word	0x40023c00
 8004334:	40023800 	.word	0x40023800
 8004338:	08008af0 	.word	0x08008af0
 800433c:	20000000 	.word	0x20000000
 8004340:	20000004 	.word	0x20000004

08004344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004348:	b094      	sub	sp, #80	; 0x50
 800434a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	647b      	str	r3, [r7, #68]	; 0x44
 8004350:	2300      	movs	r3, #0
 8004352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004354:	2300      	movs	r3, #0
 8004356:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800435c:	4b79      	ldr	r3, [pc, #484]	; (8004544 <HAL_RCC_GetSysClockFreq+0x200>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 030c 	and.w	r3, r3, #12
 8004364:	2b08      	cmp	r3, #8
 8004366:	d00d      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x40>
 8004368:	2b08      	cmp	r3, #8
 800436a:	f200 80e1 	bhi.w	8004530 <HAL_RCC_GetSysClockFreq+0x1ec>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x34>
 8004372:	2b04      	cmp	r3, #4
 8004374:	d003      	beq.n	800437e <HAL_RCC_GetSysClockFreq+0x3a>
 8004376:	e0db      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004378:	4b73      	ldr	r3, [pc, #460]	; (8004548 <HAL_RCC_GetSysClockFreq+0x204>)
 800437a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800437c:	e0db      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800437e:	4b73      	ldr	r3, [pc, #460]	; (800454c <HAL_RCC_GetSysClockFreq+0x208>)
 8004380:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004382:	e0d8      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004384:	4b6f      	ldr	r3, [pc, #444]	; (8004544 <HAL_RCC_GetSysClockFreq+0x200>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800438c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800438e:	4b6d      	ldr	r3, [pc, #436]	; (8004544 <HAL_RCC_GetSysClockFreq+0x200>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d063      	beq.n	8004462 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800439a:	4b6a      	ldr	r3, [pc, #424]	; (8004544 <HAL_RCC_GetSysClockFreq+0x200>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	099b      	lsrs	r3, r3, #6
 80043a0:	2200      	movs	r2, #0
 80043a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ac:	633b      	str	r3, [r7, #48]	; 0x30
 80043ae:	2300      	movs	r3, #0
 80043b0:	637b      	str	r3, [r7, #52]	; 0x34
 80043b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043b6:	4622      	mov	r2, r4
 80043b8:	462b      	mov	r3, r5
 80043ba:	f04f 0000 	mov.w	r0, #0
 80043be:	f04f 0100 	mov.w	r1, #0
 80043c2:	0159      	lsls	r1, r3, #5
 80043c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c8:	0150      	lsls	r0, r2, #5
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4621      	mov	r1, r4
 80043d0:	1a51      	subs	r1, r2, r1
 80043d2:	6139      	str	r1, [r7, #16]
 80043d4:	4629      	mov	r1, r5
 80043d6:	eb63 0301 	sbc.w	r3, r3, r1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e8:	4659      	mov	r1, fp
 80043ea:	018b      	lsls	r3, r1, #6
 80043ec:	4651      	mov	r1, sl
 80043ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043f2:	4651      	mov	r1, sl
 80043f4:	018a      	lsls	r2, r1, #6
 80043f6:	4651      	mov	r1, sl
 80043f8:	ebb2 0801 	subs.w	r8, r2, r1
 80043fc:	4659      	mov	r1, fp
 80043fe:	eb63 0901 	sbc.w	r9, r3, r1
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800440e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004416:	4690      	mov	r8, r2
 8004418:	4699      	mov	r9, r3
 800441a:	4623      	mov	r3, r4
 800441c:	eb18 0303 	adds.w	r3, r8, r3
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	462b      	mov	r3, r5
 8004424:	eb49 0303 	adc.w	r3, r9, r3
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004436:	4629      	mov	r1, r5
 8004438:	024b      	lsls	r3, r1, #9
 800443a:	4621      	mov	r1, r4
 800443c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004440:	4621      	mov	r1, r4
 8004442:	024a      	lsls	r2, r1, #9
 8004444:	4610      	mov	r0, r2
 8004446:	4619      	mov	r1, r3
 8004448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800444a:	2200      	movs	r2, #0
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
 800444e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004450:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004454:	f7fb feb8 	bl	80001c8 <__aeabi_uldivmod>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4613      	mov	r3, r2
 800445e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004460:	e058      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004462:	4b38      	ldr	r3, [pc, #224]	; (8004544 <HAL_RCC_GetSysClockFreq+0x200>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	099b      	lsrs	r3, r3, #6
 8004468:	2200      	movs	r2, #0
 800446a:	4618      	mov	r0, r3
 800446c:	4611      	mov	r1, r2
 800446e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004472:	623b      	str	r3, [r7, #32]
 8004474:	2300      	movs	r3, #0
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
 8004478:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800447c:	4642      	mov	r2, r8
 800447e:	464b      	mov	r3, r9
 8004480:	f04f 0000 	mov.w	r0, #0
 8004484:	f04f 0100 	mov.w	r1, #0
 8004488:	0159      	lsls	r1, r3, #5
 800448a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800448e:	0150      	lsls	r0, r2, #5
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4641      	mov	r1, r8
 8004496:	ebb2 0a01 	subs.w	sl, r2, r1
 800449a:	4649      	mov	r1, r9
 800449c:	eb63 0b01 	sbc.w	fp, r3, r1
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044b4:	ebb2 040a 	subs.w	r4, r2, sl
 80044b8:	eb63 050b 	sbc.w	r5, r3, fp
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	00eb      	lsls	r3, r5, #3
 80044c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ca:	00e2      	lsls	r2, r4, #3
 80044cc:	4614      	mov	r4, r2
 80044ce:	461d      	mov	r5, r3
 80044d0:	4643      	mov	r3, r8
 80044d2:	18e3      	adds	r3, r4, r3
 80044d4:	603b      	str	r3, [r7, #0]
 80044d6:	464b      	mov	r3, r9
 80044d8:	eb45 0303 	adc.w	r3, r5, r3
 80044dc:	607b      	str	r3, [r7, #4]
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044ea:	4629      	mov	r1, r5
 80044ec:	028b      	lsls	r3, r1, #10
 80044ee:	4621      	mov	r1, r4
 80044f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044f4:	4621      	mov	r1, r4
 80044f6:	028a      	lsls	r2, r1, #10
 80044f8:	4610      	mov	r0, r2
 80044fa:	4619      	mov	r1, r3
 80044fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fe:	2200      	movs	r2, #0
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	61fa      	str	r2, [r7, #28]
 8004504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004508:	f7fb fe5e 	bl	80001c8 <__aeabi_uldivmod>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4613      	mov	r3, r2
 8004512:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <HAL_RCC_GetSysClockFreq+0x200>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	3301      	adds	r3, #1
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004524:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800452e:	e002      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <HAL_RCC_GetSysClockFreq+0x204>)
 8004532:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004538:	4618      	mov	r0, r3
 800453a:	3750      	adds	r7, #80	; 0x50
 800453c:	46bd      	mov	sp, r7
 800453e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
 8004548:	00f42400 	.word	0x00f42400
 800454c:	007a1200 	.word	0x007a1200

08004550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004554:	4b03      	ldr	r3, [pc, #12]	; (8004564 <HAL_RCC_GetHCLKFreq+0x14>)
 8004556:	681b      	ldr	r3, [r3, #0]
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	20000000 	.word	0x20000000

08004568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800456c:	f7ff fff0 	bl	8004550 <HAL_RCC_GetHCLKFreq>
 8004570:	4602      	mov	r2, r0
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	0a9b      	lsrs	r3, r3, #10
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	4903      	ldr	r1, [pc, #12]	; (800458c <HAL_RCC_GetPCLK1Freq+0x24>)
 800457e:	5ccb      	ldrb	r3, [r1, r3]
 8004580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004584:	4618      	mov	r0, r3
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40023800 	.word	0x40023800
 800458c:	08008b00 	.word	0x08008b00

08004590 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d105      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d035      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045b8:	4b62      	ldr	r3, [pc, #392]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045be:	f7fc fe33 	bl	8001228 <HAL_GetTick>
 80045c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045c6:	f7fc fe2f 	bl	8001228 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e0b0      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045d8:	4b5b      	ldr	r3, [pc, #364]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f0      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	019a      	lsls	r2, r3, #6
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	071b      	lsls	r3, r3, #28
 80045f0:	4955      	ldr	r1, [pc, #340]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045f8:	4b52      	ldr	r3, [pc, #328]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045fe:	f7fc fe13 	bl	8001228 <HAL_GetTick>
 8004602:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004606:	f7fc fe0f 	bl	8001228 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e090      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004618:	4b4b      	ldr	r3, [pc, #300]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 8083 	beq.w	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	4b44      	ldr	r3, [pc, #272]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	4a43      	ldr	r2, [pc, #268]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800463c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004640:	6413      	str	r3, [r2, #64]	; 0x40
 8004642:	4b41      	ldr	r3, [pc, #260]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800464e:	4b3f      	ldr	r3, [pc, #252]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a3e      	ldr	r2, [pc, #248]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004658:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800465a:	f7fc fde5 	bl	8001228 <HAL_GetTick>
 800465e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004660:	e008      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004662:	f7fc fde1 	bl	8001228 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e062      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004674:	4b35      	ldr	r3, [pc, #212]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004680:	4b31      	ldr	r3, [pc, #196]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004688:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d02f      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	429a      	cmp	r2, r3
 800469c:	d028      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800469e:	4b2a      	ldr	r3, [pc, #168]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046a8:	4b29      	ldr	r3, [pc, #164]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ae:	4b28      	ldr	r3, [pc, #160]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046b4:	4a24      	ldr	r2, [pc, #144]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046ba:	4b23      	ldr	r3, [pc, #140]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d114      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046c6:	f7fc fdaf 	bl	8001228 <HAL_GetTick>
 80046ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046cc:	e00a      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ce:	f7fc fdab 	bl	8001228 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046dc:	4293      	cmp	r3, r2
 80046de:	d901      	bls.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e02a      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e4:	4b18      	ldr	r3, [pc, #96]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0ee      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046fc:	d10d      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80046fe:	4b12      	ldr	r3, [pc, #72]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800470e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004712:	490d      	ldr	r1, [pc, #52]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004714:	4313      	orrs	r3, r2
 8004716:	608b      	str	r3, [r1, #8]
 8004718:	e005      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004720:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004724:	6093      	str	r3, [r2, #8]
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004728:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004732:	4905      	ldr	r1, [pc, #20]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004734:	4313      	orrs	r3, r2
 8004736:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	42470068 	.word	0x42470068
 8004748:	40023800 	.word	0x40023800
 800474c:	40007000 	.word	0x40007000
 8004750:	42470e40 	.word	0x42470e40

08004754 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d13e      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004772:	4b23      	ldr	r3, [pc, #140]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d12f      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004788:	4b1e      	ldr	r3, [pc, #120]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800478a:	617b      	str	r3, [r7, #20]
          break;
 800478c:	e02f      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800478e:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800479a:	d108      	bne.n	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800479c:	4b18      	ldr	r3, [pc, #96]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a4:	4a18      	ldr	r2, [pc, #96]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	e007      	b.n	80047be <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047ae:	4b14      	ldr	r3, [pc, #80]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b6:	4a15      	ldr	r2, [pc, #84]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047be:	4b10      	ldr	r3, [pc, #64]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c4:	099b      	lsrs	r3, r3, #6
 80047c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	fb02 f303 	mul.w	r3, r2, r3
 80047d0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047d2:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d8:	0f1b      	lsrs	r3, r3, #28
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	617b      	str	r3, [r7, #20]
          break;
 80047e6:	e002      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	617b      	str	r3, [r7, #20]
          break;
 80047ec:	bf00      	nop
        }
      }
      break;
 80047ee:	bf00      	nop
    }
  }
  return frequency;
 80047f0:	697b      	ldr	r3, [r7, #20]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800
 8004804:	00bb8000 	.word	0x00bb8000
 8004808:	007a1200 	.word	0x007a1200
 800480c:	00f42400 	.word	0x00f42400

08004810 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e07b      	b.n	800491a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d108      	bne.n	800483c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004832:	d009      	beq.n	8004848 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	61da      	str	r2, [r3, #28]
 800483a:	e005      	b.n	8004848 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fc fb02 	bl	8000e6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800487e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048cc:	ea42 0103 	orr.w	r1, r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	f003 0104 	and.w	r1, r3, #4
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	f003 0210 	and.w	r2, r3, #16
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69da      	ldr	r2, [r3, #28]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004908:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e041      	b.n	80049b8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d106      	bne.n	800494e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7fc fad7 	bl	8000efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3304      	adds	r3, #4
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f000 fac3 	bl	8004eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d001      	beq.n	80049d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e04e      	b.n	8004a76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a23      	ldr	r2, [pc, #140]	; (8004a84 <HAL_TIM_Base_Start_IT+0xc4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d022      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x80>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a02:	d01d      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x80>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1f      	ldr	r2, [pc, #124]	; (8004a88 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d018      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x80>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1e      	ldr	r2, [pc, #120]	; (8004a8c <HAL_TIM_Base_Start_IT+0xcc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x80>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1c      	ldr	r2, [pc, #112]	; (8004a90 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00e      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x80>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1b      	ldr	r2, [pc, #108]	; (8004a94 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x80>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x80>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a18      	ldr	r2, [pc, #96]	; (8004a9c <HAL_TIM_Base_Start_IT+0xdc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d111      	bne.n	8004a64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b06      	cmp	r3, #6
 8004a50:	d010      	beq.n	8004a74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0201 	orr.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a62:	e007      	b.n	8004a74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40010000 	.word	0x40010000
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800
 8004a90:	40000c00 	.word	0x40000c00
 8004a94:	40010400 	.word	0x40010400
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40001800 	.word	0x40001800

08004aa0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0201 	bic.w	r2, r2, #1
 8004ab6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6a1a      	ldr	r2, [r3, #32]
 8004abe:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10f      	bne.n	8004ae8 <HAL_TIM_Base_Stop_IT+0x48>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6a1a      	ldr	r2, [r3, #32]
 8004ace:	f240 4344 	movw	r3, #1092	; 0x444
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d107      	bne.n	8004ae8 <HAL_TIM_Base_Stop_IT+0x48>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0201 	bic.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d122      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d11b      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f06f 0202 	mvn.w	r2, #2
 8004b2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f9b5 	bl	8004eb0 <HAL_TIM_IC_CaptureCallback>
 8004b46:	e005      	b.n	8004b54 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f9a7 	bl	8004e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f9b8 	bl	8004ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d122      	bne.n	8004bae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d11b      	bne.n	8004bae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f06f 0204 	mvn.w	r2, #4
 8004b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f98b 	bl	8004eb0 <HAL_TIM_IC_CaptureCallback>
 8004b9a:	e005      	b.n	8004ba8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f97d 	bl	8004e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f98e 	bl	8004ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d122      	bne.n	8004c02 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d11b      	bne.n	8004c02 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f06f 0208 	mvn.w	r2, #8
 8004bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f961 	bl	8004eb0 <HAL_TIM_IC_CaptureCallback>
 8004bee:	e005      	b.n	8004bfc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f953 	bl	8004e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f964 	bl	8004ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	2b10      	cmp	r3, #16
 8004c0e:	d122      	bne.n	8004c56 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0310 	and.w	r3, r3, #16
 8004c1a:	2b10      	cmp	r3, #16
 8004c1c:	d11b      	bne.n	8004c56 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f06f 0210 	mvn.w	r2, #16
 8004c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f937 	bl	8004eb0 <HAL_TIM_IC_CaptureCallback>
 8004c42:	e005      	b.n	8004c50 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f929 	bl	8004e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f93a 	bl	8004ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d10e      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d107      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f06f 0201 	mvn.w	r2, #1
 8004c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7fb ffd1 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8c:	2b80      	cmp	r3, #128	; 0x80
 8004c8e:	d10e      	bne.n	8004cae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9a:	2b80      	cmp	r3, #128	; 0x80
 8004c9c:	d107      	bne.n	8004cae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fadf 	bl	800526c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	d10e      	bne.n	8004cda <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc6:	2b40      	cmp	r3, #64	; 0x40
 8004cc8:	d107      	bne.n	8004cda <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f8ff 	bl	8004ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d10e      	bne.n	8004d06 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d107      	bne.n	8004d06 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f06f 0220 	mvn.w	r2, #32
 8004cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 faa9 	bl	8005258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_TIM_ConfigClockSource+0x1c>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e0b4      	b.n	8004e94 <HAL_TIM_ConfigClockSource+0x186>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2202      	movs	r2, #2
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d48:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d50:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d62:	d03e      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0xd4>
 8004d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d68:	f200 8087 	bhi.w	8004e7a <HAL_TIM_ConfigClockSource+0x16c>
 8004d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d70:	f000 8086 	beq.w	8004e80 <HAL_TIM_ConfigClockSource+0x172>
 8004d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d78:	d87f      	bhi.n	8004e7a <HAL_TIM_ConfigClockSource+0x16c>
 8004d7a:	2b70      	cmp	r3, #112	; 0x70
 8004d7c:	d01a      	beq.n	8004db4 <HAL_TIM_ConfigClockSource+0xa6>
 8004d7e:	2b70      	cmp	r3, #112	; 0x70
 8004d80:	d87b      	bhi.n	8004e7a <HAL_TIM_ConfigClockSource+0x16c>
 8004d82:	2b60      	cmp	r3, #96	; 0x60
 8004d84:	d050      	beq.n	8004e28 <HAL_TIM_ConfigClockSource+0x11a>
 8004d86:	2b60      	cmp	r3, #96	; 0x60
 8004d88:	d877      	bhi.n	8004e7a <HAL_TIM_ConfigClockSource+0x16c>
 8004d8a:	2b50      	cmp	r3, #80	; 0x50
 8004d8c:	d03c      	beq.n	8004e08 <HAL_TIM_ConfigClockSource+0xfa>
 8004d8e:	2b50      	cmp	r3, #80	; 0x50
 8004d90:	d873      	bhi.n	8004e7a <HAL_TIM_ConfigClockSource+0x16c>
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d058      	beq.n	8004e48 <HAL_TIM_ConfigClockSource+0x13a>
 8004d96:	2b40      	cmp	r3, #64	; 0x40
 8004d98:	d86f      	bhi.n	8004e7a <HAL_TIM_ConfigClockSource+0x16c>
 8004d9a:	2b30      	cmp	r3, #48	; 0x30
 8004d9c:	d064      	beq.n	8004e68 <HAL_TIM_ConfigClockSource+0x15a>
 8004d9e:	2b30      	cmp	r3, #48	; 0x30
 8004da0:	d86b      	bhi.n	8004e7a <HAL_TIM_ConfigClockSource+0x16c>
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d060      	beq.n	8004e68 <HAL_TIM_ConfigClockSource+0x15a>
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d867      	bhi.n	8004e7a <HAL_TIM_ConfigClockSource+0x16c>
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d05c      	beq.n	8004e68 <HAL_TIM_ConfigClockSource+0x15a>
 8004dae:	2b10      	cmp	r3, #16
 8004db0:	d05a      	beq.n	8004e68 <HAL_TIM_ConfigClockSource+0x15a>
 8004db2:	e062      	b.n	8004e7a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	6899      	ldr	r1, [r3, #8]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f000 f9ac 	bl	8005120 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dd6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	609a      	str	r2, [r3, #8]
      break;
 8004de0:	e04f      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	6899      	ldr	r1, [r3, #8]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f000 f995 	bl	8005120 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e04:	609a      	str	r2, [r3, #8]
      break;
 8004e06:	e03c      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	6859      	ldr	r1, [r3, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	461a      	mov	r2, r3
 8004e16:	f000 f909 	bl	800502c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2150      	movs	r1, #80	; 0x50
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 f962 	bl	80050ea <TIM_ITRx_SetConfig>
      break;
 8004e26:	e02c      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	6859      	ldr	r1, [r3, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	461a      	mov	r2, r3
 8004e36:	f000 f928 	bl	800508a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2160      	movs	r1, #96	; 0x60
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 f952 	bl	80050ea <TIM_ITRx_SetConfig>
      break;
 8004e46:	e01c      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	6859      	ldr	r1, [r3, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	461a      	mov	r2, r3
 8004e56:	f000 f8e9 	bl	800502c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2140      	movs	r1, #64	; 0x40
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 f942 	bl	80050ea <TIM_ITRx_SetConfig>
      break;
 8004e66:	e00c      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f000 f939 	bl	80050ea <TIM_ITRx_SetConfig>
      break;
 8004e78:	e003      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e7e:	e000      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a40      	ldr	r2, [pc, #256]	; (8005000 <TIM_Base_SetConfig+0x114>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d013      	beq.n	8004f2c <TIM_Base_SetConfig+0x40>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0a:	d00f      	beq.n	8004f2c <TIM_Base_SetConfig+0x40>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a3d      	ldr	r2, [pc, #244]	; (8005004 <TIM_Base_SetConfig+0x118>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00b      	beq.n	8004f2c <TIM_Base_SetConfig+0x40>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a3c      	ldr	r2, [pc, #240]	; (8005008 <TIM_Base_SetConfig+0x11c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d007      	beq.n	8004f2c <TIM_Base_SetConfig+0x40>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a3b      	ldr	r2, [pc, #236]	; (800500c <TIM_Base_SetConfig+0x120>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_Base_SetConfig+0x40>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a3a      	ldr	r2, [pc, #232]	; (8005010 <TIM_Base_SetConfig+0x124>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d108      	bne.n	8004f3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a2f      	ldr	r2, [pc, #188]	; (8005000 <TIM_Base_SetConfig+0x114>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d02b      	beq.n	8004f9e <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4c:	d027      	beq.n	8004f9e <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a2c      	ldr	r2, [pc, #176]	; (8005004 <TIM_Base_SetConfig+0x118>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d023      	beq.n	8004f9e <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a2b      	ldr	r2, [pc, #172]	; (8005008 <TIM_Base_SetConfig+0x11c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d01f      	beq.n	8004f9e <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a2a      	ldr	r2, [pc, #168]	; (800500c <TIM_Base_SetConfig+0x120>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01b      	beq.n	8004f9e <TIM_Base_SetConfig+0xb2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a29      	ldr	r2, [pc, #164]	; (8005010 <TIM_Base_SetConfig+0x124>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d017      	beq.n	8004f9e <TIM_Base_SetConfig+0xb2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a28      	ldr	r2, [pc, #160]	; (8005014 <TIM_Base_SetConfig+0x128>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <TIM_Base_SetConfig+0xb2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a27      	ldr	r2, [pc, #156]	; (8005018 <TIM_Base_SetConfig+0x12c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00f      	beq.n	8004f9e <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a26      	ldr	r2, [pc, #152]	; (800501c <TIM_Base_SetConfig+0x130>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00b      	beq.n	8004f9e <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a25      	ldr	r2, [pc, #148]	; (8005020 <TIM_Base_SetConfig+0x134>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d007      	beq.n	8004f9e <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a24      	ldr	r2, [pc, #144]	; (8005024 <TIM_Base_SetConfig+0x138>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d003      	beq.n	8004f9e <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a23      	ldr	r2, [pc, #140]	; (8005028 <TIM_Base_SetConfig+0x13c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d108      	bne.n	8004fb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a0a      	ldr	r2, [pc, #40]	; (8005000 <TIM_Base_SetConfig+0x114>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d003      	beq.n	8004fe4 <TIM_Base_SetConfig+0xf8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a0c      	ldr	r2, [pc, #48]	; (8005010 <TIM_Base_SetConfig+0x124>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d103      	bne.n	8004fec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	615a      	str	r2, [r3, #20]
}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40010000 	.word	0x40010000
 8005004:	40000400 	.word	0x40000400
 8005008:	40000800 	.word	0x40000800
 800500c:	40000c00 	.word	0x40000c00
 8005010:	40010400 	.word	0x40010400
 8005014:	40014000 	.word	0x40014000
 8005018:	40014400 	.word	0x40014400
 800501c:	40014800 	.word	0x40014800
 8005020:	40001800 	.word	0x40001800
 8005024:	40001c00 	.word	0x40001c00
 8005028:	40002000 	.word	0x40002000

0800502c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f023 0201 	bic.w	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f023 030a 	bic.w	r3, r3, #10
 8005068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4313      	orrs	r3, r2
 8005070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	621a      	str	r2, [r3, #32]
}
 800507e:	bf00      	nop
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800508a:	b480      	push	{r7}
 800508c:	b087      	sub	sp, #28
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f023 0210 	bic.w	r2, r3, #16
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	031b      	lsls	r3, r3, #12
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	621a      	str	r2, [r3, #32]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	f043 0307 	orr.w	r3, r3, #7
 800510c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	609a      	str	r2, [r3, #8]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800513a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	021a      	lsls	r2, r3, #8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	431a      	orrs	r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4313      	orrs	r3, r2
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	609a      	str	r2, [r3, #8]
}
 8005154:	bf00      	nop
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005174:	2302      	movs	r3, #2
 8005176:	e05a      	b.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a21      	ldr	r2, [pc, #132]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d022      	beq.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c4:	d01d      	beq.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1d      	ldr	r2, [pc, #116]	; (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d018      	beq.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a1b      	ldr	r2, [pc, #108]	; (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d013      	beq.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a1a      	ldr	r2, [pc, #104]	; (8005248 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00e      	beq.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a18      	ldr	r2, [pc, #96]	; (800524c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d009      	beq.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a17      	ldr	r2, [pc, #92]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d004      	beq.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a15      	ldr	r2, [pc, #84]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d10c      	bne.n	800521c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005208:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	4313      	orrs	r3, r2
 8005212:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40010000 	.word	0x40010000
 8005240:	40000400 	.word	0x40000400
 8005244:	40000800 	.word	0x40000800
 8005248:	40000c00 	.word	0x40000c00
 800524c:	40010400 	.word	0x40010400
 8005250:	40014000 	.word	0x40014000
 8005254:	40001800 	.word	0x40001800

08005258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005280:	b084      	sub	sp, #16
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	f107 001c 	add.w	r0, r7, #28
 800528e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	2b01      	cmp	r3, #1
 8005296:	d122      	bne.n	80052de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d105      	bne.n	80052d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f9c0 	bl	8005658 <USB_CoreReset>
 80052d8:	4603      	mov	r3, r0
 80052da:	73fb      	strb	r3, [r7, #15]
 80052dc:	e01a      	b.n	8005314 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f9b4 	bl	8005658 <USB_CoreReset>
 80052f0:	4603      	mov	r3, r0
 80052f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	639a      	str	r2, [r3, #56]	; 0x38
 8005306:	e005      	b.n	8005314 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	2b01      	cmp	r3, #1
 8005318:	d10b      	bne.n	8005332 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f043 0206 	orr.w	r2, r3, #6
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f043 0220 	orr.w	r2, r3, #32
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005332:	7bfb      	ldrb	r3, [r7, #15]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800533e:	b004      	add	sp, #16
 8005340:	4770      	bx	lr

08005342 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f043 0201 	orr.w	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f023 0201 	bic.w	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	460b      	mov	r3, r1
 8005390:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d115      	bne.n	80053d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053b4:	2001      	movs	r0, #1
 80053b6:	f7fb ff43 	bl	8001240 <HAL_Delay>
      ms++;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3301      	adds	r3, #1
 80053be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f93a 	bl	800563a <USB_GetMode>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d01e      	beq.n	800540a <USB_SetCurrentMode+0x84>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b31      	cmp	r3, #49	; 0x31
 80053d0:	d9f0      	bls.n	80053b4 <USB_SetCurrentMode+0x2e>
 80053d2:	e01a      	b.n	800540a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d115      	bne.n	8005406 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053e6:	2001      	movs	r0, #1
 80053e8:	f7fb ff2a 	bl	8001240 <HAL_Delay>
      ms++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3301      	adds	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f921 	bl	800563a <USB_GetMode>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d005      	beq.n	800540a <USB_SetCurrentMode+0x84>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b31      	cmp	r3, #49	; 0x31
 8005402:	d9f0      	bls.n	80053e6 <USB_SetCurrentMode+0x60>
 8005404:	e001      	b.n	800540a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e005      	b.n	8005416 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b32      	cmp	r3, #50	; 0x32
 800540e:	d101      	bne.n	8005414 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3301      	adds	r3, #1
 8005432:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4a13      	ldr	r2, [pc, #76]	; (8005484 <USB_FlushTxFifo+0x64>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d901      	bls.n	8005440 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e01b      	b.n	8005478 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	daf2      	bge.n	800542e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	019b      	lsls	r3, r3, #6
 8005450:	f043 0220 	orr.w	r2, r3, #32
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	3301      	adds	r3, #1
 800545c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4a08      	ldr	r2, [pc, #32]	; (8005484 <USB_FlushTxFifo+0x64>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d901      	bls.n	800546a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e006      	b.n	8005478 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b20      	cmp	r3, #32
 8005474:	d0f0      	beq.n	8005458 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	00030d40 	.word	0x00030d40

08005488 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	3301      	adds	r3, #1
 8005498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4a11      	ldr	r2, [pc, #68]	; (80054e4 <USB_FlushRxFifo+0x5c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d901      	bls.n	80054a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e018      	b.n	80054d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	daf2      	bge.n	8005494 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2210      	movs	r2, #16
 80054b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3301      	adds	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4a08      	ldr	r2, [pc, #32]	; (80054e4 <USB_FlushRxFifo+0x5c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e006      	b.n	80054d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0310 	and.w	r3, r3, #16
 80054d2:	2b10      	cmp	r3, #16
 80054d4:	d0f0      	beq.n	80054b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	00030d40 	.word	0x00030d40

080054e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b089      	sub	sp, #36	; 0x24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	4611      	mov	r1, r2
 80054f4:	461a      	mov	r2, r3
 80054f6:	460b      	mov	r3, r1
 80054f8:	71fb      	strb	r3, [r7, #7]
 80054fa:	4613      	mov	r3, r2
 80054fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005506:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	d123      	bne.n	8005556 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800550e:	88bb      	ldrh	r3, [r7, #4]
 8005510:	3303      	adds	r3, #3
 8005512:	089b      	lsrs	r3, r3, #2
 8005514:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005516:	2300      	movs	r3, #0
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	e018      	b.n	800554e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	031a      	lsls	r2, r3, #12
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	4413      	add	r3, r2
 8005524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005528:	461a      	mov	r2, r3
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	3301      	adds	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	3301      	adds	r3, #1
 800553a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	3301      	adds	r3, #1
 8005540:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	3301      	adds	r3, #1
 8005546:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	3301      	adds	r3, #1
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	429a      	cmp	r2, r3
 8005554:	d3e2      	bcc.n	800551c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3724      	adds	r7, #36	; 0x24
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005564:	b480      	push	{r7}
 8005566:	b08b      	sub	sp, #44	; 0x2c
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	4613      	mov	r3, r2
 8005570:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	089b      	lsrs	r3, r3, #2
 800557e:	b29b      	uxth	r3, r3
 8005580:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800558a:	2300      	movs	r3, #0
 800558c:	623b      	str	r3, [r7, #32]
 800558e:	e014      	b.n	80055ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	601a      	str	r2, [r3, #0]
    pDest++;
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	3301      	adds	r3, #1
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	3301      	adds	r3, #1
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	3301      	adds	r3, #1
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	3301      	adds	r3, #1
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	3301      	adds	r3, #1
 80055b8:	623b      	str	r3, [r7, #32]
 80055ba:	6a3a      	ldr	r2, [r7, #32]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d3e6      	bcc.n	8005590 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055c2:	8bfb      	ldrh	r3, [r7, #30]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01e      	beq.n	8005606 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d2:	461a      	mov	r2, r3
 80055d4:	f107 0310 	add.w	r3, r7, #16
 80055d8:	6812      	ldr	r2, [r2, #0]
 80055da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	701a      	strb	r2, [r3, #0]
      i++;
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	3301      	adds	r3, #1
 80055f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	3301      	adds	r3, #1
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80055fa:	8bfb      	ldrh	r3, [r7, #30]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005600:	8bfb      	ldrh	r3, [r7, #30]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1ea      	bne.n	80055dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005608:	4618      	mov	r0, r3
 800560a:	372c      	adds	r7, #44	; 0x2c
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800562c:	68fb      	ldr	r3, [r7, #12]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f003 0301 	and.w	r3, r3, #1
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3301      	adds	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4a13      	ldr	r2, [pc, #76]	; (80056bc <USB_CoreReset+0x64>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e01b      	b.n	80056ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	daf2      	bge.n	8005664 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f043 0201 	orr.w	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3301      	adds	r3, #1
 8005692:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4a09      	ldr	r2, [pc, #36]	; (80056bc <USB_CoreReset+0x64>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d901      	bls.n	80056a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e006      	b.n	80056ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d0f0      	beq.n	800568e <USB_CoreReset+0x36>

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	00030d40 	.word	0x00030d40

080056c0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056c0:	b084      	sub	sp, #16
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b086      	sub	sp, #24
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056e0:	461a      	mov	r2, r3
 80056e2:	2300      	movs	r3, #0
 80056e4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d018      	beq.n	8005748 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d10a      	bne.n	8005732 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800572a:	f043 0304 	orr.w	r3, r3, #4
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	e014      	b.n	800575c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005740:	f023 0304 	bic.w	r3, r3, #4
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	e009      	b.n	800575c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005756:	f023 0304 	bic.w	r3, r3, #4
 800575a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800575c:	2110      	movs	r1, #16
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff fe5e 	bl	8005420 <USB_FlushTxFifo>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff fe8a 	bl	8005488 <USB_FlushRxFifo>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800577e:	2300      	movs	r3, #0
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	e015      	b.n	80057b0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005790:	461a      	mov	r2, r3
 8005792:	f04f 33ff 	mov.w	r3, #4294967295
 8005796:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a4:	461a      	mov	r2, r3
 80057a6:	2300      	movs	r3, #0
 80057a8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	3301      	adds	r3, #1
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d3e5      	bcc.n	8005784 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f04f 32ff 	mov.w	r2, #4294967295
 80057c4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a13      	ldr	r2, [pc, #76]	; (800582c <USB_HostInit+0x16c>)
 80057de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a13      	ldr	r2, [pc, #76]	; (8005830 <USB_HostInit+0x170>)
 80057e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80057e8:	e009      	b.n	80057fe <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2280      	movs	r2, #128	; 0x80
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a10      	ldr	r2, [pc, #64]	; (8005834 <USB_HostInit+0x174>)
 80057f4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a0f      	ldr	r2, [pc, #60]	; (8005838 <USB_HostInit+0x178>)
 80057fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	2b00      	cmp	r3, #0
 8005802:	d105      	bne.n	8005810 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f043 0210 	orr.w	r2, r3, #16
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	4b09      	ldr	r3, [pc, #36]	; (800583c <USB_HostInit+0x17c>)
 8005816:	4313      	orrs	r3, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800581c:	7dfb      	ldrb	r3, [r7, #23]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005828:	b004      	add	sp, #16
 800582a:	4770      	bx	lr
 800582c:	01000200 	.word	0x01000200
 8005830:	00e00300 	.word	0x00e00300
 8005834:	00600080 	.word	0x00600080
 8005838:	004000e0 	.word	0x004000e0
 800583c:	a3200008 	.word	0xa3200008

08005840 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800585e:	f023 0303 	bic.w	r3, r3, #3
 8005862:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	68f9      	ldr	r1, [r7, #12]
 8005874:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005878:	4313      	orrs	r3, r2
 800587a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d107      	bne.n	8005892 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005888:	461a      	mov	r2, r3
 800588a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800588e:	6053      	str	r3, [r2, #4]
 8005890:	e009      	b.n	80058a6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005892:	78fb      	ldrb	r3, [r7, #3]
 8005894:	2b02      	cmp	r3, #2
 8005896:	d106      	bne.n	80058a6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800589e:	461a      	mov	r2, r3
 80058a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80058a4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80058e4:	2064      	movs	r0, #100	; 0x64
 80058e6:	f7fb fcab 	bl	8001240 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80058f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80058f8:	200a      	movs	r0, #10
 80058fa:	f7fb fca1 	bl	8001240 <HAL_Delay>

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800592c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <USB_DriveVbus+0x44>
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d106      	bne.n	800594c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005946:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800594a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005956:	d109      	bne.n	800596c <USB_DriveVbus+0x64>
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800596a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	0c5b      	lsrs	r3, r3, #17
 8005998:	f003 0303 	and.w	r3, r3, #3
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	b29b      	uxth	r3, r3
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
	...

080059cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	4608      	mov	r0, r1
 80059d6:	4611      	mov	r1, r2
 80059d8:	461a      	mov	r2, r3
 80059da:	4603      	mov	r3, r0
 80059dc:	70fb      	strb	r3, [r7, #3]
 80059de:	460b      	mov	r3, r1
 80059e0:	70bb      	strb	r3, [r7, #2]
 80059e2:	4613      	mov	r3, r2
 80059e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80059ee:	78fb      	ldrb	r3, [r7, #3]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fa:	461a      	mov	r2, r3
 80059fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005a00:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d87e      	bhi.n	8005b08 <USB_HC_Init+0x13c>
 8005a0a:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <USB_HC_Init+0x44>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005a21 	.word	0x08005a21
 8005a14:	08005acb 	.word	0x08005acb
 8005a18:	08005a21 	.word	0x08005a21
 8005a1c:	08005a8d 	.word	0x08005a8d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005a32:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	da10      	bge.n	8005a5e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a3c:	78fb      	ldrb	r3, [r7, #3]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	78fa      	ldrb	r2, [r7, #3]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a5a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005a5c:	e057      	b.n	8005b0e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d051      	beq.n	8005b0e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	78fa      	ldrb	r2, [r7, #3]
 8005a7a:	0151      	lsls	r1, r2, #5
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	440a      	add	r2, r1
 8005a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a88:	60d3      	str	r3, [r2, #12]
      break;
 8005a8a:	e040      	b.n	8005b0e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005a9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005aa0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	da34      	bge.n	8005b12 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	78fa      	ldrb	r2, [r7, #3]
 8005ab8:	0151      	lsls	r1, r2, #5
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	440a      	add	r2, r1
 8005abe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ac8:	e023      	b.n	8005b12 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f240 2325 	movw	r3, #549	; 0x225
 8005adc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ade:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	da17      	bge.n	8005b16 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005ae6:	78fb      	ldrb	r3, [r7, #3]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	78fa      	ldrb	r2, [r7, #3]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b00:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005b04:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b06:	e006      	b.n	8005b16 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	77fb      	strb	r3, [r7, #31]
      break;
 8005b0c:	e004      	b.n	8005b18 <USB_HC_Init+0x14c>
      break;
 8005b0e:	bf00      	nop
 8005b10:	e002      	b.n	8005b18 <USB_HC_Init+0x14c>
      break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <USB_HC_Init+0x14c>
      break;
 8005b16:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b32:	f043 0302 	orr.w	r3, r3, #2
 8005b36:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b3e:	699a      	ldr	r2, [r3, #24]
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	2101      	movs	r1, #1
 8005b48:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4c:	6939      	ldr	r1, [r7, #16]
 8005b4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b52:	4313      	orrs	r3, r2
 8005b54:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	da03      	bge.n	8005b72 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b6e:	61bb      	str	r3, [r7, #24]
 8005b70:	e001      	b.n	8005b76 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff feff 	bl	800597a <USB_GetHostSpeed>
 8005b7c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005b7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d106      	bne.n	8005b94 <USB_HC_Init+0x1c8>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d003      	beq.n	8005b94 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	e001      	b.n	8005b98 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b98:	787b      	ldrb	r3, [r7, #1]
 8005b9a:	059b      	lsls	r3, r3, #22
 8005b9c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ba0:	78bb      	ldrb	r3, [r7, #2]
 8005ba2:	02db      	lsls	r3, r3, #11
 8005ba4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ba8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005baa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bae:	049b      	lsls	r3, r3, #18
 8005bb0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005bb4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bb6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bbc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	0159      	lsls	r1, r3, #5
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	440b      	add	r3, r1
 8005bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bce:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bd4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005bd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d003      	beq.n	8005be6 <USB_HC_Init+0x21a>
 8005bde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d10f      	bne.n	8005c06 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005be6:	78fb      	ldrb	r3, [r7, #3]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	78fa      	ldrb	r2, [r7, #3]
 8005bf6:	0151      	lsls	r1, r2, #5
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	440a      	add	r2, r1
 8005bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c04:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005c06:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08c      	sub	sp, #48	; 0x30
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c2c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d02d      	beq.n	8005c96 <USB_HC_StartXfer+0x86>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	791b      	ldrb	r3, [r3, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d129      	bne.n	8005c96 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d117      	bne.n	8005c78 <USB_HC_StartXfer+0x68>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	79db      	ldrb	r3, [r3, #7]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <USB_HC_StartXfer+0x48>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	79db      	ldrb	r3, [r3, #7]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d10f      	bne.n	8005c78 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	6a3a      	ldr	r2, [r7, #32]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c76:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10b      	bne.n	8005c96 <USB_HC_StartXfer+0x86>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	795b      	ldrb	r3, [r3, #5]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d107      	bne.n	8005c96 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	785b      	ldrb	r3, [r3, #1]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 fa0f 	bl	80060b0 <USB_DoPing>
      return HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e0f8      	b.n	8005e88 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d018      	beq.n	8005cd0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	8912      	ldrh	r2, [r2, #8]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	8912      	ldrh	r2, [r2, #8]
 8005cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cb2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005cb4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005cb6:	8b7b      	ldrh	r3, [r7, #26]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d90b      	bls.n	8005cd4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005cbc:	8b7b      	ldrh	r3, [r7, #26]
 8005cbe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005cc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	8912      	ldrh	r2, [r2, #8]
 8005cc6:	fb03 f202 	mul.w	r2, r3, r2
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	611a      	str	r2, [r3, #16]
 8005cce:	e001      	b.n	8005cd4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	78db      	ldrb	r3, [r3, #3]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d007      	beq.n	8005cec <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005cdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	8912      	ldrh	r2, [r2, #8]
 8005ce2:	fb03 f202 	mul.w	r2, r3, r2
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	611a      	str	r2, [r3, #16]
 8005cea:	e003      	b.n	8005cf4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	695a      	ldr	r2, [r3, #20]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cfe:	04d9      	lsls	r1, r3, #19
 8005d00:	4b63      	ldr	r3, [pc, #396]	; (8005e90 <USB_HC_StartXfer+0x280>)
 8005d02:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d04:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	7a9b      	ldrb	r3, [r3, #10]
 8005d0a:	075b      	lsls	r3, r3, #29
 8005d0c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d10:	69f9      	ldr	r1, [r7, #28]
 8005d12:	0148      	lsls	r0, r1, #5
 8005d14:	6a39      	ldr	r1, [r7, #32]
 8005d16:	4401      	add	r1, r0
 8005d18:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d1c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d1e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	68d9      	ldr	r1, [r3, #12]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d36:	460a      	mov	r2, r1
 8005d38:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bf0c      	ite	eq
 8005d4a:	2301      	moveq	r3, #1
 8005d4c:	2300      	movne	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	0151      	lsls	r1, r2, #5
 8005d64:	6a3a      	ldr	r2, [r7, #32]
 8005d66:	440a      	add	r2, r1
 8005d68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d70:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	7e7b      	ldrb	r3, [r7, #25]
 8005d82:	075b      	lsls	r3, r3, #29
 8005d84:	69f9      	ldr	r1, [r7, #28]
 8005d86:	0148      	lsls	r0, r1, #5
 8005d88:	6a39      	ldr	r1, [r7, #32]
 8005d8a:	4401      	add	r1, r0
 8005d8c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005d90:	4313      	orrs	r3, r2
 8005d92:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005daa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	78db      	ldrb	r3, [r3, #3]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	e003      	b.n	8005dc6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dc4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dcc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dda:	461a      	mov	r2, r3
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005de0:	79fb      	ldrb	r3, [r7, #7]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	e04e      	b.n	8005e88 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	78db      	ldrb	r3, [r3, #3]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d149      	bne.n	8005e86 <USB_HC_StartXfer+0x276>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d045      	beq.n	8005e86 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	79db      	ldrb	r3, [r3, #7]
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d830      	bhi.n	8005e64 <USB_HC_StartXfer+0x254>
 8005e02:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <USB_HC_StartXfer+0x1f8>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e19 	.word	0x08005e19
 8005e0c:	08005e3d 	.word	0x08005e3d
 8005e10:	08005e19 	.word	0x08005e19
 8005e14:	08005e3d 	.word	0x08005e3d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	3303      	adds	r3, #3
 8005e1e:	089b      	lsrs	r3, r3, #2
 8005e20:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005e22:	8afa      	ldrh	r2, [r7, #22]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d91c      	bls.n	8005e68 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f043 0220 	orr.w	r2, r3, #32
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e3a:	e015      	b.n	8005e68 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	3303      	adds	r3, #3
 8005e42:	089b      	lsrs	r3, r3, #2
 8005e44:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005e46:	8afa      	ldrh	r2, [r7, #22]
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d90a      	bls.n	8005e6c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e62:	e003      	b.n	8005e6c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005e64:	bf00      	nop
 8005e66:	e002      	b.n	8005e6e <USB_HC_StartXfer+0x25e>
        break;
 8005e68:	bf00      	nop
 8005e6a:	e000      	b.n	8005e6e <USB_HC_StartXfer+0x25e>
        break;
 8005e6c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	68d9      	ldr	r1, [r3, #12]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	785a      	ldrb	r2, [r3, #1]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	9000      	str	r0, [sp, #0]
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7ff fb31 	bl	80054e8 <USB_WritePacket>
  }

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3728      	adds	r7, #40	; 0x28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	1ff80000 	.word	0x1ff80000

08005e94 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	b29b      	uxth	r3, r3
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b089      	sub	sp, #36	; 0x24
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	0c9b      	lsrs	r3, r3, #18
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	0fdb      	lsrs	r3, r3, #31
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d104      	bne.n	8005f10 <USB_HC_Halt+0x5a>
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	e0c8      	b.n	80060a2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <USB_HC_Halt+0x66>
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d163      	bne.n	8005fe4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f3a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f040 80ab 	bne.w	80060a0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d133      	bne.n	8005fbe <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	69fa      	ldr	r2, [r7, #28]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f74:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f94:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fa2:	d81d      	bhi.n	8005fe0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fba:	d0ec      	beq.n	8005f96 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fbc:	e070      	b.n	80060a0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	0151      	lsls	r1, r2, #5
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	440a      	add	r2, r1
 8005fd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fdc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fde:	e05f      	b.n	80060a0 <USB_HC_Halt+0x1ea>
            break;
 8005fe0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fe2:	e05d      	b.n	80060a0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ffe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006002:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d133      	bne.n	800607c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	440a      	add	r2, r1
 800602a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006032:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	4413      	add	r3, r2
 800603c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	0151      	lsls	r1, r2, #5
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	440a      	add	r2, r1
 800604a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800604e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006052:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006060:	d81d      	bhi.n	800609e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006078:	d0ec      	beq.n	8006054 <USB_HC_Halt+0x19e>
 800607a:	e011      	b.n	80060a0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	440a      	add	r2, r1
 8006092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006096:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	e000      	b.n	80060a0 <USB_HC_Halt+0x1ea>
          break;
 800609e:	bf00      	nop
    }
  }

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3724      	adds	r7, #36	; 0x24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
	...

080060b0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80060c4:	2301      	movs	r3, #1
 80060c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	04da      	lsls	r2, r3, #19
 80060cc:	4b15      	ldr	r3, [pc, #84]	; (8006124 <USB_DoPing+0x74>)
 80060ce:	4013      	ands	r3, r2
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060e0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060f8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006100:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610e:	461a      	mov	r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	1ff80000 	.word	0x1ff80000

08006128 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7ff f911 	bl	8005364 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006142:	2110      	movs	r1, #16
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff f96b 	bl	8005420 <USB_FlushTxFifo>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff f997 	bl	8005488 <USB_FlushRxFifo>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006164:	2300      	movs	r3, #0
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	e01f      	b.n	80061aa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006180:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006188:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006190:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619e:	461a      	mov	r2, r3
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	3301      	adds	r3, #1
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b0f      	cmp	r3, #15
 80061ae:	d9dc      	bls.n	800616a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80061b0:	2300      	movs	r3, #0
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	e034      	b.n	8006220 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061dc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ea:	461a      	mov	r2, r3
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061fc:	d80c      	bhi.n	8006218 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006214:	d0ec      	beq.n	80061f0 <USB_StopHost+0xc8>
 8006216:	e000      	b.n	800621a <USB_StopHost+0xf2>
        break;
 8006218:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	3301      	adds	r3, #1
 800621e:	61bb      	str	r3, [r7, #24]
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2b0f      	cmp	r3, #15
 8006224:	d9c7      	bls.n	80061b6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800622c:	461a      	mov	r2, r3
 800622e:	f04f 33ff 	mov.w	r3, #4294967295
 8006232:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f04f 32ff 	mov.w	r2, #4294967295
 800623a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff f880 	bl	8005342 <USB_EnableGlobalInt>

  return ret;
 8006242:	7ffb      	ldrb	r3, [r7, #31]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3720      	adds	r7, #32
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800624c:	b590      	push	{r4, r7, lr}
 800624e:	b089      	sub	sp, #36	; 0x24
 8006250:	af04      	add	r7, sp, #16
 8006252:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006254:	2301      	movs	r3, #1
 8006256:	2202      	movs	r2, #2
 8006258:	2102      	movs	r1, #2
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fc66 	bl	8006b2c <USBH_FindInterface>
 8006260:	4603      	mov	r3, r0
 8006262:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	2bff      	cmp	r3, #255	; 0xff
 8006268:	d002      	beq.n	8006270 <USBH_CDC_InterfaceInit+0x24>
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d901      	bls.n	8006274 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006270:	2302      	movs	r3, #2
 8006272:	e13d      	b.n	80064f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fc3b 	bl	8006af4 <USBH_SelectInterface>
 800627e:	4603      	mov	r3, r0
 8006280:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006288:	2302      	movs	r3, #2
 800628a:	e131      	b.n	80064f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006292:	2050      	movs	r0, #80	; 0x50
 8006294:	f002 fad2 	bl	800883c <malloc>
 8006298:	4603      	mov	r3, r0
 800629a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80062ac:	2302      	movs	r3, #2
 80062ae:	e11f      	b.n	80064f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80062b0:	2250      	movs	r2, #80	; 0x50
 80062b2:	2100      	movs	r1, #0
 80062b4:	68b8      	ldr	r0, [r7, #8]
 80062b6:	f002 fb7d 	bl	80089b4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	211a      	movs	r1, #26
 80062c0:	fb01 f303 	mul.w	r3, r1, r3
 80062c4:	4413      	add	r3, r2
 80062c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	b25b      	sxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	da15      	bge.n	80062fe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	211a      	movs	r1, #26
 80062d8:	fb01 f303 	mul.w	r3, r1, r3
 80062dc:	4413      	add	r3, r2
 80062de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062e2:	781a      	ldrb	r2, [r3, #0]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	211a      	movs	r1, #26
 80062ee:	fb01 f303 	mul.w	r3, r1, r3
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80062f8:	881a      	ldrh	r2, [r3, #0]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 ff2e 	bl	8008166 <USBH_AllocPipe>
 800630a:	4603      	mov	r3, r0
 800630c:	461a      	mov	r2, r3
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	7819      	ldrb	r1, [r3, #0]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	7858      	ldrb	r0, [r3, #1]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	8952      	ldrh	r2, [r2, #10]
 800632a:	9202      	str	r2, [sp, #8]
 800632c:	2203      	movs	r2, #3
 800632e:	9201      	str	r2, [sp, #4]
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	4623      	mov	r3, r4
 8006334:	4602      	mov	r2, r0
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 fee6 	bl	8008108 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2200      	movs	r2, #0
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f002 f9f5 	bl	8008734 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800634a:	2300      	movs	r3, #0
 800634c:	2200      	movs	r2, #0
 800634e:	210a      	movs	r1, #10
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fbeb 	bl	8006b2c <USBH_FindInterface>
 8006356:	4603      	mov	r3, r0
 8006358:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	2bff      	cmp	r3, #255	; 0xff
 800635e:	d002      	beq.n	8006366 <USBH_CDC_InterfaceInit+0x11a>
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d901      	bls.n	800636a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006366:	2302      	movs	r3, #2
 8006368:	e0c2      	b.n	80064f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800636a:	7bfb      	ldrb	r3, [r7, #15]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	211a      	movs	r1, #26
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	4413      	add	r3, r2
 8006376:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	b25b      	sxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	da16      	bge.n	80063b0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	211a      	movs	r1, #26
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	4413      	add	r3, r2
 800638e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006392:	781a      	ldrb	r2, [r3, #0]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	211a      	movs	r1, #26
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063a8:	881a      	ldrh	r2, [r3, #0]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	835a      	strh	r2, [r3, #26]
 80063ae:	e015      	b.n	80063dc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	211a      	movs	r1, #26
 80063b6:	fb01 f303 	mul.w	r3, r1, r3
 80063ba:	4413      	add	r3, r2
 80063bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063c0:	781a      	ldrb	r2, [r3, #0]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	211a      	movs	r1, #26
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063d6:	881a      	ldrh	r2, [r3, #0]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	211a      	movs	r1, #26
 80063e2:	fb01 f303 	mul.w	r3, r1, r3
 80063e6:	4413      	add	r3, r2
 80063e8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	b25b      	sxtb	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	da16      	bge.n	8006422 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	211a      	movs	r1, #26
 80063fa:	fb01 f303 	mul.w	r3, r1, r3
 80063fe:	4413      	add	r3, r2
 8006400:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006404:	781a      	ldrb	r2, [r3, #0]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	211a      	movs	r1, #26
 8006410:	fb01 f303 	mul.w	r3, r1, r3
 8006414:	4413      	add	r3, r2
 8006416:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800641a:	881a      	ldrh	r2, [r3, #0]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	835a      	strh	r2, [r3, #26]
 8006420:	e015      	b.n	800644e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	211a      	movs	r1, #26
 8006428:	fb01 f303 	mul.w	r3, r1, r3
 800642c:	4413      	add	r3, r2
 800642e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006432:	781a      	ldrb	r2, [r3, #0]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	211a      	movs	r1, #26
 800643e:	fb01 f303 	mul.w	r3, r1, r3
 8006442:	4413      	add	r3, r2
 8006444:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006448:	881a      	ldrh	r2, [r3, #0]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	7b9b      	ldrb	r3, [r3, #14]
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 fe86 	bl	8008166 <USBH_AllocPipe>
 800645a:	4603      	mov	r3, r0
 800645c:	461a      	mov	r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	7bdb      	ldrb	r3, [r3, #15]
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 fe7c 	bl	8008166 <USBH_AllocPipe>
 800646e:	4603      	mov	r3, r0
 8006470:	461a      	mov	r2, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	7b59      	ldrb	r1, [r3, #13]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	7b98      	ldrb	r0, [r3, #14]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	8b12      	ldrh	r2, [r2, #24]
 800648e:	9202      	str	r2, [sp, #8]
 8006490:	2202      	movs	r2, #2
 8006492:	9201      	str	r2, [sp, #4]
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	4623      	mov	r3, r4
 8006498:	4602      	mov	r2, r0
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f001 fe34 	bl	8008108 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	7b19      	ldrb	r1, [r3, #12]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	7bd8      	ldrb	r0, [r3, #15]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	8b52      	ldrh	r2, [r2, #26]
 80064b8:	9202      	str	r2, [sp, #8]
 80064ba:	2202      	movs	r2, #2
 80064bc:	9201      	str	r2, [sp, #4]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	4623      	mov	r3, r4
 80064c2:	4602      	mov	r2, r0
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f001 fe1f 	bl	8008108 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	7b5b      	ldrb	r3, [r3, #13]
 80064d6:	2200      	movs	r2, #0
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f002 f92a 	bl	8008734 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	7b1b      	ldrb	r3, [r3, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f002 f923 	bl	8008734 <USBH_LL_SetToggle>

  return USBH_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd90      	pop	{r4, r7, pc}

080064f8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00e      	beq.n	8006530 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f001 fe14 	bl	8008146 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 fe3f 	bl	80081a8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	7b1b      	ldrb	r3, [r3, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00e      	beq.n	8006556 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	7b1b      	ldrb	r3, [r3, #12]
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f001 fe01 	bl	8008146 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	7b1b      	ldrb	r3, [r3, #12]
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 fe2c 	bl	80081a8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	7b5b      	ldrb	r3, [r3, #13]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00e      	beq.n	800657c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	7b5b      	ldrb	r3, [r3, #13]
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f001 fdee 	bl	8008146 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	7b5b      	ldrb	r3, [r3, #13]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 fe19 	bl	80081a8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00b      	beq.n	80065a0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	4618      	mov	r0, r3
 8006592:	f002 f95b 	bl	800884c <free>
    phost->pActiveClass->pData = 0U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800659c:	2200      	movs	r2, #0
 800659e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b084      	sub	sp, #16
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3340      	adds	r3, #64	; 0x40
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f8b1 	bl	800672a <GetLineCoding>
 80065c8:	4603      	mov	r3, r0
 80065ca:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065cc:	7afb      	ldrb	r3, [r7, #11]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d105      	bne.n	80065de <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065d8:	2102      	movs	r1, #2
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80065de:	7afb      	ldrb	r3, [r7, #11]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065f0:	2301      	movs	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006608:	2b04      	cmp	r3, #4
 800660a:	d877      	bhi.n	80066fc <USBH_CDC_Process+0x114>
 800660c:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <USBH_CDC_Process+0x2c>)
 800660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006612:	bf00      	nop
 8006614:	08006629 	.word	0x08006629
 8006618:	0800662f 	.word	0x0800662f
 800661c:	0800665f 	.word	0x0800665f
 8006620:	080066d3 	.word	0x080066d3
 8006624:	080066e1 	.word	0x080066e1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	73fb      	strb	r3, [r7, #15]
      break;
 800662c:	e06d      	b.n	800670a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f897 	bl	8006768 <SetLineCoding>
 800663a:	4603      	mov	r3, r0
 800663c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800663e:	7bbb      	ldrb	r3, [r7, #14]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d104      	bne.n	800664e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800664c:	e058      	b.n	8006700 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d055      	beq.n	8006700 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2204      	movs	r2, #4
 8006658:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800665c:	e050      	b.n	8006700 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	3340      	adds	r3, #64	; 0x40
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f860 	bl	800672a <GetLineCoding>
 800666a:	4603      	mov	r3, r0
 800666c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d126      	bne.n	80066c2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006686:	791b      	ldrb	r3, [r3, #4]
 8006688:	429a      	cmp	r2, r3
 800668a:	d13b      	bne.n	8006704 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006696:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006698:	429a      	cmp	r2, r3
 800669a:	d133      	bne.n	8006704 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d12b      	bne.n	8006704 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d124      	bne.n	8006704 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f958 	bl	8006970 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066c0:	e020      	b.n	8006704 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d01d      	beq.n	8006704 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2204      	movs	r2, #4
 80066cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80066d0:	e018      	b.n	8006704 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f867 	bl	80067a6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f8da 	bl	8006892 <CDC_ProcessReception>
      break;
 80066de:	e014      	b.n	800670a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80066e0:	2100      	movs	r1, #0
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 ffef 	bl	80076c6 <USBH_ClrFeature>
 80066e8:	4603      	mov	r3, r0
 80066ea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066ec:	7bbb      	ldrb	r3, [r7, #14]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10a      	bne.n	8006708 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80066fa:	e005      	b.n	8006708 <USBH_CDC_Process+0x120>

    default:
      break;
 80066fc:	bf00      	nop
 80066fe:	e004      	b.n	800670a <USBH_CDC_Process+0x122>
      break;
 8006700:	bf00      	nop
 8006702:	e002      	b.n	800670a <USBH_CDC_Process+0x122>
      break;
 8006704:	bf00      	nop
 8006706:	e000      	b.n	800670a <USBH_CDC_Process+0x122>
      break;
 8006708:	bf00      	nop

  }

  return status;
 800670a:	7bfb      	ldrb	r3, [r7, #15]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	22a1      	movs	r2, #161	; 0xa1
 8006738:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2221      	movs	r2, #33	; 0x21
 800673e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2207      	movs	r2, #7
 8006750:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2207      	movs	r2, #7
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 fa83 	bl	8007c64 <USBH_CtlReq>
 800675e:	4603      	mov	r3, r0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2221      	movs	r2, #33	; 0x21
 8006776:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2207      	movs	r2, #7
 800678e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2207      	movs	r2, #7
 8006794:	4619      	mov	r1, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f001 fa64 	bl	8007c64 <USBH_CtlReq>
 800679c:	4603      	mov	r3, r0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b086      	sub	sp, #24
 80067aa:	af02      	add	r7, sp, #8
 80067ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d002      	beq.n	80067cc <CDC_ProcessTransmission+0x26>
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d023      	beq.n	8006812 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80067ca:	e05e      	b.n	800688a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	8b12      	ldrh	r2, [r2, #24]
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d90b      	bls.n	80067f0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	69d9      	ldr	r1, [r3, #28]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8b1a      	ldrh	r2, [r3, #24]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	7b5b      	ldrb	r3, [r3, #13]
 80067e4:	2001      	movs	r0, #1
 80067e6:	9000      	str	r0, [sp, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 fc4a 	bl	8008082 <USBH_BulkSendData>
 80067ee:	e00b      	b.n	8006808 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	7b5b      	ldrb	r3, [r3, #13]
 80067fe:	2001      	movs	r0, #1
 8006800:	9000      	str	r0, [sp, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 fc3d 	bl	8008082 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006810:	e03b      	b.n	800688a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	7b5b      	ldrb	r3, [r3, #13]
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 ff61 	bl	80086e0 <USBH_LL_GetURBState>
 800681e:	4603      	mov	r3, r0
 8006820:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006822:	7afb      	ldrb	r3, [r7, #11]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d128      	bne.n	800687a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	8b12      	ldrh	r2, [r2, #24]
 8006830:	4293      	cmp	r3, r2
 8006832:	d90e      	bls.n	8006852 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	8b12      	ldrh	r2, [r2, #24]
 800683c:	1a9a      	subs	r2, r3, r2
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	8b12      	ldrh	r2, [r2, #24]
 800684a:	441a      	add	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	61da      	str	r2, [r3, #28]
 8006850:	e002      	b.n	8006858 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006868:	e00e      	b.n	8006888 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f868 	bl	8006948 <USBH_CDC_TransmitCallback>
      break;
 8006878:	e006      	b.n	8006888 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800687a:	7afb      	ldrb	r3, [r7, #11]
 800687c:	2b02      	cmp	r3, #2
 800687e:	d103      	bne.n	8006888 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006888:	bf00      	nop
  }
}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b086      	sub	sp, #24
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d002      	beq.n	80068b8 <CDC_ProcessReception+0x26>
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d00e      	beq.n	80068d4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80068b6:	e043      	b.n	8006940 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	6a19      	ldr	r1, [r3, #32]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	8b5a      	ldrh	r2, [r3, #26]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	7b1b      	ldrb	r3, [r3, #12]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 fc01 	bl	80080cc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2204      	movs	r2, #4
 80068ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80068d2:	e035      	b.n	8006940 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	7b1b      	ldrb	r3, [r3, #12]
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 ff00 	bl	80086e0 <USBH_LL_GetURBState>
 80068e0:	4603      	mov	r3, r0
 80068e2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80068e4:	7cfb      	ldrb	r3, [r7, #19]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d129      	bne.n	800693e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	7b1b      	ldrb	r3, [r3, #12]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fe63 	bl	80085bc <USBH_LL_GetLastXferSize>
 80068f6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d016      	beq.n	8006930 <CDC_ProcessReception+0x9e>
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	8b5b      	ldrh	r3, [r3, #26]
 8006906:	461a      	mov	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4293      	cmp	r3, r2
 800690c:	d910      	bls.n	8006930 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	1ad2      	subs	r2, r2, r3
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	6a1a      	ldr	r2, [r3, #32]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	441a      	add	r2, r3
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2203      	movs	r2, #3
 800692a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800692e:	e006      	b.n	800693e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f80f 	bl	800695c <USBH_CDC_ReceiveCallback>
      break;
 800693e:	bf00      	nop
  }
}
 8006940:	bf00      	nop
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006998:	2302      	movs	r3, #2
 800699a:	e029      	b.n	80069f0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	79fa      	ldrb	r2, [r7, #7]
 80069a0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f81f 	bl	80069f8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f001 fd33 	bl	8008454 <USBH_LL_Init>

  return USBH_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	e009      	b.n	8006a1e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	33e0      	adds	r3, #224	; 0xe0
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	2200      	movs	r2, #0
 8006a16:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b0f      	cmp	r3, #15
 8006a22:	d9f2      	bls.n	8006a0a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e009      	b.n	8006a3e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a34:	2200      	movs	r2, #0
 8006a36:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a44:	d3f1      	bcc.n	8006a2a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2240      	movs	r2, #64	; 0x40
 8006a6a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d016      	beq.n	8006ae2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10e      	bne.n	8006adc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ac4:	1c59      	adds	r1, r3, #1
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	33de      	adds	r3, #222	; 0xde
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73fb      	strb	r3, [r7, #15]
 8006ada:	e004      	b.n	8006ae6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006adc:	2302      	movs	r3, #2
 8006ade:	73fb      	strb	r3, [r7, #15]
 8006ae0:	e001      	b.n	8006ae6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006b0a:	78fa      	ldrb	r2, [r7, #3]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d204      	bcs.n	8006b1a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006b18:	e001      	b.n	8006b1e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	4608      	mov	r0, r1
 8006b36:	4611      	mov	r1, r2
 8006b38:	461a      	mov	r2, r3
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	70fb      	strb	r3, [r7, #3]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70bb      	strb	r3, [r7, #2]
 8006b42:	4613      	mov	r3, r2
 8006b44:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b54:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b56:	e025      	b.n	8006ba4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b58:	7dfb      	ldrb	r3, [r7, #23]
 8006b5a:	221a      	movs	r2, #26
 8006b5c:	fb02 f303 	mul.w	r3, r2, r3
 8006b60:	3308      	adds	r3, #8
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4413      	add	r3, r2
 8006b66:	3302      	adds	r3, #2
 8006b68:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	795b      	ldrb	r3, [r3, #5]
 8006b6e:	78fa      	ldrb	r2, [r7, #3]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d002      	beq.n	8006b7a <USBH_FindInterface+0x4e>
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	2bff      	cmp	r3, #255	; 0xff
 8006b78:	d111      	bne.n	8006b9e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b7e:	78ba      	ldrb	r2, [r7, #2]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d002      	beq.n	8006b8a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b84:	78bb      	ldrb	r3, [r7, #2]
 8006b86:	2bff      	cmp	r3, #255	; 0xff
 8006b88:	d109      	bne.n	8006b9e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b8e:	787a      	ldrb	r2, [r7, #1]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d002      	beq.n	8006b9a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b94:	787b      	ldrb	r3, [r7, #1]
 8006b96:	2bff      	cmp	r3, #255	; 0xff
 8006b98:	d101      	bne.n	8006b9e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	e006      	b.n	8006bac <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006b9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d9d6      	bls.n	8006b58 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006baa:	23ff      	movs	r3, #255	; 0xff
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 fc83 	bl	80084cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f001 fd9c 	bl	8008706 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b088      	sub	sp, #32
 8006bdc:	af04      	add	r7, sp, #16
 8006bde:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006be0:	2302      	movs	r3, #2
 8006be2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d102      	bne.n	8006bfa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2203      	movs	r2, #3
 8006bf8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b0b      	cmp	r3, #11
 8006c02:	f200 81be 	bhi.w	8006f82 <USBH_Process+0x3aa>
 8006c06:	a201      	add	r2, pc, #4	; (adr r2, 8006c0c <USBH_Process+0x34>)
 8006c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0c:	08006c3d 	.word	0x08006c3d
 8006c10:	08006c6f 	.word	0x08006c6f
 8006c14:	08006cd7 	.word	0x08006cd7
 8006c18:	08006f1d 	.word	0x08006f1d
 8006c1c:	08006f83 	.word	0x08006f83
 8006c20:	08006d7b 	.word	0x08006d7b
 8006c24:	08006ec3 	.word	0x08006ec3
 8006c28:	08006db1 	.word	0x08006db1
 8006c2c:	08006dd1 	.word	0x08006dd1
 8006c30:	08006df1 	.word	0x08006df1
 8006c34:	08006e35 	.word	0x08006e35
 8006c38:	08006f05 	.word	0x08006f05
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 819e 	beq.w	8006f86 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c50:	20c8      	movs	r0, #200	; 0xc8
 8006c52:	f001 fd9f 	bl	8008794 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fc95 	bl	8008586 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c6c:	e18b      	b.n	8006f86 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d107      	bne.n	8006c88 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c86:	e18d      	b.n	8006fa4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c92:	d914      	bls.n	8006cbe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d903      	bls.n	8006cb6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	220d      	movs	r2, #13
 8006cb2:	701a      	strb	r2, [r3, #0]
      break;
 8006cb4:	e176      	b.n	8006fa4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
      break;
 8006cbc:	e172      	b.n	8006fa4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006cc4:	f103 020a 	add.w	r2, r3, #10
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006cce:	200a      	movs	r0, #10
 8006cd0:	f001 fd60 	bl	8008794 <USBH_Delay>
      break;
 8006cd4:	e166      	b.n	8006fa4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ce6:	2104      	movs	r1, #4
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006cec:	2064      	movs	r0, #100	; 0x64
 8006cee:	f001 fd51 	bl	8008794 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fc20 	bl	8008538 <USBH_LL_GetSpeed>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2205      	movs	r2, #5
 8006d06:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d08:	2100      	movs	r1, #0
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 fa2b 	bl	8008166 <USBH_AllocPipe>
 8006d10:	4603      	mov	r3, r0
 8006d12:	461a      	mov	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d18:	2180      	movs	r1, #128	; 0x80
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 fa23 	bl	8008166 <USBH_AllocPipe>
 8006d20:	4603      	mov	r3, r0
 8006d22:	461a      	mov	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	7919      	ldrb	r1, [r3, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d3c:	b292      	uxth	r2, r2
 8006d3e:	9202      	str	r2, [sp, #8]
 8006d40:	2200      	movs	r2, #0
 8006d42:	9201      	str	r2, [sp, #4]
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	4603      	mov	r3, r0
 8006d48:	2280      	movs	r2, #128	; 0x80
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 f9dc 	bl	8008108 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7959      	ldrb	r1, [r3, #5]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d64:	b292      	uxth	r2, r2
 8006d66:	9202      	str	r2, [sp, #8]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	9201      	str	r2, [sp, #4]
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2200      	movs	r2, #0
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 f9c8 	bl	8008108 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d78:	e114      	b.n	8006fa4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f918 	bl	8006fb0 <USBH_HandleEnum>
 8006d80:	4603      	mov	r3, r0
 8006d82:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f040 80fe 	bne.w	8006f8a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d103      	bne.n	8006da8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2208      	movs	r2, #8
 8006da4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006da6:	e0f0      	b.n	8006f8a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2207      	movs	r2, #7
 8006dac:	701a      	strb	r2, [r3, #0]
      break;
 8006dae:	e0ec      	b.n	8006f8a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 80e9 	beq.w	8006f8e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2208      	movs	r2, #8
 8006dcc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006dce:	e0de      	b.n	8006f8e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fc2c 	bl	8007638 <USBH_SetCfg>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f040 80d5 	bne.w	8006f92 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2209      	movs	r2, #9
 8006dec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006dee:	e0d0      	b.n	8006f92 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d016      	beq.n	8006e2c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006dfe:	2101      	movs	r1, #1
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fc3c 	bl	800767e <USBH_SetFeature>
 8006e06:	4603      	mov	r3, r0
 8006e08:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d103      	bne.n	8006e1a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	220a      	movs	r2, #10
 8006e16:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e18:	e0bd      	b.n	8006f96 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	f040 80b9 	bne.w	8006f96 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	220a      	movs	r2, #10
 8006e28:	701a      	strb	r2, [r3, #0]
      break;
 8006e2a:	e0b4      	b.n	8006f96 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	220a      	movs	r2, #10
 8006e30:	701a      	strb	r2, [r3, #0]
      break;
 8006e32:	e0b0      	b.n	8006f96 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 80ad 	beq.w	8006f9a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e48:	2300      	movs	r3, #0
 8006e4a:	73fb      	strb	r3, [r7, #15]
 8006e4c:	e016      	b.n	8006e7c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e4e:	7bfa      	ldrb	r2, [r7, #15]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	32de      	adds	r2, #222	; 0xde
 8006e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e58:	791a      	ldrb	r2, [r3, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d108      	bne.n	8006e76 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e64:	7bfa      	ldrb	r2, [r7, #15]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	32de      	adds	r2, #222	; 0xde
 8006e6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006e74:	e005      	b.n	8006e82 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	73fb      	strb	r3, [r7, #15]
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0e5      	beq.n	8006e4e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d016      	beq.n	8006eba <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4798      	blx	r3
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d109      	bne.n	8006eb2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2206      	movs	r2, #6
 8006ea2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006eaa:	2103      	movs	r1, #3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006eb0:	e073      	b.n	8006f9a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	220d      	movs	r2, #13
 8006eb6:	701a      	strb	r2, [r3, #0]
      break;
 8006eb8:	e06f      	b.n	8006f9a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	220d      	movs	r2, #13
 8006ebe:	701a      	strb	r2, [r3, #0]
      break;
 8006ec0:	e06b      	b.n	8006f9a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d017      	beq.n	8006efc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	4798      	blx	r3
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d103      	bne.n	8006eec <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	220b      	movs	r2, #11
 8006ee8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006eea:	e058      	b.n	8006f9e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d154      	bne.n	8006f9e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	220d      	movs	r2, #13
 8006ef8:	701a      	strb	r2, [r3, #0]
      break;
 8006efa:	e050      	b.n	8006f9e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	220d      	movs	r2, #13
 8006f00:	701a      	strb	r2, [r3, #0]
      break;
 8006f02:	e04c      	b.n	8006f9e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d049      	beq.n	8006fa2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	4798      	blx	r3
      }
      break;
 8006f1a:	e042      	b.n	8006fa2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff fd67 	bl	80069f8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d009      	beq.n	8006f48 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d005      	beq.n	8006f5e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f58:	2105      	movs	r1, #5
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d107      	bne.n	8006f7a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff fe20 	bl	8006bb8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f78:	e014      	b.n	8006fa4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 faa6 	bl	80084cc <USBH_LL_Start>
      break;
 8006f80:	e010      	b.n	8006fa4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006f82:	bf00      	nop
 8006f84:	e00e      	b.n	8006fa4 <USBH_Process+0x3cc>
      break;
 8006f86:	bf00      	nop
 8006f88:	e00c      	b.n	8006fa4 <USBH_Process+0x3cc>
      break;
 8006f8a:	bf00      	nop
 8006f8c:	e00a      	b.n	8006fa4 <USBH_Process+0x3cc>
    break;
 8006f8e:	bf00      	nop
 8006f90:	e008      	b.n	8006fa4 <USBH_Process+0x3cc>
      break;
 8006f92:	bf00      	nop
 8006f94:	e006      	b.n	8006fa4 <USBH_Process+0x3cc>
      break;
 8006f96:	bf00      	nop
 8006f98:	e004      	b.n	8006fa4 <USBH_Process+0x3cc>
      break;
 8006f9a:	bf00      	nop
 8006f9c:	e002      	b.n	8006fa4 <USBH_Process+0x3cc>
      break;
 8006f9e:	bf00      	nop
 8006fa0:	e000      	b.n	8006fa4 <USBH_Process+0x3cc>
      break;
 8006fa2:	bf00      	nop
  }
  return USBH_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop

08006fb0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af04      	add	r7, sp, #16
 8006fb6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	785b      	ldrb	r3, [r3, #1]
 8006fc4:	2b07      	cmp	r3, #7
 8006fc6:	f200 81c1 	bhi.w	800734c <USBH_HandleEnum+0x39c>
 8006fca:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <USBH_HandleEnum+0x20>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08006ff1 	.word	0x08006ff1
 8006fd4:	080070af 	.word	0x080070af
 8006fd8:	08007119 	.word	0x08007119
 8006fdc:	080071a7 	.word	0x080071a7
 8006fe0:	08007211 	.word	0x08007211
 8006fe4:	08007281 	.word	0x08007281
 8006fe8:	080072c7 	.word	0x080072c7
 8006fec:	0800730d 	.word	0x0800730d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006ff0:	2108      	movs	r1, #8
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa50 	bl	8007498 <USBH_Get_DevDesc>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ffc:	7bbb      	ldrb	r3, [r7, #14]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d130      	bne.n	8007064 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	7919      	ldrb	r1, [r3, #4]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007026:	b292      	uxth	r2, r2
 8007028:	9202      	str	r2, [sp, #8]
 800702a:	2200      	movs	r2, #0
 800702c:	9201      	str	r2, [sp, #4]
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	4603      	mov	r3, r0
 8007032:	2280      	movs	r2, #128	; 0x80
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 f867 	bl	8008108 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	7959      	ldrb	r1, [r3, #5]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800704e:	b292      	uxth	r2, r2
 8007050:	9202      	str	r2, [sp, #8]
 8007052:	2200      	movs	r2, #0
 8007054:	9201      	str	r2, [sp, #4]
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	4603      	mov	r3, r0
 800705a:	2200      	movs	r2, #0
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 f853 	bl	8008108 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007062:	e175      	b.n	8007350 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007064:	7bbb      	ldrb	r3, [r7, #14]
 8007066:	2b03      	cmp	r3, #3
 8007068:	f040 8172 	bne.w	8007350 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007072:	3301      	adds	r3, #1
 8007074:	b2da      	uxtb	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007082:	2b03      	cmp	r3, #3
 8007084:	d903      	bls.n	800708e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	220d      	movs	r2, #13
 800708a:	701a      	strb	r2, [r3, #0]
      break;
 800708c:	e160      	b.n	8007350 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	795b      	ldrb	r3, [r3, #5]
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f001 f887 	bl	80081a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	791b      	ldrb	r3, [r3, #4]
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 f881 	bl	80081a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]
      break;
 80070ac:	e150      	b.n	8007350 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80070ae:	2112      	movs	r1, #18
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f9f1 	bl	8007498 <USBH_Get_DevDesc>
 80070b6:	4603      	mov	r3, r0
 80070b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d103      	bne.n	80070c8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070c6:	e145      	b.n	8007354 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	f040 8142 	bne.w	8007354 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070d6:	3301      	adds	r3, #1
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d903      	bls.n	80070f2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	220d      	movs	r2, #13
 80070ee:	701a      	strb	r2, [r3, #0]
      break;
 80070f0:	e130      	b.n	8007354 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	795b      	ldrb	r3, [r3, #5]
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 f855 	bl	80081a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	791b      	ldrb	r3, [r3, #4]
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 f84f 	bl	80081a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]
      break;
 8007116:	e11d      	b.n	8007354 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007118:	2101      	movs	r1, #1
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fa68 	bl	80075f0 <USBH_SetAddress>
 8007120:	4603      	mov	r3, r0
 8007122:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007124:	7bbb      	ldrb	r3, [r7, #14]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d132      	bne.n	8007190 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800712a:	2002      	movs	r0, #2
 800712c:	f001 fb32 	bl	8008794 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2203      	movs	r2, #3
 800713c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	7919      	ldrb	r1, [r3, #4]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007152:	b292      	uxth	r2, r2
 8007154:	9202      	str	r2, [sp, #8]
 8007156:	2200      	movs	r2, #0
 8007158:	9201      	str	r2, [sp, #4]
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	4603      	mov	r3, r0
 800715e:	2280      	movs	r2, #128	; 0x80
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 ffd1 	bl	8008108 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	7959      	ldrb	r1, [r3, #5]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800717a:	b292      	uxth	r2, r2
 800717c:	9202      	str	r2, [sp, #8]
 800717e:	2200      	movs	r2, #0
 8007180:	9201      	str	r2, [sp, #4]
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	4603      	mov	r3, r0
 8007186:	2200      	movs	r2, #0
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 ffbd 	bl	8008108 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800718e:	e0e3      	b.n	8007358 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	2b03      	cmp	r3, #3
 8007194:	f040 80e0 	bne.w	8007358 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	220d      	movs	r2, #13
 800719c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	705a      	strb	r2, [r3, #1]
      break;
 80071a4:	e0d8      	b.n	8007358 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80071a6:	2109      	movs	r1, #9
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f99d 	bl	80074e8 <USBH_Get_CfgDesc>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d103      	bne.n	80071c0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2204      	movs	r2, #4
 80071bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071be:	e0cd      	b.n	800735c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	f040 80ca 	bne.w	800735c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071ce:	3301      	adds	r3, #1
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d903      	bls.n	80071ea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	220d      	movs	r2, #13
 80071e6:	701a      	strb	r2, [r3, #0]
      break;
 80071e8:	e0b8      	b.n	800735c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	795b      	ldrb	r3, [r3, #5]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 ffd9 	bl	80081a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	791b      	ldrb	r3, [r3, #4]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 ffd3 	bl	80081a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	701a      	strb	r2, [r3, #0]
      break;
 800720e:	e0a5      	b.n	800735c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f965 	bl	80074e8 <USBH_Get_CfgDesc>
 800721e:	4603      	mov	r3, r0
 8007220:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d103      	bne.n	8007230 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2205      	movs	r2, #5
 800722c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800722e:	e097      	b.n	8007360 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	2b03      	cmp	r3, #3
 8007234:	f040 8094 	bne.w	8007360 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800723e:	3301      	adds	r3, #1
 8007240:	b2da      	uxtb	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800724e:	2b03      	cmp	r3, #3
 8007250:	d903      	bls.n	800725a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	220d      	movs	r2, #13
 8007256:	701a      	strb	r2, [r3, #0]
      break;
 8007258:	e082      	b.n	8007360 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	795b      	ldrb	r3, [r3, #5]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 ffa1 	bl	80081a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	791b      	ldrb	r3, [r3, #4]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 ff9b 	bl	80081a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	701a      	strb	r2, [r3, #0]
      break;
 800727e:	e06f      	b.n	8007360 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007286:	2b00      	cmp	r3, #0
 8007288:	d019      	beq.n	80072be <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007296:	23ff      	movs	r3, #255	; 0xff
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f949 	bl	8007530 <USBH_Get_StringDesc>
 800729e:	4603      	mov	r3, r0
 80072a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d103      	bne.n	80072b0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2206      	movs	r2, #6
 80072ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072ae:	e059      	b.n	8007364 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d156      	bne.n	8007364 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2206      	movs	r2, #6
 80072ba:	705a      	strb	r2, [r3, #1]
      break;
 80072bc:	e052      	b.n	8007364 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2206      	movs	r2, #6
 80072c2:	705a      	strb	r2, [r3, #1]
      break;
 80072c4:	e04e      	b.n	8007364 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d019      	beq.n	8007304 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072dc:	23ff      	movs	r3, #255	; 0xff
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f926 	bl	8007530 <USBH_Get_StringDesc>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d103      	bne.n	80072f6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2207      	movs	r2, #7
 80072f2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072f4:	e038      	b.n	8007368 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d135      	bne.n	8007368 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2207      	movs	r2, #7
 8007300:	705a      	strb	r2, [r3, #1]
      break;
 8007302:	e031      	b.n	8007368 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2207      	movs	r2, #7
 8007308:	705a      	strb	r2, [r3, #1]
      break;
 800730a:	e02d      	b.n	8007368 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007312:	2b00      	cmp	r3, #0
 8007314:	d017      	beq.n	8007346 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007322:	23ff      	movs	r3, #255	; 0xff
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f903 	bl	8007530 <USBH_Get_StringDesc>
 800732a:	4603      	mov	r3, r0
 800732c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d102      	bne.n	800733a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007338:	e018      	b.n	800736c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	2b03      	cmp	r3, #3
 800733e:	d115      	bne.n	800736c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	73fb      	strb	r3, [r7, #15]
      break;
 8007344:	e012      	b.n	800736c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]
      break;
 800734a:	e00f      	b.n	800736c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800734c:	bf00      	nop
 800734e:	e00e      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 8007350:	bf00      	nop
 8007352:	e00c      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 8007354:	bf00      	nop
 8007356:	e00a      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 8007358:	bf00      	nop
 800735a:	e008      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 800735c:	bf00      	nop
 800735e:	e006      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 8007360:	bf00      	nop
 8007362:	e004      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 8007364:	bf00      	nop
 8007366:	e002      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 8007368:	bf00      	nop
 800736a:	e000      	b.n	800736e <USBH_HandleEnum+0x3be>
      break;
 800736c:	bf00      	nop
  }
  return Status;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800738a:	bf00      	nop
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b082      	sub	sp, #8
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f804 	bl	80073ba <USBH_HandleSof>
}
 80073b2:	bf00      	nop
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b0b      	cmp	r3, #11
 80073ca:	d10a      	bne.n	80073e2 <USBH_HandleSof+0x28>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	4798      	blx	r3
  }
}
 80073e2:	bf00      	nop
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80073fa:	bf00      	nop
}
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007416:	bf00      	nop
}
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 f846 	bl	8008502 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	791b      	ldrb	r3, [r3, #4]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fe93 	bl	80081a8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	795b      	ldrb	r3, [r3, #5]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fe8d 	bl	80081a8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af02      	add	r7, sp, #8
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80074aa:	78fb      	ldrb	r3, [r7, #3]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	4613      	mov	r3, r2
 80074b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074b6:	2100      	movs	r1, #0
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f864 	bl	8007586 <USBH_GetDescriptor>
 80074be:	4603      	mov	r3, r0
 80074c0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f203 3026 	addw	r0, r3, #806	; 0x326
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	b292      	uxth	r2, r2
 80074d8:	4619      	mov	r1, r3
 80074da:	f000 f919 	bl	8007710 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80074de:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	331c      	adds	r3, #28
 80074f8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80074fa:	887b      	ldrh	r3, [r7, #2]
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007504:	2100      	movs	r1, #0
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f83d 	bl	8007586 <USBH_GetDescriptor>
 800750c:	4603      	mov	r3, r0
 800750e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d107      	bne.n	8007526 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007516:	887b      	ldrh	r3, [r7, #2]
 8007518:	461a      	mov	r2, r3
 800751a:	68b9      	ldr	r1, [r7, #8]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f989 	bl	8007834 <USBH_ParseCfgDesc>
 8007522:	4603      	mov	r3, r0
 8007524:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b088      	sub	sp, #32
 8007534:	af02      	add	r7, sp, #8
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	607a      	str	r2, [r7, #4]
 800753a:	461a      	mov	r2, r3
 800753c:	460b      	mov	r3, r1
 800753e:	72fb      	strb	r3, [r7, #11]
 8007540:	4613      	mov	r3, r2
 8007542:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007544:	7afb      	ldrb	r3, [r7, #11]
 8007546:	b29b      	uxth	r3, r3
 8007548:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800754c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007554:	893b      	ldrh	r3, [r7, #8]
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	460b      	mov	r3, r1
 800755a:	2100      	movs	r1, #0
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 f812 	bl	8007586 <USBH_GetDescriptor>
 8007562:	4603      	mov	r3, r0
 8007564:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d107      	bne.n	800757c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007572:	893a      	ldrh	r2, [r7, #8]
 8007574:	6879      	ldr	r1, [r7, #4]
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fb26 	bl	8007bc8 <USBH_ParseStringDesc>
  }

  return status;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	607b      	str	r3, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	72fb      	strb	r3, [r7, #11]
 8007594:	4613      	mov	r3, r2
 8007596:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	789b      	ldrb	r3, [r3, #2]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d11c      	bne.n	80075da <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075a0:	7afb      	ldrb	r3, [r7, #11]
 80075a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2206      	movs	r2, #6
 80075b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	893a      	ldrh	r2, [r7, #8]
 80075b6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80075b8:	893b      	ldrh	r3, [r7, #8]
 80075ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075c2:	d104      	bne.n	80075ce <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f240 4209 	movw	r2, #1033	; 0x409
 80075ca:	829a      	strh	r2, [r3, #20]
 80075cc:	e002      	b.n	80075d4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8b3a      	ldrh	r2, [r7, #24]
 80075d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80075da:	8b3b      	ldrh	r3, [r7, #24]
 80075dc:	461a      	mov	r2, r3
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 fb3f 	bl	8007c64 <USBH_CtlReq>
 80075e6:	4603      	mov	r3, r0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	789b      	ldrb	r3, [r3, #2]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d10f      	bne.n	8007624 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2205      	movs	r2, #5
 800760e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	b29a      	uxth	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007624:	2200      	movs	r2, #0
 8007626:	2100      	movs	r1, #0
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fb1b 	bl	8007c64 <USBH_CtlReq>
 800762e:	4603      	mov	r3, r0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	789b      	ldrb	r3, [r3, #2]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d10e      	bne.n	800766a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2209      	movs	r2, #9
 8007656:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	887a      	ldrh	r2, [r7, #2]
 800765c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800766a:	2200      	movs	r2, #0
 800766c:	2100      	movs	r1, #0
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 faf8 	bl	8007c64 <USBH_CtlReq>
 8007674:	4603      	mov	r3, r0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	460b      	mov	r3, r1
 8007688:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	789b      	ldrb	r3, [r3, #2]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d10f      	bne.n	80076b2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2203      	movs	r2, #3
 800769c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800769e:	78fb      	ldrb	r3, [r7, #3]
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076b2:	2200      	movs	r2, #0
 80076b4:	2100      	movs	r1, #0
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fad4 	bl	8007c64 <USBH_CtlReq>
 80076bc:	4603      	mov	r3, r0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	789b      	ldrb	r3, [r3, #2]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d10f      	bne.n	80076fa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2202      	movs	r2, #2
 80076de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80076ec:	78fb      	ldrb	r3, [r7, #3]
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80076fa:	2200      	movs	r2, #0
 80076fc:	2100      	movs	r1, #0
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fab0 	bl	8007c64 <USBH_CtlReq>
 8007704:	4603      	mov	r3, r0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4613      	mov	r3, r2
 800771c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	781a      	ldrb	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	785a      	ldrb	r2, [r3, #1]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	3302      	adds	r3, #2
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	b29a      	uxth	r2, r3
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	3303      	adds	r3, #3
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	b29b      	uxth	r3, r3
 800773e:	021b      	lsls	r3, r3, #8
 8007740:	b29b      	uxth	r3, r3
 8007742:	4313      	orrs	r3, r2
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	791a      	ldrb	r2, [r3, #4]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	795a      	ldrb	r2, [r3, #5]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	799a      	ldrb	r2, [r3, #6]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	79da      	ldrb	r2, [r3, #7]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	79db      	ldrb	r3, [r3, #7]
 800776e:	2b20      	cmp	r3, #32
 8007770:	dc0f      	bgt.n	8007792 <USBH_ParseDevDesc+0x82>
 8007772:	2b08      	cmp	r3, #8
 8007774:	db14      	blt.n	80077a0 <USBH_ParseDevDesc+0x90>
 8007776:	3b08      	subs	r3, #8
 8007778:	4a2d      	ldr	r2, [pc, #180]	; (8007830 <USBH_ParseDevDesc+0x120>)
 800777a:	fa22 f303 	lsr.w	r3, r2, r3
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	bf14      	ite	ne
 8007786:	2301      	movne	r3, #1
 8007788:	2300      	moveq	r3, #0
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d102      	bne.n	8007796 <USBH_ParseDevDesc+0x86>
 8007790:	e006      	b.n	80077a0 <USBH_ParseDevDesc+0x90>
 8007792:	2b40      	cmp	r3, #64	; 0x40
 8007794:	d104      	bne.n	80077a0 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	79da      	ldrb	r2, [r3, #7]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	71da      	strb	r2, [r3, #7]
      break;
 800779e:	e003      	b.n	80077a8 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2240      	movs	r2, #64	; 0x40
 80077a4:	71da      	strb	r2, [r3, #7]
      break;
 80077a6:	bf00      	nop
  }

  if (length > 8U)
 80077a8:	88fb      	ldrh	r3, [r7, #6]
 80077aa:	2b08      	cmp	r3, #8
 80077ac:	d939      	bls.n	8007822 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	3308      	adds	r3, #8
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	3309      	adds	r3, #9
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	021b      	lsls	r3, r3, #8
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	4313      	orrs	r3, r2
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	330a      	adds	r3, #10
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	330b      	adds	r3, #11
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	021b      	lsls	r3, r3, #8
 80077dc:	b29b      	uxth	r3, r3
 80077de:	4313      	orrs	r3, r2
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	330c      	adds	r3, #12
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	330d      	adds	r3, #13
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	021b      	lsls	r3, r3, #8
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	4313      	orrs	r3, r2
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	7b9a      	ldrb	r2, [r3, #14]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	7bda      	ldrb	r2, [r3, #15]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	7c1a      	ldrb	r2, [r3, #16]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	7c5a      	ldrb	r2, [r3, #17]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	745a      	strb	r2, [r3, #17]
  }
}
 8007822:	bf00      	nop
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	01000101 	.word	0x01000101

08007834 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08c      	sub	sp, #48	; 0x30
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	4613      	mov	r3, r2
 8007840:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007848:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007854:	2300      	movs	r3, #0
 8007856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	781a      	ldrb	r2, [r3, #0]
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	785a      	ldrb	r2, [r3, #1]
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	3302      	adds	r3, #2
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	b29a      	uxth	r2, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	3303      	adds	r3, #3
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	021b      	lsls	r3, r3, #8
 8007886:	b29b      	uxth	r3, r3
 8007888:	4313      	orrs	r3, r2
 800788a:	b29b      	uxth	r3, r3
 800788c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007890:	bf28      	it	cs
 8007892:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007896:	b29a      	uxth	r2, r3
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	791a      	ldrb	r2, [r3, #4]
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	795a      	ldrb	r2, [r3, #5]
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	799a      	ldrb	r2, [r3, #6]
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	79da      	ldrb	r2, [r3, #7]
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	7a1a      	ldrb	r2, [r3, #8]
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2b09      	cmp	r3, #9
 80078ca:	d002      	beq.n	80078d2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	2209      	movs	r2, #9
 80078d0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80078d2:	88fb      	ldrh	r3, [r7, #6]
 80078d4:	2b09      	cmp	r3, #9
 80078d6:	f240 809d 	bls.w	8007a14 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80078da:	2309      	movs	r3, #9
 80078dc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80078de:	2300      	movs	r3, #0
 80078e0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078e2:	e081      	b.n	80079e8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078e4:	f107 0316 	add.w	r3, r7, #22
 80078e8:	4619      	mov	r1, r3
 80078ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ec:	f000 f99f 	bl	8007c2e <USBH_GetNextDesc>
 80078f0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	785b      	ldrb	r3, [r3, #1]
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d176      	bne.n	80079e8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80078fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2b09      	cmp	r3, #9
 8007900:	d002      	beq.n	8007908 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	2209      	movs	r2, #9
 8007906:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800790c:	221a      	movs	r2, #26
 800790e:	fb02 f303 	mul.w	r3, r2, r3
 8007912:	3308      	adds	r3, #8
 8007914:	6a3a      	ldr	r2, [r7, #32]
 8007916:	4413      	add	r3, r2
 8007918:	3302      	adds	r3, #2
 800791a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800791c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800791e:	69f8      	ldr	r0, [r7, #28]
 8007920:	f000 f87e 	bl	8007a20 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007924:	2300      	movs	r3, #0
 8007926:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800792a:	2300      	movs	r3, #0
 800792c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800792e:	e043      	b.n	80079b8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007930:	f107 0316 	add.w	r3, r7, #22
 8007934:	4619      	mov	r1, r3
 8007936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007938:	f000 f979 	bl	8007c2e <USBH_GetNextDesc>
 800793c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	785b      	ldrb	r3, [r3, #1]
 8007942:	2b05      	cmp	r3, #5
 8007944:	d138      	bne.n	80079b8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	795b      	ldrb	r3, [r3, #5]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d10f      	bne.n	800796e <USBH_ParseCfgDesc+0x13a>
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	799b      	ldrb	r3, [r3, #6]
 8007952:	2b02      	cmp	r3, #2
 8007954:	d10b      	bne.n	800796e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	79db      	ldrb	r3, [r3, #7]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10f      	bne.n	800797e <USBH_ParseCfgDesc+0x14a>
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b09      	cmp	r3, #9
 8007964:	d00b      	beq.n	800797e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	2209      	movs	r2, #9
 800796a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800796c:	e007      	b.n	800797e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b07      	cmp	r3, #7
 8007974:	d004      	beq.n	8007980 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007978:	2207      	movs	r2, #7
 800797a:	701a      	strb	r2, [r3, #0]
 800797c:	e000      	b.n	8007980 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800797e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007984:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007988:	3201      	adds	r2, #1
 800798a:	00d2      	lsls	r2, r2, #3
 800798c:	211a      	movs	r1, #26
 800798e:	fb01 f303 	mul.w	r3, r1, r3
 8007992:	4413      	add	r3, r2
 8007994:	3308      	adds	r3, #8
 8007996:	6a3a      	ldr	r2, [r7, #32]
 8007998:	4413      	add	r3, r2
 800799a:	3304      	adds	r3, #4
 800799c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800799e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a0:	69b9      	ldr	r1, [r7, #24]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 f86b 	bl	8007a7e <USBH_ParseEPDesc>
 80079a8:	4603      	mov	r3, r0
 80079aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80079ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079b2:	3301      	adds	r3, #1
 80079b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	791b      	ldrb	r3, [r3, #4]
 80079bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d204      	bcs.n	80079ce <USBH_ParseCfgDesc+0x19a>
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	885a      	ldrh	r2, [r3, #2]
 80079c8:	8afb      	ldrh	r3, [r7, #22]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d8b0      	bhi.n	8007930 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	791b      	ldrb	r3, [r3, #4]
 80079d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d201      	bcs.n	80079de <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80079da:	2303      	movs	r3, #3
 80079dc:	e01c      	b.n	8007a18 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80079de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079e2:	3301      	adds	r3, #1
 80079e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d805      	bhi.n	80079fc <USBH_ParseCfgDesc+0x1c8>
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	885a      	ldrh	r2, [r3, #2]
 80079f4:	8afb      	ldrh	r3, [r7, #22]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	f63f af74 	bhi.w	80078e4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	791b      	ldrb	r3, [r3, #4]
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	bf28      	it	cs
 8007a04:	2302      	movcs	r3, #2
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d201      	bcs.n	8007a14 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e001      	b.n	8007a18 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007a14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3730      	adds	r7, #48	; 0x30
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781a      	ldrb	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	785a      	ldrb	r2, [r3, #1]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	789a      	ldrb	r2, [r3, #2]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	78da      	ldrb	r2, [r3, #3]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	791a      	ldrb	r2, [r3, #4]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	795a      	ldrb	r2, [r3, #5]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	799a      	ldrb	r2, [r3, #6]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	79da      	ldrb	r2, [r3, #7]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	7a1a      	ldrb	r2, [r3, #8]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	721a      	strb	r2, [r3, #8]
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b087      	sub	sp, #28
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	60b9      	str	r1, [r7, #8]
 8007a88:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	781a      	ldrb	r2, [r3, #0]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	785a      	ldrb	r2, [r3, #1]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	789a      	ldrb	r2, [r3, #2]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	78da      	ldrb	r2, [r3, #3]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3305      	adds	r3, #5
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	021b      	lsls	r3, r3, #8
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	799a      	ldrb	r2, [r3, #6]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	889b      	ldrh	r3, [r3, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d102      	bne.n	8007ae0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007ada:	2303      	movs	r3, #3
 8007adc:	75fb      	strb	r3, [r7, #23]
 8007ade:	e033      	b.n	8007b48 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	889b      	ldrh	r3, [r3, #4]
 8007ae4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ae8:	f023 0307 	bic.w	r3, r3, #7
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	889b      	ldrh	r3, [r3, #4]
 8007af6:	b21a      	sxth	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3304      	adds	r3, #4
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b299      	uxth	r1, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3305      	adds	r3, #5
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	021b      	lsls	r3, r3, #8
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d110      	bne.n	8007b3a <USBH_ParseEPDesc+0xbc>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	b299      	uxth	r1, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3305      	adds	r3, #5
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	430b      	orrs	r3, r1
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	b21b      	sxth	r3, r3
 8007b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b36:	b21b      	sxth	r3, r3
 8007b38:	e001      	b.n	8007b3e <USBH_ParseEPDesc+0xc0>
 8007b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	b21b      	sxth	r3, r3
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d116      	bne.n	8007b80 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	78db      	ldrb	r3, [r3, #3]
 8007b56:	f003 0303 	and.w	r3, r3, #3
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d005      	beq.n	8007b6a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	78db      	ldrb	r3, [r3, #3]
 8007b62:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d127      	bne.n	8007bba <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	799b      	ldrb	r3, [r3, #6]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <USBH_ParseEPDesc+0xfc>
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	799b      	ldrb	r3, [r3, #6]
 8007b76:	2b10      	cmp	r3, #16
 8007b78:	d91f      	bls.n	8007bba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	75fb      	strb	r3, [r7, #23]
 8007b7e:	e01c      	b.n	8007bba <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	78db      	ldrb	r3, [r3, #3]
 8007b84:	f003 0303 	and.w	r3, r3, #3
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d10a      	bne.n	8007ba2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	799b      	ldrb	r3, [r3, #6]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <USBH_ParseEPDesc+0x11e>
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	799b      	ldrb	r3, [r3, #6]
 8007b98:	2b10      	cmp	r3, #16
 8007b9a:	d90e      	bls.n	8007bba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	75fb      	strb	r3, [r7, #23]
 8007ba0:	e00b      	b.n	8007bba <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	78db      	ldrb	r3, [r3, #3]
 8007ba6:	f003 0303 	and.w	r3, r3, #3
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d105      	bne.n	8007bba <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	799b      	ldrb	r3, [r3, #6]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	371c      	adds	r7, #28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d120      	bne.n	8007c22 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	1e9a      	subs	r2, r3, #2
 8007be6:	88fb      	ldrh	r3, [r7, #6]
 8007be8:	4293      	cmp	r3, r2
 8007bea:	bf28      	it	cs
 8007bec:	4613      	movcs	r3, r2
 8007bee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3302      	adds	r3, #2
 8007bf4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	82fb      	strh	r3, [r7, #22]
 8007bfa:	e00b      	b.n	8007c14 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007bfc:	8afb      	ldrh	r3, [r7, #22]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	4413      	add	r3, r2
 8007c02:	781a      	ldrb	r2, [r3, #0]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c0e:	8afb      	ldrh	r3, [r7, #22]
 8007c10:	3302      	adds	r3, #2
 8007c12:	82fb      	strh	r3, [r7, #22]
 8007c14:	8afa      	ldrh	r2, [r7, #22]
 8007c16:	8abb      	ldrh	r3, [r7, #20]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d3ef      	bcc.n	8007bfc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	701a      	strb	r2, [r3, #0]
  }
}
 8007c22:	bf00      	nop
 8007c24:	371c      	adds	r7, #28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	881a      	ldrh	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	4413      	add	r3, r2
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4413      	add	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c56:	68fb      	ldr	r3, [r7, #12]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c72:	2301      	movs	r3, #1
 8007c74:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	789b      	ldrb	r3, [r3, #2]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d002      	beq.n	8007c84 <USBH_CtlReq+0x20>
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d00f      	beq.n	8007ca2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007c82:	e027      	b.n	8007cd4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	88fa      	ldrh	r2, [r7, #6]
 8007c8e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2201      	movs	r2, #1
 8007c94:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2202      	movs	r2, #2
 8007c9a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007ca0:	e018      	b.n	8007cd4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f81c 	bl	8007ce0 <USBH_HandleControl>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <USBH_CtlReq+0x54>
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d106      	bne.n	8007cc6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	761a      	strb	r2, [r3, #24]
      break;
 8007cc4:	e005      	b.n	8007cd2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d102      	bne.n	8007cd2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	709a      	strb	r2, [r3, #2]
      break;
 8007cd2:	bf00      	nop
  }
  return status;
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	7e1b      	ldrb	r3, [r3, #24]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	2b0a      	cmp	r3, #10
 8007cf8:	f200 8156 	bhi.w	8007fa8 <USBH_HandleControl+0x2c8>
 8007cfc:	a201      	add	r2, pc, #4	; (adr r2, 8007d04 <USBH_HandleControl+0x24>)
 8007cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d02:	bf00      	nop
 8007d04:	08007d31 	.word	0x08007d31
 8007d08:	08007d4b 	.word	0x08007d4b
 8007d0c:	08007db5 	.word	0x08007db5
 8007d10:	08007ddb 	.word	0x08007ddb
 8007d14:	08007e13 	.word	0x08007e13
 8007d18:	08007e3d 	.word	0x08007e3d
 8007d1c:	08007e8f 	.word	0x08007e8f
 8007d20:	08007eb1 	.word	0x08007eb1
 8007d24:	08007eed 	.word	0x08007eed
 8007d28:	08007f13 	.word	0x08007f13
 8007d2c:	08007f51 	.word	0x08007f51
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f103 0110 	add.w	r1, r3, #16
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	795b      	ldrb	r3, [r3, #5]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f943 	bl	8007fc8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	761a      	strb	r2, [r3, #24]
      break;
 8007d48:	e139      	b.n	8007fbe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	795b      	ldrb	r3, [r3, #5]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fcc5 	bl	80086e0 <USBH_LL_GetURBState>
 8007d56:	4603      	mov	r3, r0
 8007d58:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d11e      	bne.n	8007d9e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	7c1b      	ldrb	r3, [r3, #16]
 8007d64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d68:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	8adb      	ldrh	r3, [r3, #22]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d72:	7b7b      	ldrb	r3, [r7, #13]
 8007d74:	2b80      	cmp	r3, #128	; 0x80
 8007d76:	d103      	bne.n	8007d80 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2203      	movs	r2, #3
 8007d7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d7e:	e115      	b.n	8007fac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2205      	movs	r2, #5
 8007d84:	761a      	strb	r2, [r3, #24]
      break;
 8007d86:	e111      	b.n	8007fac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007d88:	7b7b      	ldrb	r3, [r7, #13]
 8007d8a:	2b80      	cmp	r3, #128	; 0x80
 8007d8c:	d103      	bne.n	8007d96 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2209      	movs	r2, #9
 8007d92:	761a      	strb	r2, [r3, #24]
      break;
 8007d94:	e10a      	b.n	8007fac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2207      	movs	r2, #7
 8007d9a:	761a      	strb	r2, [r3, #24]
      break;
 8007d9c:	e106      	b.n	8007fac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007d9e:	7bbb      	ldrb	r3, [r7, #14]
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d003      	beq.n	8007dac <USBH_HandleControl+0xcc>
 8007da4:	7bbb      	ldrb	r3, [r7, #14]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	f040 8100 	bne.w	8007fac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	220b      	movs	r2, #11
 8007db0:	761a      	strb	r2, [r3, #24]
      break;
 8007db2:	e0fb      	b.n	8007fac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6899      	ldr	r1, [r3, #8]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	899a      	ldrh	r2, [r3, #12]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	791b      	ldrb	r3, [r3, #4]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f93a 	bl	8008046 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	761a      	strb	r2, [r3, #24]
      break;
 8007dd8:	e0f1      	b.n	8007fbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	791b      	ldrb	r3, [r3, #4]
 8007dde:	4619      	mov	r1, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fc7d 	bl	80086e0 <USBH_LL_GetURBState>
 8007de6:	4603      	mov	r3, r0
 8007de8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d102      	bne.n	8007df6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2209      	movs	r2, #9
 8007df4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	2b05      	cmp	r3, #5
 8007dfa:	d102      	bne.n	8007e02 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e00:	e0d6      	b.n	8007fb0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
 8007e04:	2b04      	cmp	r3, #4
 8007e06:	f040 80d3 	bne.w	8007fb0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	220b      	movs	r2, #11
 8007e0e:	761a      	strb	r2, [r3, #24]
      break;
 8007e10:	e0ce      	b.n	8007fb0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6899      	ldr	r1, [r3, #8]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	899a      	ldrh	r2, [r3, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	795b      	ldrb	r3, [r3, #5]
 8007e1e:	2001      	movs	r0, #1
 8007e20:	9000      	str	r0, [sp, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f8ea 	bl	8007ffc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2206      	movs	r2, #6
 8007e38:	761a      	strb	r2, [r3, #24]
      break;
 8007e3a:	e0c0      	b.n	8007fbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	795b      	ldrb	r3, [r3, #5]
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fc4c 	bl	80086e0 <USBH_LL_GetURBState>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d103      	bne.n	8007e5a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2207      	movs	r2, #7
 8007e56:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e58:	e0ac      	b.n	8007fb4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	2b05      	cmp	r3, #5
 8007e5e:	d105      	bne.n	8007e6c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	220c      	movs	r2, #12
 8007e64:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e66:	2303      	movs	r3, #3
 8007e68:	73fb      	strb	r3, [r7, #15]
      break;
 8007e6a:	e0a3      	b.n	8007fb4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d103      	bne.n	8007e7a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2205      	movs	r2, #5
 8007e76:	761a      	strb	r2, [r3, #24]
      break;
 8007e78:	e09c      	b.n	8007fb4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	2b04      	cmp	r3, #4
 8007e7e:	f040 8099 	bne.w	8007fb4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	220b      	movs	r2, #11
 8007e86:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007e88:	2302      	movs	r3, #2
 8007e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e8c:	e092      	b.n	8007fb4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	791b      	ldrb	r3, [r3, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	2100      	movs	r1, #0
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f8d5 	bl	8008046 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2208      	movs	r2, #8
 8007eac:	761a      	strb	r2, [r3, #24]

      break;
 8007eae:	e086      	b.n	8007fbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	791b      	ldrb	r3, [r3, #4]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fc12 	bl	80086e0 <USBH_LL_GetURBState>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d105      	bne.n	8007ed2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	220d      	movs	r2, #13
 8007eca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ed0:	e072      	b.n	8007fb8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007ed2:	7bbb      	ldrb	r3, [r7, #14]
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	d103      	bne.n	8007ee0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	220b      	movs	r2, #11
 8007edc:	761a      	strb	r2, [r3, #24]
      break;
 8007ede:	e06b      	b.n	8007fb8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	2b05      	cmp	r3, #5
 8007ee4:	d168      	bne.n	8007fb8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8007eea:	e065      	b.n	8007fb8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	795b      	ldrb	r3, [r3, #5]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	9200      	str	r2, [sp, #0]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f87f 	bl	8007ffc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	220a      	movs	r2, #10
 8007f0e:	761a      	strb	r2, [r3, #24]
      break;
 8007f10:	e055      	b.n	8007fbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	795b      	ldrb	r3, [r3, #5]
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fbe1 	bl	80086e0 <USBH_LL_GetURBState>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d105      	bne.n	8007f34 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	220d      	movs	r2, #13
 8007f30:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f32:	e043      	b.n	8007fbc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d103      	bne.n	8007f42 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2209      	movs	r2, #9
 8007f3e:	761a      	strb	r2, [r3, #24]
      break;
 8007f40:	e03c      	b.n	8007fbc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	d139      	bne.n	8007fbc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	220b      	movs	r2, #11
 8007f4c:	761a      	strb	r2, [r3, #24]
      break;
 8007f4e:	e035      	b.n	8007fbc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	7e5b      	ldrb	r3, [r3, #25]
 8007f54:	3301      	adds	r3, #1
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	765a      	strb	r2, [r3, #25]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	7e5b      	ldrb	r3, [r3, #25]
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d806      	bhi.n	8007f72 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f70:	e025      	b.n	8007fbe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f78:	2106      	movs	r1, #6
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	795b      	ldrb	r3, [r3, #5]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f90c 	bl	80081a8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	791b      	ldrb	r3, [r3, #4]
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f906 	bl	80081a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8007fa6:	e00a      	b.n	8007fbe <USBH_HandleControl+0x2de>

    default:
      break;
 8007fa8:	bf00      	nop
 8007faa:	e008      	b.n	8007fbe <USBH_HandleControl+0x2de>
      break;
 8007fac:	bf00      	nop
 8007fae:	e006      	b.n	8007fbe <USBH_HandleControl+0x2de>
      break;
 8007fb0:	bf00      	nop
 8007fb2:	e004      	b.n	8007fbe <USBH_HandleControl+0x2de>
      break;
 8007fb4:	bf00      	nop
 8007fb6:	e002      	b.n	8007fbe <USBH_HandleControl+0x2de>
      break;
 8007fb8:	bf00      	nop
 8007fba:	e000      	b.n	8007fbe <USBH_HandleControl+0x2de>
      break;
 8007fbc:	bf00      	nop
  }

  return status;
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b088      	sub	sp, #32
 8007fcc:	af04      	add	r7, sp, #16
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007fd6:	79f9      	ldrb	r1, [r7, #7]
 8007fd8:	2300      	movs	r3, #0
 8007fda:	9303      	str	r3, [sp, #12]
 8007fdc:	2308      	movs	r3, #8
 8007fde:	9302      	str	r3, [sp, #8]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	2200      	movs	r2, #0
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 fb46 	bl	800867e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af04      	add	r7, sp, #16
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	4611      	mov	r1, r2
 8008008:	461a      	mov	r2, r3
 800800a:	460b      	mov	r3, r1
 800800c:	80fb      	strh	r3, [r7, #6]
 800800e:	4613      	mov	r3, r2
 8008010:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008020:	7979      	ldrb	r1, [r7, #5]
 8008022:	7e3b      	ldrb	r3, [r7, #24]
 8008024:	9303      	str	r3, [sp, #12]
 8008026:	88fb      	ldrh	r3, [r7, #6]
 8008028:	9302      	str	r3, [sp, #8]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	9301      	str	r3, [sp, #4]
 800802e:	2301      	movs	r3, #1
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	2300      	movs	r3, #0
 8008034:	2200      	movs	r2, #0
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 fb21 	bl	800867e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b088      	sub	sp, #32
 800804a:	af04      	add	r7, sp, #16
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	4611      	mov	r1, r2
 8008052:	461a      	mov	r2, r3
 8008054:	460b      	mov	r3, r1
 8008056:	80fb      	strh	r3, [r7, #6]
 8008058:	4613      	mov	r3, r2
 800805a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800805c:	7979      	ldrb	r1, [r7, #5]
 800805e:	2300      	movs	r3, #0
 8008060:	9303      	str	r3, [sp, #12]
 8008062:	88fb      	ldrh	r3, [r7, #6]
 8008064:	9302      	str	r3, [sp, #8]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	2301      	movs	r3, #1
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	2300      	movs	r3, #0
 8008070:	2201      	movs	r2, #1
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 fb03 	bl	800867e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008078:	2300      	movs	r3, #0

}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b088      	sub	sp, #32
 8008086:	af04      	add	r7, sp, #16
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	4611      	mov	r1, r2
 800808e:	461a      	mov	r2, r3
 8008090:	460b      	mov	r3, r1
 8008092:	80fb      	strh	r3, [r7, #6]
 8008094:	4613      	mov	r3, r2
 8008096:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080a6:	7979      	ldrb	r1, [r7, #5]
 80080a8:	7e3b      	ldrb	r3, [r7, #24]
 80080aa:	9303      	str	r3, [sp, #12]
 80080ac:	88fb      	ldrh	r3, [r7, #6]
 80080ae:	9302      	str	r3, [sp, #8]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	9301      	str	r3, [sp, #4]
 80080b4:	2301      	movs	r3, #1
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	2302      	movs	r3, #2
 80080ba:	2200      	movs	r2, #0
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fade 	bl	800867e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b088      	sub	sp, #32
 80080d0:	af04      	add	r7, sp, #16
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	4611      	mov	r1, r2
 80080d8:	461a      	mov	r2, r3
 80080da:	460b      	mov	r3, r1
 80080dc:	80fb      	strh	r3, [r7, #6]
 80080de:	4613      	mov	r3, r2
 80080e0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080e2:	7979      	ldrb	r1, [r7, #5]
 80080e4:	2300      	movs	r3, #0
 80080e6:	9303      	str	r3, [sp, #12]
 80080e8:	88fb      	ldrh	r3, [r7, #6]
 80080ea:	9302      	str	r3, [sp, #8]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	2301      	movs	r3, #1
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	2302      	movs	r3, #2
 80080f6:	2201      	movs	r2, #1
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fac0 	bl	800867e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af04      	add	r7, sp, #16
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	4608      	mov	r0, r1
 8008112:	4611      	mov	r1, r2
 8008114:	461a      	mov	r2, r3
 8008116:	4603      	mov	r3, r0
 8008118:	70fb      	strb	r3, [r7, #3]
 800811a:	460b      	mov	r3, r1
 800811c:	70bb      	strb	r3, [r7, #2]
 800811e:	4613      	mov	r3, r2
 8008120:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008122:	7878      	ldrb	r0, [r7, #1]
 8008124:	78ba      	ldrb	r2, [r7, #2]
 8008126:	78f9      	ldrb	r1, [r7, #3]
 8008128:	8b3b      	ldrh	r3, [r7, #24]
 800812a:	9302      	str	r3, [sp, #8]
 800812c:	7d3b      	ldrb	r3, [r7, #20]
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	7c3b      	ldrb	r3, [r7, #16]
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	4603      	mov	r3, r0
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fa53 	bl	80085e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b082      	sub	sp, #8
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	460b      	mov	r3, r1
 8008150:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008152:	78fb      	ldrb	r3, [r7, #3]
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fa72 	bl	8008640 <USBH_LL_ClosePipe>

  return USBH_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f836 	bl	80081e4 <USBH_GetFreePipe>
 8008178:	4603      	mov	r3, r0
 800817a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800817c:	89fb      	ldrh	r3, [r7, #14]
 800817e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008182:	4293      	cmp	r3, r2
 8008184:	d00a      	beq.n	800819c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008186:	78fa      	ldrb	r2, [r7, #3]
 8008188:	89fb      	ldrh	r3, [r7, #14]
 800818a:	f003 030f 	and.w	r3, r3, #15
 800818e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	33e0      	adds	r3, #224	; 0xe0
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	440b      	add	r3, r1
 800819a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800819c:	89fb      	ldrh	r3, [r7, #14]
 800819e:	b2db      	uxtb	r3, r3
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	2b0f      	cmp	r3, #15
 80081b8:	d80d      	bhi.n	80081d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	33e0      	adds	r3, #224	; 0xe0
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	78fb      	ldrb	r3, [r7, #3]
 80081c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80081cc:	6879      	ldr	r1, [r7, #4]
 80081ce:	33e0      	adds	r3, #224	; 0xe0
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	440b      	add	r3, r1
 80081d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80081f0:	2300      	movs	r3, #0
 80081f2:	73fb      	strb	r3, [r7, #15]
 80081f4:	e00f      	b.n	8008216 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	33e0      	adds	r3, #224	; 0xe0
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d102      	bne.n	8008210 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	b29b      	uxth	r3, r3
 800820e:	e007      	b.n	8008220 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	3301      	adds	r3, #1
 8008214:	73fb      	strb	r3, [r7, #15]
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	2b0f      	cmp	r3, #15
 800821a:	d9ec      	bls.n	80081f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800821c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008230:	2201      	movs	r2, #1
 8008232:	490e      	ldr	r1, [pc, #56]	; (800826c <MX_USB_HOST_Init+0x40>)
 8008234:	480e      	ldr	r0, [pc, #56]	; (8008270 <MX_USB_HOST_Init+0x44>)
 8008236:	f7fe fba5 	bl	8006984 <USBH_Init>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008240:	f7f8 fd1e 	bl	8000c80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008244:	490b      	ldr	r1, [pc, #44]	; (8008274 <MX_USB_HOST_Init+0x48>)
 8008246:	480a      	ldr	r0, [pc, #40]	; (8008270 <MX_USB_HOST_Init+0x44>)
 8008248:	f7fe fc2a 	bl	8006aa0 <USBH_RegisterClass>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008252:	f7f8 fd15 	bl	8000c80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008256:	4806      	ldr	r0, [pc, #24]	; (8008270 <MX_USB_HOST_Init+0x44>)
 8008258:	f7fe fcae 	bl	8006bb8 <USBH_Start>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008262:	f7f8 fd0d 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008266:	bf00      	nop
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	0800828d 	.word	0x0800828d
 8008270:	20000278 	.word	0x20000278
 8008274:	2000000c 	.word	0x2000000c

08008278 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800827c:	4802      	ldr	r0, [pc, #8]	; (8008288 <MX_USB_HOST_Process+0x10>)
 800827e:	f7fe fcab 	bl	8006bd8 <USBH_Process>
}
 8008282:	bf00      	nop
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000278 	.word	0x20000278

0800828c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	3b01      	subs	r3, #1
 800829c:	2b04      	cmp	r3, #4
 800829e:	d819      	bhi.n	80082d4 <USBH_UserProcess+0x48>
 80082a0:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <USBH_UserProcess+0x1c>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082d5 	.word	0x080082d5
 80082ac:	080082c5 	.word	0x080082c5
 80082b0:	080082d5 	.word	0x080082d5
 80082b4:	080082cd 	.word	0x080082cd
 80082b8:	080082bd 	.word	0x080082bd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80082bc:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <USBH_UserProcess+0x58>)
 80082be:	2203      	movs	r2, #3
 80082c0:	701a      	strb	r2, [r3, #0]
  break;
 80082c2:	e008      	b.n	80082d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80082c4:	4b07      	ldr	r3, [pc, #28]	; (80082e4 <USBH_UserProcess+0x58>)
 80082c6:	2202      	movs	r2, #2
 80082c8:	701a      	strb	r2, [r3, #0]
  break;
 80082ca:	e004      	b.n	80082d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80082cc:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <USBH_UserProcess+0x58>)
 80082ce:	2201      	movs	r2, #1
 80082d0:	701a      	strb	r2, [r3, #0]
  break;
 80082d2:	e000      	b.n	80082d6 <USBH_UserProcess+0x4a>

  default:
  break;
 80082d4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80082d6:	bf00      	nop
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	20000650 	.word	0x20000650

080082e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08a      	sub	sp, #40	; 0x28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082f0:	f107 0314 	add.w	r3, r7, #20
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	605a      	str	r2, [r3, #4]
 80082fa:	609a      	str	r2, [r3, #8]
 80082fc:	60da      	str	r2, [r3, #12]
 80082fe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008308:	d147      	bne.n	800839a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800830a:	2300      	movs	r3, #0
 800830c:	613b      	str	r3, [r7, #16]
 800830e:	4b25      	ldr	r3, [pc, #148]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 8008310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008312:	4a24      	ldr	r2, [pc, #144]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 8008314:	f043 0301 	orr.w	r3, r3, #1
 8008318:	6313      	str	r3, [r2, #48]	; 0x30
 800831a:	4b22      	ldr	r3, [pc, #136]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 800831c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	613b      	str	r3, [r7, #16]
 8008324:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800832a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800832c:	2300      	movs	r3, #0
 800832e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008330:	2300      	movs	r3, #0
 8008332:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008334:	f107 0314 	add.w	r3, r7, #20
 8008338:	4619      	mov	r1, r3
 800833a:	481b      	ldr	r0, [pc, #108]	; (80083a8 <HAL_HCD_MspInit+0xc0>)
 800833c:	f7f9 f8b6 	bl	80014ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008340:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008346:	2302      	movs	r3, #2
 8008348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800834a:	2300      	movs	r3, #0
 800834c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800834e:	2300      	movs	r3, #0
 8008350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008352:	230a      	movs	r3, #10
 8008354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008356:	f107 0314 	add.w	r3, r7, #20
 800835a:	4619      	mov	r1, r3
 800835c:	4812      	ldr	r0, [pc, #72]	; (80083a8 <HAL_HCD_MspInit+0xc0>)
 800835e:	f7f9 f8a5 	bl	80014ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008362:	4b10      	ldr	r3, [pc, #64]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 8008364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008366:	4a0f      	ldr	r2, [pc, #60]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 8008368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836c:	6353      	str	r3, [r2, #52]	; 0x34
 800836e:	2300      	movs	r3, #0
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	4b0c      	ldr	r3, [pc, #48]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 8008374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008376:	4a0b      	ldr	r2, [pc, #44]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 8008378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800837c:	6453      	str	r3, [r2, #68]	; 0x44
 800837e:	4b09      	ldr	r3, [pc, #36]	; (80083a4 <HAL_HCD_MspInit+0xbc>)
 8008380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800838a:	2200      	movs	r2, #0
 800838c:	2100      	movs	r1, #0
 800838e:	2043      	movs	r0, #67	; 0x43
 8008390:	f7f9 f855 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008394:	2043      	movs	r0, #67	; 0x43
 8008396:	f7f9 f86e 	bl	8001476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800839a:	bf00      	nop
 800839c:	3728      	adds	r7, #40	; 0x28
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	40023800 	.word	0x40023800
 80083a8:	40020000 	.word	0x40020000

080083ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe ffeb 	bl	8007396 <USBH_LL_IncTimer>
}
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7ff f823 	bl	8007422 <USBH_LL_Connect>
}
 80083dc:	bf00      	nop
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff f82c 	bl	8007450 <USBH_LL_Disconnect>
}
 80083f8:	bf00      	nop
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	70fb      	strb	r3, [r7, #3]
 800840c:	4613      	mov	r3, r2
 800840e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe ffdd 	bl	80073ea <USBH_LL_PortEnabled>
}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe ffdd 	bl	8007406 <USBH_LL_PortDisabled>
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008462:	2b01      	cmp	r3, #1
 8008464:	d12a      	bne.n	80084bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008466:	4a18      	ldr	r2, [pc, #96]	; (80084c8 <USBH_LL_Init+0x74>)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a15      	ldr	r2, [pc, #84]	; (80084c8 <USBH_LL_Init+0x74>)
 8008472:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008476:	4b14      	ldr	r3, [pc, #80]	; (80084c8 <USBH_LL_Init+0x74>)
 8008478:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800847c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800847e:	4b12      	ldr	r3, [pc, #72]	; (80084c8 <USBH_LL_Init+0x74>)
 8008480:	2208      	movs	r2, #8
 8008482:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008484:	4b10      	ldr	r3, [pc, #64]	; (80084c8 <USBH_LL_Init+0x74>)
 8008486:	2201      	movs	r2, #1
 8008488:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800848a:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <USBH_LL_Init+0x74>)
 800848c:	2200      	movs	r2, #0
 800848e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008490:	4b0d      	ldr	r3, [pc, #52]	; (80084c8 <USBH_LL_Init+0x74>)
 8008492:	2202      	movs	r2, #2
 8008494:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008496:	4b0c      	ldr	r3, [pc, #48]	; (80084c8 <USBH_LL_Init+0x74>)
 8008498:	2200      	movs	r2, #0
 800849a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800849c:	480a      	ldr	r0, [pc, #40]	; (80084c8 <USBH_LL_Init+0x74>)
 800849e:	f7f9 fa05 	bl	80018ac <HAL_HCD_Init>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80084a8:	f7f8 fbea 	bl	8000c80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80084ac:	4806      	ldr	r0, [pc, #24]	; (80084c8 <USBH_LL_Init+0x74>)
 80084ae:	f7f9 fde8 	bl	8002082 <HAL_HCD_GetCurrentFrame>
 80084b2:	4603      	mov	r3, r0
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7fe ff5e 	bl	8007378 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	20000654 	.word	0x20000654

080084cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7f9 fd57 	bl	8001f96 <HAL_HCD_Start>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 f95c 	bl	80087ac <USBH_Get_USB_Status>
 80084f4:	4603      	mov	r3, r0
 80084f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008518:	4618      	mov	r0, r3
 800851a:	f7f9 fd5f 	bl	8001fdc <HAL_HCD_Stop>
 800851e:	4603      	mov	r3, r0
 8008520:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	4618      	mov	r0, r3
 8008526:	f000 f941 	bl	80087ac <USBH_Get_USB_Status>
 800852a:	4603      	mov	r3, r0
 800852c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800852e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008540:	2301      	movs	r3, #1
 8008542:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800854a:	4618      	mov	r0, r3
 800854c:	f7f9 fda7 	bl	800209e <HAL_HCD_GetCurrentSpeed>
 8008550:	4603      	mov	r3, r0
 8008552:	2b02      	cmp	r3, #2
 8008554:	d00c      	beq.n	8008570 <USBH_LL_GetSpeed+0x38>
 8008556:	2b02      	cmp	r3, #2
 8008558:	d80d      	bhi.n	8008576 <USBH_LL_GetSpeed+0x3e>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d002      	beq.n	8008564 <USBH_LL_GetSpeed+0x2c>
 800855e:	2b01      	cmp	r3, #1
 8008560:	d003      	beq.n	800856a <USBH_LL_GetSpeed+0x32>
 8008562:	e008      	b.n	8008576 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]
    break;
 8008568:	e008      	b.n	800857c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800856a:	2301      	movs	r3, #1
 800856c:	73fb      	strb	r3, [r7, #15]
    break;
 800856e:	e005      	b.n	800857c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008570:	2302      	movs	r3, #2
 8008572:	73fb      	strb	r3, [r7, #15]
    break;
 8008574:	e002      	b.n	800857c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008576:	2301      	movs	r3, #1
 8008578:	73fb      	strb	r3, [r7, #15]
    break;
 800857a:	bf00      	nop
  }
  return  speed;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800859c:	4618      	mov	r0, r3
 800859e:	f7f9 fd3a 	bl	8002016 <HAL_HCD_ResetPort>
 80085a2:	4603      	mov	r3, r0
 80085a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 f8ff 	bl	80087ac <USBH_Get_USB_Status>
 80085ae:	4603      	mov	r3, r0
 80085b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085ce:	78fa      	ldrb	r2, [r7, #3]
 80085d0:	4611      	mov	r1, r2
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7f9 fd41 	bl	800205a <HAL_HCD_HC_GetXferCount>
 80085d8:	4603      	mov	r3, r0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80085e2:	b590      	push	{r4, r7, lr}
 80085e4:	b089      	sub	sp, #36	; 0x24
 80085e6:	af04      	add	r7, sp, #16
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	4608      	mov	r0, r1
 80085ec:	4611      	mov	r1, r2
 80085ee:	461a      	mov	r2, r3
 80085f0:	4603      	mov	r3, r0
 80085f2:	70fb      	strb	r3, [r7, #3]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70bb      	strb	r3, [r7, #2]
 80085f8:	4613      	mov	r3, r2
 80085fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800860a:	787c      	ldrb	r4, [r7, #1]
 800860c:	78ba      	ldrb	r2, [r7, #2]
 800860e:	78f9      	ldrb	r1, [r7, #3]
 8008610:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008612:	9302      	str	r3, [sp, #8]
 8008614:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008618:	9301      	str	r3, [sp, #4]
 800861a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	4623      	mov	r3, r4
 8008622:	f7f9 f9a5 	bl	8001970 <HAL_HCD_HC_Init>
 8008626:	4603      	mov	r3, r0
 8008628:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	4618      	mov	r0, r3
 800862e:	f000 f8bd 	bl	80087ac <USBH_Get_USB_Status>
 8008632:	4603      	mov	r3, r0
 8008634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008636:	7bbb      	ldrb	r3, [r7, #14]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	bd90      	pop	{r4, r7, pc}

08008640 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	4611      	mov	r1, r2
 800865e:	4618      	mov	r0, r3
 8008660:	f7f9 fa15 	bl	8001a8e <HAL_HCD_HC_Halt>
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008668:	7bfb      	ldrb	r3, [r7, #15]
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f89e 	bl	80087ac <USBH_Get_USB_Status>
 8008670:	4603      	mov	r3, r0
 8008672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008674:	7bbb      	ldrb	r3, [r7, #14]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800867e:	b590      	push	{r4, r7, lr}
 8008680:	b089      	sub	sp, #36	; 0x24
 8008682:	af04      	add	r7, sp, #16
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	4608      	mov	r0, r1
 8008688:	4611      	mov	r1, r2
 800868a:	461a      	mov	r2, r3
 800868c:	4603      	mov	r3, r0
 800868e:	70fb      	strb	r3, [r7, #3]
 8008690:	460b      	mov	r3, r1
 8008692:	70bb      	strb	r3, [r7, #2]
 8008694:	4613      	mov	r3, r2
 8008696:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80086a6:	787c      	ldrb	r4, [r7, #1]
 80086a8:	78ba      	ldrb	r2, [r7, #2]
 80086aa:	78f9      	ldrb	r1, [r7, #3]
 80086ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086b0:	9303      	str	r3, [sp, #12]
 80086b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086b4:	9302      	str	r3, [sp, #8]
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	4623      	mov	r3, r4
 80086c2:	f7f9 fa07 	bl	8001ad4 <HAL_HCD_HC_SubmitRequest>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 f86d 	bl	80087ac <USBH_Get_USB_Status>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd90      	pop	{r4, r7, pc}

080086e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7f9 fc9b 	bl	8002032 <HAL_HCD_HC_GetURBState>
 80086fc:	4603      	mov	r3, r0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008718:	2b01      	cmp	r3, #1
 800871a:	d103      	bne.n	8008724 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	4618      	mov	r0, r3
 8008720:	f000 f870 	bl	8008804 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008724:	20c8      	movs	r0, #200	; 0xc8
 8008726:	f7f8 fd8b 	bl	8001240 <HAL_Delay>
  return USBH_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	460b      	mov	r3, r1
 800873e:	70fb      	strb	r3, [r7, #3]
 8008740:	4613      	mov	r3, r2
 8008742:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800874a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800874c:	78fb      	ldrb	r3, [r7, #3]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	212c      	movs	r1, #44	; 0x2c
 8008752:	fb01 f303 	mul.w	r3, r1, r3
 8008756:	4413      	add	r3, r2
 8008758:	333b      	adds	r3, #59	; 0x3b
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d009      	beq.n	8008774 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	212c      	movs	r1, #44	; 0x2c
 8008766:	fb01 f303 	mul.w	r3, r1, r3
 800876a:	4413      	add	r3, r2
 800876c:	3354      	adds	r3, #84	; 0x54
 800876e:	78ba      	ldrb	r2, [r7, #2]
 8008770:	701a      	strb	r2, [r3, #0]
 8008772:	e008      	b.n	8008786 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	212c      	movs	r1, #44	; 0x2c
 800877a:	fb01 f303 	mul.w	r3, r1, r3
 800877e:	4413      	add	r3, r2
 8008780:	3355      	adds	r3, #85	; 0x55
 8008782:	78ba      	ldrb	r2, [r7, #2]
 8008784:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7f8 fd4f 	bl	8001240 <HAL_Delay>
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
	...

080087ac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d817      	bhi.n	80087f0 <USBH_Get_USB_Status+0x44>
 80087c0:	a201      	add	r2, pc, #4	; (adr r2, 80087c8 <USBH_Get_USB_Status+0x1c>)
 80087c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c6:	bf00      	nop
 80087c8:	080087d9 	.word	0x080087d9
 80087cc:	080087df 	.word	0x080087df
 80087d0:	080087e5 	.word	0x080087e5
 80087d4:	080087eb 	.word	0x080087eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	73fb      	strb	r3, [r7, #15]
    break;
 80087dc:	e00b      	b.n	80087f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80087de:	2302      	movs	r3, #2
 80087e0:	73fb      	strb	r3, [r7, #15]
    break;
 80087e2:	e008      	b.n	80087f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80087e4:	2301      	movs	r3, #1
 80087e6:	73fb      	strb	r3, [r7, #15]
    break;
 80087e8:	e005      	b.n	80087f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80087ea:	2302      	movs	r3, #2
 80087ec:	73fb      	strb	r3, [r7, #15]
    break;
 80087ee:	e002      	b.n	80087f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80087f0:	2302      	movs	r3, #2
 80087f2:	73fb      	strb	r3, [r7, #15]
    break;
 80087f4:	bf00      	nop
  }
  return usb_status;
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800880e:	79fb      	ldrb	r3, [r7, #7]
 8008810:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d102      	bne.n	800881e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008818:	2300      	movs	r3, #0
 800881a:	73fb      	strb	r3, [r7, #15]
 800881c:	e001      	b.n	8008822 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800881e:	2301      	movs	r3, #1
 8008820:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008822:	7bfb      	ldrb	r3, [r7, #15]
 8008824:	461a      	mov	r2, r3
 8008826:	2101      	movs	r1, #1
 8008828:	4803      	ldr	r0, [pc, #12]	; (8008838 <MX_DriverVbusFS+0x34>)
 800882a:	f7f8 fff3 	bl	8001814 <HAL_GPIO_WritePin>
}
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	40020800 	.word	0x40020800

0800883c <malloc>:
 800883c:	4b02      	ldr	r3, [pc, #8]	; (8008848 <malloc+0xc>)
 800883e:	4601      	mov	r1, r0
 8008840:	6818      	ldr	r0, [r3, #0]
 8008842:	f000 b82b 	b.w	800889c <_malloc_r>
 8008846:	bf00      	nop
 8008848:	20000078 	.word	0x20000078

0800884c <free>:
 800884c:	4b02      	ldr	r3, [pc, #8]	; (8008858 <free+0xc>)
 800884e:	4601      	mov	r1, r0
 8008850:	6818      	ldr	r0, [r3, #0]
 8008852:	f000 b8f3 	b.w	8008a3c <_free_r>
 8008856:	bf00      	nop
 8008858:	20000078 	.word	0x20000078

0800885c <sbrk_aligned>:
 800885c:	b570      	push	{r4, r5, r6, lr}
 800885e:	4e0e      	ldr	r6, [pc, #56]	; (8008898 <sbrk_aligned+0x3c>)
 8008860:	460c      	mov	r4, r1
 8008862:	6831      	ldr	r1, [r6, #0]
 8008864:	4605      	mov	r5, r0
 8008866:	b911      	cbnz	r1, 800886e <sbrk_aligned+0x12>
 8008868:	f000 f8ac 	bl	80089c4 <_sbrk_r>
 800886c:	6030      	str	r0, [r6, #0]
 800886e:	4621      	mov	r1, r4
 8008870:	4628      	mov	r0, r5
 8008872:	f000 f8a7 	bl	80089c4 <_sbrk_r>
 8008876:	1c43      	adds	r3, r0, #1
 8008878:	d00a      	beq.n	8008890 <sbrk_aligned+0x34>
 800887a:	1cc4      	adds	r4, r0, #3
 800887c:	f024 0403 	bic.w	r4, r4, #3
 8008880:	42a0      	cmp	r0, r4
 8008882:	d007      	beq.n	8008894 <sbrk_aligned+0x38>
 8008884:	1a21      	subs	r1, r4, r0
 8008886:	4628      	mov	r0, r5
 8008888:	f000 f89c 	bl	80089c4 <_sbrk_r>
 800888c:	3001      	adds	r0, #1
 800888e:	d101      	bne.n	8008894 <sbrk_aligned+0x38>
 8008890:	f04f 34ff 	mov.w	r4, #4294967295
 8008894:	4620      	mov	r0, r4
 8008896:	bd70      	pop	{r4, r5, r6, pc}
 8008898:	2000095c 	.word	0x2000095c

0800889c <_malloc_r>:
 800889c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088a0:	1ccd      	adds	r5, r1, #3
 80088a2:	f025 0503 	bic.w	r5, r5, #3
 80088a6:	3508      	adds	r5, #8
 80088a8:	2d0c      	cmp	r5, #12
 80088aa:	bf38      	it	cc
 80088ac:	250c      	movcc	r5, #12
 80088ae:	2d00      	cmp	r5, #0
 80088b0:	4607      	mov	r7, r0
 80088b2:	db01      	blt.n	80088b8 <_malloc_r+0x1c>
 80088b4:	42a9      	cmp	r1, r5
 80088b6:	d905      	bls.n	80088c4 <_malloc_r+0x28>
 80088b8:	230c      	movs	r3, #12
 80088ba:	603b      	str	r3, [r7, #0]
 80088bc:	2600      	movs	r6, #0
 80088be:	4630      	mov	r0, r6
 80088c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008998 <_malloc_r+0xfc>
 80088c8:	f000 f868 	bl	800899c <__malloc_lock>
 80088cc:	f8d8 3000 	ldr.w	r3, [r8]
 80088d0:	461c      	mov	r4, r3
 80088d2:	bb5c      	cbnz	r4, 800892c <_malloc_r+0x90>
 80088d4:	4629      	mov	r1, r5
 80088d6:	4638      	mov	r0, r7
 80088d8:	f7ff ffc0 	bl	800885c <sbrk_aligned>
 80088dc:	1c43      	adds	r3, r0, #1
 80088de:	4604      	mov	r4, r0
 80088e0:	d155      	bne.n	800898e <_malloc_r+0xf2>
 80088e2:	f8d8 4000 	ldr.w	r4, [r8]
 80088e6:	4626      	mov	r6, r4
 80088e8:	2e00      	cmp	r6, #0
 80088ea:	d145      	bne.n	8008978 <_malloc_r+0xdc>
 80088ec:	2c00      	cmp	r4, #0
 80088ee:	d048      	beq.n	8008982 <_malloc_r+0xe6>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	4631      	mov	r1, r6
 80088f4:	4638      	mov	r0, r7
 80088f6:	eb04 0903 	add.w	r9, r4, r3
 80088fa:	f000 f863 	bl	80089c4 <_sbrk_r>
 80088fe:	4581      	cmp	r9, r0
 8008900:	d13f      	bne.n	8008982 <_malloc_r+0xe6>
 8008902:	6821      	ldr	r1, [r4, #0]
 8008904:	1a6d      	subs	r5, r5, r1
 8008906:	4629      	mov	r1, r5
 8008908:	4638      	mov	r0, r7
 800890a:	f7ff ffa7 	bl	800885c <sbrk_aligned>
 800890e:	3001      	adds	r0, #1
 8008910:	d037      	beq.n	8008982 <_malloc_r+0xe6>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	442b      	add	r3, r5
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	f8d8 3000 	ldr.w	r3, [r8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d038      	beq.n	8008992 <_malloc_r+0xf6>
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	42a2      	cmp	r2, r4
 8008924:	d12b      	bne.n	800897e <_malloc_r+0xe2>
 8008926:	2200      	movs	r2, #0
 8008928:	605a      	str	r2, [r3, #4]
 800892a:	e00f      	b.n	800894c <_malloc_r+0xb0>
 800892c:	6822      	ldr	r2, [r4, #0]
 800892e:	1b52      	subs	r2, r2, r5
 8008930:	d41f      	bmi.n	8008972 <_malloc_r+0xd6>
 8008932:	2a0b      	cmp	r2, #11
 8008934:	d917      	bls.n	8008966 <_malloc_r+0xca>
 8008936:	1961      	adds	r1, r4, r5
 8008938:	42a3      	cmp	r3, r4
 800893a:	6025      	str	r5, [r4, #0]
 800893c:	bf18      	it	ne
 800893e:	6059      	strne	r1, [r3, #4]
 8008940:	6863      	ldr	r3, [r4, #4]
 8008942:	bf08      	it	eq
 8008944:	f8c8 1000 	streq.w	r1, [r8]
 8008948:	5162      	str	r2, [r4, r5]
 800894a:	604b      	str	r3, [r1, #4]
 800894c:	4638      	mov	r0, r7
 800894e:	f104 060b 	add.w	r6, r4, #11
 8008952:	f000 f829 	bl	80089a8 <__malloc_unlock>
 8008956:	f026 0607 	bic.w	r6, r6, #7
 800895a:	1d23      	adds	r3, r4, #4
 800895c:	1af2      	subs	r2, r6, r3
 800895e:	d0ae      	beq.n	80088be <_malloc_r+0x22>
 8008960:	1b9b      	subs	r3, r3, r6
 8008962:	50a3      	str	r3, [r4, r2]
 8008964:	e7ab      	b.n	80088be <_malloc_r+0x22>
 8008966:	42a3      	cmp	r3, r4
 8008968:	6862      	ldr	r2, [r4, #4]
 800896a:	d1dd      	bne.n	8008928 <_malloc_r+0x8c>
 800896c:	f8c8 2000 	str.w	r2, [r8]
 8008970:	e7ec      	b.n	800894c <_malloc_r+0xb0>
 8008972:	4623      	mov	r3, r4
 8008974:	6864      	ldr	r4, [r4, #4]
 8008976:	e7ac      	b.n	80088d2 <_malloc_r+0x36>
 8008978:	4634      	mov	r4, r6
 800897a:	6876      	ldr	r6, [r6, #4]
 800897c:	e7b4      	b.n	80088e8 <_malloc_r+0x4c>
 800897e:	4613      	mov	r3, r2
 8008980:	e7cc      	b.n	800891c <_malloc_r+0x80>
 8008982:	230c      	movs	r3, #12
 8008984:	603b      	str	r3, [r7, #0]
 8008986:	4638      	mov	r0, r7
 8008988:	f000 f80e 	bl	80089a8 <__malloc_unlock>
 800898c:	e797      	b.n	80088be <_malloc_r+0x22>
 800898e:	6025      	str	r5, [r4, #0]
 8008990:	e7dc      	b.n	800894c <_malloc_r+0xb0>
 8008992:	605b      	str	r3, [r3, #4]
 8008994:	deff      	udf	#255	; 0xff
 8008996:	bf00      	nop
 8008998:	20000958 	.word	0x20000958

0800899c <__malloc_lock>:
 800899c:	4801      	ldr	r0, [pc, #4]	; (80089a4 <__malloc_lock+0x8>)
 800899e:	f000 b84b 	b.w	8008a38 <__retarget_lock_acquire_recursive>
 80089a2:	bf00      	nop
 80089a4:	20000a9c 	.word	0x20000a9c

080089a8 <__malloc_unlock>:
 80089a8:	4801      	ldr	r0, [pc, #4]	; (80089b0 <__malloc_unlock+0x8>)
 80089aa:	f000 b846 	b.w	8008a3a <__retarget_lock_release_recursive>
 80089ae:	bf00      	nop
 80089b0:	20000a9c 	.word	0x20000a9c

080089b4 <memset>:
 80089b4:	4402      	add	r2, r0
 80089b6:	4603      	mov	r3, r0
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d100      	bne.n	80089be <memset+0xa>
 80089bc:	4770      	bx	lr
 80089be:	f803 1b01 	strb.w	r1, [r3], #1
 80089c2:	e7f9      	b.n	80089b8 <memset+0x4>

080089c4 <_sbrk_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4d06      	ldr	r5, [pc, #24]	; (80089e0 <_sbrk_r+0x1c>)
 80089c8:	2300      	movs	r3, #0
 80089ca:	4604      	mov	r4, r0
 80089cc:	4608      	mov	r0, r1
 80089ce:	602b      	str	r3, [r5, #0]
 80089d0:	f7f8 fb52 	bl	8001078 <_sbrk>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d102      	bne.n	80089de <_sbrk_r+0x1a>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	b103      	cbz	r3, 80089de <_sbrk_r+0x1a>
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	20000a98 	.word	0x20000a98

080089e4 <__errno>:
 80089e4:	4b01      	ldr	r3, [pc, #4]	; (80089ec <__errno+0x8>)
 80089e6:	6818      	ldr	r0, [r3, #0]
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	20000078 	.word	0x20000078

080089f0 <__libc_init_array>:
 80089f0:	b570      	push	{r4, r5, r6, lr}
 80089f2:	4d0d      	ldr	r5, [pc, #52]	; (8008a28 <__libc_init_array+0x38>)
 80089f4:	4c0d      	ldr	r4, [pc, #52]	; (8008a2c <__libc_init_array+0x3c>)
 80089f6:	1b64      	subs	r4, r4, r5
 80089f8:	10a4      	asrs	r4, r4, #2
 80089fa:	2600      	movs	r6, #0
 80089fc:	42a6      	cmp	r6, r4
 80089fe:	d109      	bne.n	8008a14 <__libc_init_array+0x24>
 8008a00:	4d0b      	ldr	r5, [pc, #44]	; (8008a30 <__libc_init_array+0x40>)
 8008a02:	4c0c      	ldr	r4, [pc, #48]	; (8008a34 <__libc_init_array+0x44>)
 8008a04:	f000 f866 	bl	8008ad4 <_init>
 8008a08:	1b64      	subs	r4, r4, r5
 8008a0a:	10a4      	asrs	r4, r4, #2
 8008a0c:	2600      	movs	r6, #0
 8008a0e:	42a6      	cmp	r6, r4
 8008a10:	d105      	bne.n	8008a1e <__libc_init_array+0x2e>
 8008a12:	bd70      	pop	{r4, r5, r6, pc}
 8008a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a18:	4798      	blx	r3
 8008a1a:	3601      	adds	r6, #1
 8008a1c:	e7ee      	b.n	80089fc <__libc_init_array+0xc>
 8008a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a22:	4798      	blx	r3
 8008a24:	3601      	adds	r6, #1
 8008a26:	e7f2      	b.n	8008a0e <__libc_init_array+0x1e>
 8008a28:	08008b10 	.word	0x08008b10
 8008a2c:	08008b10 	.word	0x08008b10
 8008a30:	08008b10 	.word	0x08008b10
 8008a34:	08008b14 	.word	0x08008b14

08008a38 <__retarget_lock_acquire_recursive>:
 8008a38:	4770      	bx	lr

08008a3a <__retarget_lock_release_recursive>:
 8008a3a:	4770      	bx	lr

08008a3c <_free_r>:
 8008a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a3e:	2900      	cmp	r1, #0
 8008a40:	d044      	beq.n	8008acc <_free_r+0x90>
 8008a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a46:	9001      	str	r0, [sp, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a4e:	bfb8      	it	lt
 8008a50:	18e4      	addlt	r4, r4, r3
 8008a52:	f7ff ffa3 	bl	800899c <__malloc_lock>
 8008a56:	4a1e      	ldr	r2, [pc, #120]	; (8008ad0 <_free_r+0x94>)
 8008a58:	9801      	ldr	r0, [sp, #4]
 8008a5a:	6813      	ldr	r3, [r2, #0]
 8008a5c:	b933      	cbnz	r3, 8008a6c <_free_r+0x30>
 8008a5e:	6063      	str	r3, [r4, #4]
 8008a60:	6014      	str	r4, [r2, #0]
 8008a62:	b003      	add	sp, #12
 8008a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a68:	f7ff bf9e 	b.w	80089a8 <__malloc_unlock>
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	d908      	bls.n	8008a82 <_free_r+0x46>
 8008a70:	6825      	ldr	r5, [r4, #0]
 8008a72:	1961      	adds	r1, r4, r5
 8008a74:	428b      	cmp	r3, r1
 8008a76:	bf01      	itttt	eq
 8008a78:	6819      	ldreq	r1, [r3, #0]
 8008a7a:	685b      	ldreq	r3, [r3, #4]
 8008a7c:	1949      	addeq	r1, r1, r5
 8008a7e:	6021      	streq	r1, [r4, #0]
 8008a80:	e7ed      	b.n	8008a5e <_free_r+0x22>
 8008a82:	461a      	mov	r2, r3
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	b10b      	cbz	r3, 8008a8c <_free_r+0x50>
 8008a88:	42a3      	cmp	r3, r4
 8008a8a:	d9fa      	bls.n	8008a82 <_free_r+0x46>
 8008a8c:	6811      	ldr	r1, [r2, #0]
 8008a8e:	1855      	adds	r5, r2, r1
 8008a90:	42a5      	cmp	r5, r4
 8008a92:	d10b      	bne.n	8008aac <_free_r+0x70>
 8008a94:	6824      	ldr	r4, [r4, #0]
 8008a96:	4421      	add	r1, r4
 8008a98:	1854      	adds	r4, r2, r1
 8008a9a:	42a3      	cmp	r3, r4
 8008a9c:	6011      	str	r1, [r2, #0]
 8008a9e:	d1e0      	bne.n	8008a62 <_free_r+0x26>
 8008aa0:	681c      	ldr	r4, [r3, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	6053      	str	r3, [r2, #4]
 8008aa6:	440c      	add	r4, r1
 8008aa8:	6014      	str	r4, [r2, #0]
 8008aaa:	e7da      	b.n	8008a62 <_free_r+0x26>
 8008aac:	d902      	bls.n	8008ab4 <_free_r+0x78>
 8008aae:	230c      	movs	r3, #12
 8008ab0:	6003      	str	r3, [r0, #0]
 8008ab2:	e7d6      	b.n	8008a62 <_free_r+0x26>
 8008ab4:	6825      	ldr	r5, [r4, #0]
 8008ab6:	1961      	adds	r1, r4, r5
 8008ab8:	428b      	cmp	r3, r1
 8008aba:	bf04      	itt	eq
 8008abc:	6819      	ldreq	r1, [r3, #0]
 8008abe:	685b      	ldreq	r3, [r3, #4]
 8008ac0:	6063      	str	r3, [r4, #4]
 8008ac2:	bf04      	itt	eq
 8008ac4:	1949      	addeq	r1, r1, r5
 8008ac6:	6021      	streq	r1, [r4, #0]
 8008ac8:	6054      	str	r4, [r2, #4]
 8008aca:	e7ca      	b.n	8008a62 <_free_r+0x26>
 8008acc:	b003      	add	sp, #12
 8008ace:	bd30      	pop	{r4, r5, pc}
 8008ad0:	20000958 	.word	0x20000958

08008ad4 <_init>:
 8008ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad6:	bf00      	nop
 8008ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ada:	bc08      	pop	{r3}
 8008adc:	469e      	mov	lr, r3
 8008ade:	4770      	bx	lr

08008ae0 <_fini>:
 8008ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae2:	bf00      	nop
 8008ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae6:	bc08      	pop	{r3}
 8008ae8:	469e      	mov	lr, r3
 8008aea:	4770      	bx	lr


CE224_Lab04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009df4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08009f84  08009f84  00019f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a05c  0800a05c  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800a05c  0800a05c  0001a05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a064  0800a064  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a064  0800a064  0001a064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a068  0800a068  0001a068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800a06c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          000065cc  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00002404  200066cc  200066cc  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c4b3  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004685  00000000  00000000  0003c626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018c0  00000000  00000000  00040cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012e5  00000000  00000000  00042570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006111  00000000  00000000  00043855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f03b  00000000  00000000  00049966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6de8  00000000  00000000  000689a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006788  00000000  00000000  0013f78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00145f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f6c 	.word	0x08009f6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	08009f6c 	.word	0x08009f6c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 f9f0 	bl	80008b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f824 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f88c 	bl	80005f4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f004 fb42 	bl	8004b64 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ReadGyroTask */
  ReadGyroTaskHandle = osThreadNew(ReadGyroTask_Handler, NULL, &ReadGyroTask_attributes);
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <main+0x3c>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4809      	ldr	r0, [pc, #36]	; (800050c <main+0x40>)
 80004e6:	f004 fb87 	bl	8004bf8 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a08      	ldr	r2, [pc, #32]	; (8000510 <main+0x44>)
 80004ee:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(LCDTask_Handler, NULL, &LCDTask_attributes);
 80004f0:	4a08      	ldr	r2, [pc, #32]	; (8000514 <main+0x48>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4808      	ldr	r0, [pc, #32]	; (8000518 <main+0x4c>)
 80004f6:	f004 fb7f 	bl	8004bf8 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a07      	ldr	r2, [pc, #28]	; (800051c <main+0x50>)
 80004fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000500:	f004 fb54 	bl	8004bac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x38>
 8000506:	bf00      	nop
 8000508:	08009ffc 	.word	0x08009ffc
 800050c:	08000645 	.word	0x08000645
 8000510:	2000011c 	.word	0x2000011c
 8000514:	0800a020 	.word	0x0800a020
 8000518:	08000659 	.word	0x08000659
 800051c:	20000120 	.word	0x20000120

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f009 fce2 	bl	8009ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <SystemClock_Config+0xcc>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xd0>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000594:	23a8      	movs	r3, #168	; 0xa8
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059c:	2307      	movs	r3, #7
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 fee7 	bl	8002378 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 f86c 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2105      	movs	r1, #5
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 f948 	bl	8002868 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005de:	f000 f855 	bl	800068c <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_GPIO_Init+0x4c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <MX_GPIO_Init+0x4c>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <MX_GPIO_Init+0x4c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_GPIO_Init+0x4c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <MX_GPIO_Init+0x4c>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_GPIO_Init+0x4c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800

08000644 <ReadGyroTask_Handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ReadGyroTask_Handler */
void ReadGyroTask_Handler(void *argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800064c:	f008 ff5e 	bl	800950c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f004 fb63 	bl	8004d1c <osDelay>
 8000656:	e7fb      	b.n	8000650 <ReadGyroTask_Handler+0xc>

08000658 <LCDTask_Handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCDTask_Handler */
void LCDTask_Handler(void *argument)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCDTask_Handler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000660:	2001      	movs	r0, #1
 8000662:	f004 fb5b 	bl	8004d1c <osDelay>
 8000666:	e7fb      	b.n	8000660 <LCDTask_Handler+0x8>

08000668 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d101      	bne.n	800067e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800067a:	f000 f93d 	bl	80008f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40001400 	.word	0x40001400

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x8>
	...

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_MspInit+0x54>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	4a11      	ldr	r2, [pc, #68]	; (80006ec <HAL_MspInit+0x54>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6453      	str	r3, [r2, #68]	; 0x44
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_MspInit+0x54>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <HAL_MspInit+0x54>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <HAL_MspInit+0x54>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_MspInit+0x54>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	210f      	movs	r1, #15
 80006da:	f06f 0001 	mvn.w	r0, #1
 80006de:	f000 fa07 	bl	8000af0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08e      	sub	sp, #56	; 0x38
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <HAL_InitTick+0xe4>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a32      	ldr	r2, [pc, #200]	; (80007d4 <HAL_InitTick+0xe4>)
 800070a:	f043 0320 	orr.w	r3, r3, #32
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <HAL_InitTick+0xe4>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 0320 	and.w	r3, r3, #32
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800071c:	f107 0210 	add.w	r2, r7, #16
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f002 faaa 	bl	8002c80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800072c:	6a3b      	ldr	r3, [r7, #32]
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000732:	2b00      	cmp	r3, #0
 8000734:	d103      	bne.n	800073e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000736:	f002 fa8f 	bl	8002c58 <HAL_RCC_GetPCLK1Freq>
 800073a:	6378      	str	r0, [r7, #52]	; 0x34
 800073c:	e004      	b.n	8000748 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800073e:	f002 fa8b 	bl	8002c58 <HAL_RCC_GetPCLK1Freq>
 8000742:	4603      	mov	r3, r0
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800074a:	4a23      	ldr	r2, [pc, #140]	; (80007d8 <HAL_InitTick+0xe8>)
 800074c:	fba2 2303 	umull	r2, r3, r2, r3
 8000750:	0c9b      	lsrs	r3, r3, #18
 8000752:	3b01      	subs	r3, #1
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000756:	4b21      	ldr	r3, [pc, #132]	; (80007dc <HAL_InitTick+0xec>)
 8000758:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <HAL_InitTick+0xf0>)
 800075a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <HAL_InitTick+0xec>)
 800075e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000762:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000764:	4a1d      	ldr	r2, [pc, #116]	; (80007dc <HAL_InitTick+0xec>)
 8000766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000768:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <HAL_InitTick+0xec>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <HAL_InitTick+0xec>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <HAL_InitTick+0xec>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800077c:	4817      	ldr	r0, [pc, #92]	; (80007dc <HAL_InitTick+0xec>)
 800077e:	f002 fab1 	bl	8002ce4 <HAL_TIM_Base_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000788:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800078c:	2b00      	cmp	r3, #0
 800078e:	d11b      	bne.n	80007c8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000790:	4812      	ldr	r0, [pc, #72]	; (80007dc <HAL_InitTick+0xec>)
 8000792:	f002 fb01 	bl	8002d98 <HAL_TIM_Base_Start_IT>
 8000796:	4603      	mov	r3, r0
 8000798:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800079c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d111      	bne.n	80007c8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80007a4:	2037      	movs	r0, #55	; 0x37
 80007a6:	f000 f9bf 	bl	8000b28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	d808      	bhi.n	80007c2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80007b0:	2200      	movs	r2, #0
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	2037      	movs	r0, #55	; 0x37
 80007b6:	f000 f99b 	bl	8000af0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <HAL_InitTick+0xf4>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	e002      	b.n	80007c8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3738      	adds	r7, #56	; 0x38
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	431bde83 	.word	0x431bde83
 80007dc:	20000124 	.word	0x20000124
 80007e0:	40001400 	.word	0x40001400
 80007e4:	20000004 	.word	0x20000004

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000818:	4802      	ldr	r0, [pc, #8]	; (8000824 <TIM7_IRQHandler+0x10>)
 800081a:	f002 fb2d 	bl	8002e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000124 	.word	0x20000124

08000828 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <OTG_HS_IRQHandler+0x10>)
 800082e:	f000 fc75 	bl	800111c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20005fa0 	.word	0x20005fa0

0800083c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <SystemInit+0x20>)
 8000842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <SystemInit+0x20>)
 8000848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800084c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000898 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000866:	490e      	ldr	r1, [pc, #56]	; (80008a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000868:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800087c:	4c0b      	ldr	r4, [pc, #44]	; (80008ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800088a:	f7ff ffd7 	bl	800083c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088e:	f009 fb3b 	bl	8009f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000892:	f7ff fe1b 	bl	80004cc <main>
  bx  lr    
 8000896:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000898:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80008a4:	0800a06c 	.word	0x0800a06c
  ldr r2, =_sbss
 80008a8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80008ac:	200066cc 	.word	0x200066cc

080008b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC_IRQHandler>
	...

080008b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <HAL_Init+0x40>)
 80008be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_Init+0x40>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_Init+0x40>)
 80008ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_Init+0x40>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_Init+0x40>)
 80008d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008dc:	2003      	movs	r0, #3
 80008de:	f000 f8fc 	bl	8000ada <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e2:	200f      	movs	r0, #15
 80008e4:	f7ff ff04 	bl	80006f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e8:	f7ff fed6 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023c00 	.word	0x40023c00

080008f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_IncTick+0x20>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_IncTick+0x24>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4413      	add	r3, r2
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <HAL_IncTick+0x24>)
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000008 	.word	0x20000008
 800091c:	2000016c 	.word	0x2000016c

08000920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return uwTick;
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <HAL_GetTick+0x14>)
 8000926:	681b      	ldr	r3, [r3, #0]
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	2000016c 	.word	0x2000016c

08000938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000940:	f7ff ffee 	bl	8000920 <HAL_GetTick>
 8000944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000950:	d005      	beq.n	800095e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_Delay+0x44>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4413      	add	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800095e:	bf00      	nop
 8000960:	f7ff ffde 	bl	8000920 <HAL_GetTick>
 8000964:	4602      	mov	r2, r0
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d8f7      	bhi.n	8000960 <HAL_Delay+0x28>
  {
  }
}
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000008 	.word	0x20000008

08000980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800099c:	4013      	ands	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	60d3      	str	r3, [r2, #12]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	f003 0307 	and.w	r3, r3, #7
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	db0b      	blt.n	8000a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f003 021f 	and.w	r2, r3, #31
 80009fc:	4907      	ldr	r1, [pc, #28]	; (8000a1c <__NVIC_EnableIRQ+0x38>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	095b      	lsrs	r3, r3, #5
 8000a04:	2001      	movs	r0, #1
 8000a06:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	; 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ff4c 	bl	8000980 <__NVIC_SetPriorityGrouping>
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b02:	f7ff ff61 	bl	80009c8 <__NVIC_GetPriorityGrouping>
 8000b06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	68b9      	ldr	r1, [r7, #8]
 8000b0c:	6978      	ldr	r0, [r7, #20]
 8000b0e:	f7ff ffb1 	bl	8000a74 <NVIC_EncodePriority>
 8000b12:	4602      	mov	r2, r0
 8000b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff80 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b20:	bf00      	nop
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff54 	bl	80009e4 <__NVIC_EnableIRQ>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
 8000b5e:	e16b      	b.n	8000e38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b60:	2201      	movs	r2, #1
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	f040 815a 	bne.w	8000e32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f003 0303 	and.w	r3, r3, #3
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d005      	beq.n	8000b96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d130      	bne.n	8000bf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4013      	ands	r3, r2
 8000bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	68da      	ldr	r2, [r3, #12]
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bcc:	2201      	movs	r2, #1
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	091b      	lsrs	r3, r3, #4
 8000be2:	f003 0201 	and.w	r2, r3, #1
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d017      	beq.n	8000c34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	2203      	movs	r2, #3
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d123      	bne.n	8000c88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	08da      	lsrs	r2, r3, #3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3208      	adds	r2, #8
 8000c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	f003 0307 	and.w	r3, r3, #7
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	220f      	movs	r2, #15
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	691a      	ldr	r2, [r3, #16]
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	08da      	lsrs	r2, r3, #3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3208      	adds	r2, #8
 8000c82:	69b9      	ldr	r1, [r7, #24]
 8000c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2203      	movs	r2, #3
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 0203 	and.w	r2, r3, #3
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f000 80b4 	beq.w	8000e32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b60      	ldr	r3, [pc, #384]	; (8000e50 <HAL_GPIO_Init+0x30c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a5f      	ldr	r2, [pc, #380]	; (8000e50 <HAL_GPIO_Init+0x30c>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b5d      	ldr	r3, [pc, #372]	; (8000e50 <HAL_GPIO_Init+0x30c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ce6:	4a5b      	ldr	r2, [pc, #364]	; (8000e54 <HAL_GPIO_Init+0x310>)
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	3302      	adds	r3, #2
 8000cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	220f      	movs	r2, #15
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a52      	ldr	r2, [pc, #328]	; (8000e58 <HAL_GPIO_Init+0x314>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d02b      	beq.n	8000d6a <HAL_GPIO_Init+0x226>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a51      	ldr	r2, [pc, #324]	; (8000e5c <HAL_GPIO_Init+0x318>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d025      	beq.n	8000d66 <HAL_GPIO_Init+0x222>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a50      	ldr	r2, [pc, #320]	; (8000e60 <HAL_GPIO_Init+0x31c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d01f      	beq.n	8000d62 <HAL_GPIO_Init+0x21e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a4f      	ldr	r2, [pc, #316]	; (8000e64 <HAL_GPIO_Init+0x320>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d019      	beq.n	8000d5e <HAL_GPIO_Init+0x21a>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a4e      	ldr	r2, [pc, #312]	; (8000e68 <HAL_GPIO_Init+0x324>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d013      	beq.n	8000d5a <HAL_GPIO_Init+0x216>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a4d      	ldr	r2, [pc, #308]	; (8000e6c <HAL_GPIO_Init+0x328>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d00d      	beq.n	8000d56 <HAL_GPIO_Init+0x212>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a4c      	ldr	r2, [pc, #304]	; (8000e70 <HAL_GPIO_Init+0x32c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d007      	beq.n	8000d52 <HAL_GPIO_Init+0x20e>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a4b      	ldr	r2, [pc, #300]	; (8000e74 <HAL_GPIO_Init+0x330>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d101      	bne.n	8000d4e <HAL_GPIO_Init+0x20a>
 8000d4a:	2307      	movs	r3, #7
 8000d4c:	e00e      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d4e:	2308      	movs	r3, #8
 8000d50:	e00c      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d52:	2306      	movs	r3, #6
 8000d54:	e00a      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d56:	2305      	movs	r3, #5
 8000d58:	e008      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e004      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d62:	2302      	movs	r3, #2
 8000d64:	e002      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <HAL_GPIO_Init+0x228>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	69fa      	ldr	r2, [r7, #28]
 8000d6e:	f002 0203 	and.w	r2, r2, #3
 8000d72:	0092      	lsls	r2, r2, #2
 8000d74:	4093      	lsls	r3, r2
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d7c:	4935      	ldr	r1, [pc, #212]	; (8000e54 <HAL_GPIO_Init+0x310>)
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3302      	adds	r3, #2
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d8a:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dae:	4a32      	ldr	r2, [pc, #200]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dd8:	4a27      	ldr	r2, [pc, #156]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e02:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e2c:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <HAL_GPIO_Init+0x334>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3301      	adds	r3, #1
 8000e36:	61fb      	str	r3, [r7, #28]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	f67f ae90 	bls.w	8000b60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3724      	adds	r7, #36	; 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40013800 	.word	0x40013800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40020400 	.word	0x40020400
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40020c00 	.word	0x40020c00
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40021400 	.word	0x40021400
 8000e70:	40021800 	.word	0x40021800
 8000e74:	40021c00 	.word	0x40021c00
 8000e78:	40013c00 	.word	0x40013c00

08000e7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	b08f      	sub	sp, #60	; 0x3c
 8000e80:	af0a      	add	r7, sp, #40	; 0x28
 8000e82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e10f      	b.n	80010ae <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d106      	bne.n	8000eae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f008 fd0f 	bl	80098cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d102      	bne.n	8000ec8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f002 facc 	bl	800346a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	687e      	ldr	r6, [r7, #4]
 8000eda:	466d      	mov	r5, sp
 8000edc:	f106 0410 	add.w	r4, r6, #16
 8000ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ee8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eec:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ef0:	1d33      	adds	r3, r6, #4
 8000ef2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ef4:	6838      	ldr	r0, [r7, #0]
 8000ef6:	f002 f9a3 	bl	8003240 <USB_CoreInit>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2202      	movs	r2, #2
 8000f04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e0d0      	b.n	80010ae <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 faba 	bl	800348c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e04a      	b.n	8000fb4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4413      	add	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	333d      	adds	r3, #61	; 0x3d
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	333c      	adds	r3, #60	; 0x3c
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	b298      	uxth	r0, r3
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4413      	add	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	440b      	add	r3, r1
 8000f58:	3344      	adds	r3, #68	; 0x44
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	4413      	add	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3340      	adds	r3, #64	; 0x40
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	3348      	adds	r3, #72	; 0x48
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	4413      	add	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	440b      	add	r3, r1
 8000f94:	334c      	adds	r3, #76	; 0x4c
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	3354      	adds	r3, #84	; 0x54
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d3af      	bcc.n	8000f1e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	e044      	b.n	800104e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	4413      	add	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fda:	7bfa      	ldrb	r2, [r7, #15]
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ff0:	7bfa      	ldrb	r2, [r7, #15]
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	4413      	add	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	440b      	add	r3, r1
 8001014:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	3301      	adds	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	d3b5      	bcc.n	8000fc4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	687e      	ldr	r6, [r7, #4]
 8001060:	466d      	mov	r5, sp
 8001062:	f106 0410 	add.w	r4, r6, #16
 8001066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001072:	e885 0003 	stmia.w	r5, {r0, r1}
 8001076:	1d33      	adds	r3, r6, #4
 8001078:	cb0e      	ldmia	r3, {r1, r2, r3}
 800107a:	6838      	ldr	r0, [r7, #0]
 800107c:	f002 fa52 	bl	8003524 <USB_DevInit>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d005      	beq.n	8001092 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2202      	movs	r2, #2
 800108a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e00d      	b.n	80010ae <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 fba1 	bl	80047ee <USB_DevDisconnect>

  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d101      	bne.n	80010d2 <HAL_PCD_Start+0x1c>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e020      	b.n	8001114 <HAL_PCD_Start+0x5e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d109      	bne.n	80010f6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d005      	beq.n	80010f6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 f9a4 	bl	8003448 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f003 fb51 	bl	80047ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b08d      	sub	sp, #52	; 0x34
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fc0f 	bl	8004956 <USB_GetMode>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	f040 848a 	bne.w	8001a54 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f003 fb73 	bl	8004830 <USB_ReadInterrupts>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 8480 	beq.w	8001a52 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	0a1b      	lsrs	r3, r3, #8
 800115c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f003 fb60 	bl	8004830 <USB_ReadInterrupts>
 8001170:	4603      	mov	r3, r0
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b02      	cmp	r3, #2
 8001178:	d107      	bne.n	800118a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	695a      	ldr	r2, [r3, #20]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f002 0202 	and.w	r2, r2, #2
 8001188:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fb4e 	bl	8004830 <USB_ReadInterrupts>
 8001194:	4603      	mov	r3, r0
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	2b10      	cmp	r3, #16
 800119c:	d161      	bne.n	8001262 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	699a      	ldr	r2, [r3, #24]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0210 	bic.w	r2, r2, #16
 80011ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	f003 020f 	and.w	r2, r3, #15
 80011ba:	4613      	mov	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	3304      	adds	r3, #4
 80011cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	0c5b      	lsrs	r3, r3, #17
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d124      	bne.n	8001224 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011e0:	4013      	ands	r3, r2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d035      	beq.n	8001252 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	6a38      	ldr	r0, [r7, #32]
 80011fa:	f003 f985 	bl	8004508 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800120a:	441a      	add	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	6a1a      	ldr	r2, [r3, #32]
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	091b      	lsrs	r3, r3, #4
 8001218:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800121c:	441a      	add	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	621a      	str	r2, [r3, #32]
 8001222:	e016      	b.n	8001252 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	0c5b      	lsrs	r3, r3, #17
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	2b06      	cmp	r3, #6
 800122e:	d110      	bne.n	8001252 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001236:	2208      	movs	r2, #8
 8001238:	4619      	mov	r1, r3
 800123a:	6a38      	ldr	r0, [r7, #32]
 800123c:	f003 f964 	bl	8004508 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	6a1a      	ldr	r2, [r3, #32]
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800124c:	441a      	add	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	699a      	ldr	r2, [r3, #24]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0210 	orr.w	r2, r2, #16
 8001260:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fae2 	bl	8004830 <USB_ReadInterrupts>
 800126c:	4603      	mov	r3, r0
 800126e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001272:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001276:	f040 80a7 	bne.w	80013c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f003 fae7 	bl	8004856 <USB_ReadDevAllOutEpInterrupt>
 8001288:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800128a:	e099      	b.n	80013c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 808e 	beq.w	80013b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 fb0b 	bl	80048be <USB_ReadDevOutEPInterrupt>
 80012a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00c      	beq.n	80012ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	015a      	lsls	r2, r3, #5
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	4413      	add	r3, r2
 80012bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012c0:	461a      	mov	r2, r3
 80012c2:	2301      	movs	r3, #1
 80012c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 fec3 	bl	8002054 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00c      	beq.n	80012f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	015a      	lsls	r2, r3, #5
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	4413      	add	r3, r2
 80012e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012e4:	461a      	mov	r2, r3
 80012e6:	2308      	movs	r3, #8
 80012e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 ff99 	bl	8002224 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d008      	beq.n	800130e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	015a      	lsls	r2, r3, #5
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	4413      	add	r3, r2
 8001304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001308:	461a      	mov	r2, r3
 800130a:	2310      	movs	r3, #16
 800130c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d030      	beq.n	800137a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001318:	6a3b      	ldr	r3, [r7, #32]
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001320:	2b80      	cmp	r3, #128	; 0x80
 8001322:	d109      	bne.n	8001338 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001336:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133a:	4613      	mov	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4413      	add	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	3304      	adds	r3, #4
 800134c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	78db      	ldrb	r3, [r3, #3]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d108      	bne.n	8001368 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2200      	movs	r2, #0
 800135a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4619      	mov	r1, r3
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f008 fbb4 	bl	8009ad0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	015a      	lsls	r2, r3, #5
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	4413      	add	r3, r2
 8001370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001374:	461a      	mov	r2, r3
 8001376:	2302      	movs	r3, #2
 8001378:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	015a      	lsls	r2, r3, #5
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	4413      	add	r3, r2
 800138c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001390:	461a      	mov	r2, r3
 8001392:	2320      	movs	r3, #32
 8001394:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d009      	beq.n	80013b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	015a      	lsls	r2, r3, #5
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	4413      	add	r3, r2
 80013a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ac:	461a      	mov	r2, r3
 80013ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	3301      	adds	r3, #1
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013bc:	085b      	lsrs	r3, r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f47f af62 	bne.w	800128c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 fa2f 	bl	8004830 <USB_ReadInterrupts>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013dc:	f040 80db 	bne.w	8001596 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 fa50 	bl	800488a <USB_ReadDevAllInEpInterrupt>
 80013ea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013f0:	e0cd      	b.n	800158e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 80c2 	beq.w	8001582 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fa76 	bl	80048fa <USB_ReadDevInEPInterrupt>
 800140e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d057      	beq.n	80014ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	2201      	movs	r2, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800142e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43db      	mvns	r3, r3
 8001434:	69f9      	ldr	r1, [r7, #28]
 8001436:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800143a:	4013      	ands	r3, r2
 800143c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	015a      	lsls	r2, r3, #5
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	4413      	add	r3, r2
 8001446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800144a:	461a      	mov	r2, r3
 800144c:	2301      	movs	r3, #1
 800144e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d132      	bne.n	80014be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145c:	4613      	mov	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	334c      	adds	r3, #76	; 0x4c
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146e:	4613      	mov	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4403      	add	r3, r0
 8001478:	3348      	adds	r3, #72	; 0x48
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4419      	add	r1, r3
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001482:	4613      	mov	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4403      	add	r3, r0
 800148c:	334c      	adds	r3, #76	; 0x4c
 800148e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	2b00      	cmp	r3, #0
 8001494:	d113      	bne.n	80014be <HAL_PCD_IRQHandler+0x3a2>
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	3354      	adds	r3, #84	; 0x54
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d108      	bne.n	80014be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014b6:	461a      	mov	r2, r3
 80014b8:	2101      	movs	r1, #1
 80014ba:	f003 fa7d 	bl	80049b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4619      	mov	r1, r3
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f008 fa7e 	bl	80099c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	015a      	lsls	r2, r3, #5
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	4413      	add	r3, r2
 80014dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014e0:	461a      	mov	r2, r3
 80014e2:	2308      	movs	r3, #8
 80014e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d008      	beq.n	8001502 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	015a      	lsls	r2, r3, #5
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	4413      	add	r3, r2
 80014f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014fc:	461a      	mov	r2, r3
 80014fe:	2310      	movs	r3, #16
 8001500:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	015a      	lsls	r2, r3, #5
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	4413      	add	r3, r2
 8001514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001518:	461a      	mov	r2, r3
 800151a:	2340      	movs	r3, #64	; 0x40
 800151c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d023      	beq.n	8001570 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800152a:	6a38      	ldr	r0, [r7, #32]
 800152c:	f002 f95e 	bl	80037ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	3338      	adds	r3, #56	; 0x38
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	3304      	adds	r3, #4
 8001542:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	78db      	ldrb	r3, [r3, #3]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d108      	bne.n	800155e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2200      	movs	r2, #0
 8001550:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	b2db      	uxtb	r3, r3
 8001556:	4619      	mov	r1, r3
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f008 facb 	bl	8009af4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	015a      	lsls	r2, r3, #5
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	4413      	add	r3, r2
 8001566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800156a:	461a      	mov	r2, r3
 800156c:	2302      	movs	r3, #2
 800156e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800157a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 fcdb 	bl	8001f38 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	3301      	adds	r3, #1
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001590:	2b00      	cmp	r3, #0
 8001592:	f47f af2e 	bne.w	80013f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f003 f948 	bl	8004830 <USB_ReadInterrupts>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015aa:	d122      	bne.n	80015f2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d108      	bne.n	80015dc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015d2:	2100      	movs	r1, #0
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 fec3 	bl	8002360 <HAL_PCDEx_LPM_Callback>
 80015da:	e002      	b.n	80015e2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f008 fa69 	bl	8009ab4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 f91a 	bl	8004830 <USB_ReadInterrupts>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001606:	d112      	bne.n	800162e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b01      	cmp	r3, #1
 8001616:	d102      	bne.n	800161e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f008 fa25 	bl	8009a68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800162c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f003 f8fc 	bl	8004830 <USB_ReadInterrupts>
 8001638:	4603      	mov	r3, r0
 800163a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800163e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001642:	f040 80b7 	bne.w	80017b4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2110      	movs	r1, #16
 8001660:	4618      	mov	r0, r3
 8001662:	f002 f8c3 	bl	80037ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800166a:	e046      	b.n	80016fa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	4413      	add	r3, r2
 8001674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001678:	461a      	mov	r2, r3
 800167a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800167e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	015a      	lsls	r2, r3, #5
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	4413      	add	r3, r2
 8001688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001690:	0151      	lsls	r1, r2, #5
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	440a      	add	r2, r1
 8001696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800169a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800169e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a2:	015a      	lsls	r2, r3, #5
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	4413      	add	r3, r2
 80016a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ac:	461a      	mov	r2, r3
 80016ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016b2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b6:	015a      	lsls	r2, r3, #5
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c4:	0151      	lsls	r1, r2, #5
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	440a      	add	r2, r1
 80016ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e4:	0151      	lsls	r1, r2, #5
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	440a      	add	r2, r1
 80016ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016f2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f6:	3301      	adds	r3, #1
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001700:	429a      	cmp	r2, r3
 8001702:	d3b3      	bcc.n	800166c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001712:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001716:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	2b00      	cmp	r3, #0
 800171e:	d016      	beq.n	800174e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001730:	f043 030b 	orr.w	r3, r3, #11
 8001734:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001746:	f043 030b 	orr.w	r3, r3, #11
 800174a:	6453      	str	r3, [r2, #68]	; 0x44
 800174c:	e015      	b.n	800177a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800175c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001760:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001764:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001774:	f043 030b 	orr.w	r3, r3, #11
 8001778:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001788:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800178c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800179e:	461a      	mov	r2, r3
 80017a0:	f003 f90a 	bl	80049b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 f839 	bl	8004830 <USB_ReadInterrupts>
 80017be:	4603      	mov	r3, r0
 80017c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017c8:	d124      	bne.n	8001814 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 f8cf 	bl	8004972 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 f884 	bl	80038e6 <USB_GetDevSpeed>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681c      	ldr	r4, [r3, #0]
 80017ea:	f001 fa29 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 80017ee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	4620      	mov	r0, r4
 80017fa:	f001 fd83 	bl	8003304 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f008 f909 	bl	8009a16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001812:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f003 f809 	bl	8004830 <USB_ReadInterrupts>
 800181e:	4603      	mov	r3, r0
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b08      	cmp	r3, #8
 8001826:	d10a      	bne.n	800183e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f008 f8e6 	bl	80099fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	695a      	ldr	r2, [r3, #20]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f002 0208 	and.w	r2, r2, #8
 800183c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f002 fff4 	bl	8004830 <USB_ReadInterrupts>
 8001848:	4603      	mov	r3, r0
 800184a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184e:	2b80      	cmp	r3, #128	; 0x80
 8001850:	d122      	bne.n	8001898 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800185e:	2301      	movs	r3, #1
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
 8001862:	e014      	b.n	800188e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001868:	4613      	mov	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d105      	bne.n	8001888 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	b2db      	uxtb	r3, r3
 8001880:	4619      	mov	r1, r3
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fb27 	bl	8001ed6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	3301      	adds	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001894:	429a      	cmp	r2, r3
 8001896:	d3e5      	bcc.n	8001864 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f002 ffc7 	bl	8004830 <USB_ReadInterrupts>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018ac:	d13b      	bne.n	8001926 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018ae:	2301      	movs	r3, #1
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
 80018b2:	e02b      	b.n	800190c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	015a      	lsls	r2, r3, #5
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	4413      	add	r3, r2
 80018bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c8:	4613      	mov	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	3340      	adds	r3, #64	; 0x40
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d115      	bne.n	8001906 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80018da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018dc:	2b00      	cmp	r3, #0
 80018de:	da12      	bge.n	8001906 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e4:	4613      	mov	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	333f      	adds	r3, #63	; 0x3f
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	4619      	mov	r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fae8 	bl	8001ed6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	3301      	adds	r3, #1
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001912:	429a      	cmp	r2, r3
 8001914:	d3ce      	bcc.n	80018b4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001924:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f002 ff80 	bl	8004830 <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001936:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800193a:	d155      	bne.n	80019e8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800193c:	2301      	movs	r3, #1
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
 8001940:	e045      	b.n	80019ce <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	015a      	lsls	r2, r3, #5
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	4413      	add	r3, r2
 800194a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001956:	4613      	mov	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d12e      	bne.n	80019c8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800196a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800196c:	2b00      	cmp	r3, #0
 800196e:	da2b      	bge.n	80019c8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800197c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001980:	429a      	cmp	r2, r3
 8001982:	d121      	bne.n	80019c8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10a      	bne.n	80019c8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c4:	6053      	str	r3, [r2, #4]
            break;
 80019c6:	e007      	b.n	80019d8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	3301      	adds	r3, #1
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d3b4      	bcc.n	8001942 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 ff1f 	bl	8004830 <USB_ReadInterrupts>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fc:	d10a      	bne.n	8001a14 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f008 f88a 	bl	8009b18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 ff09 	bl	8004830 <USB_ReadInterrupts>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d115      	bne.n	8001a54 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f008 f87a 	bl	8009b34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6859      	ldr	r1, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	e000      	b.n	8001a54 <HAL_PCD_IRQHandler+0x938>
      return;
 8001a52:	bf00      	nop
    }
  }
}
 8001a54:	3734      	adds	r7, #52	; 0x34
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd90      	pop	{r4, r7, pc}

08001a5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_PCD_SetAddress+0x1a>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e013      	b.n	8001a9c <HAL_PCD_SetAddress+0x42>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	78fa      	ldrb	r2, [r7, #3]
 8001a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 fe67 	bl	8004760 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	4608      	mov	r0, r1
 8001aae:	4611      	mov	r1, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	70fb      	strb	r3, [r7, #3]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	803b      	strh	r3, [r7, #0]
 8001aba:	4613      	mov	r3, r2
 8001abc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	da0f      	bge.n	8001aea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	f003 020f 	and.w	r2, r3, #15
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	3338      	adds	r3, #56	; 0x38
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	3304      	adds	r3, #4
 8001ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	705a      	strb	r2, [r3, #1]
 8001ae8:	e00f      	b.n	8001b0a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	f003 020f 	and.w	r2, r3, #15
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	3304      	adds	r3, #4
 8001b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b16:	883a      	ldrh	r2, [r7, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	78ba      	ldrb	r2, [r7, #2]
 8001b20:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	785b      	ldrb	r3, [r3, #1]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b34:	78bb      	ldrb	r3, [r7, #2]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d102      	bne.n	8001b40 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_PCD_EP_Open+0xaa>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e00e      	b.n	8001b6c <HAL_PCD_EP_Open+0xc8>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68f9      	ldr	r1, [r7, #12]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f001 fee7 	bl	8003930 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001b6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	da0f      	bge.n	8001ba8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	f003 020f 	and.w	r2, r3, #15
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	3338      	adds	r3, #56	; 0x38
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	705a      	strb	r2, [r3, #1]
 8001ba6:	e00f      	b.n	8001bc8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	f003 020f 	and.w	r2, r3, #15
 8001bae:	4613      	mov	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_PCD_EP_Close+0x6e>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e00e      	b.n	8001c00 <HAL_PCD_EP_Close+0x8c>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68f9      	ldr	r1, [r7, #12]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f001 ff25 	bl	8003a40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	460b      	mov	r3, r1
 8001c16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c18:	7afb      	ldrb	r3, [r7, #11]
 8001c1a:	f003 020f 	and.w	r2, r3, #15
 8001c1e:	4613      	mov	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3304      	adds	r3, #4
 8001c30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2200      	movs	r2, #0
 8001c48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4a:	7afb      	ldrb	r3, [r7, #11]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d102      	bne.n	8001c64 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c64:	7afb      	ldrb	r3, [r7, #11]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	6979      	ldr	r1, [r7, #20]
 8001c7c:	f002 fa04 	bl	8004088 <USB_EP0StartXfer>
 8001c80:	e008      	b.n	8001c94 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	6979      	ldr	r1, [r7, #20]
 8001c90:	f001 ffb2 	bl	8003bf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	f003 020f 	and.w	r2, r3, #15
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001cc0:	681b      	ldr	r3, [r3, #0]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cde:	7afb      	ldrb	r3, [r7, #11]
 8001ce0:	f003 020f 	and.w	r2, r3, #15
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	3338      	adds	r3, #56	; 0x38
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0e:	7afb      	ldrb	r3, [r7, #11]
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d102      	bne.n	8001d28 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d28:	7afb      	ldrb	r3, [r7, #11]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	6979      	ldr	r1, [r7, #20]
 8001d40:	f002 f9a2 	bl	8004088 <USB_EP0StartXfer>
 8001d44:	e008      	b.n	8001d58 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	6979      	ldr	r1, [r7, #20]
 8001d54:	f001 ff50 	bl	8003bf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	f003 020f 	and.w	r2, r3, #15
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d901      	bls.n	8001d80 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e050      	b.n	8001e22 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	da0f      	bge.n	8001da8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	f003 020f 	and.w	r2, r3, #15
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	3338      	adds	r3, #56	; 0x38
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	705a      	strb	r2, [r3, #1]
 8001da6:	e00d      	b.n	8001dc4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	3304      	adds	r3, #4
 8001dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_PCD_EP_SetStall+0x82>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e01e      	b.n	8001e22 <HAL_PCD_EP_SetStall+0xc0>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68f9      	ldr	r1, [r7, #12]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 fbe0 	bl	80045b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10a      	bne.n	8001e18 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	b2d9      	uxtb	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e12:	461a      	mov	r2, r3
 8001e14:	f002 fdd0 	bl	80049b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	460b      	mov	r3, r1
 8001e34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	f003 020f 	and.w	r2, r3, #15
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d901      	bls.n	8001e48 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e042      	b.n	8001ece <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	da0f      	bge.n	8001e70 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	f003 020f 	and.w	r2, r3, #15
 8001e56:	4613      	mov	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	3338      	adds	r3, #56	; 0x38
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	3304      	adds	r3, #4
 8001e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	705a      	strb	r2, [r3, #1]
 8001e6e:	e00f      	b.n	8001e90 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 020f 	and.w	r2, r3, #15
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	3304      	adds	r3, #4
 8001e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	f003 030f 	and.w	r3, r3, #15
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_PCD_EP_ClrStall+0x86>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e00e      	b.n	8001ece <HAL_PCD_EP_ClrStall+0xa4>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68f9      	ldr	r1, [r7, #12]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f002 fbe8 	bl	8004694 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da0c      	bge.n	8001f04 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 020f 	and.w	r2, r3, #15
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	3338      	adds	r3, #56	; 0x38
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	3304      	adds	r3, #4
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	e00c      	b.n	8001f1e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	f003 020f 	and.w	r2, r3, #15
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68f9      	ldr	r1, [r7, #12]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f002 fa07 	bl	8004338 <USB_EPStopXfer>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f2e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	3338      	adds	r3, #56	; 0x38
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d901      	bls.n	8001f70 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e06c      	b.n	800204a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	699a      	ldr	r2, [r3, #24]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d902      	bls.n	8001f8c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	3303      	adds	r3, #3
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f94:	e02b      	b.n	8001fee <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d902      	bls.n	8001fb2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3303      	adds	r3, #3
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6919      	ldr	r1, [r3, #16]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6978      	ldr	r0, [r7, #20]
 8001fd2:	f002 fa5b 	bl	800448c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	691a      	ldr	r2, [r3, #16]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	441a      	add	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	441a      	add	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	429a      	cmp	r2, r3
 8002002:	d809      	bhi.n	8002018 <PCD_WriteEmptyTxFifo+0xe0>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a1a      	ldr	r2, [r3, #32]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800200c:	429a      	cmp	r2, r3
 800200e:	d203      	bcs.n	8002018 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1be      	bne.n	8001f96 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	699a      	ldr	r2, [r3, #24]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	429a      	cmp	r2, r3
 8002022:	d811      	bhi.n	8002048 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	2201      	movs	r2, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	43db      	mvns	r3, r3
 800203e:	6939      	ldr	r1, [r7, #16]
 8002040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002044:	4013      	ands	r3, r2
 8002046:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3720      	adds	r7, #32
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	333c      	adds	r3, #60	; 0x3c
 800206c:	3304      	adds	r3, #4
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4413      	add	r3, r2
 800207a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d17b      	bne.n	8002182 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d015      	beq.n	80020c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	4a61      	ldr	r2, [pc, #388]	; (800221c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	f240 80b9 	bls.w	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80b3 	beq.w	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b6:	461a      	mov	r2, r3
 80020b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020bc:	6093      	str	r3, [r2, #8]
 80020be:	e0a7      	b.n	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d6:	461a      	mov	r2, r3
 80020d8:	2320      	movs	r3, #32
 80020da:	6093      	str	r3, [r2, #8]
 80020dc:	e098      	b.n	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f040 8093 	bne.w	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	4a4b      	ldr	r2, [pc, #300]	; (800221c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d90f      	bls.n	8002112 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	4413      	add	r3, r2
 8002104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002108:	461a      	mov	r2, r3
 800210a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800210e:	6093      	str	r3, [r2, #8]
 8002110:	e07e      	b.n	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	3304      	adds	r3, #4
 8002126:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	69da      	ldr	r2, [r3, #28]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	0159      	lsls	r1, r3, #5
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	440b      	add	r3, r1
 8002134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213e:	1ad2      	subs	r2, r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d114      	bne.n	8002174 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800215c:	461a      	mov	r2, r3
 800215e:	2101      	movs	r1, #1
 8002160:	f002 fc2a 	bl	80049b8 <USB_EP0_OutStart>
 8002164:	e006      	b.n	8002174 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	441a      	add	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	4619      	mov	r1, r3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f007 fc08 	bl	8009990 <HAL_PCD_DataOutStageCallback>
 8002180:	e046      	b.n	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	4a26      	ldr	r2, [pc, #152]	; (8002220 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d124      	bne.n	80021d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	4413      	add	r3, r2
 800219c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a0:	461a      	mov	r2, r3
 80021a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a6:	6093      	str	r3, [r2, #8]
 80021a8:	e032      	b.n	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c0:	461a      	mov	r2, r3
 80021c2:	2320      	movs	r3, #32
 80021c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f007 fbdf 	bl	8009990 <HAL_PCD_DataOutStageCallback>
 80021d2:	e01d      	b.n	8002210 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d114      	bne.n	8002204 <PCD_EP_OutXfrComplete_int+0x1b0>
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d108      	bne.n	8002204 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021fc:	461a      	mov	r2, r3
 80021fe:	2100      	movs	r1, #0
 8002200:	f002 fbda 	bl	80049b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	4619      	mov	r1, r3
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f007 fbc0 	bl	8009990 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	4f54300a 	.word	0x4f54300a
 8002220:	4f54310a 	.word	0x4f54310a

08002224 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	333c      	adds	r3, #60	; 0x3c
 800223c:	3304      	adds	r3, #4
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4a15      	ldr	r2, [pc, #84]	; (80022ac <PCD_EP_OutSetupPacket_int+0x88>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d90e      	bls.n	8002278 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002260:	2b00      	cmp	r3, #0
 8002262:	d009      	beq.n	8002278 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002270:	461a      	mov	r2, r3
 8002272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002276:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f007 fb77 	bl	800996c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <PCD_EP_OutSetupPacket_int+0x88>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d90c      	bls.n	80022a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d108      	bne.n	80022a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002298:	461a      	mov	r2, r3
 800229a:	2101      	movs	r1, #1
 800229c:	f002 fb8c 	bl	80049b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	4f54300a 	.word	0x4f54300a

080022b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
 80022bc:	4613      	mov	r3, r2
 80022be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d107      	bne.n	80022de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022ce:	883b      	ldrh	r3, [r7, #0]
 80022d0:	0419      	lsls	r1, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	430a      	orrs	r2, r1
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
 80022dc:	e028      	b.n	8002330 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	0c1b      	lsrs	r3, r3, #16
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	4413      	add	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e00d      	b.n	800230e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	3340      	adds	r3, #64	; 0x40
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4413      	add	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	3301      	adds	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	3b01      	subs	r3, #1
 8002314:	429a      	cmp	r2, r3
 8002316:	d3ec      	bcc.n	80022f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002318:	883b      	ldrh	r3, [r7, #0]
 800231a:	0418      	lsls	r0, r3, #16
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6819      	ldr	r1, [r3, #0]
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	3b01      	subs	r3, #1
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	4302      	orrs	r2, r0
 8002328:	3340      	adds	r3, #64	; 0x40
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e267      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d075      	beq.n	8002482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002396:	4b88      	ldr	r3, [pc, #544]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d00c      	beq.n	80023bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a2:	4b85      	ldr	r3, [pc, #532]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d112      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ae:	4b82      	ldr	r3, [pc, #520]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	4b7e      	ldr	r3, [pc, #504]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d05b      	beq.n	8002480 <HAL_RCC_OscConfig+0x108>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d157      	bne.n	8002480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e242      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023dc:	d106      	bne.n	80023ec <HAL_RCC_OscConfig+0x74>
 80023de:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a75      	ldr	r2, [pc, #468]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e01d      	b.n	8002428 <HAL_RCC_OscConfig+0xb0>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x98>
 80023f6:	4b70      	ldr	r3, [pc, #448]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6f      	ldr	r2, [pc, #444]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6c      	ldr	r2, [pc, #432]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0xb0>
 8002410:	4b69      	ldr	r3, [pc, #420]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a68      	ldr	r2, [pc, #416]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b66      	ldr	r3, [pc, #408]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7fe fa76 	bl	8000920 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002438:	f7fe fa72 	bl	8000920 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e207      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b5b      	ldr	r3, [pc, #364]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0xc0>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe fa62 	bl	8000920 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002460:	f7fe fa5e 	bl	8000920 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e1f3      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	4b51      	ldr	r3, [pc, #324]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0xe8>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d063      	beq.n	8002556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800248e:	4b4a      	ldr	r3, [pc, #296]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d11c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a6:	4b44      	ldr	r3, [pc, #272]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d116      	bne.n	80024e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_RCC_OscConfig+0x152>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e1c7      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4937      	ldr	r1, [pc, #220]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	e03a      	b.n	8002556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d020      	beq.n	800252a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e8:	4b34      	ldr	r3, [pc, #208]	; (80025bc <HAL_RCC_OscConfig+0x244>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7fe fa17 	bl	8000920 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f6:	f7fe fa13 	bl	8000920 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e1a8      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4925      	ldr	r1, [pc, #148]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
 8002528:	e015      	b.n	8002556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252a:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_RCC_OscConfig+0x244>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe f9f6 	bl	8000920 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002538:	f7fe f9f2 	bl	8000920 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e187      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d036      	beq.n	80025d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d016      	beq.n	8002598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_RCC_OscConfig+0x248>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe f9d6 	bl	8000920 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002578:	f7fe f9d2 	bl	8000920 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e167      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800258c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x200>
 8002596:	e01b      	b.n	80025d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_RCC_OscConfig+0x248>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7fe f9bf 	bl	8000920 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a4:	e00e      	b.n	80025c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a6:	f7fe f9bb 	bl	8000920 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d907      	bls.n	80025c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e150      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
 80025b8:	40023800 	.word	0x40023800
 80025bc:	42470000 	.word	0x42470000
 80025c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c4:	4b88      	ldr	r3, [pc, #544]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ea      	bne.n	80025a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 8097 	beq.w	800270c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e2:	4b81      	ldr	r3, [pc, #516]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10f      	bne.n	800260e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	4b7d      	ldr	r3, [pc, #500]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a7c      	ldr	r2, [pc, #496]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b7a      	ldr	r3, [pc, #488]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	4b77      	ldr	r3, [pc, #476]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d118      	bne.n	800264c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261a:	4b74      	ldr	r3, [pc, #464]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a73      	ldr	r2, [pc, #460]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002626:	f7fe f97b 	bl	8000920 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262e:	f7fe f977 	bl	8000920 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e10c      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x2ea>
 8002654:	4b64      	ldr	r3, [pc, #400]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a63      	ldr	r2, [pc, #396]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
 8002660:	e01c      	b.n	800269c <HAL_RCC_OscConfig+0x324>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b05      	cmp	r3, #5
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x30c>
 800266a:	4b5f      	ldr	r3, [pc, #380]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	4a5e      	ldr	r2, [pc, #376]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	6713      	str	r3, [r2, #112]	; 0x70
 8002676:	4b5c      	ldr	r3, [pc, #368]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	4a5b      	ldr	r2, [pc, #364]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6713      	str	r3, [r2, #112]	; 0x70
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0x324>
 8002684:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	4a57      	ldr	r2, [pc, #348]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	6713      	str	r3, [r2, #112]	; 0x70
 8002690:	4b55      	ldr	r3, [pc, #340]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	4a54      	ldr	r2, [pc, #336]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002696:	f023 0304 	bic.w	r3, r3, #4
 800269a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d015      	beq.n	80026d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe f93c 	bl	8000920 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ac:	f7fe f938 	bl	8000920 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0cb      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c2:	4b49      	ldr	r3, [pc, #292]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0ee      	beq.n	80026ac <HAL_RCC_OscConfig+0x334>
 80026ce:	e014      	b.n	80026fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d0:	f7fe f926 	bl	8000920 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7fe f922 	bl	8000920 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0b5      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ee:	4b3e      	ldr	r3, [pc, #248]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ee      	bne.n	80026d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002700:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	4a38      	ldr	r2, [pc, #224]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80a1 	beq.w	8002858 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002716:	4b34      	ldr	r3, [pc, #208]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b08      	cmp	r3, #8
 8002720:	d05c      	beq.n	80027dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d141      	bne.n	80027ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <HAL_RCC_OscConfig+0x478>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe f8f6 	bl	8000920 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe f8f2 	bl	8000920 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e087      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	019b      	lsls	r3, r3, #6
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	3b01      	subs	r3, #1
 8002770:	041b      	lsls	r3, r3, #16
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	061b      	lsls	r3, r3, #24
 800277a:	491b      	ldr	r1, [pc, #108]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <HAL_RCC_OscConfig+0x478>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe f8cb 	bl	8000920 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe f8c7 	bl	8000920 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e05c      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x416>
 80027ac:	e054      	b.n	8002858 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <HAL_RCC_OscConfig+0x478>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe f8b4 	bl	8000920 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe f8b0 	bl	8000920 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e045      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x444>
 80027da:	e03d      	b.n	8002858 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e038      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40007000 	.word	0x40007000
 80027f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <HAL_RCC_OscConfig+0x4ec>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d028      	beq.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d121      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d11a      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002824:	4013      	ands	r3, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800282a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800282c:	4293      	cmp	r3, r2
 800282e:	d111      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	3b01      	subs	r3, #1
 800283e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d107      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800

08002868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0cc      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800287c:	4b68      	ldr	r3, [pc, #416]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d90c      	bls.n	80028a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b65      	ldr	r3, [pc, #404]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0b8      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028bc:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4a58      	ldr	r2, [pc, #352]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d4:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a52      	ldr	r2, [pc, #328]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4b50      	ldr	r3, [pc, #320]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	494d      	ldr	r1, [pc, #308]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d044      	beq.n	8002988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d119      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e07f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d003      	beq.n	8002926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002922:	2b03      	cmp	r3, #3
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002926:	4b3f      	ldr	r3, [pc, #252]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e06f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002936:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e067      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002946:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 0203 	bic.w	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4934      	ldr	r1, [pc, #208]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	4313      	orrs	r3, r2
 8002956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002958:	f7fd ffe2 	bl	8000920 <HAL_GetTick>
 800295c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	e00a      	b.n	8002976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002960:	f7fd ffde 	bl	8000920 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	; 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e04f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002976:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 020c 	and.w	r2, r3, #12
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	429a      	cmp	r2, r3
 8002986:	d1eb      	bne.n	8002960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d20c      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e032      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4916      	ldr	r1, [pc, #88]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	490e      	ldr	r1, [pc, #56]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ee:	f000 f821 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	490a      	ldr	r1, [pc, #40]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	5ccb      	ldrb	r3, [r1, r3]
 8002a02:	fa22 f303 	lsr.w	r3, r2, r3
 8002a06:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fd fe6e 	bl	80006f0 <HAL_InitTick>

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023c00 	.word	0x40023c00
 8002a24:	40023800 	.word	0x40023800
 8002a28:	0800a044 	.word	0x0800a044
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000004 	.word	0x20000004

08002a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a38:	b094      	sub	sp, #80	; 0x50
 8002a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a40:	2300      	movs	r3, #0
 8002a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a44:	2300      	movs	r3, #0
 8002a46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a4c:	4b79      	ldr	r3, [pc, #484]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d00d      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x40>
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	f200 80e1 	bhi.w	8002c20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x34>
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d003      	beq.n	8002a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a66:	e0db      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a68:	4b73      	ldr	r3, [pc, #460]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a6c:	e0db      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a6e:	4b73      	ldr	r3, [pc, #460]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x208>)
 8002a70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a72:	e0d8      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a74:	4b6f      	ldr	r3, [pc, #444]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a7e:	4b6d      	ldr	r3, [pc, #436]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d063      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8a:	4b6a      	ldr	r3, [pc, #424]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	099b      	lsrs	r3, r3, #6
 8002a90:	2200      	movs	r2, #0
 8002a92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	462b      	mov	r3, r5
 8002aaa:	f04f 0000 	mov.w	r0, #0
 8002aae:	f04f 0100 	mov.w	r1, #0
 8002ab2:	0159      	lsls	r1, r3, #5
 8002ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ab8:	0150      	lsls	r0, r2, #5
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4621      	mov	r1, r4
 8002ac0:	1a51      	subs	r1, r2, r1
 8002ac2:	6139      	str	r1, [r7, #16]
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ad8:	4659      	mov	r1, fp
 8002ada:	018b      	lsls	r3, r1, #6
 8002adc:	4651      	mov	r1, sl
 8002ade:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ae2:	4651      	mov	r1, sl
 8002ae4:	018a      	lsls	r2, r1, #6
 8002ae6:	4651      	mov	r1, sl
 8002ae8:	ebb2 0801 	subs.w	r8, r2, r1
 8002aec:	4659      	mov	r1, fp
 8002aee:	eb63 0901 	sbc.w	r9, r3, r1
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b06:	4690      	mov	r8, r2
 8002b08:	4699      	mov	r9, r3
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	eb18 0303 	adds.w	r3, r8, r3
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	462b      	mov	r3, r5
 8002b14:	eb49 0303 	adc.w	r3, r9, r3
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b26:	4629      	mov	r1, r5
 8002b28:	024b      	lsls	r3, r1, #9
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b30:	4621      	mov	r1, r4
 8002b32:	024a      	lsls	r2, r1, #9
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b44:	f7fd fb44 	bl	80001d0 <__aeabi_uldivmod>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b50:	e058      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b52:	4b38      	ldr	r3, [pc, #224]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	099b      	lsrs	r3, r3, #6
 8002b58:	2200      	movs	r2, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b62:	623b      	str	r3, [r7, #32]
 8002b64:	2300      	movs	r3, #0
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
 8002b68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	464b      	mov	r3, r9
 8002b70:	f04f 0000 	mov.w	r0, #0
 8002b74:	f04f 0100 	mov.w	r1, #0
 8002b78:	0159      	lsls	r1, r3, #5
 8002b7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b7e:	0150      	lsls	r0, r2, #5
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4641      	mov	r1, r8
 8002b86:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b8a:	4649      	mov	r1, r9
 8002b8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ba0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ba4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ba8:	eb63 050b 	sbc.w	r5, r3, fp
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	00eb      	lsls	r3, r5, #3
 8002bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bba:	00e2      	lsls	r2, r4, #3
 8002bbc:	4614      	mov	r4, r2
 8002bbe:	461d      	mov	r5, r3
 8002bc0:	4643      	mov	r3, r8
 8002bc2:	18e3      	adds	r3, r4, r3
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	eb45 0303 	adc.w	r3, r5, r3
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bda:	4629      	mov	r1, r5
 8002bdc:	028b      	lsls	r3, r1, #10
 8002bde:	4621      	mov	r1, r4
 8002be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be4:	4621      	mov	r1, r4
 8002be6:	028a      	lsls	r2, r1, #10
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	61fa      	str	r2, [r7, #28]
 8002bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf8:	f7fd faea 	bl	80001d0 <__aeabi_uldivmod>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4613      	mov	r3, r2
 8002c02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c1e:	e002      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3750      	adds	r7, #80	; 0x50
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	00f42400 	.word	0x00f42400
 8002c3c:	007a1200 	.word	0x007a1200

08002c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000000 	.word	0x20000000

08002c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c5c:	f7ff fff0 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	0a9b      	lsrs	r3, r3, #10
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4903      	ldr	r1, [pc, #12]	; (8002c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	0800a054 	.word	0x0800a054

08002c80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	220f      	movs	r2, #15
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c90:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <HAL_RCC_GetClockConfig+0x5c>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0203 	and.w	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <HAL_RCC_GetClockConfig+0x5c>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_RCC_GetClockConfig+0x5c>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cb4:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <HAL_RCC_GetClockConfig+0x5c>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	08db      	lsrs	r3, r3, #3
 8002cba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cc2:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <HAL_RCC_GetClockConfig+0x60>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0207 	and.w	r2, r3, #7
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	601a      	str	r2, [r3, #0]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40023c00 	.word	0x40023c00

08002ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e041      	b.n	8002d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f839 	bl	8002d82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f000 f9d8 	bl	80030d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d001      	beq.n	8002db0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e04e      	b.n	8002e4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a23      	ldr	r2, [pc, #140]	; (8002e5c <HAL_TIM_Base_Start_IT+0xc4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d022      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x80>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dda:	d01d      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x80>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1f      	ldr	r2, [pc, #124]	; (8002e60 <HAL_TIM_Base_Start_IT+0xc8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d018      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x80>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <HAL_TIM_Base_Start_IT+0xcc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x80>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1c      	ldr	r2, [pc, #112]	; (8002e68 <HAL_TIM_Base_Start_IT+0xd0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00e      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x80>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <HAL_TIM_Base_Start_IT+0xd4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d009      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x80>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x80>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d111      	bne.n	8002e3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d010      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3a:	e007      	b.n	8002e4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	40000400 	.word	0x40000400
 8002e64:	40000800 	.word	0x40000800
 8002e68:	40000c00 	.word	0x40000c00
 8002e6c:	40010400 	.word	0x40010400
 8002e70:	40014000 	.word	0x40014000
 8002e74:	40001800 	.word	0x40001800

08002e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d122      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d11b      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0202 	mvn.w	r2, #2
 8002ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f8ee 	bl	800309c <HAL_TIM_IC_CaptureCallback>
 8002ec0:	e005      	b.n	8002ece <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8e0 	bl	8003088 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f8f1 	bl	80030b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d122      	bne.n	8002f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d11b      	bne.n	8002f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0204 	mvn.w	r2, #4
 8002ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f8c4 	bl	800309c <HAL_TIM_IC_CaptureCallback>
 8002f14:	e005      	b.n	8002f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f8b6 	bl	8003088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f8c7 	bl	80030b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d122      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d11b      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0208 	mvn.w	r2, #8
 8002f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2204      	movs	r2, #4
 8002f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f89a 	bl	800309c <HAL_TIM_IC_CaptureCallback>
 8002f68:	e005      	b.n	8002f76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f88c 	bl	8003088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f89d 	bl	80030b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d122      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d11b      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0210 	mvn.w	r2, #16
 8002fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2208      	movs	r2, #8
 8002fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f870 	bl	800309c <HAL_TIM_IC_CaptureCallback>
 8002fbc:	e005      	b.n	8002fca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f862 	bl	8003088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f873 	bl	80030b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d10e      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d107      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0201 	mvn.w	r2, #1
 8002ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fd fb36 	bl	8000668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	2b80      	cmp	r3, #128	; 0x80
 8003008:	d10e      	bne.n	8003028 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003014:	2b80      	cmp	r3, #128	; 0x80
 8003016:	d107      	bne.n	8003028 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f902 	bl	800322c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003032:	2b40      	cmp	r3, #64	; 0x40
 8003034:	d10e      	bne.n	8003054 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d107      	bne.n	8003054 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800304c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f838 	bl	80030c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b20      	cmp	r3, #32
 8003060:	d10e      	bne.n	8003080 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	2b20      	cmp	r3, #32
 800306e:	d107      	bne.n	8003080 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0220 	mvn.w	r2, #32
 8003078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f8cc 	bl	8003218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a40      	ldr	r2, [pc, #256]	; (80031ec <TIM_Base_SetConfig+0x114>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d013      	beq.n	8003118 <TIM_Base_SetConfig+0x40>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f6:	d00f      	beq.n	8003118 <TIM_Base_SetConfig+0x40>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a3d      	ldr	r2, [pc, #244]	; (80031f0 <TIM_Base_SetConfig+0x118>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00b      	beq.n	8003118 <TIM_Base_SetConfig+0x40>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a3c      	ldr	r2, [pc, #240]	; (80031f4 <TIM_Base_SetConfig+0x11c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d007      	beq.n	8003118 <TIM_Base_SetConfig+0x40>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a3b      	ldr	r2, [pc, #236]	; (80031f8 <TIM_Base_SetConfig+0x120>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_Base_SetConfig+0x40>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a3a      	ldr	r2, [pc, #232]	; (80031fc <TIM_Base_SetConfig+0x124>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d108      	bne.n	800312a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a2f      	ldr	r2, [pc, #188]	; (80031ec <TIM_Base_SetConfig+0x114>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d02b      	beq.n	800318a <TIM_Base_SetConfig+0xb2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d027      	beq.n	800318a <TIM_Base_SetConfig+0xb2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a2c      	ldr	r2, [pc, #176]	; (80031f0 <TIM_Base_SetConfig+0x118>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d023      	beq.n	800318a <TIM_Base_SetConfig+0xb2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a2b      	ldr	r2, [pc, #172]	; (80031f4 <TIM_Base_SetConfig+0x11c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01f      	beq.n	800318a <TIM_Base_SetConfig+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a2a      	ldr	r2, [pc, #168]	; (80031f8 <TIM_Base_SetConfig+0x120>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01b      	beq.n	800318a <TIM_Base_SetConfig+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a29      	ldr	r2, [pc, #164]	; (80031fc <TIM_Base_SetConfig+0x124>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d017      	beq.n	800318a <TIM_Base_SetConfig+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a28      	ldr	r2, [pc, #160]	; (8003200 <TIM_Base_SetConfig+0x128>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <TIM_Base_SetConfig+0xb2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a27      	ldr	r2, [pc, #156]	; (8003204 <TIM_Base_SetConfig+0x12c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00f      	beq.n	800318a <TIM_Base_SetConfig+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a26      	ldr	r2, [pc, #152]	; (8003208 <TIM_Base_SetConfig+0x130>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00b      	beq.n	800318a <TIM_Base_SetConfig+0xb2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a25      	ldr	r2, [pc, #148]	; (800320c <TIM_Base_SetConfig+0x134>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <TIM_Base_SetConfig+0xb2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a24      	ldr	r2, [pc, #144]	; (8003210 <TIM_Base_SetConfig+0x138>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d003      	beq.n	800318a <TIM_Base_SetConfig+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a23      	ldr	r2, [pc, #140]	; (8003214 <TIM_Base_SetConfig+0x13c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d108      	bne.n	800319c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <TIM_Base_SetConfig+0x114>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d003      	beq.n	80031d0 <TIM_Base_SetConfig+0xf8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a0c      	ldr	r2, [pc, #48]	; (80031fc <TIM_Base_SetConfig+0x124>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d103      	bne.n	80031d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	615a      	str	r2, [r3, #20]
}
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40000400 	.word	0x40000400
 80031f4:	40000800 	.word	0x40000800
 80031f8:	40000c00 	.word	0x40000c00
 80031fc:	40010400 	.word	0x40010400
 8003200:	40014000 	.word	0x40014000
 8003204:	40014400 	.word	0x40014400
 8003208:	40014800 	.word	0x40014800
 800320c:	40001800 	.word	0x40001800
 8003210:	40001c00 	.word	0x40001c00
 8003214:	40002000 	.word	0x40002000

08003218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003240:	b084      	sub	sp, #16
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	f107 001c 	add.w	r0, r7, #28
 800324e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	2b01      	cmp	r3, #1
 8003256:	d122      	bne.n	800329e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800326c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003282:	2b01      	cmp	r3, #1
 8003284:	d105      	bne.n	8003292 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f001 fbee 	bl	8004a74 <USB_CoreReset>
 8003298:	4603      	mov	r3, r0
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	e01a      	b.n	80032d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f001 fbe2 	bl	8004a74 <USB_CoreReset>
 80032b0:	4603      	mov	r3, r0
 80032b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80032b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38
 80032c6:	e005      	b.n	80032d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d10b      	bne.n	80032f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f043 0206 	orr.w	r2, r3, #6
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f043 0220 	orr.w	r2, r3, #32
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032fe:	b004      	add	sp, #16
 8003300:	4770      	bx	lr
	...

08003304 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	4613      	mov	r3, r2
 8003310:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d165      	bne.n	80033e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4a41      	ldr	r2, [pc, #260]	; (8003420 <USB_SetTurnaroundTime+0x11c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d906      	bls.n	800332e <USB_SetTurnaroundTime+0x2a>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4a40      	ldr	r2, [pc, #256]	; (8003424 <USB_SetTurnaroundTime+0x120>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d202      	bcs.n	800332e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003328:	230f      	movs	r3, #15
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	e062      	b.n	80033f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4a3c      	ldr	r2, [pc, #240]	; (8003424 <USB_SetTurnaroundTime+0x120>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d306      	bcc.n	8003344 <USB_SetTurnaroundTime+0x40>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4a3b      	ldr	r2, [pc, #236]	; (8003428 <USB_SetTurnaroundTime+0x124>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d202      	bcs.n	8003344 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800333e:	230e      	movs	r3, #14
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	e057      	b.n	80033f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4a38      	ldr	r2, [pc, #224]	; (8003428 <USB_SetTurnaroundTime+0x124>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d306      	bcc.n	800335a <USB_SetTurnaroundTime+0x56>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4a37      	ldr	r2, [pc, #220]	; (800342c <USB_SetTurnaroundTime+0x128>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d202      	bcs.n	800335a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003354:	230d      	movs	r3, #13
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	e04c      	b.n	80033f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4a33      	ldr	r2, [pc, #204]	; (800342c <USB_SetTurnaroundTime+0x128>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d306      	bcc.n	8003370 <USB_SetTurnaroundTime+0x6c>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4a32      	ldr	r2, [pc, #200]	; (8003430 <USB_SetTurnaroundTime+0x12c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d802      	bhi.n	8003370 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800336a:	230c      	movs	r3, #12
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	e041      	b.n	80033f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4a2f      	ldr	r2, [pc, #188]	; (8003430 <USB_SetTurnaroundTime+0x12c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d906      	bls.n	8003386 <USB_SetTurnaroundTime+0x82>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4a2e      	ldr	r2, [pc, #184]	; (8003434 <USB_SetTurnaroundTime+0x130>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d802      	bhi.n	8003386 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003380:	230b      	movs	r3, #11
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	e036      	b.n	80033f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4a2a      	ldr	r2, [pc, #168]	; (8003434 <USB_SetTurnaroundTime+0x130>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d906      	bls.n	800339c <USB_SetTurnaroundTime+0x98>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4a29      	ldr	r2, [pc, #164]	; (8003438 <USB_SetTurnaroundTime+0x134>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d802      	bhi.n	800339c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003396:	230a      	movs	r3, #10
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	e02b      	b.n	80033f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4a26      	ldr	r2, [pc, #152]	; (8003438 <USB_SetTurnaroundTime+0x134>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d906      	bls.n	80033b2 <USB_SetTurnaroundTime+0xae>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4a25      	ldr	r2, [pc, #148]	; (800343c <USB_SetTurnaroundTime+0x138>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d202      	bcs.n	80033b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80033ac:	2309      	movs	r3, #9
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	e020      	b.n	80033f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	4a21      	ldr	r2, [pc, #132]	; (800343c <USB_SetTurnaroundTime+0x138>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d306      	bcc.n	80033c8 <USB_SetTurnaroundTime+0xc4>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	4a20      	ldr	r2, [pc, #128]	; (8003440 <USB_SetTurnaroundTime+0x13c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d802      	bhi.n	80033c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80033c2:	2308      	movs	r3, #8
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	e015      	b.n	80033f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <USB_SetTurnaroundTime+0x13c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d906      	bls.n	80033de <USB_SetTurnaroundTime+0xda>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4a1c      	ldr	r2, [pc, #112]	; (8003444 <USB_SetTurnaroundTime+0x140>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d202      	bcs.n	80033de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80033d8:	2307      	movs	r3, #7
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	e00a      	b.n	80033f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80033de:	2306      	movs	r3, #6
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	e007      	b.n	80033f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80033ea:	2309      	movs	r3, #9
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	e001      	b.n	80033f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80033f0:	2309      	movs	r3, #9
 80033f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	029b      	lsls	r3, r3, #10
 8003408:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800340c:	431a      	orrs	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	00d8acbf 	.word	0x00d8acbf
 8003424:	00e4e1c0 	.word	0x00e4e1c0
 8003428:	00f42400 	.word	0x00f42400
 800342c:	01067380 	.word	0x01067380
 8003430:	011a499f 	.word	0x011a499f
 8003434:	01312cff 	.word	0x01312cff
 8003438:	014ca43f 	.word	0x014ca43f
 800343c:	016e3600 	.word	0x016e3600
 8003440:	01a6ab1f 	.word	0x01a6ab1f
 8003444:	01e84800 	.word	0x01e84800

08003448 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f023 0201 	bic.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d115      	bne.n	80034da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80034ba:	2001      	movs	r0, #1
 80034bc:	f7fd fa3c 	bl	8000938 <HAL_Delay>
      ms++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3301      	adds	r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f001 fa45 	bl	8004956 <USB_GetMode>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d01e      	beq.n	8003510 <USB_SetCurrentMode+0x84>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b31      	cmp	r3, #49	; 0x31
 80034d6:	d9f0      	bls.n	80034ba <USB_SetCurrentMode+0x2e>
 80034d8:	e01a      	b.n	8003510 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d115      	bne.n	800350c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80034ec:	2001      	movs	r0, #1
 80034ee:	f7fd fa23 	bl	8000938 <HAL_Delay>
      ms++;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3301      	adds	r3, #1
 80034f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f001 fa2c 	bl	8004956 <USB_GetMode>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <USB_SetCurrentMode+0x84>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b31      	cmp	r3, #49	; 0x31
 8003508:	d9f0      	bls.n	80034ec <USB_SetCurrentMode+0x60>
 800350a:	e001      	b.n	8003510 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e005      	b.n	800351c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b32      	cmp	r3, #50	; 0x32
 8003514:	d101      	bne.n	800351a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003524:	b084      	sub	sp, #16
 8003526:	b580      	push	{r7, lr}
 8003528:	b086      	sub	sp, #24
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	e009      	b.n	8003558 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	3340      	adds	r3, #64	; 0x40
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	2200      	movs	r2, #0
 8003550:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	3301      	adds	r3, #1
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b0e      	cmp	r3, #14
 800355c:	d9f2      	bls.n	8003544 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800355e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d11c      	bne.n	800359e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003572:	f043 0302 	orr.w	r3, r3, #2
 8003576:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	639a      	str	r2, [r3, #56]	; 0x38
 800359c:	e00b      	b.n	80035b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80035bc:	461a      	mov	r2, r3
 80035be:	2300      	movs	r3, #0
 80035c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c8:	4619      	mov	r1, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d0:	461a      	mov	r2, r3
 80035d2:	680b      	ldr	r3, [r1, #0]
 80035d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d10c      	bne.n	80035f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80035dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d104      	bne.n	80035ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80035e2:	2100      	movs	r1, #0
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f965 	bl	80038b4 <USB_SetDevSpeed>
 80035ea:	e008      	b.n	80035fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80035ec:	2101      	movs	r1, #1
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f960 	bl	80038b4 <USB_SetDevSpeed>
 80035f4:	e003      	b.n	80035fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80035f6:	2103      	movs	r1, #3
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f95b 	bl	80038b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80035fe:	2110      	movs	r1, #16
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f8f3 	bl	80037ec <USB_FlushTxFifo>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f91f 	bl	8003854 <USB_FlushRxFifo>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003626:	461a      	mov	r2, r3
 8003628:	2300      	movs	r3, #0
 800362a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003632:	461a      	mov	r2, r3
 8003634:	2300      	movs	r3, #0
 8003636:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363e:	461a      	mov	r2, r3
 8003640:	2300      	movs	r3, #0
 8003642:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003644:	2300      	movs	r3, #0
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	e043      	b.n	80036d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800365c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003660:	d118      	bne.n	8003694 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003674:	461a      	mov	r2, r3
 8003676:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	e013      	b.n	80036a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368a:	461a      	mov	r2, r3
 800368c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e008      	b.n	80036a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a0:	461a      	mov	r2, r3
 80036a2:	2300      	movs	r3, #0
 80036a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b2:	461a      	mov	r2, r3
 80036b4:	2300      	movs	r3, #0
 80036b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c4:	461a      	mov	r2, r3
 80036c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	3301      	adds	r3, #1
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d3b7      	bcc.n	800364a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	e043      	b.n	8003768 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036f6:	d118      	bne.n	800372a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10a      	bne.n	8003714 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370a:	461a      	mov	r2, r3
 800370c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e013      	b.n	800373c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003720:	461a      	mov	r2, r3
 8003722:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	e008      	b.n	800373c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003736:	461a      	mov	r2, r3
 8003738:	2300      	movs	r3, #0
 800373a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003748:	461a      	mov	r2, r3
 800374a:	2300      	movs	r3, #0
 800374c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800375a:	461a      	mov	r2, r3
 800375c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003760:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	3301      	adds	r3, #1
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	429a      	cmp	r2, r3
 800376e:	d3b7      	bcc.n	80036e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800377e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003782:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003790:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f043 0210 	orr.w	r2, r3, #16
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699a      	ldr	r2, [r3, #24]
 80037a8:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <USB_DevInit+0x2c4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80037b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f043 0208 	orr.w	r2, r3, #8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80037c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d107      	bne.n	80037d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037d0:	f043 0304 	orr.w	r3, r3, #4
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037e4:	b004      	add	sp, #16
 80037e6:	4770      	bx	lr
 80037e8:	803c3800 	.word	0x803c3800

080037ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3301      	adds	r3, #1
 80037fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a13      	ldr	r2, [pc, #76]	; (8003850 <USB_FlushTxFifo+0x64>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d901      	bls.n	800380c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e01b      	b.n	8003844 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	daf2      	bge.n	80037fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	019b      	lsls	r3, r3, #6
 800381c:	f043 0220 	orr.w	r2, r3, #32
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3301      	adds	r3, #1
 8003828:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4a08      	ldr	r2, [pc, #32]	; (8003850 <USB_FlushTxFifo+0x64>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e006      	b.n	8003844 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b20      	cmp	r3, #32
 8003840:	d0f0      	beq.n	8003824 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	00030d40 	.word	0x00030d40

08003854 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3301      	adds	r3, #1
 8003864:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4a11      	ldr	r2, [pc, #68]	; (80038b0 <USB_FlushRxFifo+0x5c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e018      	b.n	80038a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	daf2      	bge.n	8003860 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2210      	movs	r2, #16
 8003882:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3301      	adds	r3, #1
 8003888:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4a08      	ldr	r2, [pc, #32]	; (80038b0 <USB_FlushRxFifo+0x5c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e006      	b.n	80038a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0310 	and.w	r3, r3, #16
 800389e:	2b10      	cmp	r3, #16
 80038a0:	d0f0      	beq.n	8003884 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	00030d40 	.word	0x00030d40

080038b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	78fb      	ldrb	r3, [r7, #3]
 80038ce:	68f9      	ldr	r1, [r7, #12]
 80038d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b087      	sub	sp, #28
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0306 	and.w	r3, r3, #6
 80038fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003906:	2300      	movs	r3, #0
 8003908:	75fb      	strb	r3, [r7, #23]
 800390a:	e00a      	b.n	8003922 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d002      	beq.n	8003918 <USB_GetDevSpeed+0x32>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b06      	cmp	r3, #6
 8003916:	d102      	bne.n	800391e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003918:	2302      	movs	r3, #2
 800391a:	75fb      	strb	r3, [r7, #23]
 800391c:	e001      	b.n	8003922 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800391e:	230f      	movs	r3, #15
 8003920:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003922:	7dfb      	ldrb	r3, [r7, #23]
}
 8003924:	4618      	mov	r0, r3
 8003926:	371c      	adds	r7, #28
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	785b      	ldrb	r3, [r3, #1]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d13a      	bne.n	80039c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	2101      	movs	r1, #1
 800395e:	fa01 f303 	lsl.w	r3, r1, r3
 8003962:	b29b      	uxth	r3, r3
 8003964:	68f9      	ldr	r1, [r7, #12]
 8003966:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800396a:	4313      	orrs	r3, r2
 800396c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d155      	bne.n	8003a30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	791b      	ldrb	r3, [r3, #4]
 800399e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80039a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	059b      	lsls	r3, r3, #22
 80039a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80039a8:	4313      	orrs	r3, r2
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	0151      	lsls	r1, r2, #5
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	440a      	add	r2, r1
 80039b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	e036      	b.n	8003a30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c8:	69da      	ldr	r2, [r3, #28]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	2101      	movs	r1, #1
 80039d4:	fa01 f303 	lsl.w	r3, r1, r3
 80039d8:	041b      	lsls	r3, r3, #16
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d11a      	bne.n	8003a30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	791b      	ldrb	r3, [r3, #4]
 8003a14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a16:	430b      	orrs	r3, r1
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	0151      	lsls	r1, r2, #5
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	440a      	add	r2, r1
 8003a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	785b      	ldrb	r3, [r3, #1]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d161      	bne.n	8003b20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a72:	d11f      	bne.n	8003ab4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	0151      	lsls	r1, r2, #5
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	440a      	add	r2, r1
 8003aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	68f9      	ldr	r1, [r7, #12]
 8003ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	68f9      	ldr	r1, [r7, #12]
 8003af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003af8:	4013      	ands	r3, r2
 8003afa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	0159      	lsls	r1, r3, #5
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	440b      	add	r3, r1
 8003b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b16:	4619      	mov	r1, r3
 8003b18:	4b35      	ldr	r3, [pc, #212]	; (8003bf0 <USB_DeactivateEndpoint+0x1b0>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
 8003b1e:	e060      	b.n	8003be2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b36:	d11f      	bne.n	8003b78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	0151      	lsls	r1, r2, #5
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	0151      	lsls	r1, r2, #5
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	440a      	add	r2, r1
 8003b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	2101      	movs	r1, #1
 8003b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	43db      	mvns	r3, r3
 8003b92:	68f9      	ldr	r1, [r7, #12]
 8003b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b98:	4013      	ands	r3, r2
 8003b9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	2101      	movs	r1, #1
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	041b      	lsls	r3, r3, #16
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	68f9      	ldr	r1, [r7, #12]
 8003bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	0159      	lsls	r1, r3, #5
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	440b      	add	r3, r1
 8003bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <USB_DeactivateEndpoint+0x1b4>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	ec337800 	.word	0xec337800
 8003bf4:	eff37800 	.word	0xeff37800

08003bf8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	; 0x28
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	4613      	mov	r3, r2
 8003c04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	785b      	ldrb	r3, [r3, #1]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	f040 815c 	bne.w	8003ed2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d132      	bne.n	8003c88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	0151      	lsls	r1, r2, #5
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	440a      	add	r2, r1
 8003c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	0151      	lsls	r1, r2, #5
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	440a      	add	r2, r1
 8003c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	0151      	lsls	r1, r2, #5
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	440a      	add	r2, r1
 8003c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c80:	0cdb      	lsrs	r3, r3, #19
 8003c82:	04db      	lsls	r3, r3, #19
 8003c84:	6113      	str	r3, [r2, #16]
 8003c86:	e074      	b.n	8003d72 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	0151      	lsls	r1, r2, #5
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	440a      	add	r2, r1
 8003c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca2:	0cdb      	lsrs	r3, r3, #19
 8003ca4:	04db      	lsls	r3, r3, #19
 8003ca6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	0151      	lsls	r1, r2, #5
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	440a      	add	r2, r1
 8003cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6999      	ldr	r1, [r3, #24]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	440b      	add	r3, r1
 8003ce4:	1e59      	subs	r1, r3, #1
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cee:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003cf0:	4b9d      	ldr	r3, [pc, #628]	; (8003f68 <USB_EPStartXfer+0x370>)
 8003cf2:	400b      	ands	r3, r1
 8003cf4:	69b9      	ldr	r1, [r7, #24]
 8003cf6:	0148      	lsls	r0, r1, #5
 8003cf8:	69f9      	ldr	r1, [r7, #28]
 8003cfa:	4401      	add	r1, r0
 8003cfc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d00:	4313      	orrs	r3, r2
 8003d02:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1a:	69b9      	ldr	r1, [r7, #24]
 8003d1c:	0148      	lsls	r0, r1, #5
 8003d1e:	69f9      	ldr	r1, [r7, #28]
 8003d20:	4401      	add	r1, r0
 8003d22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d26:	4313      	orrs	r3, r2
 8003d28:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	791b      	ldrb	r3, [r3, #4]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d11f      	bne.n	8003d72 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	0151      	lsls	r1, r2, #5
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	440a      	add	r2, r1
 8003d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003d50:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	0151      	lsls	r1, r2, #5
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	440a      	add	r2, r1
 8003d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d70:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d14b      	bne.n	8003e10 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	791b      	ldrb	r3, [r3, #4]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d128      	bne.n	8003dee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d110      	bne.n	8003dce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	0151      	lsls	r1, r2, #5
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	440a      	add	r2, r1
 8003dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	e00f      	b.n	8003dee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	0151      	lsls	r1, r2, #5
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	440a      	add	r2, r1
 8003de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	0151      	lsls	r1, r2, #5
 8003e00:	69fa      	ldr	r2, [r7, #28]
 8003e02:	440a      	add	r2, r1
 8003e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e133      	b.n	8004078 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	0151      	lsls	r1, r2, #5
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	440a      	add	r2, r1
 8003e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e2e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	791b      	ldrb	r3, [r3, #4]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d015      	beq.n	8003e64 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 811b 	beq.w	8004078 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	2101      	movs	r1, #1
 8003e54:	fa01 f303 	lsl.w	r3, r1, r3
 8003e58:	69f9      	ldr	r1, [r7, #28]
 8003e5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	634b      	str	r3, [r1, #52]	; 0x34
 8003e62:	e109      	b.n	8004078 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d110      	bne.n	8003e96 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	0151      	lsls	r1, r2, #5
 8003e86:	69fa      	ldr	r2, [r7, #28]
 8003e88:	440a      	add	r2, r1
 8003e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	e00f      	b.n	8003eb6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	0151      	lsls	r1, r2, #5
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	440a      	add	r2, r1
 8003eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	6919      	ldr	r1, [r3, #16]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	781a      	ldrb	r2, [r3, #0]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	b298      	uxth	r0, r3
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	4603      	mov	r3, r0
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fade 	bl	800448c <USB_WritePacket>
 8003ed0:	e0d2      	b.n	8004078 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eec:	0cdb      	lsrs	r3, r3, #19
 8003eee:	04db      	lsls	r3, r3, #19
 8003ef0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	0151      	lsls	r1, r2, #5
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	440a      	add	r2, r1
 8003f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f14:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d126      	bne.n	8003f6c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f34:	69b9      	ldr	r1, [r7, #24]
 8003f36:	0148      	lsls	r0, r1, #5
 8003f38:	69f9      	ldr	r1, [r7, #28]
 8003f3a:	4401      	add	r1, r0
 8003f3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f40:	4313      	orrs	r3, r2
 8003f42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	0151      	lsls	r1, r2, #5
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	440a      	add	r2, r1
 8003f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f62:	6113      	str	r3, [r2, #16]
 8003f64:	e03a      	b.n	8003fdc <USB_EPStartXfer+0x3e4>
 8003f66:	bf00      	nop
 8003f68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	699a      	ldr	r2, [r3, #24]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	4413      	add	r3, r2
 8003f76:	1e5a      	subs	r2, r3, #1
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	8afa      	ldrh	r2, [r7, #22]
 8003f88:	fb03 f202 	mul.w	r2, r3, r2
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	8afb      	ldrh	r3, [r7, #22]
 8003fa0:	04d9      	lsls	r1, r3, #19
 8003fa2:	4b38      	ldr	r3, [pc, #224]	; (8004084 <USB_EPStartXfer+0x48c>)
 8003fa4:	400b      	ands	r3, r1
 8003fa6:	69b9      	ldr	r1, [r7, #24]
 8003fa8:	0148      	lsls	r0, r1, #5
 8003faa:	69f9      	ldr	r1, [r7, #28]
 8003fac:	4401      	add	r1, r0
 8003fae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fcc:	69b9      	ldr	r1, [r7, #24]
 8003fce:	0148      	lsls	r0, r1, #5
 8003fd0:	69f9      	ldr	r1, [r7, #28]
 8003fd2:	4401      	add	r1, r0
 8003fd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d10d      	bne.n	8003ffe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	6919      	ldr	r1, [r3, #16]
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffa:	460a      	mov	r2, r1
 8003ffc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	791b      	ldrb	r3, [r3, #4]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d128      	bne.n	8004058 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d110      	bne.n	8004038 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	0151      	lsls	r1, r2, #5
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	440a      	add	r2, r1
 800402c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004030:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	e00f      	b.n	8004058 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	440a      	add	r2, r1
 800404e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004056:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	0151      	lsls	r1, r2, #5
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	440a      	add	r2, r1
 800406e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004072:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004076:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	1ff80000 	.word	0x1ff80000

08004088 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	4613      	mov	r3, r2
 8004094:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	785b      	ldrb	r3, [r3, #1]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	f040 80ce 	bne.w	8004246 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d132      	bne.n	8004118 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	0151      	lsls	r1, r2, #5
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	440a      	add	r2, r1
 80040c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	0151      	lsls	r1, r2, #5
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	440a      	add	r2, r1
 80040ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	0151      	lsls	r1, r2, #5
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	440a      	add	r2, r1
 800410c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004110:	0cdb      	lsrs	r3, r3, #19
 8004112:	04db      	lsls	r3, r3, #19
 8004114:	6113      	str	r3, [r2, #16]
 8004116:	e04e      	b.n	80041b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	0151      	lsls	r1, r2, #5
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	440a      	add	r2, r1
 800412e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004132:	0cdb      	lsrs	r3, r3, #19
 8004134:	04db      	lsls	r3, r3, #19
 8004136:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	0151      	lsls	r1, r2, #5
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	440a      	add	r2, r1
 800414e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004152:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004156:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800415a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	699a      	ldr	r2, [r3, #24]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	429a      	cmp	r2, r3
 8004166:	d903      	bls.n	8004170 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	0151      	lsls	r1, r2, #5
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	440a      	add	r2, r1
 8004186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800418a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800418e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a6:	6939      	ldr	r1, [r7, #16]
 80041a8:	0148      	lsls	r0, r1, #5
 80041aa:	6979      	ldr	r1, [r7, #20]
 80041ac:	4401      	add	r1, r0
 80041ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041b2:	4313      	orrs	r3, r2
 80041b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d11e      	bne.n	80041fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d009      	beq.n	80041d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d0:	461a      	mov	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	e097      	b.n	800432a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	0151      	lsls	r1, r2, #5
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	440a      	add	r2, r1
 8004210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004214:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004218:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8083 	beq.w	800432a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	2101      	movs	r1, #1
 8004236:	fa01 f303 	lsl.w	r3, r1, r3
 800423a:	6979      	ldr	r1, [r7, #20]
 800423c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004240:	4313      	orrs	r3, r2
 8004242:	634b      	str	r3, [r1, #52]	; 0x34
 8004244:	e071      	b.n	800432a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	0151      	lsls	r1, r2, #5
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	440a      	add	r2, r1
 800425c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004260:	0cdb      	lsrs	r3, r3, #19
 8004262:	04db      	lsls	r3, r3, #19
 8004264:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	0151      	lsls	r1, r2, #5
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	440a      	add	r2, r1
 800427c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004280:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004284:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004288:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	0151      	lsls	r1, r2, #5
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	440a      	add	r2, r1
 80042b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d8:	6939      	ldr	r1, [r7, #16]
 80042da:	0148      	lsls	r0, r1, #5
 80042dc:	6979      	ldr	r1, [r7, #20]
 80042de:	4401      	add	r1, r0
 80042e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042e4:	4313      	orrs	r3, r2
 80042e6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d10d      	bne.n	800430a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d009      	beq.n	800430a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	6919      	ldr	r1, [r3, #16]
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	460a      	mov	r2, r1
 8004308:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	440a      	add	r2, r1
 8004320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004324:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004328:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	371c      	adds	r7, #28
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	785b      	ldrb	r3, [r3, #1]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d14a      	bne.n	80043ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800436a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800436e:	f040 8086 	bne.w	800447e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	7812      	ldrb	r2, [r2, #0]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004390:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004394:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	7812      	ldrb	r2, [r2, #0]
 80043aa:	0151      	lsls	r1, r2, #5
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	440a      	add	r2, r1
 80043b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3301      	adds	r3, #1
 80043be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d902      	bls.n	80043d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	75fb      	strb	r3, [r7, #23]
          break;
 80043ce:	e056      	b.n	800447e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043e8:	d0e7      	beq.n	80043ba <USB_EPStopXfer+0x82>
 80043ea:	e048      	b.n	800447e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004404:	d13b      	bne.n	800447e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	7812      	ldrb	r2, [r2, #0]
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	440a      	add	r2, r1
 8004420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004424:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004428:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	7812      	ldrb	r2, [r2, #0]
 800443e:	0151      	lsls	r1, r2, #5
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	440a      	add	r2, r1
 8004444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004448:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800444c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3301      	adds	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f242 7210 	movw	r2, #10000	; 0x2710
 800445a:	4293      	cmp	r3, r2
 800445c:	d902      	bls.n	8004464 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
          break;
 8004462:	e00c      	b.n	800447e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800447c:	d0e7      	beq.n	800444e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800447e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004480:	4618      	mov	r0, r3
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800448c:	b480      	push	{r7}
 800448e:	b089      	sub	sp, #36	; 0x24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	4611      	mov	r1, r2
 8004498:	461a      	mov	r2, r3
 800449a:	460b      	mov	r3, r1
 800449c:	71fb      	strb	r3, [r7, #7]
 800449e:	4613      	mov	r3, r2
 80044a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80044aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d123      	bne.n	80044fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80044b2:	88bb      	ldrh	r3, [r7, #4]
 80044b4:	3303      	adds	r3, #3
 80044b6:	089b      	lsrs	r3, r3, #2
 80044b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80044ba:	2300      	movs	r3, #0
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	e018      	b.n	80044f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044c0:	79fb      	ldrb	r3, [r7, #7]
 80044c2:	031a      	lsls	r2, r3, #12
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044cc:	461a      	mov	r2, r3
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	3301      	adds	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	3301      	adds	r3, #1
 80044de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	3301      	adds	r3, #1
 80044e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3301      	adds	r3, #1
 80044ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	3301      	adds	r3, #1
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d3e2      	bcc.n	80044c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3724      	adds	r7, #36	; 0x24
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004508:	b480      	push	{r7}
 800450a:	b08b      	sub	sp, #44	; 0x2c
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	4613      	mov	r3, r2
 8004514:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	089b      	lsrs	r3, r3, #2
 8004522:	b29b      	uxth	r3, r3
 8004524:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800452e:	2300      	movs	r3, #0
 8004530:	623b      	str	r3, [r7, #32]
 8004532:	e014      	b.n	800455e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	3301      	adds	r3, #1
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	3301      	adds	r3, #1
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	3301      	adds	r3, #1
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	3301      	adds	r3, #1
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	3301      	adds	r3, #1
 800455c:	623b      	str	r3, [r7, #32]
 800455e:	6a3a      	ldr	r2, [r7, #32]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	429a      	cmp	r2, r3
 8004564:	d3e6      	bcc.n	8004534 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004566:	8bfb      	ldrh	r3, [r7, #30]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01e      	beq.n	80045aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004576:	461a      	mov	r2, r3
 8004578:	f107 0310 	add.w	r3, r7, #16
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	fa22 f303 	lsr.w	r3, r2, r3
 800458c:	b2da      	uxtb	r2, r3
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	701a      	strb	r2, [r3, #0]
      i++;
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	3301      	adds	r3, #1
 8004596:	623b      	str	r3, [r7, #32]
      pDest++;
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	3301      	adds	r3, #1
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800459e:	8bfb      	ldrh	r3, [r7, #30]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80045a4:	8bfb      	ldrh	r3, [r7, #30]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1ea      	bne.n	8004580 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	372c      	adds	r7, #44	; 0x2c
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	785b      	ldrb	r3, [r3, #1]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d12c      	bne.n	800462e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	db12      	blt.n	800460c <USB_EPSetStall+0x54>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00f      	beq.n	800460c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	440a      	add	r2, r1
 8004602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004606:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800460a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	0151      	lsls	r1, r2, #5
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	440a      	add	r2, r1
 8004622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004626:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	e02b      	b.n	8004686 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	db12      	blt.n	8004666 <USB_EPSetStall+0xae>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00f      	beq.n	8004666 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	0151      	lsls	r1, r2, #5
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	440a      	add	r2, r1
 800465c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004660:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004664:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	0151      	lsls	r1, r2, #5
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	440a      	add	r2, r1
 800467c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004684:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	785b      	ldrb	r3, [r3, #1]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d128      	bne.n	8004702 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	0151      	lsls	r1, r2, #5
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	440a      	add	r2, r1
 80046c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	791b      	ldrb	r3, [r3, #4]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d003      	beq.n	80046e0 <USB_EPClearStall+0x4c>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	791b      	ldrb	r3, [r3, #4]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d138      	bne.n	8004752 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	e027      	b.n	8004752 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	0151      	lsls	r1, r2, #5
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	440a      	add	r2, r1
 8004718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800471c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004720:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	791b      	ldrb	r3, [r3, #4]
 8004726:	2b03      	cmp	r3, #3
 8004728:	d003      	beq.n	8004732 <USB_EPClearStall+0x9e>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	791b      	ldrb	r3, [r3, #4]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d10f      	bne.n	8004752 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	440a      	add	r2, r1
 8004748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800474c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004750:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800477e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004782:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004794:	68f9      	ldr	r1, [r7, #12]
 8004796:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800479a:	4313      	orrs	r3, r2
 800479c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047c6:	f023 0303 	bic.w	r3, r3, #3
 80047ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047da:	f023 0302 	bic.w	r3, r3, #2
 80047de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004808:	f023 0303 	bic.w	r3, r3, #3
 800480c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800481c:	f043 0302 	orr.w	r3, r3, #2
 8004820:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4013      	ands	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004848:	68fb      	ldr	r3, [r7, #12]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	4013      	ands	r3, r2
 8004878:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	0c1b      	lsrs	r3, r3, #16
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	4013      	ands	r3, r2
 80048ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	b29b      	uxth	r3, r3
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048be:	b480      	push	{r7}
 80048c0:	b085      	sub	sp, #20
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	460b      	mov	r3, r1
 80048c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	4013      	ands	r3, r2
 80048ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048ec:	68bb      	ldr	r3, [r7, #8]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b087      	sub	sp, #28
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	460b      	mov	r3, r1
 8004904:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	fa22 f303 	lsr.w	r3, r2, r3
 800492a:	01db      	lsls	r3, r3, #7
 800492c:	b2db      	uxtb	r3, r3
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4013      	ands	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004948:	68bb      	ldr	r3, [r7, #8]
}
 800494a:	4618      	mov	r0, r3
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0301 	and.w	r3, r3, #1
}
 8004966:	4618      	mov	r0, r3
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004972:	b480      	push	{r7}
 8004974:	b085      	sub	sp, #20
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004990:	f023 0307 	bic.w	r3, r3, #7
 8004994:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	460b      	mov	r3, r1
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	333c      	adds	r3, #60	; 0x3c
 80049ce:	3304      	adds	r3, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4a26      	ldr	r2, [pc, #152]	; (8004a70 <USB_EP0_OutStart+0xb8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d90a      	bls.n	80049f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ec:	d101      	bne.n	80049f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e037      	b.n	8004a62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f8:	461a      	mov	r2, r3
 80049fa:	2300      	movs	r3, #0
 80049fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a20:	f043 0318 	orr.w	r3, r3, #24
 8004a24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004a38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004a3a:	7afb      	ldrb	r3, [r7, #11]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d10f      	bne.n	8004a60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a46:	461a      	mov	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a5a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	4f54300a 	.word	0x4f54300a

08004a74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3301      	adds	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4a13      	ldr	r2, [pc, #76]	; (8004ad8 <USB_CoreReset+0x64>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e01b      	b.n	8004aca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	daf2      	bge.n	8004a80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f043 0201 	orr.w	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3301      	adds	r3, #1
 8004aae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a09      	ldr	r2, [pc, #36]	; (8004ad8 <USB_CoreReset+0x64>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d901      	bls.n	8004abc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e006      	b.n	8004aca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d0f0      	beq.n	8004aaa <USB_CoreReset+0x36>

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	00030d40 	.word	0x00030d40

08004adc <__NVIC_SetPriority>:
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	6039      	str	r1, [r7, #0]
 8004ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	db0a      	blt.n	8004b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	490c      	ldr	r1, [pc, #48]	; (8004b28 <__NVIC_SetPriority+0x4c>)
 8004af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004afa:	0112      	lsls	r2, r2, #4
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	440b      	add	r3, r1
 8004b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004b04:	e00a      	b.n	8004b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	4908      	ldr	r1, [pc, #32]	; (8004b2c <__NVIC_SetPriority+0x50>)
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	3b04      	subs	r3, #4
 8004b14:	0112      	lsls	r2, r2, #4
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	440b      	add	r3, r1
 8004b1a:	761a      	strb	r2, [r3, #24]
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	e000e100 	.word	0xe000e100
 8004b2c:	e000ed00 	.word	0xe000ed00

08004b30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <SysTick_Handler+0x1c>)
 8004b36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004b38:	f002 f938 	bl	8006dac <xTaskGetSchedulerState>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d001      	beq.n	8004b46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004b42:	f000 fd99 	bl	8005678 <xPortSysTickHandler>
  }
}
 8004b46:	bf00      	nop
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	e000e010 	.word	0xe000e010

08004b50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004b54:	2100      	movs	r1, #0
 8004b56:	f06f 0004 	mvn.w	r0, #4
 8004b5a:	f7ff ffbf 	bl	8004adc <__NVIC_SetPriority>
#endif
}
 8004b5e:	bf00      	nop
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b6a:	f3ef 8305 	mrs	r3, IPSR
 8004b6e:	603b      	str	r3, [r7, #0]
  return(result);
 8004b70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004b76:	f06f 0305 	mvn.w	r3, #5
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	e00c      	b.n	8004b98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <osKernelInitialize+0x44>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d105      	bne.n	8004b92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b86:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <osKernelInitialize+0x44>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	e002      	b.n	8004b98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b92:	f04f 33ff 	mov.w	r3, #4294967295
 8004b96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b98:	687b      	ldr	r3, [r7, #4]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000170 	.word	0x20000170

08004bac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bb2:	f3ef 8305 	mrs	r3, IPSR
 8004bb6:	603b      	str	r3, [r7, #0]
  return(result);
 8004bb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004bbe:	f06f 0305 	mvn.w	r3, #5
 8004bc2:	607b      	str	r3, [r7, #4]
 8004bc4:	e010      	b.n	8004be8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <osKernelStart+0x48>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d109      	bne.n	8004be2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004bce:	f7ff ffbf 	bl	8004b50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <osKernelStart+0x48>)
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004bd8:	f001 fca0 	bl	800651c <vTaskStartScheduler>
      stat = osOK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	607b      	str	r3, [r7, #4]
 8004be0:	e002      	b.n	8004be8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004be2:	f04f 33ff 	mov.w	r3, #4294967295
 8004be6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004be8:	687b      	ldr	r3, [r7, #4]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000170 	.word	0x20000170

08004bf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08e      	sub	sp, #56	; 0x38
 8004bfc:	af04      	add	r7, sp, #16
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c08:	f3ef 8305 	mrs	r3, IPSR
 8004c0c:	617b      	str	r3, [r7, #20]
  return(result);
 8004c0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d17e      	bne.n	8004d12 <osThreadNew+0x11a>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d07b      	beq.n	8004d12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c1a:	2380      	movs	r3, #128	; 0x80
 8004c1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004c1e:	2318      	movs	r3, #24
 8004c20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004c26:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d045      	beq.n	8004cbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <osThreadNew+0x48>
        name = attr->name;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d008      	beq.n	8004c66 <osThreadNew+0x6e>
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b38      	cmp	r3, #56	; 0x38
 8004c58:	d805      	bhi.n	8004c66 <osThreadNew+0x6e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <osThreadNew+0x72>
        return (NULL);
 8004c66:	2300      	movs	r3, #0
 8004c68:	e054      	b.n	8004d14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	089b      	lsrs	r3, r3, #2
 8004c78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00e      	beq.n	8004ca0 <osThreadNew+0xa8>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2b5b      	cmp	r3, #91	; 0x5b
 8004c88:	d90a      	bls.n	8004ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d006      	beq.n	8004ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <osThreadNew+0xa8>
        mem = 1;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	e010      	b.n	8004cc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10c      	bne.n	8004cc2 <osThreadNew+0xca>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d108      	bne.n	8004cc2 <osThreadNew+0xca>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d104      	bne.n	8004cc2 <osThreadNew+0xca>
          mem = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	e001      	b.n	8004cc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d110      	bne.n	8004cea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cd0:	9202      	str	r2, [sp, #8]
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6a3a      	ldr	r2, [r7, #32]
 8004cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f001 fa46 	bl	8006170 <xTaskCreateStatic>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	e013      	b.n	8004d12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d110      	bne.n	8004d12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	f107 0310 	add.w	r3, r7, #16
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f001 fa91 	bl	800622a <xTaskCreate>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d001      	beq.n	8004d12 <osThreadNew+0x11a>
            hTask = NULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d12:	693b      	ldr	r3, [r7, #16]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3728      	adds	r7, #40	; 0x28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d24:	f3ef 8305 	mrs	r3, IPSR
 8004d28:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <osDelay+0x1c>
    stat = osErrorISR;
 8004d30:	f06f 0305 	mvn.w	r3, #5
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	e007      	b.n	8004d48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f001 fbb6 	bl	80064b4 <vTaskDelay>
    }
  }

  return (stat);
 8004d48:	68fb      	ldr	r3, [r7, #12]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4a07      	ldr	r2, [pc, #28]	; (8004d80 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4a06      	ldr	r2, [pc, #24]	; (8004d84 <vApplicationGetIdleTaskMemory+0x30>)
 8004d6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2280      	movs	r2, #128	; 0x80
 8004d70:	601a      	str	r2, [r3, #0]
}
 8004d72:	bf00      	nop
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	20000174 	.word	0x20000174
 8004d84:	200001d0 	.word	0x200001d0

08004d88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a07      	ldr	r2, [pc, #28]	; (8004db4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004d98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4a06      	ldr	r2, [pc, #24]	; (8004db8 <vApplicationGetTimerTaskMemory+0x30>)
 8004d9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004da6:	601a      	str	r2, [r3, #0]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	200003d0 	.word	0x200003d0
 8004db8:	2000042c 	.word	0x2000042c

08004dbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	; 0x28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004dc8:	f001 fc0e 	bl	80065e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004dcc:	4b5b      	ldr	r3, [pc, #364]	; (8004f3c <pvPortMalloc+0x180>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004dd4:	f000 f920 	bl	8005018 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004dd8:	4b59      	ldr	r3, [pc, #356]	; (8004f40 <pvPortMalloc+0x184>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f040 8093 	bne.w	8004f0c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01d      	beq.n	8004e28 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004dec:	2208      	movs	r2, #8
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4413      	add	r3, r2
 8004df2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d014      	beq.n	8004e28 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f023 0307 	bic.w	r3, r3, #7
 8004e04:	3308      	adds	r3, #8
 8004e06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e24:	bf00      	nop
 8004e26:	e7fe      	b.n	8004e26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d06e      	beq.n	8004f0c <pvPortMalloc+0x150>
 8004e2e:	4b45      	ldr	r3, [pc, #276]	; (8004f44 <pvPortMalloc+0x188>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d869      	bhi.n	8004f0c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e38:	4b43      	ldr	r3, [pc, #268]	; (8004f48 <pvPortMalloc+0x18c>)
 8004e3a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e3c:	4b42      	ldr	r3, [pc, #264]	; (8004f48 <pvPortMalloc+0x18c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e42:	e004      	b.n	8004e4e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d903      	bls.n	8004e60 <pvPortMalloc+0xa4>
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f1      	bne.n	8004e44 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e60:	4b36      	ldr	r3, [pc, #216]	; (8004f3c <pvPortMalloc+0x180>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d050      	beq.n	8004f0c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2208      	movs	r2, #8
 8004e70:	4413      	add	r3, r2
 8004e72:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	1ad2      	subs	r2, r2, r3
 8004e84:	2308      	movs	r3, #8
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d91f      	bls.n	8004ecc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4413      	add	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <pvPortMalloc+0xf8>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	613b      	str	r3, [r7, #16]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	1ad2      	subs	r2, r2, r3
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ec6:	69b8      	ldr	r0, [r7, #24]
 8004ec8:	f000 f908 	bl	80050dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ecc:	4b1d      	ldr	r3, [pc, #116]	; (8004f44 <pvPortMalloc+0x188>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	4a1b      	ldr	r2, [pc, #108]	; (8004f44 <pvPortMalloc+0x188>)
 8004ed8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004eda:	4b1a      	ldr	r3, [pc, #104]	; (8004f44 <pvPortMalloc+0x188>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b1b      	ldr	r3, [pc, #108]	; (8004f4c <pvPortMalloc+0x190>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d203      	bcs.n	8004eee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ee6:	4b17      	ldr	r3, [pc, #92]	; (8004f44 <pvPortMalloc+0x188>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a18      	ldr	r2, [pc, #96]	; (8004f4c <pvPortMalloc+0x190>)
 8004eec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <pvPortMalloc+0x184>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f02:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <pvPortMalloc+0x194>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3301      	adds	r3, #1
 8004f08:	4a11      	ldr	r2, [pc, #68]	; (8004f50 <pvPortMalloc+0x194>)
 8004f0a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f0c:	f001 fb7a 	bl	8006604 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <pvPortMalloc+0x174>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	60fb      	str	r3, [r7, #12]
}
 8004f2c:	bf00      	nop
 8004f2e:	e7fe      	b.n	8004f2e <pvPortMalloc+0x172>
	return pvReturn;
 8004f30:	69fb      	ldr	r3, [r7, #28]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3728      	adds	r7, #40	; 0x28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20004434 	.word	0x20004434
 8004f40:	20004448 	.word	0x20004448
 8004f44:	20004438 	.word	0x20004438
 8004f48:	2000442c 	.word	0x2000442c
 8004f4c:	2000443c 	.word	0x2000443c
 8004f50:	20004440 	.word	0x20004440

08004f54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d04d      	beq.n	8005002 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f66:	2308      	movs	r3, #8
 8004f68:	425b      	negs	r3, r3
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	4b24      	ldr	r3, [pc, #144]	; (800500c <vPortFree+0xb8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <vPortFree+0x44>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	60fb      	str	r3, [r7, #12]
}
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <vPortFree+0x62>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	60bb      	str	r3, [r7, #8]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	4b14      	ldr	r3, [pc, #80]	; (800500c <vPortFree+0xb8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01e      	beq.n	8005002 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d11a      	bne.n	8005002 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	4b0e      	ldr	r3, [pc, #56]	; (800500c <vPortFree+0xb8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	401a      	ands	r2, r3
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004fdc:	f001 fb04 	bl	80065e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <vPortFree+0xbc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4413      	add	r3, r2
 8004fea:	4a09      	ldr	r2, [pc, #36]	; (8005010 <vPortFree+0xbc>)
 8004fec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fee:	6938      	ldr	r0, [r7, #16]
 8004ff0:	f000 f874 	bl	80050dc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ff4:	4b07      	ldr	r3, [pc, #28]	; (8005014 <vPortFree+0xc0>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	4a06      	ldr	r2, [pc, #24]	; (8005014 <vPortFree+0xc0>)
 8004ffc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004ffe:	f001 fb01 	bl	8006604 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005002:	bf00      	nop
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20004448 	.word	0x20004448
 8005010:	20004438 	.word	0x20004438
 8005014:	20004444 	.word	0x20004444

08005018 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800501e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005022:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005024:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <prvHeapInit+0xac>)
 8005026:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00c      	beq.n	800504c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3307      	adds	r3, #7
 8005036:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0307 	bic.w	r3, r3, #7
 800503e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <prvHeapInit+0xac>)
 8005048:	4413      	add	r3, r2
 800504a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005050:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <prvHeapInit+0xb0>)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005056:	4b1c      	ldr	r3, [pc, #112]	; (80050c8 <prvHeapInit+0xb0>)
 8005058:	2200      	movs	r2, #0
 800505a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	4413      	add	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005064:	2208      	movs	r2, #8
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0307 	bic.w	r3, r3, #7
 8005072:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4a15      	ldr	r2, [pc, #84]	; (80050cc <prvHeapInit+0xb4>)
 8005078:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800507a:	4b14      	ldr	r3, [pc, #80]	; (80050cc <prvHeapInit+0xb4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2200      	movs	r2, #0
 8005080:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005082:	4b12      	ldr	r3, [pc, #72]	; (80050cc <prvHeapInit+0xb4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	1ad2      	subs	r2, r2, r3
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005098:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <prvHeapInit+0xb4>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4a0a      	ldr	r2, [pc, #40]	; (80050d0 <prvHeapInit+0xb8>)
 80050a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	4a09      	ldr	r2, [pc, #36]	; (80050d4 <prvHeapInit+0xbc>)
 80050ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050b0:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <prvHeapInit+0xc0>)
 80050b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050b6:	601a      	str	r2, [r3, #0]
}
 80050b8:	bf00      	nop
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	2000082c 	.word	0x2000082c
 80050c8:	2000442c 	.word	0x2000442c
 80050cc:	20004434 	.word	0x20004434
 80050d0:	2000443c 	.word	0x2000443c
 80050d4:	20004438 	.word	0x20004438
 80050d8:	20004448 	.word	0x20004448

080050dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050e4:	4b28      	ldr	r3, [pc, #160]	; (8005188 <prvInsertBlockIntoFreeList+0xac>)
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	e002      	b.n	80050f0 <prvInsertBlockIntoFreeList+0x14>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d8f7      	bhi.n	80050ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	4413      	add	r3, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	429a      	cmp	r2, r3
 800510a:	d108      	bne.n	800511e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	441a      	add	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	441a      	add	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d118      	bne.n	8005164 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	4b15      	ldr	r3, [pc, #84]	; (800518c <prvInsertBlockIntoFreeList+0xb0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d00d      	beq.n	800515a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	441a      	add	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	e008      	b.n	800516c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800515a:	4b0c      	ldr	r3, [pc, #48]	; (800518c <prvInsertBlockIntoFreeList+0xb0>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e003      	b.n	800516c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	429a      	cmp	r2, r3
 8005172:	d002      	beq.n	800517a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	2000442c 	.word	0x2000442c
 800518c:	20004434 	.word	0x20004434

08005190 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f103 0208 	add.w	r2, r3, #8
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f04f 32ff 	mov.w	r2, #4294967295
 80051a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f103 0208 	add.w	r2, r3, #8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f103 0208 	add.w	r2, r3, #8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	601a      	str	r2, [r3, #0]
}
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005232:	b480      	push	{r7}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005248:	d103      	bne.n	8005252 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	e00c      	b.n	800526c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3308      	adds	r3, #8
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	e002      	b.n	8005260 <vListInsert+0x2e>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	429a      	cmp	r2, r3
 800526a:	d2f6      	bcs.n	800525a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	601a      	str	r2, [r3, #0]
}
 8005298:	bf00      	nop
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6892      	ldr	r2, [r2, #8]
 80052ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6852      	ldr	r2, [r2, #4]
 80052c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d103      	bne.n	80052d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	1e5a      	subs	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3b04      	subs	r3, #4
 8005308:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3b04      	subs	r3, #4
 8005316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f023 0201 	bic.w	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3b04      	subs	r3, #4
 8005326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005328:	4a0c      	ldr	r2, [pc, #48]	; (800535c <pxPortInitialiseStack+0x64>)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3b14      	subs	r3, #20
 8005332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3b04      	subs	r3, #4
 800533e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f06f 0202 	mvn.w	r2, #2
 8005346:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3b20      	subs	r3, #32
 800534c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800534e:	68fb      	ldr	r3, [r7, #12]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	08005361 	.word	0x08005361

08005360 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800536a:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <prvTaskExitError+0x54>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	d00a      	beq.n	800538a <prvTaskExitError+0x2a>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	60fb      	str	r3, [r7, #12]
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <prvTaskExitError+0x28>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	60bb      	str	r3, [r7, #8]
}
 800539c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800539e:	bf00      	nop
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0fc      	beq.n	80053a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	2000000c 	.word	0x2000000c
	...

080053c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053c0:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <pxCurrentTCBConst2>)
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	6808      	ldr	r0, [r1, #0]
 80053c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ca:	f380 8809 	msr	PSP, r0
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f04f 0000 	mov.w	r0, #0
 80053d6:	f380 8811 	msr	BASEPRI, r0
 80053da:	4770      	bx	lr
 80053dc:	f3af 8000 	nop.w

080053e0 <pxCurrentTCBConst2>:
 80053e0:	20004494 	.word	0x20004494
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop

080053e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053e8:	4808      	ldr	r0, [pc, #32]	; (800540c <prvPortStartFirstTask+0x24>)
 80053ea:	6800      	ldr	r0, [r0, #0]
 80053ec:	6800      	ldr	r0, [r0, #0]
 80053ee:	f380 8808 	msr	MSP, r0
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f380 8814 	msr	CONTROL, r0
 80053fa:	b662      	cpsie	i
 80053fc:	b661      	cpsie	f
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	df00      	svc	0
 8005408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800540a:	bf00      	nop
 800540c:	e000ed08 	.word	0xe000ed08

08005410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005416:	4b46      	ldr	r3, [pc, #280]	; (8005530 <xPortStartScheduler+0x120>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a46      	ldr	r2, [pc, #280]	; (8005534 <xPortStartScheduler+0x124>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d10a      	bne.n	8005436 <xPortStartScheduler+0x26>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	613b      	str	r3, [r7, #16]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005436:	4b3e      	ldr	r3, [pc, #248]	; (8005530 <xPortStartScheduler+0x120>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a3f      	ldr	r2, [pc, #252]	; (8005538 <xPortStartScheduler+0x128>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d10a      	bne.n	8005456 <xPortStartScheduler+0x46>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	60fb      	str	r3, [r7, #12]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005456:	4b39      	ldr	r3, [pc, #228]	; (800553c <xPortStartScheduler+0x12c>)
 8005458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	22ff      	movs	r2, #255	; 0xff
 8005466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005478:	b2da      	uxtb	r2, r3
 800547a:	4b31      	ldr	r3, [pc, #196]	; (8005540 <xPortStartScheduler+0x130>)
 800547c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800547e:	4b31      	ldr	r3, [pc, #196]	; (8005544 <xPortStartScheduler+0x134>)
 8005480:	2207      	movs	r2, #7
 8005482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005484:	e009      	b.n	800549a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005486:	4b2f      	ldr	r3, [pc, #188]	; (8005544 <xPortStartScheduler+0x134>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3b01      	subs	r3, #1
 800548c:	4a2d      	ldr	r2, [pc, #180]	; (8005544 <xPortStartScheduler+0x134>)
 800548e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	b2db      	uxtb	r3, r3
 8005498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a2:	2b80      	cmp	r3, #128	; 0x80
 80054a4:	d0ef      	beq.n	8005486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054a6:	4b27      	ldr	r3, [pc, #156]	; (8005544 <xPortStartScheduler+0x134>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f1c3 0307 	rsb	r3, r3, #7
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d00a      	beq.n	80054c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	60bb      	str	r3, [r7, #8]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054c8:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <xPortStartScheduler+0x134>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <xPortStartScheduler+0x134>)
 80054d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054d2:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <xPortStartScheduler+0x134>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054da:	4a1a      	ldr	r2, [pc, #104]	; (8005544 <xPortStartScheduler+0x134>)
 80054dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054e6:	4b18      	ldr	r3, [pc, #96]	; (8005548 <xPortStartScheduler+0x138>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a17      	ldr	r2, [pc, #92]	; (8005548 <xPortStartScheduler+0x138>)
 80054ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054f2:	4b15      	ldr	r3, [pc, #84]	; (8005548 <xPortStartScheduler+0x138>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a14      	ldr	r2, [pc, #80]	; (8005548 <xPortStartScheduler+0x138>)
 80054f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054fe:	f000 f8dd 	bl	80056bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005502:	4b12      	ldr	r3, [pc, #72]	; (800554c <xPortStartScheduler+0x13c>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005508:	f000 f8fc 	bl	8005704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800550c:	4b10      	ldr	r3, [pc, #64]	; (8005550 <xPortStartScheduler+0x140>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a0f      	ldr	r2, [pc, #60]	; (8005550 <xPortStartScheduler+0x140>)
 8005512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005518:	f7ff ff66 	bl	80053e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800551c:	f001 f9da 	bl	80068d4 <vTaskSwitchContext>
	prvTaskExitError();
 8005520:	f7ff ff1e 	bl	8005360 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	e000ed00 	.word	0xe000ed00
 8005534:	410fc271 	.word	0x410fc271
 8005538:	410fc270 	.word	0x410fc270
 800553c:	e000e400 	.word	0xe000e400
 8005540:	2000444c 	.word	0x2000444c
 8005544:	20004450 	.word	0x20004450
 8005548:	e000ed20 	.word	0xe000ed20
 800554c:	2000000c 	.word	0x2000000c
 8005550:	e000ef34 	.word	0xe000ef34

08005554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
	__asm volatile
 800555a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	607b      	str	r3, [r7, #4]
}
 800556c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800556e:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <vPortEnterCritical+0x58>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3301      	adds	r3, #1
 8005574:	4a0d      	ldr	r2, [pc, #52]	; (80055ac <vPortEnterCritical+0x58>)
 8005576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005578:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <vPortEnterCritical+0x58>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d10f      	bne.n	80055a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <vPortEnterCritical+0x5c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	603b      	str	r3, [r7, #0]
}
 800559c:	bf00      	nop
 800559e:	e7fe      	b.n	800559e <vPortEnterCritical+0x4a>
	}
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	2000000c 	.word	0x2000000c
 80055b0:	e000ed04 	.word	0xe000ed04

080055b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055ba:	4b12      	ldr	r3, [pc, #72]	; (8005604 <vPortExitCritical+0x50>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <vPortExitCritical+0x24>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	607b      	str	r3, [r7, #4]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055d8:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <vPortExitCritical+0x50>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3b01      	subs	r3, #1
 80055de:	4a09      	ldr	r2, [pc, #36]	; (8005604 <vPortExitCritical+0x50>)
 80055e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055e2:	4b08      	ldr	r3, [pc, #32]	; (8005604 <vPortExitCritical+0x50>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d105      	bne.n	80055f6 <vPortExitCritical+0x42>
 80055ea:	2300      	movs	r3, #0
 80055ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	2000000c 	.word	0x2000000c
	...

08005610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005610:	f3ef 8009 	mrs	r0, PSP
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	4b15      	ldr	r3, [pc, #84]	; (8005670 <pxCurrentTCBConst>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	f01e 0f10 	tst.w	lr, #16
 8005620:	bf08      	it	eq
 8005622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562a:	6010      	str	r0, [r2, #0]
 800562c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005634:	f380 8811 	msr	BASEPRI, r0
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f001 f948 	bl	80068d4 <vTaskSwitchContext>
 8005644:	f04f 0000 	mov.w	r0, #0
 8005648:	f380 8811 	msr	BASEPRI, r0
 800564c:	bc09      	pop	{r0, r3}
 800564e:	6819      	ldr	r1, [r3, #0]
 8005650:	6808      	ldr	r0, [r1, #0]
 8005652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005656:	f01e 0f10 	tst.w	lr, #16
 800565a:	bf08      	it	eq
 800565c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005660:	f380 8809 	msr	PSP, r0
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	f3af 8000 	nop.w

08005670 <pxCurrentTCBConst>:
 8005670:	20004494 	.word	0x20004494
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop

08005678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	607b      	str	r3, [r7, #4]
}
 8005690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005692:	f001 f865 	bl	8006760 <xTaskIncrementTick>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <xPortSysTickHandler+0x40>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	2300      	movs	r3, #0
 80056a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f383 8811 	msr	BASEPRI, r3
}
 80056ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056c6:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <vPortSetupTimerInterrupt+0x38>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <vPortSetupTimerInterrupt+0x3c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a0a      	ldr	r2, [pc, #40]	; (80056fc <vPortSetupTimerInterrupt+0x40>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	4a09      	ldr	r2, [pc, #36]	; (8005700 <vPortSetupTimerInterrupt+0x44>)
 80056da:	3b01      	subs	r3, #1
 80056dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056de:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056e0:	2207      	movs	r2, #7
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	e000e010 	.word	0xe000e010
 80056f4:	e000e018 	.word	0xe000e018
 80056f8:	20000000 	.word	0x20000000
 80056fc:	10624dd3 	.word	0x10624dd3
 8005700:	e000e014 	.word	0xe000e014

08005704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005714 <vPortEnableVFP+0x10>
 8005708:	6801      	ldr	r1, [r0, #0]
 800570a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800570e:	6001      	str	r1, [r0, #0]
 8005710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005712:	bf00      	nop
 8005714:	e000ed88 	.word	0xe000ed88

08005718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800571e:	f3ef 8305 	mrs	r3, IPSR
 8005722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b0f      	cmp	r3, #15
 8005728:	d914      	bls.n	8005754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800572a:	4a17      	ldr	r2, [pc, #92]	; (8005788 <vPortValidateInterruptPriority+0x70>)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005734:	4b15      	ldr	r3, [pc, #84]	; (800578c <vPortValidateInterruptPriority+0x74>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	7afa      	ldrb	r2, [r7, #11]
 800573a:	429a      	cmp	r2, r3
 800573c:	d20a      	bcs.n	8005754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	607b      	str	r3, [r7, #4]
}
 8005750:	bf00      	nop
 8005752:	e7fe      	b.n	8005752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005754:	4b0e      	ldr	r3, [pc, #56]	; (8005790 <vPortValidateInterruptPriority+0x78>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800575c:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <vPortValidateInterruptPriority+0x7c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d90a      	bls.n	800577a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	603b      	str	r3, [r7, #0]
}
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <vPortValidateInterruptPriority+0x60>
	}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	e000e3f0 	.word	0xe000e3f0
 800578c:	2000444c 	.word	0x2000444c
 8005790:	e000ed0c 	.word	0xe000ed0c
 8005794:	20004450 	.word	0x20004450

08005798 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10a      	bne.n	80057c2 <xQueueGenericReset+0x2a>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	60bb      	str	r3, [r7, #8]
}
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80057c2:	f7ff fec7 	bl	8005554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057d2:	fb01 f303 	mul.w	r3, r1, r3
 80057d6:	441a      	add	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	3b01      	subs	r3, #1
 80057f4:	68f9      	ldr	r1, [r7, #12]
 80057f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057f8:	fb01 f303 	mul.w	r3, r1, r3
 80057fc:	441a      	add	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	22ff      	movs	r2, #255	; 0xff
 8005806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	22ff      	movs	r2, #255	; 0xff
 800580e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d114      	bne.n	8005842 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01a      	beq.n	8005856 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3310      	adds	r3, #16
 8005824:	4618      	mov	r0, r3
 8005826:	f001 f903 	bl	8006a30 <xTaskRemoveFromEventList>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d012      	beq.n	8005856 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <xQueueGenericReset+0xcc>)
 8005832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	e009      	b.n	8005856 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	3310      	adds	r3, #16
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff fca2 	bl	8005190 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3324      	adds	r3, #36	; 0x24
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff fc9d 	bl	8005190 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005856:	f7ff fead 	bl	80055b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800585a:	2301      	movs	r3, #1
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	e000ed04 	.word	0xe000ed04

08005868 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08e      	sub	sp, #56	; 0x38
 800586c:	af02      	add	r7, sp, #8
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10a      	bne.n	80058ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058aa:	bf00      	nop
 80058ac:	e7fe      	b.n	80058ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <xQueueGenericCreateStatic+0x52>
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <xQueueGenericCreateStatic+0x56>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <xQueueGenericCreateStatic+0x58>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	623b      	str	r3, [r7, #32]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d102      	bne.n	80058e6 <xQueueGenericCreateStatic+0x7e>
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <xQueueGenericCreateStatic+0x82>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <xQueueGenericCreateStatic+0x84>
 80058ea:	2300      	movs	r3, #0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	61fb      	str	r3, [r7, #28]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005906:	2350      	movs	r3, #80	; 0x50
 8005908:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b50      	cmp	r3, #80	; 0x50
 800590e:	d00a      	beq.n	8005926 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	61bb      	str	r3, [r7, #24]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005926:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00d      	beq.n	800594e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800593a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	4613      	mov	r3, r2
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f805 	bl	8005958 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005950:	4618      	mov	r0, r3
 8005952:	3730      	adds	r7, #48	; 0x30
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d103      	bne.n	8005974 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	e002      	b.n	800597a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005986:	2101      	movs	r1, #1
 8005988:	69b8      	ldr	r0, [r7, #24]
 800598a:	f7ff ff05 	bl	8005798 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	78fa      	ldrb	r2, [r7, #3]
 8005992:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08e      	sub	sp, #56	; 0x38
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059ae:	2300      	movs	r3, #0
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <xQueueGenericSend+0x32>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d103      	bne.n	80059e0 <xQueueGenericSend+0x40>
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <xQueueGenericSend+0x44>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e000      	b.n	80059e6 <xQueueGenericSend+0x46>
 80059e4:	2300      	movs	r3, #0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10a      	bne.n	8005a00 <xQueueGenericSend+0x60>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059fc:	bf00      	nop
 80059fe:	e7fe      	b.n	80059fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d103      	bne.n	8005a0e <xQueueGenericSend+0x6e>
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <xQueueGenericSend+0x72>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <xQueueGenericSend+0x74>
 8005a12:	2300      	movs	r3, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <xQueueGenericSend+0x8e>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	623b      	str	r3, [r7, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a2e:	f001 f9bd 	bl	8006dac <xTaskGetSchedulerState>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <xQueueGenericSend+0x9e>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <xQueueGenericSend+0xa2>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e000      	b.n	8005a44 <xQueueGenericSend+0xa4>
 8005a42:	2300      	movs	r3, #0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <xQueueGenericSend+0xbe>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	61fb      	str	r3, [r7, #28]
}
 8005a5a:	bf00      	nop
 8005a5c:	e7fe      	b.n	8005a5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a5e:	f7ff fd79 	bl	8005554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d302      	bcc.n	8005a74 <xQueueGenericSend+0xd4>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d129      	bne.n	8005ac8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a7a:	f000 fa0b 	bl	8005e94 <prvCopyDataToQueue>
 8005a7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d010      	beq.n	8005aaa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	3324      	adds	r3, #36	; 0x24
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 ffcf 	bl	8006a30 <xTaskRemoveFromEventList>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d013      	beq.n	8005ac0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a98:	4b3f      	ldr	r3, [pc, #252]	; (8005b98 <xQueueGenericSend+0x1f8>)
 8005a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	e00a      	b.n	8005ac0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d007      	beq.n	8005ac0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ab0:	4b39      	ldr	r3, [pc, #228]	; (8005b98 <xQueueGenericSend+0x1f8>)
 8005ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ac0:	f7ff fd78 	bl	80055b4 <vPortExitCritical>
				return pdPASS;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e063      	b.n	8005b90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d103      	bne.n	8005ad6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ace:	f7ff fd71 	bl	80055b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e05c      	b.n	8005b90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d106      	bne.n	8005aea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005adc:	f107 0314 	add.w	r3, r7, #20
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f001 f809 	bl	8006af8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aea:	f7ff fd63 	bl	80055b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aee:	f000 fd7b 	bl	80065e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005af2:	f7ff fd2f 	bl	8005554 <vPortEnterCritical>
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005afc:	b25b      	sxtb	r3, r3
 8005afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b02:	d103      	bne.n	8005b0c <xQueueGenericSend+0x16c>
 8005b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b12:	b25b      	sxtb	r3, r3
 8005b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b18:	d103      	bne.n	8005b22 <xQueueGenericSend+0x182>
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b22:	f7ff fd47 	bl	80055b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b26:	1d3a      	adds	r2, r7, #4
 8005b28:	f107 0314 	add.w	r3, r7, #20
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fff8 	bl	8006b24 <xTaskCheckForTimeOut>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d124      	bne.n	8005b84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b3c:	f000 faa2 	bl	8006084 <prvIsQueueFull>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d018      	beq.n	8005b78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	3310      	adds	r3, #16
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 ff1e 	bl	8006990 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b56:	f000 fa2d 	bl	8005fb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b5a:	f000 fd53 	bl	8006604 <xTaskResumeAll>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f47f af7c 	bne.w	8005a5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b66:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <xQueueGenericSend+0x1f8>)
 8005b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	e772      	b.n	8005a5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b7a:	f000 fa1b 	bl	8005fb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b7e:	f000 fd41 	bl	8006604 <xTaskResumeAll>
 8005b82:	e76c      	b.n	8005a5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b86:	f000 fa15 	bl	8005fb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b8a:	f000 fd3b 	bl	8006604 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3738      	adds	r7, #56	; 0x38
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b090      	sub	sp, #64	; 0x40
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bc6:	bf00      	nop
 8005bc8:	e7fe      	b.n	8005bc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d103      	bne.n	8005bd8 <xQueueGenericSendFromISR+0x3c>
 8005bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <xQueueGenericSendFromISR+0x40>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <xQueueGenericSendFromISR+0x42>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10a      	bne.n	8005bf8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d103      	bne.n	8005c06 <xQueueGenericSendFromISR+0x6a>
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <xQueueGenericSendFromISR+0x6e>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e000      	b.n	8005c0c <xQueueGenericSendFromISR+0x70>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	623b      	str	r3, [r7, #32]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c26:	f7ff fd77 	bl	8005718 <vPortValidateInterruptPriority>
	__asm volatile
 8005c2a:	f3ef 8211 	mrs	r2, BASEPRI
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	61fa      	str	r2, [r7, #28]
 8005c40:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005c42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d302      	bcc.n	8005c58 <xQueueGenericSendFromISR+0xbc>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d12f      	bne.n	8005cb8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c6e:	f000 f911 	bl	8005e94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7a:	d112      	bne.n	8005ca2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d016      	beq.n	8005cb2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c86:	3324      	adds	r3, #36	; 0x24
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fed1 	bl	8006a30 <xTaskRemoveFromEventList>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00e      	beq.n	8005cb2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00b      	beq.n	8005cb2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	e007      	b.n	8005cb2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ca2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	b25a      	sxtb	r2, r3
 8005cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005cb6:	e001      	b.n	8005cbc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbe:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f383 8811 	msr	BASEPRI, r3
}
 8005cc6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3740      	adds	r7, #64	; 0x40
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08c      	sub	sp, #48	; 0x30
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <xQueueReceive+0x30>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	623b      	str	r3, [r7, #32]
}
 8005d00:	bf00      	nop
 8005d02:	e7fe      	b.n	8005d02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <xQueueReceive+0x3e>
 8005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <xQueueReceive+0x42>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <xQueueReceive+0x44>
 8005d16:	2300      	movs	r3, #0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <xQueueReceive+0x5e>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	61fb      	str	r3, [r7, #28]
}
 8005d2e:	bf00      	nop
 8005d30:	e7fe      	b.n	8005d30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d32:	f001 f83b 	bl	8006dac <xTaskGetSchedulerState>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <xQueueReceive+0x6e>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <xQueueReceive+0x72>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <xQueueReceive+0x74>
 8005d46:	2300      	movs	r3, #0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10a      	bne.n	8005d62 <xQueueReceive+0x8e>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	61bb      	str	r3, [r7, #24]
}
 8005d5e:	bf00      	nop
 8005d60:	e7fe      	b.n	8005d60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d62:	f7ff fbf7 	bl	8005554 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d01f      	beq.n	8005db2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d76:	f000 f8f7 	bl	8005f68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	1e5a      	subs	r2, r3, #1
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00f      	beq.n	8005daa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	3310      	adds	r3, #16
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fe4e 	bl	8006a30 <xTaskRemoveFromEventList>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d007      	beq.n	8005daa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d9a:	4b3d      	ldr	r3, [pc, #244]	; (8005e90 <xQueueReceive+0x1bc>)
 8005d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005daa:	f7ff fc03 	bl	80055b4 <vPortExitCritical>
				return pdPASS;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e069      	b.n	8005e86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d103      	bne.n	8005dc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005db8:	f7ff fbfc 	bl	80055b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e062      	b.n	8005e86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dc6:	f107 0310 	add.w	r3, r7, #16
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fe94 	bl	8006af8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dd4:	f7ff fbee 	bl	80055b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dd8:	f000 fc06 	bl	80065e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ddc:	f7ff fbba 	bl	8005554 <vPortEnterCritical>
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005de6:	b25b      	sxtb	r3, r3
 8005de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dec:	d103      	bne.n	8005df6 <xQueueReceive+0x122>
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dfc:	b25b      	sxtb	r3, r3
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	d103      	bne.n	8005e0c <xQueueReceive+0x138>
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e0c:	f7ff fbd2 	bl	80055b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e10:	1d3a      	adds	r2, r7, #4
 8005e12:	f107 0310 	add.w	r3, r7, #16
 8005e16:	4611      	mov	r1, r2
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fe83 	bl	8006b24 <xTaskCheckForTimeOut>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d123      	bne.n	8005e6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e26:	f000 f917 	bl	8006058 <prvIsQueueEmpty>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d017      	beq.n	8005e60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	3324      	adds	r3, #36	; 0x24
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	4611      	mov	r1, r2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fda9 	bl	8006990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e40:	f000 f8b8 	bl	8005fb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e44:	f000 fbde 	bl	8006604 <xTaskResumeAll>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d189      	bne.n	8005d62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005e4e:	4b10      	ldr	r3, [pc, #64]	; (8005e90 <xQueueReceive+0x1bc>)
 8005e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	e780      	b.n	8005d62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e62:	f000 f8a7 	bl	8005fb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e66:	f000 fbcd 	bl	8006604 <xTaskResumeAll>
 8005e6a:	e77a      	b.n	8005d62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e6e:	f000 f8a1 	bl	8005fb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e72:	f000 fbc7 	bl	8006604 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e78:	f000 f8ee 	bl	8006058 <prvIsQueueEmpty>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f43f af6f 	beq.w	8005d62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3730      	adds	r7, #48	; 0x30
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	e000ed04 	.word	0xe000ed04

08005e94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10d      	bne.n	8005ece <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d14d      	bne.n	8005f56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 ff92 	bl	8006de8 <xTaskPriorityDisinherit>
 8005ec4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	609a      	str	r2, [r3, #8]
 8005ecc:	e043      	b.n	8005f56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d119      	bne.n	8005f08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6858      	ldr	r0, [r3, #4]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	461a      	mov	r2, r3
 8005ede:	68b9      	ldr	r1, [r7, #8]
 8005ee0:	f004 f836 	bl	8009f50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	441a      	add	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d32b      	bcc.n	8005f56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	605a      	str	r2, [r3, #4]
 8005f06:	e026      	b.n	8005f56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	68d8      	ldr	r0, [r3, #12]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	461a      	mov	r2, r3
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	f004 f81c 	bl	8009f50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	425b      	negs	r3, r3
 8005f22:	441a      	add	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d207      	bcs.n	8005f44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	425b      	negs	r3, r3
 8005f3e:	441a      	add	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d105      	bne.n	8005f56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f5e:	697b      	ldr	r3, [r7, #20]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d018      	beq.n	8005fac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	441a      	add	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d303      	bcc.n	8005f9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68d9      	ldr	r1, [r3, #12]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6838      	ldr	r0, [r7, #0]
 8005fa8:	f003 ffd2 	bl	8009f50 <memcpy>
	}
}
 8005fac:	bf00      	nop
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fbc:	f7ff faca 	bl	8005554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fc8:	e011      	b.n	8005fee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d012      	beq.n	8005ff8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3324      	adds	r3, #36	; 0x24
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fd2a 	bl	8006a30 <xTaskRemoveFromEventList>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fe2:	f000 fe01 	bl	8006be8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	dce9      	bgt.n	8005fca <prvUnlockQueue+0x16>
 8005ff6:	e000      	b.n	8005ffa <prvUnlockQueue+0x46>
					break;
 8005ff8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	22ff      	movs	r2, #255	; 0xff
 8005ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006002:	f7ff fad7 	bl	80055b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006006:	f7ff faa5 	bl	8005554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006010:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006012:	e011      	b.n	8006038 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d012      	beq.n	8006042 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3310      	adds	r3, #16
 8006020:	4618      	mov	r0, r3
 8006022:	f000 fd05 	bl	8006a30 <xTaskRemoveFromEventList>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800602c:	f000 fddc 	bl	8006be8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	3b01      	subs	r3, #1
 8006034:	b2db      	uxtb	r3, r3
 8006036:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800603c:	2b00      	cmp	r3, #0
 800603e:	dce9      	bgt.n	8006014 <prvUnlockQueue+0x60>
 8006040:	e000      	b.n	8006044 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006042:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	22ff      	movs	r2, #255	; 0xff
 8006048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800604c:	f7ff fab2 	bl	80055b4 <vPortExitCritical>
}
 8006050:	bf00      	nop
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006060:	f7ff fa78 	bl	8005554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	2b00      	cmp	r3, #0
 800606a:	d102      	bne.n	8006072 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800606c:	2301      	movs	r3, #1
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	e001      	b.n	8006076 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006076:	f7ff fa9d 	bl	80055b4 <vPortExitCritical>

	return xReturn;
 800607a:	68fb      	ldr	r3, [r7, #12]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800608c:	f7ff fa62 	bl	8005554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006098:	429a      	cmp	r2, r3
 800609a:	d102      	bne.n	80060a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800609c:	2301      	movs	r3, #1
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	e001      	b.n	80060a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060a6:	f7ff fa85 	bl	80055b4 <vPortExitCritical>

	return xReturn;
 80060aa:	68fb      	ldr	r3, [r7, #12]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	e014      	b.n	80060ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060c4:	4a0f      	ldr	r2, [pc, #60]	; (8006104 <vQueueAddToRegistry+0x50>)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10b      	bne.n	80060e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060d0:	490c      	ldr	r1, [pc, #48]	; (8006104 <vQueueAddToRegistry+0x50>)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060da:	4a0a      	ldr	r2, [pc, #40]	; (8006104 <vQueueAddToRegistry+0x50>)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	4413      	add	r3, r2
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060e6:	e006      	b.n	80060f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3301      	adds	r3, #1
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b07      	cmp	r3, #7
 80060f2:	d9e7      	bls.n	80060c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060f4:	bf00      	nop
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20004454 	.word	0x20004454

08006108 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006118:	f7ff fa1c 	bl	8005554 <vPortEnterCritical>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006122:	b25b      	sxtb	r3, r3
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d103      	bne.n	8006132 <vQueueWaitForMessageRestricted+0x2a>
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006138:	b25b      	sxtb	r3, r3
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613e:	d103      	bne.n	8006148 <vQueueWaitForMessageRestricted+0x40>
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006148:	f7ff fa34 	bl	80055b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	2b00      	cmp	r3, #0
 8006152:	d106      	bne.n	8006162 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	3324      	adds	r3, #36	; 0x24
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	68b9      	ldr	r1, [r7, #8]
 800615c:	4618      	mov	r0, r3
 800615e:	f000 fc3b 	bl	80069d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006162:	6978      	ldr	r0, [r7, #20]
 8006164:	f7ff ff26 	bl	8005fb4 <prvUnlockQueue>
	}
 8006168:	bf00      	nop
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08e      	sub	sp, #56	; 0x38
 8006174:	af04      	add	r7, sp, #16
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
 800617c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800617e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	623b      	str	r3, [r7, #32]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	61fb      	str	r3, [r7, #28]
}
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061b6:	235c      	movs	r3, #92	; 0x5c
 80061b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b5c      	cmp	r3, #92	; 0x5c
 80061be:	d00a      	beq.n	80061d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	61bb      	str	r3, [r7, #24]
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d01e      	beq.n	800621c <xTaskCreateStatic+0xac>
 80061de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d01b      	beq.n	800621c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	2202      	movs	r2, #2
 80061f2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061f6:	2300      	movs	r3, #0
 80061f8:	9303      	str	r3, [sp, #12]
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	9302      	str	r3, [sp, #8]
 80061fe:	f107 0314 	add.w	r3, r7, #20
 8006202:	9301      	str	r3, [sp, #4]
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f850 	bl	80062b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006214:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006216:	f000 f8dd 	bl	80063d4 <prvAddNewTaskToReadyList>
 800621a:	e001      	b.n	8006220 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006220:	697b      	ldr	r3, [r7, #20]
	}
 8006222:	4618      	mov	r0, r3
 8006224:	3728      	adds	r7, #40	; 0x28
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800622a:	b580      	push	{r7, lr}
 800622c:	b08c      	sub	sp, #48	; 0x30
 800622e:	af04      	add	r7, sp, #16
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	603b      	str	r3, [r7, #0]
 8006236:	4613      	mov	r3, r2
 8006238:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe fdbc 	bl	8004dbc <pvPortMalloc>
 8006244:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00e      	beq.n	800626a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800624c:	205c      	movs	r0, #92	; 0x5c
 800624e:	f7fe fdb5 	bl	8004dbc <pvPortMalloc>
 8006252:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	631a      	str	r2, [r3, #48]	; 0x30
 8006260:	e005      	b.n	800626e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006262:	6978      	ldr	r0, [r7, #20]
 8006264:	f7fe fe76 	bl	8004f54 <vPortFree>
 8006268:	e001      	b.n	800626e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d017      	beq.n	80062a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800627c:	88fa      	ldrh	r2, [r7, #6]
 800627e:	2300      	movs	r3, #0
 8006280:	9303      	str	r3, [sp, #12]
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	9302      	str	r3, [sp, #8]
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68b9      	ldr	r1, [r7, #8]
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 f80e 	bl	80062b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006298:	69f8      	ldr	r0, [r7, #28]
 800629a:	f000 f89b 	bl	80063d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800629e:	2301      	movs	r3, #1
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	e002      	b.n	80062aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062a4:	f04f 33ff 	mov.w	r3, #4294967295
 80062a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062aa:	69bb      	ldr	r3, [r7, #24]
	}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3720      	adds	r7, #32
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b088      	sub	sp, #32
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	461a      	mov	r2, r3
 80062cc:	21a5      	movs	r1, #165	; 0xa5
 80062ce:	f003 fe13 	bl	8009ef8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062dc:	3b01      	subs	r3, #1
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	f023 0307 	bic.w	r3, r3, #7
 80062ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <prvInitialiseNewTask+0x58>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	617b      	str	r3, [r7, #20]
}
 8006308:	bf00      	nop
 800630a:	e7fe      	b.n	800630a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d01f      	beq.n	8006352 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006312:	2300      	movs	r3, #0
 8006314:	61fb      	str	r3, [r7, #28]
 8006316:	e012      	b.n	800633e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	7819      	ldrb	r1, [r3, #0]
 8006320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	3334      	adds	r3, #52	; 0x34
 8006328:	460a      	mov	r2, r1
 800632a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	4413      	add	r3, r2
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d006      	beq.n	8006346 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	3301      	adds	r3, #1
 800633c:	61fb      	str	r3, [r7, #28]
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	2b0f      	cmp	r3, #15
 8006342:	d9e9      	bls.n	8006318 <prvInitialiseNewTask+0x64>
 8006344:	e000      	b.n	8006348 <prvInitialiseNewTask+0x94>
			{
				break;
 8006346:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006350:	e003      	b.n	800635a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	2b37      	cmp	r3, #55	; 0x37
 800635e:	d901      	bls.n	8006364 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006360:	2337      	movs	r3, #55	; 0x37
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006368:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	2200      	movs	r2, #0
 8006374:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	3304      	adds	r3, #4
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe ff28 	bl	80051d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	3318      	adds	r3, #24
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe ff23 	bl	80051d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800638e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800639e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	2200      	movs	r2, #0
 80063a4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	68f9      	ldr	r1, [r7, #12]
 80063b2:	69b8      	ldr	r0, [r7, #24]
 80063b4:	f7fe ffa0 	bl	80052f8 <pxPortInitialiseStack>
 80063b8:	4602      	mov	r2, r0
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063ca:	bf00      	nop
 80063cc:	3720      	adds	r7, #32
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063dc:	f7ff f8ba 	bl	8005554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063e0:	4b2d      	ldr	r3, [pc, #180]	; (8006498 <prvAddNewTaskToReadyList+0xc4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3301      	adds	r3, #1
 80063e6:	4a2c      	ldr	r2, [pc, #176]	; (8006498 <prvAddNewTaskToReadyList+0xc4>)
 80063e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063ea:	4b2c      	ldr	r3, [pc, #176]	; (800649c <prvAddNewTaskToReadyList+0xc8>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063f2:	4a2a      	ldr	r2, [pc, #168]	; (800649c <prvAddNewTaskToReadyList+0xc8>)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063f8:	4b27      	ldr	r3, [pc, #156]	; (8006498 <prvAddNewTaskToReadyList+0xc4>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d110      	bne.n	8006422 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006400:	f000 fc16 	bl	8006c30 <prvInitialiseTaskLists>
 8006404:	e00d      	b.n	8006422 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006406:	4b26      	ldr	r3, [pc, #152]	; (80064a0 <prvAddNewTaskToReadyList+0xcc>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d109      	bne.n	8006422 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800640e:	4b23      	ldr	r3, [pc, #140]	; (800649c <prvAddNewTaskToReadyList+0xc8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	429a      	cmp	r2, r3
 800641a:	d802      	bhi.n	8006422 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800641c:	4a1f      	ldr	r2, [pc, #124]	; (800649c <prvAddNewTaskToReadyList+0xc8>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006422:	4b20      	ldr	r3, [pc, #128]	; (80064a4 <prvAddNewTaskToReadyList+0xd0>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3301      	adds	r3, #1
 8006428:	4a1e      	ldr	r2, [pc, #120]	; (80064a4 <prvAddNewTaskToReadyList+0xd0>)
 800642a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800642c:	4b1d      	ldr	r3, [pc, #116]	; (80064a4 <prvAddNewTaskToReadyList+0xd0>)
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006438:	4b1b      	ldr	r3, [pc, #108]	; (80064a8 <prvAddNewTaskToReadyList+0xd4>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	d903      	bls.n	8006448 <prvAddNewTaskToReadyList+0x74>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	4a18      	ldr	r2, [pc, #96]	; (80064a8 <prvAddNewTaskToReadyList+0xd4>)
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644c:	4613      	mov	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4a15      	ldr	r2, [pc, #84]	; (80064ac <prvAddNewTaskToReadyList+0xd8>)
 8006456:	441a      	add	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3304      	adds	r3, #4
 800645c:	4619      	mov	r1, r3
 800645e:	4610      	mov	r0, r2
 8006460:	f7fe fec3 	bl	80051ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006464:	f7ff f8a6 	bl	80055b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006468:	4b0d      	ldr	r3, [pc, #52]	; (80064a0 <prvAddNewTaskToReadyList+0xcc>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00e      	beq.n	800648e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006470:	4b0a      	ldr	r3, [pc, #40]	; (800649c <prvAddNewTaskToReadyList+0xc8>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	429a      	cmp	r2, r3
 800647c:	d207      	bcs.n	800648e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800647e:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <prvAddNewTaskToReadyList+0xdc>)
 8006480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800648e:	bf00      	nop
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20004968 	.word	0x20004968
 800649c:	20004494 	.word	0x20004494
 80064a0:	20004974 	.word	0x20004974
 80064a4:	20004984 	.word	0x20004984
 80064a8:	20004970 	.word	0x20004970
 80064ac:	20004498 	.word	0x20004498
 80064b0:	e000ed04 	.word	0xe000ed04

080064b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064bc:	2300      	movs	r3, #0
 80064be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d017      	beq.n	80064f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064c6:	4b13      	ldr	r3, [pc, #76]	; (8006514 <vTaskDelay+0x60>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <vTaskDelay+0x30>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	60bb      	str	r3, [r7, #8]
}
 80064e0:	bf00      	nop
 80064e2:	e7fe      	b.n	80064e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064e4:	f000 f880 	bl	80065e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064e8:	2100      	movs	r1, #0
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fcea 	bl	8006ec4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064f0:	f000 f888 	bl	8006604 <xTaskResumeAll>
 80064f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d107      	bne.n	800650c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064fc:	4b06      	ldr	r3, [pc, #24]	; (8006518 <vTaskDelay+0x64>)
 80064fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800650c:	bf00      	nop
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20004990 	.word	0x20004990
 8006518:	e000ed04 	.word	0xe000ed04

0800651c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b08a      	sub	sp, #40	; 0x28
 8006520:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006526:	2300      	movs	r3, #0
 8006528:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800652a:	463a      	mov	r2, r7
 800652c:	1d39      	adds	r1, r7, #4
 800652e:	f107 0308 	add.w	r3, r7, #8
 8006532:	4618      	mov	r0, r3
 8006534:	f7fe fc0e 	bl	8004d54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	9202      	str	r2, [sp, #8]
 8006540:	9301      	str	r3, [sp, #4]
 8006542:	2300      	movs	r3, #0
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	2300      	movs	r3, #0
 8006548:	460a      	mov	r2, r1
 800654a:	4921      	ldr	r1, [pc, #132]	; (80065d0 <vTaskStartScheduler+0xb4>)
 800654c:	4821      	ldr	r0, [pc, #132]	; (80065d4 <vTaskStartScheduler+0xb8>)
 800654e:	f7ff fe0f 	bl	8006170 <xTaskCreateStatic>
 8006552:	4603      	mov	r3, r0
 8006554:	4a20      	ldr	r2, [pc, #128]	; (80065d8 <vTaskStartScheduler+0xbc>)
 8006556:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006558:	4b1f      	ldr	r3, [pc, #124]	; (80065d8 <vTaskStartScheduler+0xbc>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006560:	2301      	movs	r3, #1
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	e001      	b.n	800656a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006566:	2300      	movs	r3, #0
 8006568:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d102      	bne.n	8006576 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006570:	f000 fcfc 	bl	8006f6c <xTimerCreateTimerTask>
 8006574:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d116      	bne.n	80065aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	613b      	str	r3, [r7, #16]
}
 800658e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006590:	4b12      	ldr	r3, [pc, #72]	; (80065dc <vTaskStartScheduler+0xc0>)
 8006592:	f04f 32ff 	mov.w	r2, #4294967295
 8006596:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006598:	4b11      	ldr	r3, [pc, #68]	; (80065e0 <vTaskStartScheduler+0xc4>)
 800659a:	2201      	movs	r2, #1
 800659c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800659e:	4b11      	ldr	r3, [pc, #68]	; (80065e4 <vTaskStartScheduler+0xc8>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065a4:	f7fe ff34 	bl	8005410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065a8:	e00e      	b.n	80065c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b0:	d10a      	bne.n	80065c8 <vTaskStartScheduler+0xac>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	60fb      	str	r3, [r7, #12]
}
 80065c4:	bf00      	nop
 80065c6:	e7fe      	b.n	80065c6 <vTaskStartScheduler+0xaa>
}
 80065c8:	bf00      	nop
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	08009f9c 	.word	0x08009f9c
 80065d4:	08006c01 	.word	0x08006c01
 80065d8:	2000498c 	.word	0x2000498c
 80065dc:	20004988 	.word	0x20004988
 80065e0:	20004974 	.word	0x20004974
 80065e4:	2000496c 	.word	0x2000496c

080065e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065ec:	4b04      	ldr	r3, [pc, #16]	; (8006600 <vTaskSuspendAll+0x18>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3301      	adds	r3, #1
 80065f2:	4a03      	ldr	r2, [pc, #12]	; (8006600 <vTaskSuspendAll+0x18>)
 80065f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065f6:	bf00      	nop
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	20004990 	.word	0x20004990

08006604 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800660e:	2300      	movs	r3, #0
 8006610:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006612:	4b42      	ldr	r3, [pc, #264]	; (800671c <xTaskResumeAll+0x118>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10a      	bne.n	8006630 <xTaskResumeAll+0x2c>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	603b      	str	r3, [r7, #0]
}
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006630:	f7fe ff90 	bl	8005554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006634:	4b39      	ldr	r3, [pc, #228]	; (800671c <xTaskResumeAll+0x118>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3b01      	subs	r3, #1
 800663a:	4a38      	ldr	r2, [pc, #224]	; (800671c <xTaskResumeAll+0x118>)
 800663c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800663e:	4b37      	ldr	r3, [pc, #220]	; (800671c <xTaskResumeAll+0x118>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d162      	bne.n	800670c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006646:	4b36      	ldr	r3, [pc, #216]	; (8006720 <xTaskResumeAll+0x11c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d05e      	beq.n	800670c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800664e:	e02f      	b.n	80066b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006650:	4b34      	ldr	r3, [pc, #208]	; (8006724 <xTaskResumeAll+0x120>)
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3318      	adds	r3, #24
 800665c:	4618      	mov	r0, r3
 800665e:	f7fe fe21 	bl	80052a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3304      	adds	r3, #4
 8006666:	4618      	mov	r0, r3
 8006668:	f7fe fe1c 	bl	80052a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006670:	4b2d      	ldr	r3, [pc, #180]	; (8006728 <xTaskResumeAll+0x124>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d903      	bls.n	8006680 <xTaskResumeAll+0x7c>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	4a2a      	ldr	r2, [pc, #168]	; (8006728 <xTaskResumeAll+0x124>)
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006684:	4613      	mov	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4a27      	ldr	r2, [pc, #156]	; (800672c <xTaskResumeAll+0x128>)
 800668e:	441a      	add	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3304      	adds	r3, #4
 8006694:	4619      	mov	r1, r3
 8006696:	4610      	mov	r0, r2
 8006698:	f7fe fda7 	bl	80051ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a0:	4b23      	ldr	r3, [pc, #140]	; (8006730 <xTaskResumeAll+0x12c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d302      	bcc.n	80066b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80066aa:	4b22      	ldr	r3, [pc, #136]	; (8006734 <xTaskResumeAll+0x130>)
 80066ac:	2201      	movs	r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066b0:	4b1c      	ldr	r3, [pc, #112]	; (8006724 <xTaskResumeAll+0x120>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1cb      	bne.n	8006650 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066be:	f000 fb55 	bl	8006d6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066c2:	4b1d      	ldr	r3, [pc, #116]	; (8006738 <xTaskResumeAll+0x134>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d010      	beq.n	80066f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066ce:	f000 f847 	bl	8006760 <xTaskIncrementTick>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066d8:	4b16      	ldr	r3, [pc, #88]	; (8006734 <xTaskResumeAll+0x130>)
 80066da:	2201      	movs	r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f1      	bne.n	80066ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80066ea:	4b13      	ldr	r3, [pc, #76]	; (8006738 <xTaskResumeAll+0x134>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066f0:	4b10      	ldr	r3, [pc, #64]	; (8006734 <xTaskResumeAll+0x130>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d009      	beq.n	800670c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066f8:	2301      	movs	r3, #1
 80066fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066fc:	4b0f      	ldr	r3, [pc, #60]	; (800673c <xTaskResumeAll+0x138>)
 80066fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800670c:	f7fe ff52 	bl	80055b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006710:	68bb      	ldr	r3, [r7, #8]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20004990 	.word	0x20004990
 8006720:	20004968 	.word	0x20004968
 8006724:	20004928 	.word	0x20004928
 8006728:	20004970 	.word	0x20004970
 800672c:	20004498 	.word	0x20004498
 8006730:	20004494 	.word	0x20004494
 8006734:	2000497c 	.word	0x2000497c
 8006738:	20004978 	.word	0x20004978
 800673c:	e000ed04 	.word	0xe000ed04

08006740 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006746:	4b05      	ldr	r3, [pc, #20]	; (800675c <xTaskGetTickCount+0x1c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800674c:	687b      	ldr	r3, [r7, #4]
}
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	2000496c 	.word	0x2000496c

08006760 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006766:	2300      	movs	r3, #0
 8006768:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800676a:	4b4f      	ldr	r3, [pc, #316]	; (80068a8 <xTaskIncrementTick+0x148>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	f040 808f 	bne.w	8006892 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006774:	4b4d      	ldr	r3, [pc, #308]	; (80068ac <xTaskIncrementTick+0x14c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3301      	adds	r3, #1
 800677a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800677c:	4a4b      	ldr	r2, [pc, #300]	; (80068ac <xTaskIncrementTick+0x14c>)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d120      	bne.n	80067ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006788:	4b49      	ldr	r3, [pc, #292]	; (80068b0 <xTaskIncrementTick+0x150>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	603b      	str	r3, [r7, #0]
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <xTaskIncrementTick+0x46>
 80067a8:	4b41      	ldr	r3, [pc, #260]	; (80068b0 <xTaskIncrementTick+0x150>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	4b41      	ldr	r3, [pc, #260]	; (80068b4 <xTaskIncrementTick+0x154>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a3f      	ldr	r2, [pc, #252]	; (80068b0 <xTaskIncrementTick+0x150>)
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	4a3f      	ldr	r2, [pc, #252]	; (80068b4 <xTaskIncrementTick+0x154>)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6013      	str	r3, [r2, #0]
 80067bc:	4b3e      	ldr	r3, [pc, #248]	; (80068b8 <xTaskIncrementTick+0x158>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3301      	adds	r3, #1
 80067c2:	4a3d      	ldr	r2, [pc, #244]	; (80068b8 <xTaskIncrementTick+0x158>)
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	f000 fad1 	bl	8006d6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067ca:	4b3c      	ldr	r3, [pc, #240]	; (80068bc <xTaskIncrementTick+0x15c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d349      	bcc.n	8006868 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067d4:	4b36      	ldr	r3, [pc, #216]	; (80068b0 <xTaskIncrementTick+0x150>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d104      	bne.n	80067e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067de:	4b37      	ldr	r3, [pc, #220]	; (80068bc <xTaskIncrementTick+0x15c>)
 80067e0:	f04f 32ff 	mov.w	r2, #4294967295
 80067e4:	601a      	str	r2, [r3, #0]
					break;
 80067e6:	e03f      	b.n	8006868 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e8:	4b31      	ldr	r3, [pc, #196]	; (80068b0 <xTaskIncrementTick+0x150>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d203      	bcs.n	8006808 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006800:	4a2e      	ldr	r2, [pc, #184]	; (80068bc <xTaskIncrementTick+0x15c>)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006806:	e02f      	b.n	8006868 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	3304      	adds	r3, #4
 800680c:	4618      	mov	r0, r3
 800680e:	f7fe fd49 	bl	80052a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	3318      	adds	r3, #24
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe fd40 	bl	80052a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006828:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <xTaskIncrementTick+0x160>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d903      	bls.n	8006838 <xTaskIncrementTick+0xd8>
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	4a22      	ldr	r2, [pc, #136]	; (80068c0 <xTaskIncrementTick+0x160>)
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4a1f      	ldr	r2, [pc, #124]	; (80068c4 <xTaskIncrementTick+0x164>)
 8006846:	441a      	add	r2, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	3304      	adds	r3, #4
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f7fe fccb 	bl	80051ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006858:	4b1b      	ldr	r3, [pc, #108]	; (80068c8 <xTaskIncrementTick+0x168>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685e:	429a      	cmp	r2, r3
 8006860:	d3b8      	bcc.n	80067d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006862:	2301      	movs	r3, #1
 8006864:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006866:	e7b5      	b.n	80067d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006868:	4b17      	ldr	r3, [pc, #92]	; (80068c8 <xTaskIncrementTick+0x168>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686e:	4915      	ldr	r1, [pc, #84]	; (80068c4 <xTaskIncrementTick+0x164>)
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	440b      	add	r3, r1
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d901      	bls.n	8006884 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006880:	2301      	movs	r3, #1
 8006882:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006884:	4b11      	ldr	r3, [pc, #68]	; (80068cc <xTaskIncrementTick+0x16c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d007      	beq.n	800689c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800688c:	2301      	movs	r3, #1
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	e004      	b.n	800689c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006892:	4b0f      	ldr	r3, [pc, #60]	; (80068d0 <xTaskIncrementTick+0x170>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3301      	adds	r3, #1
 8006898:	4a0d      	ldr	r2, [pc, #52]	; (80068d0 <xTaskIncrementTick+0x170>)
 800689a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800689c:	697b      	ldr	r3, [r7, #20]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	20004990 	.word	0x20004990
 80068ac:	2000496c 	.word	0x2000496c
 80068b0:	20004920 	.word	0x20004920
 80068b4:	20004924 	.word	0x20004924
 80068b8:	20004980 	.word	0x20004980
 80068bc:	20004988 	.word	0x20004988
 80068c0:	20004970 	.word	0x20004970
 80068c4:	20004498 	.word	0x20004498
 80068c8:	20004494 	.word	0x20004494
 80068cc:	2000497c 	.word	0x2000497c
 80068d0:	20004978 	.word	0x20004978

080068d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068da:	4b28      	ldr	r3, [pc, #160]	; (800697c <vTaskSwitchContext+0xa8>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068e2:	4b27      	ldr	r3, [pc, #156]	; (8006980 <vTaskSwitchContext+0xac>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068e8:	e041      	b.n	800696e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80068ea:	4b25      	ldr	r3, [pc, #148]	; (8006980 <vTaskSwitchContext+0xac>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068f0:	4b24      	ldr	r3, [pc, #144]	; (8006984 <vTaskSwitchContext+0xb0>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	e010      	b.n	800691a <vTaskSwitchContext+0x46>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <vTaskSwitchContext+0x40>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	607b      	str	r3, [r7, #4]
}
 8006910:	bf00      	nop
 8006912:	e7fe      	b.n	8006912 <vTaskSwitchContext+0x3e>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3b01      	subs	r3, #1
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	491b      	ldr	r1, [pc, #108]	; (8006988 <vTaskSwitchContext+0xb4>)
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4613      	mov	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	440b      	add	r3, r1
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0e4      	beq.n	80068f8 <vTaskSwitchContext+0x24>
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4613      	mov	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4a13      	ldr	r2, [pc, #76]	; (8006988 <vTaskSwitchContext+0xb4>)
 800693a:	4413      	add	r3, r2
 800693c:	60bb      	str	r3, [r7, #8]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	605a      	str	r2, [r3, #4]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	3308      	adds	r3, #8
 8006950:	429a      	cmp	r2, r3
 8006952:	d104      	bne.n	800695e <vTaskSwitchContext+0x8a>
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	605a      	str	r2, [r3, #4]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	4a09      	ldr	r2, [pc, #36]	; (800698c <vTaskSwitchContext+0xb8>)
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	4a06      	ldr	r2, [pc, #24]	; (8006984 <vTaskSwitchContext+0xb0>)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6013      	str	r3, [r2, #0]
}
 800696e:	bf00      	nop
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	20004990 	.word	0x20004990
 8006980:	2000497c 	.word	0x2000497c
 8006984:	20004970 	.word	0x20004970
 8006988:	20004498 	.word	0x20004498
 800698c:	20004494 	.word	0x20004494

08006990 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10a      	bne.n	80069b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	60fb      	str	r3, [r7, #12]
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069b6:	4b07      	ldr	r3, [pc, #28]	; (80069d4 <vTaskPlaceOnEventList+0x44>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3318      	adds	r3, #24
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fe fc37 	bl	8005232 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069c4:	2101      	movs	r1, #1
 80069c6:	6838      	ldr	r0, [r7, #0]
 80069c8:	f000 fa7c 	bl	8006ec4 <prvAddCurrentTaskToDelayedList>
}
 80069cc:	bf00      	nop
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	20004494 	.word	0x20004494

080069d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10a      	bne.n	8006a00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	617b      	str	r3, [r7, #20]
}
 80069fc:	bf00      	nop
 80069fe:	e7fe      	b.n	80069fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a00:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <vTaskPlaceOnEventListRestricted+0x54>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3318      	adds	r3, #24
 8006a06:	4619      	mov	r1, r3
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f7fe fbee 	bl	80051ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a14:	f04f 33ff 	mov.w	r3, #4294967295
 8006a18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	68b8      	ldr	r0, [r7, #8]
 8006a1e:	f000 fa51 	bl	8006ec4 <prvAddCurrentTaskToDelayedList>
	}
 8006a22:	bf00      	nop
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20004494 	.word	0x20004494

08006a30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10a      	bne.n	8006a5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	60fb      	str	r3, [r7, #12]
}
 8006a58:	bf00      	nop
 8006a5a:	e7fe      	b.n	8006a5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	3318      	adds	r3, #24
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fe fc1f 	bl	80052a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a66:	4b1e      	ldr	r3, [pc, #120]	; (8006ae0 <xTaskRemoveFromEventList+0xb0>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d11d      	bne.n	8006aaa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	3304      	adds	r3, #4
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe fc16 	bl	80052a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a7c:	4b19      	ldr	r3, [pc, #100]	; (8006ae4 <xTaskRemoveFromEventList+0xb4>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d903      	bls.n	8006a8c <xTaskRemoveFromEventList+0x5c>
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a88:	4a16      	ldr	r2, [pc, #88]	; (8006ae4 <xTaskRemoveFromEventList+0xb4>)
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a90:	4613      	mov	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4a13      	ldr	r2, [pc, #76]	; (8006ae8 <xTaskRemoveFromEventList+0xb8>)
 8006a9a:	441a      	add	r2, r3
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	f7fe fba1 	bl	80051ea <vListInsertEnd>
 8006aa8:	e005      	b.n	8006ab6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	3318      	adds	r3, #24
 8006aae:	4619      	mov	r1, r3
 8006ab0:	480e      	ldr	r0, [pc, #56]	; (8006aec <xTaskRemoveFromEventList+0xbc>)
 8006ab2:	f7fe fb9a 	bl	80051ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aba:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <xTaskRemoveFromEventList+0xc0>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d905      	bls.n	8006ad0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <xTaskRemoveFromEventList+0xc4>)
 8006aca:	2201      	movs	r2, #1
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	e001      	b.n	8006ad4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ad4:	697b      	ldr	r3, [r7, #20]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20004990 	.word	0x20004990
 8006ae4:	20004970 	.word	0x20004970
 8006ae8:	20004498 	.word	0x20004498
 8006aec:	20004928 	.word	0x20004928
 8006af0:	20004494 	.word	0x20004494
 8006af4:	2000497c 	.word	0x2000497c

08006af8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b00:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <vTaskInternalSetTimeOutState+0x24>)
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b08:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <vTaskInternalSetTimeOutState+0x28>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	605a      	str	r2, [r3, #4]
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	20004980 	.word	0x20004980
 8006b20:	2000496c 	.word	0x2000496c

08006b24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10a      	bne.n	8006b4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	613b      	str	r3, [r7, #16]
}
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	60fb      	str	r3, [r7, #12]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b66:	f7fe fcf5 	bl	8005554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b6a:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <xTaskCheckForTimeOut+0xbc>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b82:	d102      	bne.n	8006b8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	61fb      	str	r3, [r7, #28]
 8006b88:	e023      	b.n	8006bd2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	4b15      	ldr	r3, [pc, #84]	; (8006be4 <xTaskCheckForTimeOut+0xc0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d007      	beq.n	8006ba6 <xTaskCheckForTimeOut+0x82>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d302      	bcc.n	8006ba6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	61fb      	str	r3, [r7, #28]
 8006ba4:	e015      	b.n	8006bd2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d20b      	bcs.n	8006bc8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	1ad2      	subs	r2, r2, r3
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff ff9b 	bl	8006af8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	61fb      	str	r3, [r7, #28]
 8006bc6:	e004      	b.n	8006bd2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bd2:	f7fe fcef 	bl	80055b4 <vPortExitCritical>

	return xReturn;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	2000496c 	.word	0x2000496c
 8006be4:	20004980 	.word	0x20004980

08006be8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bec:	4b03      	ldr	r3, [pc, #12]	; (8006bfc <vTaskMissedYield+0x14>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
}
 8006bf2:	bf00      	nop
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	2000497c 	.word	0x2000497c

08006c00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c08:	f000 f852 	bl	8006cb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c0c:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <prvIdleTask+0x28>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d9f9      	bls.n	8006c08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c14:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <prvIdleTask+0x2c>)
 8006c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c24:	e7f0      	b.n	8006c08 <prvIdleTask+0x8>
 8006c26:	bf00      	nop
 8006c28:	20004498 	.word	0x20004498
 8006c2c:	e000ed04 	.word	0xe000ed04

08006c30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c36:	2300      	movs	r3, #0
 8006c38:	607b      	str	r3, [r7, #4]
 8006c3a:	e00c      	b.n	8006c56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4a12      	ldr	r2, [pc, #72]	; (8006c90 <prvInitialiseTaskLists+0x60>)
 8006c48:	4413      	add	r3, r2
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fe faa0 	bl	8005190 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3301      	adds	r3, #1
 8006c54:	607b      	str	r3, [r7, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b37      	cmp	r3, #55	; 0x37
 8006c5a:	d9ef      	bls.n	8006c3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c5c:	480d      	ldr	r0, [pc, #52]	; (8006c94 <prvInitialiseTaskLists+0x64>)
 8006c5e:	f7fe fa97 	bl	8005190 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c62:	480d      	ldr	r0, [pc, #52]	; (8006c98 <prvInitialiseTaskLists+0x68>)
 8006c64:	f7fe fa94 	bl	8005190 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c68:	480c      	ldr	r0, [pc, #48]	; (8006c9c <prvInitialiseTaskLists+0x6c>)
 8006c6a:	f7fe fa91 	bl	8005190 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c6e:	480c      	ldr	r0, [pc, #48]	; (8006ca0 <prvInitialiseTaskLists+0x70>)
 8006c70:	f7fe fa8e 	bl	8005190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c74:	480b      	ldr	r0, [pc, #44]	; (8006ca4 <prvInitialiseTaskLists+0x74>)
 8006c76:	f7fe fa8b 	bl	8005190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ca8 <prvInitialiseTaskLists+0x78>)
 8006c7c:	4a05      	ldr	r2, [pc, #20]	; (8006c94 <prvInitialiseTaskLists+0x64>)
 8006c7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c80:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <prvInitialiseTaskLists+0x7c>)
 8006c82:	4a05      	ldr	r2, [pc, #20]	; (8006c98 <prvInitialiseTaskLists+0x68>)
 8006c84:	601a      	str	r2, [r3, #0]
}
 8006c86:	bf00      	nop
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20004498 	.word	0x20004498
 8006c94:	200048f8 	.word	0x200048f8
 8006c98:	2000490c 	.word	0x2000490c
 8006c9c:	20004928 	.word	0x20004928
 8006ca0:	2000493c 	.word	0x2000493c
 8006ca4:	20004954 	.word	0x20004954
 8006ca8:	20004920 	.word	0x20004920
 8006cac:	20004924 	.word	0x20004924

08006cb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cb6:	e019      	b.n	8006cec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006cb8:	f7fe fc4c 	bl	8005554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cbc:	4b10      	ldr	r3, [pc, #64]	; (8006d00 <prvCheckTasksWaitingTermination+0x50>)
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7fe faeb 	bl	80052a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cce:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <prvCheckTasksWaitingTermination+0x54>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	4a0b      	ldr	r2, [pc, #44]	; (8006d04 <prvCheckTasksWaitingTermination+0x54>)
 8006cd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <prvCheckTasksWaitingTermination+0x58>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	4a0a      	ldr	r2, [pc, #40]	; (8006d08 <prvCheckTasksWaitingTermination+0x58>)
 8006ce0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ce2:	f7fe fc67 	bl	80055b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f810 	bl	8006d0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cec:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <prvCheckTasksWaitingTermination+0x58>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e1      	bne.n	8006cb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	2000493c 	.word	0x2000493c
 8006d04:	20004968 	.word	0x20004968
 8006d08:	20004950 	.word	0x20004950

08006d0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d108      	bne.n	8006d30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe f916 	bl	8004f54 <vPortFree>
				vPortFree( pxTCB );
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7fe f913 	bl	8004f54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d2e:	e018      	b.n	8006d62 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d103      	bne.n	8006d42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7fe f90a 	bl	8004f54 <vPortFree>
	}
 8006d40:	e00f      	b.n	8006d62 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d00a      	beq.n	8006d62 <prvDeleteTCB+0x56>
	__asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	60fb      	str	r3, [r7, #12]
}
 8006d5e:	bf00      	nop
 8006d60:	e7fe      	b.n	8006d60 <prvDeleteTCB+0x54>
	}
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d72:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <prvResetNextTaskUnblockTime+0x38>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d104      	bne.n	8006d86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d7c:	4b0a      	ldr	r3, [pc, #40]	; (8006da8 <prvResetNextTaskUnblockTime+0x3c>)
 8006d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d84:	e008      	b.n	8006d98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d86:	4b07      	ldr	r3, [pc, #28]	; (8006da4 <prvResetNextTaskUnblockTime+0x38>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	4a04      	ldr	r2, [pc, #16]	; (8006da8 <prvResetNextTaskUnblockTime+0x3c>)
 8006d96:	6013      	str	r3, [r2, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	20004920 	.word	0x20004920
 8006da8:	20004988 	.word	0x20004988

08006dac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006db2:	4b0b      	ldr	r3, [pc, #44]	; (8006de0 <xTaskGetSchedulerState+0x34>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d102      	bne.n	8006dc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	607b      	str	r3, [r7, #4]
 8006dbe:	e008      	b.n	8006dd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dc0:	4b08      	ldr	r3, [pc, #32]	; (8006de4 <xTaskGetSchedulerState+0x38>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d102      	bne.n	8006dce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006dc8:	2302      	movs	r3, #2
 8006dca:	607b      	str	r3, [r7, #4]
 8006dcc:	e001      	b.n	8006dd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006dd2:	687b      	ldr	r3, [r7, #4]
	}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	20004974 	.word	0x20004974
 8006de4:	20004990 	.word	0x20004990

08006de8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d056      	beq.n	8006eac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dfe:	4b2e      	ldr	r3, [pc, #184]	; (8006eb8 <xTaskPriorityDisinherit+0xd0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d00a      	beq.n	8006e1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	60fb      	str	r3, [r7, #12]
}
 8006e1a:	bf00      	nop
 8006e1c:	e7fe      	b.n	8006e1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10a      	bne.n	8006e3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	60bb      	str	r3, [r7, #8]
}
 8006e38:	bf00      	nop
 8006e3a:	e7fe      	b.n	8006e3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e40:	1e5a      	subs	r2, r3, #1
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d02c      	beq.n	8006eac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d128      	bne.n	8006eac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe fa20 	bl	80052a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7c:	4b0f      	ldr	r3, [pc, #60]	; (8006ebc <xTaskPriorityDisinherit+0xd4>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d903      	bls.n	8006e8c <xTaskPriorityDisinherit+0xa4>
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e88:	4a0c      	ldr	r2, [pc, #48]	; (8006ebc <xTaskPriorityDisinherit+0xd4>)
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e90:	4613      	mov	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4a09      	ldr	r2, [pc, #36]	; (8006ec0 <xTaskPriorityDisinherit+0xd8>)
 8006e9a:	441a      	add	r2, r3
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	f7fe f9a1 	bl	80051ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006eac:	697b      	ldr	r3, [r7, #20]
	}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20004494 	.word	0x20004494
 8006ebc:	20004970 	.word	0x20004970
 8006ec0:	20004498 	.word	0x20004498

08006ec4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ece:	4b21      	ldr	r3, [pc, #132]	; (8006f54 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ed4:	4b20      	ldr	r3, [pc, #128]	; (8006f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe f9e2 	bl	80052a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee6:	d10a      	bne.n	8006efe <prvAddCurrentTaskToDelayedList+0x3a>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eee:	4b1a      	ldr	r3, [pc, #104]	; (8006f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4819      	ldr	r0, [pc, #100]	; (8006f5c <prvAddCurrentTaskToDelayedList+0x98>)
 8006ef8:	f7fe f977 	bl	80051ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006efc:	e026      	b.n	8006f4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4413      	add	r3, r2
 8006f04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f06:	4b14      	ldr	r3, [pc, #80]	; (8006f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d209      	bcs.n	8006f2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f16:	4b12      	ldr	r3, [pc, #72]	; (8006f60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4b0f      	ldr	r3, [pc, #60]	; (8006f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4619      	mov	r1, r3
 8006f22:	4610      	mov	r0, r2
 8006f24:	f7fe f985 	bl	8005232 <vListInsert>
}
 8006f28:	e010      	b.n	8006f4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f2a:	4b0e      	ldr	r3, [pc, #56]	; (8006f64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4619      	mov	r1, r3
 8006f36:	4610      	mov	r0, r2
 8006f38:	f7fe f97b 	bl	8005232 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d202      	bcs.n	8006f4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f46:	4a08      	ldr	r2, [pc, #32]	; (8006f68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	6013      	str	r3, [r2, #0]
}
 8006f4c:	bf00      	nop
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	2000496c 	.word	0x2000496c
 8006f58:	20004494 	.word	0x20004494
 8006f5c:	20004954 	.word	0x20004954
 8006f60:	20004924 	.word	0x20004924
 8006f64:	20004920 	.word	0x20004920
 8006f68:	20004988 	.word	0x20004988

08006f6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	; 0x28
 8006f70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f76:	f000 fb07 	bl	8007588 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f7a:	4b1c      	ldr	r3, [pc, #112]	; (8006fec <xTimerCreateTimerTask+0x80>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d021      	beq.n	8006fc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f8a:	1d3a      	adds	r2, r7, #4
 8006f8c:	f107 0108 	add.w	r1, r7, #8
 8006f90:	f107 030c 	add.w	r3, r7, #12
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fd fef7 	bl	8004d88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	9202      	str	r2, [sp, #8]
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	2300      	movs	r3, #0
 8006faa:	460a      	mov	r2, r1
 8006fac:	4910      	ldr	r1, [pc, #64]	; (8006ff0 <xTimerCreateTimerTask+0x84>)
 8006fae:	4811      	ldr	r0, [pc, #68]	; (8006ff4 <xTimerCreateTimerTask+0x88>)
 8006fb0:	f7ff f8de 	bl	8006170 <xTaskCreateStatic>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	4a10      	ldr	r2, [pc, #64]	; (8006ff8 <xTimerCreateTimerTask+0x8c>)
 8006fb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006fba:	4b0f      	ldr	r3, [pc, #60]	; (8006ff8 <xTimerCreateTimerTask+0x8c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10a      	bne.n	8006fe2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	613b      	str	r3, [r7, #16]
}
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006fe2:	697b      	ldr	r3, [r7, #20]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3718      	adds	r7, #24
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	200049c4 	.word	0x200049c4
 8006ff0:	08009fa4 	.word	0x08009fa4
 8006ff4:	08007131 	.word	0x08007131
 8006ff8:	200049c8 	.word	0x200049c8

08006ffc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08a      	sub	sp, #40	; 0x28
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800700a:	2300      	movs	r3, #0
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10a      	bne.n	800702a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	623b      	str	r3, [r7, #32]
}
 8007026:	bf00      	nop
 8007028:	e7fe      	b.n	8007028 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800702a:	4b1a      	ldr	r3, [pc, #104]	; (8007094 <xTimerGenericCommand+0x98>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d02a      	beq.n	8007088 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b05      	cmp	r3, #5
 8007042:	dc18      	bgt.n	8007076 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007044:	f7ff feb2 	bl	8006dac <xTaskGetSchedulerState>
 8007048:	4603      	mov	r3, r0
 800704a:	2b02      	cmp	r3, #2
 800704c:	d109      	bne.n	8007062 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800704e:	4b11      	ldr	r3, [pc, #68]	; (8007094 <xTimerGenericCommand+0x98>)
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	f107 0110 	add.w	r1, r7, #16
 8007056:	2300      	movs	r3, #0
 8007058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800705a:	f7fe fca1 	bl	80059a0 <xQueueGenericSend>
 800705e:	6278      	str	r0, [r7, #36]	; 0x24
 8007060:	e012      	b.n	8007088 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007062:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <xTimerGenericCommand+0x98>)
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	f107 0110 	add.w	r1, r7, #16
 800706a:	2300      	movs	r3, #0
 800706c:	2200      	movs	r2, #0
 800706e:	f7fe fc97 	bl	80059a0 <xQueueGenericSend>
 8007072:	6278      	str	r0, [r7, #36]	; 0x24
 8007074:	e008      	b.n	8007088 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007076:	4b07      	ldr	r3, [pc, #28]	; (8007094 <xTimerGenericCommand+0x98>)
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	f107 0110 	add.w	r1, r7, #16
 800707e:	2300      	movs	r3, #0
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	f7fe fd8b 	bl	8005b9c <xQueueGenericSendFromISR>
 8007086:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800708a:	4618      	mov	r0, r3
 800708c:	3728      	adds	r7, #40	; 0x28
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	200049c4 	.word	0x200049c4

08007098 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af02      	add	r7, sp, #8
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a2:	4b22      	ldr	r3, [pc, #136]	; (800712c <prvProcessExpiredTimer+0x94>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	3304      	adds	r3, #4
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fe f8f7 	bl	80052a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d022      	beq.n	800710a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	699a      	ldr	r2, [r3, #24]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	18d1      	adds	r1, r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	6978      	ldr	r0, [r7, #20]
 80070d2:	f000 f8d1 	bl	8007278 <prvInsertTimerInActiveList>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d01f      	beq.n	800711c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070dc:	2300      	movs	r3, #0
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	2300      	movs	r3, #0
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	2100      	movs	r1, #0
 80070e6:	6978      	ldr	r0, [r7, #20]
 80070e8:	f7ff ff88 	bl	8006ffc <xTimerGenericCommand>
 80070ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d113      	bne.n	800711c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	60fb      	str	r3, [r7, #12]
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007110:	f023 0301 	bic.w	r3, r3, #1
 8007114:	b2da      	uxtb	r2, r3
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	6978      	ldr	r0, [r7, #20]
 8007122:	4798      	blx	r3
}
 8007124:	bf00      	nop
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	200049bc 	.word	0x200049bc

08007130 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007138:	f107 0308 	add.w	r3, r7, #8
 800713c:	4618      	mov	r0, r3
 800713e:	f000 f857 	bl	80071f0 <prvGetNextExpireTime>
 8007142:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4619      	mov	r1, r3
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 f803 	bl	8007154 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800714e:	f000 f8d5 	bl	80072fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007152:	e7f1      	b.n	8007138 <prvTimerTask+0x8>

08007154 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800715e:	f7ff fa43 	bl	80065e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007162:	f107 0308 	add.w	r3, r7, #8
 8007166:	4618      	mov	r0, r3
 8007168:	f000 f866 	bl	8007238 <prvSampleTimeNow>
 800716c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d130      	bne.n	80071d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10a      	bne.n	8007190 <prvProcessTimerOrBlockTask+0x3c>
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	429a      	cmp	r2, r3
 8007180:	d806      	bhi.n	8007190 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007182:	f7ff fa3f 	bl	8006604 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007186:	68f9      	ldr	r1, [r7, #12]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff ff85 	bl	8007098 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800718e:	e024      	b.n	80071da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d008      	beq.n	80071a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007196:	4b13      	ldr	r3, [pc, #76]	; (80071e4 <prvProcessTimerOrBlockTask+0x90>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <prvProcessTimerOrBlockTask+0x50>
 80071a0:	2301      	movs	r3, #1
 80071a2:	e000      	b.n	80071a6 <prvProcessTimerOrBlockTask+0x52>
 80071a4:	2300      	movs	r3, #0
 80071a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071a8:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <prvProcessTimerOrBlockTask+0x94>)
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	4619      	mov	r1, r3
 80071b6:	f7fe ffa7 	bl	8006108 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071ba:	f7ff fa23 	bl	8006604 <xTaskResumeAll>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071c4:	4b09      	ldr	r3, [pc, #36]	; (80071ec <prvProcessTimerOrBlockTask+0x98>)
 80071c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	f3bf 8f6f 	isb	sy
}
 80071d4:	e001      	b.n	80071da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071d6:	f7ff fa15 	bl	8006604 <xTaskResumeAll>
}
 80071da:	bf00      	nop
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	200049c0 	.word	0x200049c0
 80071e8:	200049c4 	.word	0x200049c4
 80071ec:	e000ed04 	.word	0xe000ed04

080071f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071f8:	4b0e      	ldr	r3, [pc, #56]	; (8007234 <prvGetNextExpireTime+0x44>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <prvGetNextExpireTime+0x16>
 8007202:	2201      	movs	r2, #1
 8007204:	e000      	b.n	8007208 <prvGetNextExpireTime+0x18>
 8007206:	2200      	movs	r2, #0
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d105      	bne.n	8007220 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007214:	4b07      	ldr	r3, [pc, #28]	; (8007234 <prvGetNextExpireTime+0x44>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	e001      	b.n	8007224 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007224:	68fb      	ldr	r3, [r7, #12]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	200049bc 	.word	0x200049bc

08007238 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007240:	f7ff fa7e 	bl	8006740 <xTaskGetTickCount>
 8007244:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007246:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <prvSampleTimeNow+0x3c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	429a      	cmp	r2, r3
 800724e:	d205      	bcs.n	800725c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007250:	f000 f936 	bl	80074c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	e002      	b.n	8007262 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007262:	4a04      	ldr	r2, [pc, #16]	; (8007274 <prvSampleTimeNow+0x3c>)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007268:	68fb      	ldr	r3, [r7, #12]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	200049cc 	.word	0x200049cc

08007278 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007286:	2300      	movs	r3, #0
 8007288:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	429a      	cmp	r2, r3
 800729c:	d812      	bhi.n	80072c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	1ad2      	subs	r2, r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d302      	bcc.n	80072b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80072ac:	2301      	movs	r3, #1
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	e01b      	b.n	80072ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072b2:	4b10      	ldr	r3, [pc, #64]	; (80072f4 <prvInsertTimerInActiveList+0x7c>)
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3304      	adds	r3, #4
 80072ba:	4619      	mov	r1, r3
 80072bc:	4610      	mov	r0, r2
 80072be:	f7fd ffb8 	bl	8005232 <vListInsert>
 80072c2:	e012      	b.n	80072ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d206      	bcs.n	80072da <prvInsertTimerInActiveList+0x62>
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d302      	bcc.n	80072da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072d4:	2301      	movs	r3, #1
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	e007      	b.n	80072ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072da:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <prvInsertTimerInActiveList+0x80>)
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3304      	adds	r3, #4
 80072e2:	4619      	mov	r1, r3
 80072e4:	4610      	mov	r0, r2
 80072e6:	f7fd ffa4 	bl	8005232 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072ea:	697b      	ldr	r3, [r7, #20]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3718      	adds	r7, #24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	200049c0 	.word	0x200049c0
 80072f8:	200049bc 	.word	0x200049bc

080072fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08e      	sub	sp, #56	; 0x38
 8007300:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007302:	e0ca      	b.n	800749a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	da18      	bge.n	800733c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800730a:	1d3b      	adds	r3, r7, #4
 800730c:	3304      	adds	r3, #4
 800730e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10a      	bne.n	800732c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	61fb      	str	r3, [r7, #28]
}
 8007328:	bf00      	nop
 800732a:	e7fe      	b.n	800732a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007332:	6850      	ldr	r0, [r2, #4]
 8007334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007336:	6892      	ldr	r2, [r2, #8]
 8007338:	4611      	mov	r1, r2
 800733a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	f2c0 80ab 	blt.w	800749a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d004      	beq.n	800735a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	3304      	adds	r3, #4
 8007354:	4618      	mov	r0, r3
 8007356:	f7fd ffa5 	bl	80052a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800735a:	463b      	mov	r3, r7
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff ff6b 	bl	8007238 <prvSampleTimeNow>
 8007362:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b09      	cmp	r3, #9
 8007368:	f200 8096 	bhi.w	8007498 <prvProcessReceivedCommands+0x19c>
 800736c:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <prvProcessReceivedCommands+0x78>)
 800736e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007372:	bf00      	nop
 8007374:	0800739d 	.word	0x0800739d
 8007378:	0800739d 	.word	0x0800739d
 800737c:	0800739d 	.word	0x0800739d
 8007380:	08007411 	.word	0x08007411
 8007384:	08007425 	.word	0x08007425
 8007388:	0800746f 	.word	0x0800746f
 800738c:	0800739d 	.word	0x0800739d
 8007390:	0800739d 	.word	0x0800739d
 8007394:	08007411 	.word	0x08007411
 8007398:	08007425 	.word	0x08007425
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073a2:	f043 0301 	orr.w	r3, r3, #1
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	18d1      	adds	r1, r2, r3
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073bc:	f7ff ff5c 	bl	8007278 <prvInsertTimerInActiveList>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d069      	beq.n	800749a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073d4:	f003 0304 	and.w	r3, r3, #4
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d05e      	beq.n	800749a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	441a      	add	r2, r3
 80073e4:	2300      	movs	r3, #0
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	2300      	movs	r3, #0
 80073ea:	2100      	movs	r1, #0
 80073ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ee:	f7ff fe05 	bl	8006ffc <xTimerGenericCommand>
 80073f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d14f      	bne.n	800749a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	61bb      	str	r3, [r7, #24]
}
 800740c:	bf00      	nop
 800740e:	e7fe      	b.n	800740e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007416:	f023 0301 	bic.w	r3, r3, #1
 800741a:	b2da      	uxtb	r2, r3
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007422:	e03a      	b.n	800749a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800742a:	f043 0301 	orr.w	r3, r3, #1
 800742e:	b2da      	uxtb	r2, r3
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	617b      	str	r3, [r7, #20]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	18d1      	adds	r1, r2, r3
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007468:	f7ff ff06 	bl	8007278 <prvInsertTimerInActiveList>
					break;
 800746c:	e015      	b.n	800749a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800746e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d103      	bne.n	8007484 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800747c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800747e:	f7fd fd69 	bl	8004f54 <vPortFree>
 8007482:	e00a      	b.n	800749a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800748a:	f023 0301 	bic.w	r3, r3, #1
 800748e:	b2da      	uxtb	r2, r3
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007496:	e000      	b.n	800749a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007498:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800749a:	4b08      	ldr	r3, [pc, #32]	; (80074bc <prvProcessReceivedCommands+0x1c0>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	1d39      	adds	r1, r7, #4
 80074a0:	2200      	movs	r2, #0
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fe fc16 	bl	8005cd4 <xQueueReceive>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f47f af2a 	bne.w	8007304 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80074b0:	bf00      	nop
 80074b2:	bf00      	nop
 80074b4:	3730      	adds	r7, #48	; 0x30
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	200049c4 	.word	0x200049c4

080074c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074c6:	e048      	b.n	800755a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074c8:	4b2d      	ldr	r3, [pc, #180]	; (8007580 <prvSwitchTimerLists+0xc0>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074d2:	4b2b      	ldr	r3, [pc, #172]	; (8007580 <prvSwitchTimerLists+0xc0>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3304      	adds	r3, #4
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fd fedf 	bl	80052a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074f4:	f003 0304 	and.w	r3, r3, #4
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d02e      	beq.n	800755a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	4413      	add	r3, r2
 8007504:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	429a      	cmp	r2, r3
 800750c:	d90e      	bls.n	800752c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800751a:	4b19      	ldr	r3, [pc, #100]	; (8007580 <prvSwitchTimerLists+0xc0>)
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3304      	adds	r3, #4
 8007522:	4619      	mov	r1, r3
 8007524:	4610      	mov	r0, r2
 8007526:	f7fd fe84 	bl	8005232 <vListInsert>
 800752a:	e016      	b.n	800755a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800752c:	2300      	movs	r3, #0
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	2300      	movs	r3, #0
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	2100      	movs	r1, #0
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f7ff fd60 	bl	8006ffc <xTimerGenericCommand>
 800753c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10a      	bne.n	800755a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	603b      	str	r3, [r7, #0]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800755a:	4b09      	ldr	r3, [pc, #36]	; (8007580 <prvSwitchTimerLists+0xc0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1b1      	bne.n	80074c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007564:	4b06      	ldr	r3, [pc, #24]	; (8007580 <prvSwitchTimerLists+0xc0>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800756a:	4b06      	ldr	r3, [pc, #24]	; (8007584 <prvSwitchTimerLists+0xc4>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a04      	ldr	r2, [pc, #16]	; (8007580 <prvSwitchTimerLists+0xc0>)
 8007570:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007572:	4a04      	ldr	r2, [pc, #16]	; (8007584 <prvSwitchTimerLists+0xc4>)
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	6013      	str	r3, [r2, #0]
}
 8007578:	bf00      	nop
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	200049bc 	.word	0x200049bc
 8007584:	200049c0 	.word	0x200049c0

08007588 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800758e:	f7fd ffe1 	bl	8005554 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007592:	4b15      	ldr	r3, [pc, #84]	; (80075e8 <prvCheckForValidListAndQueue+0x60>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d120      	bne.n	80075dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800759a:	4814      	ldr	r0, [pc, #80]	; (80075ec <prvCheckForValidListAndQueue+0x64>)
 800759c:	f7fd fdf8 	bl	8005190 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80075a0:	4813      	ldr	r0, [pc, #76]	; (80075f0 <prvCheckForValidListAndQueue+0x68>)
 80075a2:	f7fd fdf5 	bl	8005190 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80075a6:	4b13      	ldr	r3, [pc, #76]	; (80075f4 <prvCheckForValidListAndQueue+0x6c>)
 80075a8:	4a10      	ldr	r2, [pc, #64]	; (80075ec <prvCheckForValidListAndQueue+0x64>)
 80075aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80075ac:	4b12      	ldr	r3, [pc, #72]	; (80075f8 <prvCheckForValidListAndQueue+0x70>)
 80075ae:	4a10      	ldr	r2, [pc, #64]	; (80075f0 <prvCheckForValidListAndQueue+0x68>)
 80075b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80075b2:	2300      	movs	r3, #0
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	4b11      	ldr	r3, [pc, #68]	; (80075fc <prvCheckForValidListAndQueue+0x74>)
 80075b8:	4a11      	ldr	r2, [pc, #68]	; (8007600 <prvCheckForValidListAndQueue+0x78>)
 80075ba:	2110      	movs	r1, #16
 80075bc:	200a      	movs	r0, #10
 80075be:	f7fe f953 	bl	8005868 <xQueueGenericCreateStatic>
 80075c2:	4603      	mov	r3, r0
 80075c4:	4a08      	ldr	r2, [pc, #32]	; (80075e8 <prvCheckForValidListAndQueue+0x60>)
 80075c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075c8:	4b07      	ldr	r3, [pc, #28]	; (80075e8 <prvCheckForValidListAndQueue+0x60>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d005      	beq.n	80075dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075d0:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <prvCheckForValidListAndQueue+0x60>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	490b      	ldr	r1, [pc, #44]	; (8007604 <prvCheckForValidListAndQueue+0x7c>)
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fd6c 	bl	80060b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075dc:	f7fd ffea 	bl	80055b4 <vPortExitCritical>
}
 80075e0:	bf00      	nop
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	200049c4 	.word	0x200049c4
 80075ec:	20004994 	.word	0x20004994
 80075f0:	200049a8 	.word	0x200049a8
 80075f4:	200049bc 	.word	0x200049bc
 80075f8:	200049c0 	.word	0x200049c0
 80075fc:	20004a70 	.word	0x20004a70
 8007600:	200049d0 	.word	0x200049d0
 8007604:	08009fac 	.word	0x08009fac

08007608 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007614:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007618:	f002 fc2a 	bl	8009e70 <USBD_static_malloc>
 800761c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d109      	bne.n	8007638 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	32b0      	adds	r2, #176	; 0xb0
 800762e:	2100      	movs	r1, #0
 8007630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007634:	2302      	movs	r3, #2
 8007636:	e0d4      	b.n	80077e2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007638:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800763c:	2100      	movs	r1, #0
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f002 fc5a 	bl	8009ef8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	32b0      	adds	r2, #176	; 0xb0
 800764e:	68f9      	ldr	r1, [r7, #12]
 8007650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	32b0      	adds	r2, #176	; 0xb0
 800765e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	7c1b      	ldrb	r3, [r3, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d138      	bne.n	80076e2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007670:	4b5e      	ldr	r3, [pc, #376]	; (80077ec <USBD_CDC_Init+0x1e4>)
 8007672:	7819      	ldrb	r1, [r3, #0]
 8007674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007678:	2202      	movs	r2, #2
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f002 fad5 	bl	8009c2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007680:	4b5a      	ldr	r3, [pc, #360]	; (80077ec <USBD_CDC_Init+0x1e4>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	f003 020f 	and.w	r2, r3, #15
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	440b      	add	r3, r1
 8007694:	3324      	adds	r3, #36	; 0x24
 8007696:	2201      	movs	r2, #1
 8007698:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800769a:	4b55      	ldr	r3, [pc, #340]	; (80077f0 <USBD_CDC_Init+0x1e8>)
 800769c:	7819      	ldrb	r1, [r3, #0]
 800769e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076a2:	2202      	movs	r2, #2
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f002 fac0 	bl	8009c2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80076aa:	4b51      	ldr	r3, [pc, #324]	; (80077f0 <USBD_CDC_Init+0x1e8>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	f003 020f 	and.w	r2, r3, #15
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	4613      	mov	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	440b      	add	r3, r1
 80076be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80076c2:	2201      	movs	r2, #1
 80076c4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80076c6:	4b4b      	ldr	r3, [pc, #300]	; (80077f4 <USBD_CDC_Init+0x1ec>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	f003 020f 	and.w	r2, r3, #15
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	440b      	add	r3, r1
 80076da:	3326      	adds	r3, #38	; 0x26
 80076dc:	2210      	movs	r2, #16
 80076de:	801a      	strh	r2, [r3, #0]
 80076e0:	e035      	b.n	800774e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80076e2:	4b42      	ldr	r3, [pc, #264]	; (80077ec <USBD_CDC_Init+0x1e4>)
 80076e4:	7819      	ldrb	r1, [r3, #0]
 80076e6:	2340      	movs	r3, #64	; 0x40
 80076e8:	2202      	movs	r2, #2
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f002 fa9d 	bl	8009c2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80076f0:	4b3e      	ldr	r3, [pc, #248]	; (80077ec <USBD_CDC_Init+0x1e4>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	f003 020f 	and.w	r2, r3, #15
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	440b      	add	r3, r1
 8007704:	3324      	adds	r3, #36	; 0x24
 8007706:	2201      	movs	r2, #1
 8007708:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800770a:	4b39      	ldr	r3, [pc, #228]	; (80077f0 <USBD_CDC_Init+0x1e8>)
 800770c:	7819      	ldrb	r1, [r3, #0]
 800770e:	2340      	movs	r3, #64	; 0x40
 8007710:	2202      	movs	r2, #2
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f002 fa89 	bl	8009c2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007718:	4b35      	ldr	r3, [pc, #212]	; (80077f0 <USBD_CDC_Init+0x1e8>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	f003 020f 	and.w	r2, r3, #15
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	440b      	add	r3, r1
 800772c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007730:	2201      	movs	r2, #1
 8007732:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007734:	4b2f      	ldr	r3, [pc, #188]	; (80077f4 <USBD_CDC_Init+0x1ec>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	f003 020f 	and.w	r2, r3, #15
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	440b      	add	r3, r1
 8007748:	3326      	adds	r3, #38	; 0x26
 800774a:	2210      	movs	r2, #16
 800774c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800774e:	4b29      	ldr	r3, [pc, #164]	; (80077f4 <USBD_CDC_Init+0x1ec>)
 8007750:	7819      	ldrb	r1, [r3, #0]
 8007752:	2308      	movs	r3, #8
 8007754:	2203      	movs	r2, #3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f002 fa67 	bl	8009c2a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800775c:	4b25      	ldr	r3, [pc, #148]	; (80077f4 <USBD_CDC_Init+0x1ec>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	f003 020f 	and.w	r2, r3, #15
 8007764:	6879      	ldr	r1, [r7, #4]
 8007766:	4613      	mov	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	440b      	add	r3, r1
 8007770:	3324      	adds	r3, #36	; 0x24
 8007772:	2201      	movs	r2, #1
 8007774:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	33b0      	adds	r3, #176	; 0xb0
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80077ac:	2302      	movs	r3, #2
 80077ae:	e018      	b.n	80077e2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	7c1b      	ldrb	r3, [r3, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10a      	bne.n	80077ce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077b8:	4b0d      	ldr	r3, [pc, #52]	; (80077f0 <USBD_CDC_Init+0x1e8>)
 80077ba:	7819      	ldrb	r1, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f002 fb1e 	bl	8009e08 <USBD_LL_PrepareReceive>
 80077cc:	e008      	b.n	80077e0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077ce:	4b08      	ldr	r3, [pc, #32]	; (80077f0 <USBD_CDC_Init+0x1e8>)
 80077d0:	7819      	ldrb	r1, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077d8:	2340      	movs	r3, #64	; 0x40
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f002 fb14 	bl	8009e08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	20000097 	.word	0x20000097
 80077f0:	20000098 	.word	0x20000098
 80077f4:	20000099 	.word	0x20000099

080077f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	460b      	mov	r3, r1
 8007802:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007804:	4b3a      	ldr	r3, [pc, #232]	; (80078f0 <USBD_CDC_DeInit+0xf8>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f002 fa33 	bl	8009c76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007810:	4b37      	ldr	r3, [pc, #220]	; (80078f0 <USBD_CDC_DeInit+0xf8>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	f003 020f 	and.w	r2, r3, #15
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	4613      	mov	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	440b      	add	r3, r1
 8007824:	3324      	adds	r3, #36	; 0x24
 8007826:	2200      	movs	r2, #0
 8007828:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800782a:	4b32      	ldr	r3, [pc, #200]	; (80078f4 <USBD_CDC_DeInit+0xfc>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f002 fa20 	bl	8009c76 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007836:	4b2f      	ldr	r3, [pc, #188]	; (80078f4 <USBD_CDC_DeInit+0xfc>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	f003 020f 	and.w	r2, r3, #15
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	4613      	mov	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800784e:	2200      	movs	r2, #0
 8007850:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007852:	4b29      	ldr	r3, [pc, #164]	; (80078f8 <USBD_CDC_DeInit+0x100>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f002 fa0c 	bl	8009c76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800785e:	4b26      	ldr	r3, [pc, #152]	; (80078f8 <USBD_CDC_DeInit+0x100>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f003 020f 	and.w	r2, r3, #15
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	4613      	mov	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	440b      	add	r3, r1
 8007872:	3324      	adds	r3, #36	; 0x24
 8007874:	2200      	movs	r2, #0
 8007876:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007878:	4b1f      	ldr	r3, [pc, #124]	; (80078f8 <USBD_CDC_DeInit+0x100>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	f003 020f 	and.w	r2, r3, #15
 8007880:	6879      	ldr	r1, [r7, #4]
 8007882:	4613      	mov	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4413      	add	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	440b      	add	r3, r1
 800788c:	3326      	adds	r3, #38	; 0x26
 800788e:	2200      	movs	r2, #0
 8007890:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	32b0      	adds	r2, #176	; 0xb0
 800789c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01f      	beq.n	80078e4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	33b0      	adds	r3, #176	; 0xb0
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	32b0      	adds	r2, #176	; 0xb0
 80078c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f002 fae0 	bl	8009e8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	32b0      	adds	r2, #176	; 0xb0
 80078d6:	2100      	movs	r1, #0
 80078d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	20000097 	.word	0x20000097
 80078f4:	20000098 	.word	0x20000098
 80078f8:	20000099 	.word	0x20000099

080078fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	32b0      	adds	r2, #176	; 0xb0
 8007910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007914:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007928:	2303      	movs	r3, #3
 800792a:	e0bf      	b.n	8007aac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007934:	2b00      	cmp	r3, #0
 8007936:	d050      	beq.n	80079da <USBD_CDC_Setup+0xde>
 8007938:	2b20      	cmp	r3, #32
 800793a:	f040 80af 	bne.w	8007a9c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	88db      	ldrh	r3, [r3, #6]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d03a      	beq.n	80079bc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	b25b      	sxtb	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	da1b      	bge.n	8007988 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	33b0      	adds	r3, #176	; 0xb0
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007966:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	88d2      	ldrh	r2, [r2, #6]
 800796c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	88db      	ldrh	r3, [r3, #6]
 8007972:	2b07      	cmp	r3, #7
 8007974:	bf28      	it	cs
 8007976:	2307      	movcs	r3, #7
 8007978:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	89fa      	ldrh	r2, [r7, #14]
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 fd43 	bl	800940c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007986:	e090      	b.n	8007aaa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	785a      	ldrb	r2, [r3, #1]
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	88db      	ldrh	r3, [r3, #6]
 8007996:	2b3f      	cmp	r3, #63	; 0x3f
 8007998:	d803      	bhi.n	80079a2 <USBD_CDC_Setup+0xa6>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	88db      	ldrh	r3, [r3, #6]
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	e000      	b.n	80079a4 <USBD_CDC_Setup+0xa8>
 80079a2:	2240      	movs	r2, #64	; 0x40
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80079aa:	6939      	ldr	r1, [r7, #16]
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80079b2:	461a      	mov	r2, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 fd55 	bl	8009464 <USBD_CtlPrepareRx>
      break;
 80079ba:	e076      	b.n	8007aaa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	33b0      	adds	r3, #176	; 0xb0
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	7850      	ldrb	r0, [r2, #1]
 80079d2:	2200      	movs	r2, #0
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	4798      	blx	r3
      break;
 80079d8:	e067      	b.n	8007aaa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	785b      	ldrb	r3, [r3, #1]
 80079de:	2b0b      	cmp	r3, #11
 80079e0:	d851      	bhi.n	8007a86 <USBD_CDC_Setup+0x18a>
 80079e2:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <USBD_CDC_Setup+0xec>)
 80079e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e8:	08007a19 	.word	0x08007a19
 80079ec:	08007a95 	.word	0x08007a95
 80079f0:	08007a87 	.word	0x08007a87
 80079f4:	08007a87 	.word	0x08007a87
 80079f8:	08007a87 	.word	0x08007a87
 80079fc:	08007a87 	.word	0x08007a87
 8007a00:	08007a87 	.word	0x08007a87
 8007a04:	08007a87 	.word	0x08007a87
 8007a08:	08007a87 	.word	0x08007a87
 8007a0c:	08007a87 	.word	0x08007a87
 8007a10:	08007a43 	.word	0x08007a43
 8007a14:	08007a6d 	.word	0x08007a6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d107      	bne.n	8007a34 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a24:	f107 030a 	add.w	r3, r7, #10
 8007a28:	2202      	movs	r2, #2
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 fced 	bl	800940c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a32:	e032      	b.n	8007a9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 fc77 	bl	800932a <USBD_CtlError>
            ret = USBD_FAIL;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	75fb      	strb	r3, [r7, #23]
          break;
 8007a40:	e02b      	b.n	8007a9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d107      	bne.n	8007a5e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a4e:	f107 030d 	add.w	r3, r7, #13
 8007a52:	2201      	movs	r2, #1
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f001 fcd8 	bl	800940c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a5c:	e01d      	b.n	8007a9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 fc62 	bl	800932a <USBD_CtlError>
            ret = USBD_FAIL;
 8007a66:	2303      	movs	r3, #3
 8007a68:	75fb      	strb	r3, [r7, #23]
          break;
 8007a6a:	e016      	b.n	8007a9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d00f      	beq.n	8007a98 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f001 fc55 	bl	800932a <USBD_CtlError>
            ret = USBD_FAIL;
 8007a80:	2303      	movs	r3, #3
 8007a82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a84:	e008      	b.n	8007a98 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 fc4e 	bl	800932a <USBD_CtlError>
          ret = USBD_FAIL;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	75fb      	strb	r3, [r7, #23]
          break;
 8007a92:	e002      	b.n	8007a9a <USBD_CDC_Setup+0x19e>
          break;
 8007a94:	bf00      	nop
 8007a96:	e008      	b.n	8007aaa <USBD_CDC_Setup+0x1ae>
          break;
 8007a98:	bf00      	nop
      }
      break;
 8007a9a:	e006      	b.n	8007aaa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 fc43 	bl	800932a <USBD_CtlError>
      ret = USBD_FAIL;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ac6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	32b0      	adds	r2, #176	; 0xb0
 8007ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e065      	b.n	8007baa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	32b0      	adds	r2, #176	; 0xb0
 8007ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007aee:	78fb      	ldrb	r3, [r7, #3]
 8007af0:	f003 020f 	and.w	r2, r3, #15
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	440b      	add	r3, r1
 8007b00:	3318      	adds	r3, #24
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d02f      	beq.n	8007b68 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007b08:	78fb      	ldrb	r3, [r7, #3]
 8007b0a:	f003 020f 	and.w	r2, r3, #15
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	3318      	adds	r3, #24
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	f003 010f 	and.w	r1, r3, #15
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	460b      	mov	r3, r1
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	440b      	add	r3, r1
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4403      	add	r3, r0
 8007b30:	3348      	adds	r3, #72	; 0x48
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b38:	fb01 f303 	mul.w	r3, r1, r3
 8007b3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d112      	bne.n	8007b68 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007b42:	78fb      	ldrb	r3, [r7, #3]
 8007b44:	f003 020f 	and.w	r2, r3, #15
 8007b48:	6879      	ldr	r1, [r7, #4]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	440b      	add	r3, r1
 8007b54:	3318      	adds	r3, #24
 8007b56:	2200      	movs	r2, #0
 8007b58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b5a:	78f9      	ldrb	r1, [r7, #3]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	2200      	movs	r2, #0
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f002 f930 	bl	8009dc6 <USBD_LL_Transmit>
 8007b66:	e01f      	b.n	8007ba8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	33b0      	adds	r3, #176	; 0xb0
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d010      	beq.n	8007ba8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	33b0      	adds	r3, #176	; 0xb0
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007ba4:	78fa      	ldrb	r2, [r7, #3]
 8007ba6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	32b0      	adds	r2, #176	; 0xb0
 8007bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bcc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	32b0      	adds	r2, #176	; 0xb0
 8007bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e01a      	b.n	8007c1a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f002 f92e 	bl	8009e4a <USBD_LL_GetRxDataSize>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	33b0      	adds	r3, #176	; 0xb0
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c14:	4611      	mov	r1, r2
 8007c16:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	32b0      	adds	r2, #176	; 0xb0
 8007c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e025      	b.n	8007c90 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	33b0      	adds	r3, #176	; 0xb0
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01a      	beq.n	8007c8e <USBD_CDC_EP0_RxReady+0x6c>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c5e:	2bff      	cmp	r3, #255	; 0xff
 8007c60:	d015      	beq.n	8007c8e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	33b0      	adds	r3, #176	; 0xb0
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007c7a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007c82:	b292      	uxth	r2, r2
 8007c84:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	22ff      	movs	r2, #255	; 0xff
 8007c8a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ca0:	2182      	movs	r1, #130	; 0x82
 8007ca2:	4818      	ldr	r0, [pc, #96]	; (8007d04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ca4:	f000 fd09 	bl	80086ba <USBD_GetEpDesc>
 8007ca8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007caa:	2101      	movs	r1, #1
 8007cac:	4815      	ldr	r0, [pc, #84]	; (8007d04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007cae:	f000 fd04 	bl	80086ba <USBD_GetEpDesc>
 8007cb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007cb4:	2181      	movs	r1, #129	; 0x81
 8007cb6:	4813      	ldr	r0, [pc, #76]	; (8007d04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007cb8:	f000 fcff 	bl	80086ba <USBD_GetEpDesc>
 8007cbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2210      	movs	r2, #16
 8007cc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d006      	beq.n	8007cde <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cd8:	711a      	strb	r2, [r3, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d006      	beq.n	8007cf2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cec:	711a      	strb	r2, [r3, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2243      	movs	r2, #67	; 0x43
 8007cf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007cf8:	4b02      	ldr	r3, [pc, #8]	; (8007d04 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20000054 	.word	0x20000054

08007d08 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d10:	2182      	movs	r1, #130	; 0x82
 8007d12:	4818      	ldr	r0, [pc, #96]	; (8007d74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d14:	f000 fcd1 	bl	80086ba <USBD_GetEpDesc>
 8007d18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	4815      	ldr	r0, [pc, #84]	; (8007d74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d1e:	f000 fccc 	bl	80086ba <USBD_GetEpDesc>
 8007d22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d24:	2181      	movs	r1, #129	; 0x81
 8007d26:	4813      	ldr	r0, [pc, #76]	; (8007d74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d28:	f000 fcc7 	bl	80086ba <USBD_GetEpDesc>
 8007d2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2210      	movs	r2, #16
 8007d38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d006      	beq.n	8007d4e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	2200      	movs	r2, #0
 8007d44:	711a      	strb	r2, [r3, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f042 0202 	orr.w	r2, r2, #2
 8007d4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d006      	beq.n	8007d62 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	711a      	strb	r2, [r3, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f042 0202 	orr.w	r2, r2, #2
 8007d60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2243      	movs	r2, #67	; 0x43
 8007d66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d68:	4b02      	ldr	r3, [pc, #8]	; (8007d74 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20000054 	.word	0x20000054

08007d78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b086      	sub	sp, #24
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d80:	2182      	movs	r1, #130	; 0x82
 8007d82:	4818      	ldr	r0, [pc, #96]	; (8007de4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d84:	f000 fc99 	bl	80086ba <USBD_GetEpDesc>
 8007d88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	4815      	ldr	r0, [pc, #84]	; (8007de4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d8e:	f000 fc94 	bl	80086ba <USBD_GetEpDesc>
 8007d92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d94:	2181      	movs	r1, #129	; 0x81
 8007d96:	4813      	ldr	r0, [pc, #76]	; (8007de4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007d98:	f000 fc8f 	bl	80086ba <USBD_GetEpDesc>
 8007d9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	2210      	movs	r2, #16
 8007da8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d006      	beq.n	8007dbe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007db8:	711a      	strb	r2, [r3, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d006      	beq.n	8007dd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dcc:	711a      	strb	r2, [r3, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2243      	movs	r2, #67	; 0x43
 8007dd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007dd8:	4b02      	ldr	r3, [pc, #8]	; (8007de4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20000054 	.word	0x20000054

08007de8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	220a      	movs	r2, #10
 8007df4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007df6:	4b03      	ldr	r3, [pc, #12]	; (8007e04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	20000010 	.word	0x20000010

08007e08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e009      	b.n	8007e30 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	33b0      	adds	r3, #176	; 0xb0
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	32b0      	adds	r2, #176	; 0xb0
 8007e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e56:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e008      	b.n	8007e74 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	371c      	adds	r7, #28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	32b0      	adds	r2, #176	; 0xb0
 8007e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e004      	b.n	8007eae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
	...

08007ebc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	32b0      	adds	r2, #176	; 0xb0
 8007ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	32b0      	adds	r2, #176	; 0xb0
 8007ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e018      	b.n	8007f1c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	7c1b      	ldrb	r3, [r3, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10a      	bne.n	8007f08 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ef2:	4b0c      	ldr	r3, [pc, #48]	; (8007f24 <USBD_CDC_ReceivePacket+0x68>)
 8007ef4:	7819      	ldrb	r1, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f001 ff81 	bl	8009e08 <USBD_LL_PrepareReceive>
 8007f06:	e008      	b.n	8007f1a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f08:	4b06      	ldr	r3, [pc, #24]	; (8007f24 <USBD_CDC_ReceivePacket+0x68>)
 8007f0a:	7819      	ldrb	r1, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f12:	2340      	movs	r3, #64	; 0x40
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 ff77 	bl	8009e08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	20000098 	.word	0x20000098

08007f28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	4613      	mov	r3, r2
 8007f34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e01f      	b.n	8007f80 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	79fa      	ldrb	r2, [r7, #7]
 8007f72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f001 fdeb 	bl	8009b50 <USBD_LL_Init>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e025      	b.n	8007fec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	32ae      	adds	r2, #174	; 0xae
 8007fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00f      	beq.n	8007fdc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	32ae      	adds	r2, #174	; 0xae
 8007fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fcc:	f107 020e 	add.w	r2, r7, #14
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	4798      	blx	r3
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 fdf9 	bl	8009bf4 <USBD_LL_Start>
 8008002:	4603      	mov	r3, r0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008014:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	460b      	mov	r3, r1
 800802c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008038:	2b00      	cmp	r3, #0
 800803a:	d009      	beq.n	8008050 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	78fa      	ldrb	r2, [r7, #3]
 8008046:	4611      	mov	r1, r2
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	4798      	blx	r3
 800804c:	4603      	mov	r3, r0
 800804e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008050:	7bfb      	ldrb	r3, [r7, #15]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	78fa      	ldrb	r2, [r7, #3]
 8008074:	4611      	mov	r1, r2
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008080:	2303      	movs	r3, #3
 8008082:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008084:	7bfb      	ldrb	r3, [r7, #15]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f001 f908 	bl	80092b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80080b4:	461a      	mov	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080c2:	f003 031f 	and.w	r3, r3, #31
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d01a      	beq.n	8008100 <USBD_LL_SetupStage+0x72>
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d822      	bhi.n	8008114 <USBD_LL_SetupStage+0x86>
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <USBD_LL_SetupStage+0x4a>
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d00a      	beq.n	80080ec <USBD_LL_SetupStage+0x5e>
 80080d6:	e01d      	b.n	8008114 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fb5f 	bl	80087a4 <USBD_StdDevReq>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ea:	e020      	b.n	800812e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fbc7 	bl	8008888 <USBD_StdItfReq>
 80080fa:	4603      	mov	r3, r0
 80080fc:	73fb      	strb	r3, [r7, #15]
      break;
 80080fe:	e016      	b.n	800812e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fc29 	bl	8008960 <USBD_StdEPReq>
 800810e:	4603      	mov	r3, r0
 8008110:	73fb      	strb	r3, [r7, #15]
      break;
 8008112:	e00c      	b.n	800812e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800811a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800811e:	b2db      	uxtb	r3, r3
 8008120:	4619      	mov	r1, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 fdc6 	bl	8009cb4 <USBD_LL_StallEP>
 8008128:	4603      	mov	r3, r0
 800812a:	73fb      	strb	r3, [r7, #15]
      break;
 800812c:	bf00      	nop
  }

  return ret;
 800812e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	460b      	mov	r3, r1
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800814a:	7afb      	ldrb	r3, [r7, #11]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d16e      	bne.n	800822e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008156:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800815e:	2b03      	cmp	r3, #3
 8008160:	f040 8098 	bne.w	8008294 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	429a      	cmp	r2, r3
 800816e:	d913      	bls.n	8008198 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	1ad2      	subs	r2, r2, r3
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	4293      	cmp	r3, r2
 8008188:	bf28      	it	cs
 800818a:	4613      	movcs	r3, r2
 800818c:	461a      	mov	r2, r3
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f001 f984 	bl	800949e <USBD_CtlContinueRx>
 8008196:	e07d      	b.n	8008294 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800819e:	f003 031f 	and.w	r3, r3, #31
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d014      	beq.n	80081d0 <USBD_LL_DataOutStage+0x98>
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d81d      	bhi.n	80081e6 <USBD_LL_DataOutStage+0xae>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <USBD_LL_DataOutStage+0x7c>
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d003      	beq.n	80081ba <USBD_LL_DataOutStage+0x82>
 80081b2:	e018      	b.n	80081e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	75bb      	strb	r3, [r7, #22]
            break;
 80081b8:	e018      	b.n	80081ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	4619      	mov	r1, r3
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 fa5e 	bl	8008686 <USBD_CoreFindIF>
 80081ca:	4603      	mov	r3, r0
 80081cc:	75bb      	strb	r3, [r7, #22]
            break;
 80081ce:	e00d      	b.n	80081ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	4619      	mov	r1, r3
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 fa60 	bl	80086a0 <USBD_CoreFindEP>
 80081e0:	4603      	mov	r3, r0
 80081e2:	75bb      	strb	r3, [r7, #22]
            break;
 80081e4:	e002      	b.n	80081ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	75bb      	strb	r3, [r7, #22]
            break;
 80081ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80081ec:	7dbb      	ldrb	r3, [r7, #22]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d119      	bne.n	8008226 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d113      	bne.n	8008226 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80081fe:	7dba      	ldrb	r2, [r7, #22]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	32ae      	adds	r2, #174	; 0xae
 8008204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00b      	beq.n	8008226 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800820e:	7dba      	ldrb	r2, [r7, #22]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008216:	7dba      	ldrb	r2, [r7, #22]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	32ae      	adds	r2, #174	; 0xae
 800821c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f001 f94a 	bl	80094c0 <USBD_CtlSendStatus>
 800822c:	e032      	b.n	8008294 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800822e:	7afb      	ldrb	r3, [r7, #11]
 8008230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008234:	b2db      	uxtb	r3, r3
 8008236:	4619      	mov	r1, r3
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 fa31 	bl	80086a0 <USBD_CoreFindEP>
 800823e:	4603      	mov	r3, r0
 8008240:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008242:	7dbb      	ldrb	r3, [r7, #22]
 8008244:	2bff      	cmp	r3, #255	; 0xff
 8008246:	d025      	beq.n	8008294 <USBD_LL_DataOutStage+0x15c>
 8008248:	7dbb      	ldrb	r3, [r7, #22]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d122      	bne.n	8008294 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b03      	cmp	r3, #3
 8008258:	d117      	bne.n	800828a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800825a:	7dba      	ldrb	r2, [r7, #22]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	32ae      	adds	r2, #174	; 0xae
 8008260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00f      	beq.n	800828a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800826a:	7dba      	ldrb	r2, [r7, #22]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008272:	7dba      	ldrb	r2, [r7, #22]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	32ae      	adds	r2, #174	; 0xae
 8008278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	7afa      	ldrb	r2, [r7, #11]
 8008280:	4611      	mov	r1, r2
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	4798      	blx	r3
 8008286:	4603      	mov	r3, r0
 8008288:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800828a:	7dfb      	ldrb	r3, [r7, #23]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
 8008292:	e000      	b.n	8008296 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b086      	sub	sp, #24
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	460b      	mov	r3, r1
 80082a8:	607a      	str	r2, [r7, #4]
 80082aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80082ac:	7afb      	ldrb	r3, [r7, #11]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d16f      	bne.n	8008392 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3314      	adds	r3, #20
 80082b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d15a      	bne.n	8008378 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	689a      	ldr	r2, [r3, #8]
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d914      	bls.n	80082f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	689a      	ldr	r2, [r3, #8]
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	1ad2      	subs	r2, r2, r3
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	461a      	mov	r2, r3
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f001 f8ac 	bl	8009442 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082ea:	2300      	movs	r3, #0
 80082ec:	2200      	movs	r2, #0
 80082ee:	2100      	movs	r1, #0
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f001 fd89 	bl	8009e08 <USBD_LL_PrepareReceive>
 80082f6:	e03f      	b.n	8008378 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	68da      	ldr	r2, [r3, #12]
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	429a      	cmp	r2, r3
 8008302:	d11c      	bne.n	800833e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800830c:	429a      	cmp	r2, r3
 800830e:	d316      	bcc.n	800833e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	685a      	ldr	r2, [r3, #4]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800831a:	429a      	cmp	r2, r3
 800831c:	d20f      	bcs.n	800833e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800831e:	2200      	movs	r2, #0
 8008320:	2100      	movs	r1, #0
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f001 f88d 	bl	8009442 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008330:	2300      	movs	r3, #0
 8008332:	2200      	movs	r2, #0
 8008334:	2100      	movs	r1, #0
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f001 fd66 	bl	8009e08 <USBD_LL_PrepareReceive>
 800833c:	e01c      	b.n	8008378 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b03      	cmp	r3, #3
 8008348:	d10f      	bne.n	800836a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800836a:	2180      	movs	r1, #128	; 0x80
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f001 fca1 	bl	8009cb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f001 f8b7 	bl	80094e6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d03a      	beq.n	80083f8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f7ff fe42 	bl	800800c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008390:	e032      	b.n	80083f8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008392:	7afb      	ldrb	r3, [r7, #11]
 8008394:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008398:	b2db      	uxtb	r3, r3
 800839a:	4619      	mov	r1, r3
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 f97f 	bl	80086a0 <USBD_CoreFindEP>
 80083a2:	4603      	mov	r3, r0
 80083a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083a6:	7dfb      	ldrb	r3, [r7, #23]
 80083a8:	2bff      	cmp	r3, #255	; 0xff
 80083aa:	d025      	beq.n	80083f8 <USBD_LL_DataInStage+0x15a>
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d122      	bne.n	80083f8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d11c      	bne.n	80083f8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80083be:	7dfa      	ldrb	r2, [r7, #23]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	32ae      	adds	r2, #174	; 0xae
 80083c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d014      	beq.n	80083f8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80083ce:	7dfa      	ldrb	r2, [r7, #23]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80083d6:	7dfa      	ldrb	r2, [r7, #23]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	32ae      	adds	r2, #174	; 0xae
 80083dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	7afa      	ldrb	r2, [r7, #11]
 80083e4:	4611      	mov	r1, r2
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	4798      	blx	r3
 80083ea:	4603      	mov	r3, r0
 80083ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80083ee:	7dbb      	ldrb	r3, [r7, #22]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80083f4:	7dbb      	ldrb	r3, [r7, #22]
 80083f6:	e000      	b.n	80083fa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843a:	2b00      	cmp	r3, #0
 800843c:	d014      	beq.n	8008468 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00e      	beq.n	8008468 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	6852      	ldr	r2, [r2, #4]
 8008456:	b2d2      	uxtb	r2, r2
 8008458:	4611      	mov	r1, r2
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	4798      	blx	r3
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008464:	2303      	movs	r3, #3
 8008466:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008468:	2340      	movs	r3, #64	; 0x40
 800846a:	2200      	movs	r2, #0
 800846c:	2100      	movs	r1, #0
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f001 fbdb 	bl	8009c2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2240      	movs	r2, #64	; 0x40
 8008480:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008484:	2340      	movs	r3, #64	; 0x40
 8008486:	2200      	movs	r2, #0
 8008488:	2180      	movs	r1, #128	; 0x80
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f001 fbcd 	bl	8009c2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2240      	movs	r2, #64	; 0x40
 800849a:	621a      	str	r2, [r3, #32]

  return ret;
 800849c:	7bfb      	ldrb	r3, [r7, #15]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	78fa      	ldrb	r2, [r7, #3]
 80084b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2204      	movs	r2, #4
 80084e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b04      	cmp	r3, #4
 8008504:	d106      	bne.n	8008514 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800850c:	b2da      	uxtb	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b082      	sub	sp, #8
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b03      	cmp	r3, #3
 8008534:	d110      	bne.n	8008558 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d005      	beq.n	8008558 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	460b      	mov	r3, r1
 800856c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	32ae      	adds	r2, #174	; 0xae
 8008578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008580:	2303      	movs	r3, #3
 8008582:	e01c      	b.n	80085be <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b03      	cmp	r3, #3
 800858e:	d115      	bne.n	80085bc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	32ae      	adds	r2, #174	; 0xae
 800859a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	32ae      	adds	r2, #174	; 0xae
 80085ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	78fa      	ldrb	r2, [r7, #3]
 80085b6:	4611      	mov	r1, r2
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	460b      	mov	r3, r1
 80085d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	32ae      	adds	r2, #174	; 0xae
 80085dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e01c      	b.n	8008622 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d115      	bne.n	8008620 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	32ae      	adds	r2, #174	; 0xae
 80085fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00b      	beq.n	8008620 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	32ae      	adds	r2, #174	; 0xae
 8008612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008618:	78fa      	ldrb	r2, [r7, #3]
 800861a:	4611      	mov	r1, r2
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800862a:	b480      	push	{r7}
 800862c:	b083      	sub	sp, #12
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00e      	beq.n	800867c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6852      	ldr	r2, [r2, #4]
 800866a:	b2d2      	uxtb	r2, r2
 800866c:	4611      	mov	r1, r2
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008678:	2303      	movs	r3, #3
 800867a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800867c:	7bfb      	ldrb	r3, [r7, #15]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008692:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80086ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b086      	sub	sp, #24
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	460b      	mov	r3, r1
 80086c4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	885b      	ldrh	r3, [r3, #2]
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	b29b      	uxth	r3, r3
 80086de:	429a      	cmp	r2, r3
 80086e0:	d920      	bls.n	8008724 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80086ea:	e013      	b.n	8008714 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80086ec:	f107 030a 	add.w	r3, r7, #10
 80086f0:	4619      	mov	r1, r3
 80086f2:	6978      	ldr	r0, [r7, #20]
 80086f4:	f000 f81b 	bl	800872e <USBD_GetNextDesc>
 80086f8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	785b      	ldrb	r3, [r3, #1]
 80086fe:	2b05      	cmp	r3, #5
 8008700:	d108      	bne.n	8008714 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	789b      	ldrb	r3, [r3, #2]
 800870a:	78fa      	ldrb	r2, [r7, #3]
 800870c:	429a      	cmp	r2, r3
 800870e:	d008      	beq.n	8008722 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008710:	2300      	movs	r3, #0
 8008712:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	885b      	ldrh	r3, [r3, #2]
 8008718:	b29a      	uxth	r2, r3
 800871a:	897b      	ldrh	r3, [r7, #10]
 800871c:	429a      	cmp	r2, r3
 800871e:	d8e5      	bhi.n	80086ec <USBD_GetEpDesc+0x32>
 8008720:	e000      	b.n	8008724 <USBD_GetEpDesc+0x6a>
          break;
 8008722:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008724:	693b      	ldr	r3, [r7, #16]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3718      	adds	r7, #24
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800872e:	b480      	push	{r7}
 8008730:	b085      	sub	sp, #20
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	881a      	ldrh	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	b29b      	uxth	r3, r3
 8008746:	4413      	add	r3, r2
 8008748:	b29a      	uxth	r2, r3
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	461a      	mov	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4413      	add	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800875a:	68fb      	ldr	r3, [r7, #12]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008768:	b480      	push	{r7}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	3301      	adds	r3, #1
 800877e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008786:	8a3b      	ldrh	r3, [r7, #16]
 8008788:	021b      	lsls	r3, r3, #8
 800878a:	b21a      	sxth	r2, r3
 800878c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008790:	4313      	orrs	r3, r2
 8008792:	b21b      	sxth	r3, r3
 8008794:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008796:	89fb      	ldrh	r3, [r7, #14]
}
 8008798:	4618      	mov	r0, r3
 800879a:	371c      	adds	r7, #28
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ba:	2b40      	cmp	r3, #64	; 0x40
 80087bc:	d005      	beq.n	80087ca <USBD_StdDevReq+0x26>
 80087be:	2b40      	cmp	r3, #64	; 0x40
 80087c0:	d857      	bhi.n	8008872 <USBD_StdDevReq+0xce>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00f      	beq.n	80087e6 <USBD_StdDevReq+0x42>
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	d153      	bne.n	8008872 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	32ae      	adds	r2, #174	; 0xae
 80087d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	4798      	blx	r3
 80087e0:	4603      	mov	r3, r0
 80087e2:	73fb      	strb	r3, [r7, #15]
      break;
 80087e4:	e04a      	b.n	800887c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	785b      	ldrb	r3, [r3, #1]
 80087ea:	2b09      	cmp	r3, #9
 80087ec:	d83b      	bhi.n	8008866 <USBD_StdDevReq+0xc2>
 80087ee:	a201      	add	r2, pc, #4	; (adr r2, 80087f4 <USBD_StdDevReq+0x50>)
 80087f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f4:	08008849 	.word	0x08008849
 80087f8:	0800885d 	.word	0x0800885d
 80087fc:	08008867 	.word	0x08008867
 8008800:	08008853 	.word	0x08008853
 8008804:	08008867 	.word	0x08008867
 8008808:	08008827 	.word	0x08008827
 800880c:	0800881d 	.word	0x0800881d
 8008810:	08008867 	.word	0x08008867
 8008814:	0800883f 	.word	0x0800883f
 8008818:	08008831 	.word	0x08008831
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fa3c 	bl	8008c9c <USBD_GetDescriptor>
          break;
 8008824:	e024      	b.n	8008870 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fba1 	bl	8008f70 <USBD_SetAddress>
          break;
 800882e:	e01f      	b.n	8008870 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fbe0 	bl	8008ff8 <USBD_SetConfig>
 8008838:	4603      	mov	r3, r0
 800883a:	73fb      	strb	r3, [r7, #15]
          break;
 800883c:	e018      	b.n	8008870 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fc83 	bl	800914c <USBD_GetConfig>
          break;
 8008846:	e013      	b.n	8008870 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fcb4 	bl	80091b8 <USBD_GetStatus>
          break;
 8008850:	e00e      	b.n	8008870 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fce3 	bl	8009220 <USBD_SetFeature>
          break;
 800885a:	e009      	b.n	8008870 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fd07 	bl	8009272 <USBD_ClrFeature>
          break;
 8008864:	e004      	b.n	8008870 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fd5e 	bl	800932a <USBD_CtlError>
          break;
 800886e:	bf00      	nop
      }
      break;
 8008870:	e004      	b.n	800887c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fd58 	bl	800932a <USBD_CtlError>
      break;
 800887a:	bf00      	nop
  }

  return ret;
 800887c:	7bfb      	ldrb	r3, [r7, #15]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop

08008888 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800889e:	2b40      	cmp	r3, #64	; 0x40
 80088a0:	d005      	beq.n	80088ae <USBD_StdItfReq+0x26>
 80088a2:	2b40      	cmp	r3, #64	; 0x40
 80088a4:	d852      	bhi.n	800894c <USBD_StdItfReq+0xc4>
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <USBD_StdItfReq+0x26>
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	d14e      	bne.n	800894c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	3b01      	subs	r3, #1
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d840      	bhi.n	800893e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	889b      	ldrh	r3, [r3, #4]
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d836      	bhi.n	8008934 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	889b      	ldrh	r3, [r3, #4]
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff fed9 	bl	8008686 <USBD_CoreFindIF>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	2bff      	cmp	r3, #255	; 0xff
 80088dc:	d01d      	beq.n	800891a <USBD_StdItfReq+0x92>
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d11a      	bne.n	800891a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80088e4:	7bba      	ldrb	r2, [r7, #14]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	32ae      	adds	r2, #174	; 0xae
 80088ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00f      	beq.n	8008914 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80088f4:	7bba      	ldrb	r2, [r7, #14]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80088fc:	7bba      	ldrb	r2, [r7, #14]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	32ae      	adds	r2, #174	; 0xae
 8008902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	4798      	blx	r3
 800890e:	4603      	mov	r3, r0
 8008910:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008912:	e004      	b.n	800891e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008914:	2303      	movs	r3, #3
 8008916:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008918:	e001      	b.n	800891e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800891a:	2303      	movs	r3, #3
 800891c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	88db      	ldrh	r3, [r3, #6]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d110      	bne.n	8008948 <USBD_StdItfReq+0xc0>
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10d      	bne.n	8008948 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fdc7 	bl	80094c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008932:	e009      	b.n	8008948 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fcf7 	bl	800932a <USBD_CtlError>
          break;
 800893c:	e004      	b.n	8008948 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fcf2 	bl	800932a <USBD_CtlError>
          break;
 8008946:	e000      	b.n	800894a <USBD_StdItfReq+0xc2>
          break;
 8008948:	bf00      	nop
      }
      break;
 800894a:	e004      	b.n	8008956 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fceb 	bl	800932a <USBD_CtlError>
      break;
 8008954:	bf00      	nop
  }

  return ret;
 8008956:	7bfb      	ldrb	r3, [r7, #15]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	889b      	ldrh	r3, [r3, #4]
 8008972:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800897c:	2b40      	cmp	r3, #64	; 0x40
 800897e:	d007      	beq.n	8008990 <USBD_StdEPReq+0x30>
 8008980:	2b40      	cmp	r3, #64	; 0x40
 8008982:	f200 817f 	bhi.w	8008c84 <USBD_StdEPReq+0x324>
 8008986:	2b00      	cmp	r3, #0
 8008988:	d02a      	beq.n	80089e0 <USBD_StdEPReq+0x80>
 800898a:	2b20      	cmp	r3, #32
 800898c:	f040 817a 	bne.w	8008c84 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008990:	7bbb      	ldrb	r3, [r7, #14]
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff fe83 	bl	80086a0 <USBD_CoreFindEP>
 800899a:	4603      	mov	r3, r0
 800899c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800899e:	7b7b      	ldrb	r3, [r7, #13]
 80089a0:	2bff      	cmp	r3, #255	; 0xff
 80089a2:	f000 8174 	beq.w	8008c8e <USBD_StdEPReq+0x32e>
 80089a6:	7b7b      	ldrb	r3, [r7, #13]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f040 8170 	bne.w	8008c8e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80089ae:	7b7a      	ldrb	r2, [r7, #13]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80089b6:	7b7a      	ldrb	r2, [r7, #13]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	32ae      	adds	r2, #174	; 0xae
 80089bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f000 8163 	beq.w	8008c8e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80089c8:	7b7a      	ldrb	r2, [r7, #13]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	32ae      	adds	r2, #174	; 0xae
 80089ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	4798      	blx	r3
 80089da:	4603      	mov	r3, r0
 80089dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80089de:	e156      	b.n	8008c8e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	785b      	ldrb	r3, [r3, #1]
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d008      	beq.n	80089fa <USBD_StdEPReq+0x9a>
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	f300 8145 	bgt.w	8008c78 <USBD_StdEPReq+0x318>
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 809b 	beq.w	8008b2a <USBD_StdEPReq+0x1ca>
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d03c      	beq.n	8008a72 <USBD_StdEPReq+0x112>
 80089f8:	e13e      	b.n	8008c78 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d002      	beq.n	8008a0c <USBD_StdEPReq+0xac>
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d016      	beq.n	8008a38 <USBD_StdEPReq+0xd8>
 8008a0a:	e02c      	b.n	8008a66 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00d      	beq.n	8008a2e <USBD_StdEPReq+0xce>
 8008a12:	7bbb      	ldrb	r3, [r7, #14]
 8008a14:	2b80      	cmp	r3, #128	; 0x80
 8008a16:	d00a      	beq.n	8008a2e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f001 f949 	bl	8009cb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a22:	2180      	movs	r1, #128	; 0x80
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 f945 	bl	8009cb4 <USBD_LL_StallEP>
 8008a2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a2c:	e020      	b.n	8008a70 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fc7a 	bl	800932a <USBD_CtlError>
              break;
 8008a36:	e01b      	b.n	8008a70 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	885b      	ldrh	r3, [r3, #2]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10e      	bne.n	8008a5e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00b      	beq.n	8008a5e <USBD_StdEPReq+0xfe>
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
 8008a48:	2b80      	cmp	r3, #128	; 0x80
 8008a4a:	d008      	beq.n	8008a5e <USBD_StdEPReq+0xfe>
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	88db      	ldrh	r3, [r3, #6]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d104      	bne.n	8008a5e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a54:	7bbb      	ldrb	r3, [r7, #14]
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f001 f92b 	bl	8009cb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fd2e 	bl	80094c0 <USBD_CtlSendStatus>

              break;
 8008a64:	e004      	b.n	8008a70 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fc5e 	bl	800932a <USBD_CtlError>
              break;
 8008a6e:	bf00      	nop
          }
          break;
 8008a70:	e107      	b.n	8008c82 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d002      	beq.n	8008a84 <USBD_StdEPReq+0x124>
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d016      	beq.n	8008ab0 <USBD_StdEPReq+0x150>
 8008a82:	e04b      	b.n	8008b1c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00d      	beq.n	8008aa6 <USBD_StdEPReq+0x146>
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	2b80      	cmp	r3, #128	; 0x80
 8008a8e:	d00a      	beq.n	8008aa6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f001 f90d 	bl	8009cb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a9a:	2180      	movs	r1, #128	; 0x80
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f001 f909 	bl	8009cb4 <USBD_LL_StallEP>
 8008aa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008aa4:	e040      	b.n	8008b28 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fc3e 	bl	800932a <USBD_CtlError>
              break;
 8008aae:	e03b      	b.n	8008b28 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	885b      	ldrh	r3, [r3, #2]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d136      	bne.n	8008b26 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d004      	beq.n	8008acc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f001 f913 	bl	8009cf2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fcf7 	bl	80094c0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7ff fde2 	bl	80086a0 <USBD_CoreFindEP>
 8008adc:	4603      	mov	r3, r0
 8008ade:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ae0:	7b7b      	ldrb	r3, [r7, #13]
 8008ae2:	2bff      	cmp	r3, #255	; 0xff
 8008ae4:	d01f      	beq.n	8008b26 <USBD_StdEPReq+0x1c6>
 8008ae6:	7b7b      	ldrb	r3, [r7, #13]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d11c      	bne.n	8008b26 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008aec:	7b7a      	ldrb	r2, [r7, #13]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008af4:	7b7a      	ldrb	r2, [r7, #13]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	32ae      	adds	r2, #174	; 0xae
 8008afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d010      	beq.n	8008b26 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b04:	7b7a      	ldrb	r2, [r7, #13]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	32ae      	adds	r2, #174	; 0xae
 8008b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	4798      	blx	r3
 8008b16:	4603      	mov	r3, r0
 8008b18:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008b1a:	e004      	b.n	8008b26 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fc03 	bl	800932a <USBD_CtlError>
              break;
 8008b24:	e000      	b.n	8008b28 <USBD_StdEPReq+0x1c8>
              break;
 8008b26:	bf00      	nop
          }
          break;
 8008b28:	e0ab      	b.n	8008c82 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d002      	beq.n	8008b3c <USBD_StdEPReq+0x1dc>
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d032      	beq.n	8008ba0 <USBD_StdEPReq+0x240>
 8008b3a:	e097      	b.n	8008c6c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d007      	beq.n	8008b52 <USBD_StdEPReq+0x1f2>
 8008b42:	7bbb      	ldrb	r3, [r7, #14]
 8008b44:	2b80      	cmp	r3, #128	; 0x80
 8008b46:	d004      	beq.n	8008b52 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fbed 	bl	800932a <USBD_CtlError>
                break;
 8008b50:	e091      	b.n	8008c76 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	da0b      	bge.n	8008b72 <USBD_StdEPReq+0x212>
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b60:	4613      	mov	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	3310      	adds	r3, #16
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	3304      	adds	r3, #4
 8008b70:	e00b      	b.n	8008b8a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
 8008b74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b78:	4613      	mov	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	4413      	add	r3, r2
 8008b88:	3304      	adds	r3, #4
 8008b8a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	2202      	movs	r2, #2
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fc37 	bl	800940c <USBD_CtlSendData>
              break;
 8008b9e:	e06a      	b.n	8008c76 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	da11      	bge.n	8008bcc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
 8008baa:	f003 020f 	and.w	r2, r3, #15
 8008bae:	6879      	ldr	r1, [r7, #4]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	440b      	add	r3, r1
 8008bba:	3324      	adds	r3, #36	; 0x24
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d117      	bne.n	8008bf2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fbb0 	bl	800932a <USBD_CtlError>
                  break;
 8008bca:	e054      	b.n	8008c76 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	f003 020f 	and.w	r2, r3, #15
 8008bd2:	6879      	ldr	r1, [r7, #4]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	440b      	add	r3, r1
 8008bde:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d104      	bne.n	8008bf2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fb9d 	bl	800932a <USBD_CtlError>
                  break;
 8008bf0:	e041      	b.n	8008c76 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	da0b      	bge.n	8008c12 <USBD_StdEPReq+0x2b2>
 8008bfa:	7bbb      	ldrb	r3, [r7, #14]
 8008bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c00:	4613      	mov	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	3310      	adds	r3, #16
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	3304      	adds	r3, #4
 8008c10:	e00b      	b.n	8008c2a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
 8008c14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c18:	4613      	mov	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	4413      	add	r3, r2
 8008c28:	3304      	adds	r3, #4
 8008c2a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d002      	beq.n	8008c38 <USBD_StdEPReq+0x2d8>
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
 8008c34:	2b80      	cmp	r3, #128	; 0x80
 8008c36:	d103      	bne.n	8008c40 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	e00e      	b.n	8008c5e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c40:	7bbb      	ldrb	r3, [r7, #14]
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f001 f873 	bl	8009d30 <USBD_LL_IsStallEP>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2201      	movs	r2, #1
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	e002      	b.n	8008c5e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2202      	movs	r2, #2
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fbd1 	bl	800940c <USBD_CtlSendData>
              break;
 8008c6a:	e004      	b.n	8008c76 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fb5b 	bl	800932a <USBD_CtlError>
              break;
 8008c74:	bf00      	nop
          }
          break;
 8008c76:	e004      	b.n	8008c82 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fb55 	bl	800932a <USBD_CtlError>
          break;
 8008c80:	bf00      	nop
      }
      break;
 8008c82:	e005      	b.n	8008c90 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fb4f 	bl	800932a <USBD_CtlError>
      break;
 8008c8c:	e000      	b.n	8008c90 <USBD_StdEPReq+0x330>
      break;
 8008c8e:	bf00      	nop
  }

  return ret;
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
	...

08008c9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	885b      	ldrh	r3, [r3, #2]
 8008cb6:	0a1b      	lsrs	r3, r3, #8
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	2b06      	cmp	r3, #6
 8008cbe:	f200 8128 	bhi.w	8008f12 <USBD_GetDescriptor+0x276>
 8008cc2:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <USBD_GetDescriptor+0x2c>)
 8008cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc8:	08008ce5 	.word	0x08008ce5
 8008ccc:	08008cfd 	.word	0x08008cfd
 8008cd0:	08008d3d 	.word	0x08008d3d
 8008cd4:	08008f13 	.word	0x08008f13
 8008cd8:	08008f13 	.word	0x08008f13
 8008cdc:	08008eb3 	.word	0x08008eb3
 8008ce0:	08008edf 	.word	0x08008edf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	7c12      	ldrb	r2, [r2, #16]
 8008cf0:	f107 0108 	add.w	r1, r7, #8
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4798      	blx	r3
 8008cf8:	60f8      	str	r0, [r7, #12]
      break;
 8008cfa:	e112      	b.n	8008f22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	7c1b      	ldrb	r3, [r3, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10d      	bne.n	8008d20 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0c:	f107 0208 	add.w	r2, r7, #8
 8008d10:	4610      	mov	r0, r2
 8008d12:	4798      	blx	r3
 8008d14:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d1e:	e100      	b.n	8008f22 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	f107 0208 	add.w	r2, r7, #8
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	4798      	blx	r3
 8008d30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3301      	adds	r3, #1
 8008d36:	2202      	movs	r2, #2
 8008d38:	701a      	strb	r2, [r3, #0]
      break;
 8008d3a:	e0f2      	b.n	8008f22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	885b      	ldrh	r3, [r3, #2]
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b05      	cmp	r3, #5
 8008d44:	f200 80ac 	bhi.w	8008ea0 <USBD_GetDescriptor+0x204>
 8008d48:	a201      	add	r2, pc, #4	; (adr r2, 8008d50 <USBD_GetDescriptor+0xb4>)
 8008d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4e:	bf00      	nop
 8008d50:	08008d69 	.word	0x08008d69
 8008d54:	08008d9d 	.word	0x08008d9d
 8008d58:	08008dd1 	.word	0x08008dd1
 8008d5c:	08008e05 	.word	0x08008e05
 8008d60:	08008e39 	.word	0x08008e39
 8008d64:	08008e6d 	.word	0x08008e6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00b      	beq.n	8008d8c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	7c12      	ldrb	r2, [r2, #16]
 8008d80:	f107 0108 	add.w	r1, r7, #8
 8008d84:	4610      	mov	r0, r2
 8008d86:	4798      	blx	r3
 8008d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d8a:	e091      	b.n	8008eb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 facb 	bl	800932a <USBD_CtlError>
            err++;
 8008d94:	7afb      	ldrb	r3, [r7, #11]
 8008d96:	3301      	adds	r3, #1
 8008d98:	72fb      	strb	r3, [r7, #11]
          break;
 8008d9a:	e089      	b.n	8008eb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00b      	beq.n	8008dc0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	7c12      	ldrb	r2, [r2, #16]
 8008db4:	f107 0108 	add.w	r1, r7, #8
 8008db8:	4610      	mov	r0, r2
 8008dba:	4798      	blx	r3
 8008dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dbe:	e077      	b.n	8008eb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fab1 	bl	800932a <USBD_CtlError>
            err++;
 8008dc8:	7afb      	ldrb	r3, [r7, #11]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dce:	e06f      	b.n	8008eb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	7c12      	ldrb	r2, [r2, #16]
 8008de8:	f107 0108 	add.w	r1, r7, #8
 8008dec:	4610      	mov	r0, r2
 8008dee:	4798      	blx	r3
 8008df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008df2:	e05d      	b.n	8008eb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa97 	bl	800932a <USBD_CtlError>
            err++;
 8008dfc:	7afb      	ldrb	r3, [r7, #11]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	72fb      	strb	r3, [r7, #11]
          break;
 8008e02:	e055      	b.n	8008eb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	7c12      	ldrb	r2, [r2, #16]
 8008e1c:	f107 0108 	add.w	r1, r7, #8
 8008e20:	4610      	mov	r0, r2
 8008e22:	4798      	blx	r3
 8008e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e26:	e043      	b.n	8008eb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fa7d 	bl	800932a <USBD_CtlError>
            err++;
 8008e30:	7afb      	ldrb	r3, [r7, #11]
 8008e32:	3301      	adds	r3, #1
 8008e34:	72fb      	strb	r3, [r7, #11]
          break;
 8008e36:	e03b      	b.n	8008eb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00b      	beq.n	8008e5c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	7c12      	ldrb	r2, [r2, #16]
 8008e50:	f107 0108 	add.w	r1, r7, #8
 8008e54:	4610      	mov	r0, r2
 8008e56:	4798      	blx	r3
 8008e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e5a:	e029      	b.n	8008eb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fa63 	bl	800932a <USBD_CtlError>
            err++;
 8008e64:	7afb      	ldrb	r3, [r7, #11]
 8008e66:	3301      	adds	r3, #1
 8008e68:	72fb      	strb	r3, [r7, #11]
          break;
 8008e6a:	e021      	b.n	8008eb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00b      	beq.n	8008e90 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	7c12      	ldrb	r2, [r2, #16]
 8008e84:	f107 0108 	add.w	r1, r7, #8
 8008e88:	4610      	mov	r0, r2
 8008e8a:	4798      	blx	r3
 8008e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e8e:	e00f      	b.n	8008eb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fa49 	bl	800932a <USBD_CtlError>
            err++;
 8008e98:	7afb      	ldrb	r3, [r7, #11]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e9e:	e007      	b.n	8008eb0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fa41 	bl	800932a <USBD_CtlError>
          err++;
 8008ea8:	7afb      	ldrb	r3, [r7, #11]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008eae:	bf00      	nop
      }
      break;
 8008eb0:	e037      	b.n	8008f22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	7c1b      	ldrb	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d109      	bne.n	8008ece <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec2:	f107 0208 	add.w	r2, r7, #8
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	4798      	blx	r3
 8008eca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ecc:	e029      	b.n	8008f22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fa2a 	bl	800932a <USBD_CtlError>
        err++;
 8008ed6:	7afb      	ldrb	r3, [r7, #11]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	72fb      	strb	r3, [r7, #11]
      break;
 8008edc:	e021      	b.n	8008f22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	7c1b      	ldrb	r3, [r3, #16]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10d      	bne.n	8008f02 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eee:	f107 0208 	add.w	r2, r7, #8
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	4798      	blx	r3
 8008ef6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	3301      	adds	r3, #1
 8008efc:	2207      	movs	r2, #7
 8008efe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f00:	e00f      	b.n	8008f22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fa10 	bl	800932a <USBD_CtlError>
        err++;
 8008f0a:	7afb      	ldrb	r3, [r7, #11]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	72fb      	strb	r3, [r7, #11]
      break;
 8008f10:	e007      	b.n	8008f22 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fa08 	bl	800932a <USBD_CtlError>
      err++;
 8008f1a:	7afb      	ldrb	r3, [r7, #11]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	72fb      	strb	r3, [r7, #11]
      break;
 8008f20:	bf00      	nop
  }

  if (err != 0U)
 8008f22:	7afb      	ldrb	r3, [r7, #11]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d11e      	bne.n	8008f66 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	88db      	ldrh	r3, [r3, #6]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d016      	beq.n	8008f5e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008f30:	893b      	ldrh	r3, [r7, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00e      	beq.n	8008f54 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	88da      	ldrh	r2, [r3, #6]
 8008f3a:	893b      	ldrh	r3, [r7, #8]
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	bf28      	it	cs
 8008f40:	4613      	movcs	r3, r2
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f46:	893b      	ldrh	r3, [r7, #8]
 8008f48:	461a      	mov	r2, r3
 8008f4a:	68f9      	ldr	r1, [r7, #12]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fa5d 	bl	800940c <USBD_CtlSendData>
 8008f52:	e009      	b.n	8008f68 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f9e7 	bl	800932a <USBD_CtlError>
 8008f5c:	e004      	b.n	8008f68 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 faae 	bl	80094c0 <USBD_CtlSendStatus>
 8008f64:	e000      	b.n	8008f68 <USBD_GetDescriptor+0x2cc>
    return;
 8008f66:	bf00      	nop
  }
}
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop

08008f70 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	889b      	ldrh	r3, [r3, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d131      	bne.n	8008fe6 <USBD_SetAddress+0x76>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	88db      	ldrh	r3, [r3, #6]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d12d      	bne.n	8008fe6 <USBD_SetAddress+0x76>
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	885b      	ldrh	r3, [r3, #2]
 8008f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8008f90:	d829      	bhi.n	8008fe6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	885b      	ldrh	r3, [r3, #2]
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d104      	bne.n	8008fb4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f9bc 	bl	800932a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb2:	e01d      	b.n	8008ff0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	7bfa      	ldrb	r2, [r7, #15]
 8008fb8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fee1 	bl	8009d88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fa7a 	bl	80094c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d004      	beq.n	8008fdc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fda:	e009      	b.n	8008ff0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe4:	e004      	b.n	8008ff0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008fe6:	6839      	ldr	r1, [r7, #0]
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f99e 	bl	800932a <USBD_CtlError>
  }
}
 8008fee:	bf00      	nop
 8008ff0:	bf00      	nop
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	885b      	ldrh	r3, [r3, #2]
 800900a:	b2da      	uxtb	r2, r3
 800900c:	4b4e      	ldr	r3, [pc, #312]	; (8009148 <USBD_SetConfig+0x150>)
 800900e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009010:	4b4d      	ldr	r3, [pc, #308]	; (8009148 <USBD_SetConfig+0x150>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d905      	bls.n	8009024 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009018:	6839      	ldr	r1, [r7, #0]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f985 	bl	800932a <USBD_CtlError>
    return USBD_FAIL;
 8009020:	2303      	movs	r3, #3
 8009022:	e08c      	b.n	800913e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b02      	cmp	r3, #2
 800902e:	d002      	beq.n	8009036 <USBD_SetConfig+0x3e>
 8009030:	2b03      	cmp	r3, #3
 8009032:	d029      	beq.n	8009088 <USBD_SetConfig+0x90>
 8009034:	e075      	b.n	8009122 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009036:	4b44      	ldr	r3, [pc, #272]	; (8009148 <USBD_SetConfig+0x150>)
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d020      	beq.n	8009080 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800903e:	4b42      	ldr	r3, [pc, #264]	; (8009148 <USBD_SetConfig+0x150>)
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	461a      	mov	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009048:	4b3f      	ldr	r3, [pc, #252]	; (8009148 <USBD_SetConfig+0x150>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7fe ffe7 	bl	8008022 <USBD_SetClassConfig>
 8009054:	4603      	mov	r3, r0
 8009056:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009058:	7bfb      	ldrb	r3, [r7, #15]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d008      	beq.n	8009070 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f962 	bl	800932a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2202      	movs	r2, #2
 800906a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800906e:	e065      	b.n	800913c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fa25 	bl	80094c0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2203      	movs	r2, #3
 800907a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800907e:	e05d      	b.n	800913c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fa1d 	bl	80094c0 <USBD_CtlSendStatus>
      break;
 8009086:	e059      	b.n	800913c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009088:	4b2f      	ldr	r3, [pc, #188]	; (8009148 <USBD_SetConfig+0x150>)
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d112      	bne.n	80090b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2202      	movs	r2, #2
 8009094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009098:	4b2b      	ldr	r3, [pc, #172]	; (8009148 <USBD_SetConfig+0x150>)
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090a2:	4b29      	ldr	r3, [pc, #164]	; (8009148 <USBD_SetConfig+0x150>)
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7fe ffd6 	bl	800805a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa06 	bl	80094c0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80090b4:	e042      	b.n	800913c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80090b6:	4b24      	ldr	r3, [pc, #144]	; (8009148 <USBD_SetConfig+0x150>)
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d02a      	beq.n	800911a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7fe ffc4 	bl	800805a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80090d2:	4b1d      	ldr	r3, [pc, #116]	; (8009148 <USBD_SetConfig+0x150>)
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	461a      	mov	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80090dc:	4b1a      	ldr	r3, [pc, #104]	; (8009148 <USBD_SetConfig+0x150>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	4619      	mov	r1, r3
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7fe ff9d 	bl	8008022 <USBD_SetClassConfig>
 80090e8:	4603      	mov	r3, r0
 80090ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00f      	beq.n	8009112 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f918 	bl	800932a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7fe ffa9 	bl	800805a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2202      	movs	r2, #2
 800910c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009110:	e014      	b.n	800913c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f9d4 	bl	80094c0 <USBD_CtlSendStatus>
      break;
 8009118:	e010      	b.n	800913c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f9d0 	bl	80094c0 <USBD_CtlSendStatus>
      break;
 8009120:	e00c      	b.n	800913c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f900 	bl	800932a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800912a:	4b07      	ldr	r3, [pc, #28]	; (8009148 <USBD_SetConfig+0x150>)
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7fe ff92 	bl	800805a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009136:	2303      	movs	r3, #3
 8009138:	73fb      	strb	r3, [r7, #15]
      break;
 800913a:	bf00      	nop
  }

  return ret;
 800913c:	7bfb      	ldrb	r3, [r7, #15]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20004ac0 	.word	0x20004ac0

0800914c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	88db      	ldrh	r3, [r3, #6]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d004      	beq.n	8009168 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f8e2 	bl	800932a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009166:	e023      	b.n	80091b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b02      	cmp	r3, #2
 8009172:	dc02      	bgt.n	800917a <USBD_GetConfig+0x2e>
 8009174:	2b00      	cmp	r3, #0
 8009176:	dc03      	bgt.n	8009180 <USBD_GetConfig+0x34>
 8009178:	e015      	b.n	80091a6 <USBD_GetConfig+0x5a>
 800917a:	2b03      	cmp	r3, #3
 800917c:	d00b      	beq.n	8009196 <USBD_GetConfig+0x4a>
 800917e:	e012      	b.n	80091a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	3308      	adds	r3, #8
 800918a:	2201      	movs	r2, #1
 800918c:	4619      	mov	r1, r3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f93c 	bl	800940c <USBD_CtlSendData>
        break;
 8009194:	e00c      	b.n	80091b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	3304      	adds	r3, #4
 800919a:	2201      	movs	r2, #1
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f934 	bl	800940c <USBD_CtlSendData>
        break;
 80091a4:	e004      	b.n	80091b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f8be 	bl	800932a <USBD_CtlError>
        break;
 80091ae:	bf00      	nop
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	3b01      	subs	r3, #1
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d81e      	bhi.n	800920e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	88db      	ldrh	r3, [r3, #6]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d004      	beq.n	80091e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f8a5 	bl	800932a <USBD_CtlError>
        break;
 80091e0:	e01a      	b.n	8009218 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d005      	beq.n	80091fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	f043 0202 	orr.w	r2, r3, #2
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	330c      	adds	r3, #12
 8009202:	2202      	movs	r2, #2
 8009204:	4619      	mov	r1, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f900 	bl	800940c <USBD_CtlSendData>
      break;
 800920c:	e004      	b.n	8009218 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f88a 	bl	800932a <USBD_CtlError>
      break;
 8009216:	bf00      	nop
  }
}
 8009218:	bf00      	nop
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	885b      	ldrh	r3, [r3, #2]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d107      	bne.n	8009242 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f940 	bl	80094c0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009240:	e013      	b.n	800926a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	885b      	ldrh	r3, [r3, #2]
 8009246:	2b02      	cmp	r3, #2
 8009248:	d10b      	bne.n	8009262 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	889b      	ldrh	r3, [r3, #4]
 800924e:	0a1b      	lsrs	r3, r3, #8
 8009250:	b29b      	uxth	r3, r3
 8009252:	b2da      	uxtb	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f930 	bl	80094c0 <USBD_CtlSendStatus>
}
 8009260:	e003      	b.n	800926a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009262:	6839      	ldr	r1, [r7, #0]
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f860 	bl	800932a <USBD_CtlError>
}
 800926a:	bf00      	nop
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b082      	sub	sp, #8
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009282:	b2db      	uxtb	r3, r3
 8009284:	3b01      	subs	r3, #1
 8009286:	2b02      	cmp	r3, #2
 8009288:	d80b      	bhi.n	80092a2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	885b      	ldrh	r3, [r3, #2]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d10c      	bne.n	80092ac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f910 	bl	80094c0 <USBD_CtlSendStatus>
      }
      break;
 80092a0:	e004      	b.n	80092ac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f840 	bl	800932a <USBD_CtlError>
      break;
 80092aa:	e000      	b.n	80092ae <USBD_ClrFeature+0x3c>
      break;
 80092ac:	bf00      	nop
  }
}
 80092ae:	bf00      	nop
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	781a      	ldrb	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	3301      	adds	r3, #1
 80092d0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	781a      	ldrb	r2, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3301      	adds	r3, #1
 80092de:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f7ff fa41 	bl	8008768 <SWAPBYTE>
 80092e6:	4603      	mov	r3, r0
 80092e8:	461a      	mov	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	3301      	adds	r3, #1
 80092f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3301      	adds	r3, #1
 80092f8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7ff fa34 	bl	8008768 <SWAPBYTE>
 8009300:	4603      	mov	r3, r0
 8009302:	461a      	mov	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	3301      	adds	r3, #1
 800930c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3301      	adds	r3, #1
 8009312:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f7ff fa27 	bl	8008768 <SWAPBYTE>
 800931a:	4603      	mov	r3, r0
 800931c:	461a      	mov	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	80da      	strh	r2, [r3, #6]
}
 8009322:	bf00      	nop
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b082      	sub	sp, #8
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009334:	2180      	movs	r1, #128	; 0x80
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fcbc 	bl	8009cb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800933c:	2100      	movs	r1, #0
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fcb8 	bl	8009cb4 <USBD_LL_StallEP>
}
 8009344:	bf00      	nop
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009358:	2300      	movs	r3, #0
 800935a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d036      	beq.n	80093d0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009366:	6938      	ldr	r0, [r7, #16]
 8009368:	f000 f836 	bl	80093d8 <USBD_GetLen>
 800936c:	4603      	mov	r3, r0
 800936e:	3301      	adds	r3, #1
 8009370:	b29b      	uxth	r3, r3
 8009372:	005b      	lsls	r3, r3, #1
 8009374:	b29a      	uxth	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800937a:	7dfb      	ldrb	r3, [r7, #23]
 800937c:	68ba      	ldr	r2, [r7, #8]
 800937e:	4413      	add	r3, r2
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	7812      	ldrb	r2, [r2, #0]
 8009384:	701a      	strb	r2, [r3, #0]
  idx++;
 8009386:	7dfb      	ldrb	r3, [r7, #23]
 8009388:	3301      	adds	r3, #1
 800938a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800938c:	7dfb      	ldrb	r3, [r7, #23]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	4413      	add	r3, r2
 8009392:	2203      	movs	r2, #3
 8009394:	701a      	strb	r2, [r3, #0]
  idx++;
 8009396:	7dfb      	ldrb	r3, [r7, #23]
 8009398:	3301      	adds	r3, #1
 800939a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800939c:	e013      	b.n	80093c6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	4413      	add	r3, r2
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	7812      	ldrb	r2, [r2, #0]
 80093a8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	3301      	adds	r3, #1
 80093ae:	613b      	str	r3, [r7, #16]
    idx++;
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	3301      	adds	r3, #1
 80093b4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	4413      	add	r3, r2
 80093bc:	2200      	movs	r2, #0
 80093be:	701a      	strb	r2, [r3, #0]
    idx++;
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
 80093c2:	3301      	adds	r3, #1
 80093c4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1e7      	bne.n	800939e <USBD_GetString+0x52>
 80093ce:	e000      	b.n	80093d2 <USBD_GetString+0x86>
    return;
 80093d0:	bf00      	nop
  }
}
 80093d2:	3718      	adds	r7, #24
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80093e8:	e005      	b.n	80093f6 <USBD_GetLen+0x1e>
  {
    len++;
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
 80093ec:	3301      	adds	r3, #1
 80093ee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	3301      	adds	r3, #1
 80093f4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1f5      	bne.n	80093ea <USBD_GetLen+0x12>
  }

  return len;
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2202      	movs	r2, #2
 800941c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	2100      	movs	r1, #0
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 fcc7 	bl	8009dc6 <USBD_LL_Transmit>

  return USBD_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b084      	sub	sp, #16
 8009446:	af00      	add	r7, sp, #0
 8009448:	60f8      	str	r0, [r7, #12]
 800944a:	60b9      	str	r1, [r7, #8]
 800944c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	2100      	movs	r1, #0
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f000 fcb6 	bl	8009dc6 <USBD_LL_Transmit>

  return USBD_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2203      	movs	r2, #3
 8009474:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	2100      	movs	r1, #0
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 fcba 	bl	8009e08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	60f8      	str	r0, [r7, #12]
 80094a6:	60b9      	str	r1, [r7, #8]
 80094a8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	2100      	movs	r1, #0
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f000 fca9 	bl	8009e08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2204      	movs	r2, #4
 80094cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094d0:	2300      	movs	r3, #0
 80094d2:	2200      	movs	r2, #0
 80094d4:	2100      	movs	r1, #0
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fc75 	bl	8009dc6 <USBD_LL_Transmit>

  return USBD_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b082      	sub	sp, #8
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2205      	movs	r2, #5
 80094f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094f6:	2300      	movs	r3, #0
 80094f8:	2200      	movs	r2, #0
 80094fa:	2100      	movs	r1, #0
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fc83 	bl	8009e08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8009510:	2201      	movs	r2, #1
 8009512:	4912      	ldr	r1, [pc, #72]	; (800955c <MX_USB_DEVICE_Init+0x50>)
 8009514:	4812      	ldr	r0, [pc, #72]	; (8009560 <MX_USB_DEVICE_Init+0x54>)
 8009516:	f7fe fd07 	bl	8007f28 <USBD_Init>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d001      	beq.n	8009524 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009520:	f7f7 f8b4 	bl	800068c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8009524:	490f      	ldr	r1, [pc, #60]	; (8009564 <MX_USB_DEVICE_Init+0x58>)
 8009526:	480e      	ldr	r0, [pc, #56]	; (8009560 <MX_USB_DEVICE_Init+0x54>)
 8009528:	f7fe fd2e 	bl	8007f88 <USBD_RegisterClass>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009532:	f7f7 f8ab 	bl	800068c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8009536:	490c      	ldr	r1, [pc, #48]	; (8009568 <MX_USB_DEVICE_Init+0x5c>)
 8009538:	4809      	ldr	r0, [pc, #36]	; (8009560 <MX_USB_DEVICE_Init+0x54>)
 800953a:	f7fe fc65 	bl	8007e08 <USBD_CDC_RegisterInterface>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009544:	f7f7 f8a2 	bl	800068c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009548:	4805      	ldr	r0, [pc, #20]	; (8009560 <MX_USB_DEVICE_Init+0x54>)
 800954a:	f7fe fd53 	bl	8007ff4 <USBD_Start>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009554:	f7f7 f89a 	bl	800068c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009558:	bf00      	nop
 800955a:	bd80      	pop	{r7, pc}
 800955c:	200000b0 	.word	0x200000b0
 8009560:	20004ac4 	.word	0x20004ac4
 8009564:	2000001c 	.word	0x2000001c
 8009568:	2000009c 	.word	0x2000009c

0800956c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8009570:	2200      	movs	r2, #0
 8009572:	4905      	ldr	r1, [pc, #20]	; (8009588 <CDC_Init_HS+0x1c>)
 8009574:	4805      	ldr	r0, [pc, #20]	; (800958c <CDC_Init_HS+0x20>)
 8009576:	f7fe fc61 	bl	8007e3c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800957a:	4905      	ldr	r1, [pc, #20]	; (8009590 <CDC_Init_HS+0x24>)
 800957c:	4803      	ldr	r0, [pc, #12]	; (800958c <CDC_Init_HS+0x20>)
 800957e:	f7fe fc7f 	bl	8007e80 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009582:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009584:	4618      	mov	r0, r3
 8009586:	bd80      	pop	{r7, pc}
 8009588:	200055a0 	.word	0x200055a0
 800958c:	20004ac4 	.word	0x20004ac4
 8009590:	20004da0 	.word	0x20004da0

08009594 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8009594:	b480      	push	{r7}
 8009596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8009598:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800959a:	4618      	mov	r0, r3
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	6039      	str	r1, [r7, #0]
 80095ae:	71fb      	strb	r3, [r7, #7]
 80095b0:	4613      	mov	r3, r2
 80095b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	2b23      	cmp	r3, #35	; 0x23
 80095b8:	d84a      	bhi.n	8009650 <CDC_Control_HS+0xac>
 80095ba:	a201      	add	r2, pc, #4	; (adr r2, 80095c0 <CDC_Control_HS+0x1c>)
 80095bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c0:	08009651 	.word	0x08009651
 80095c4:	08009651 	.word	0x08009651
 80095c8:	08009651 	.word	0x08009651
 80095cc:	08009651 	.word	0x08009651
 80095d0:	08009651 	.word	0x08009651
 80095d4:	08009651 	.word	0x08009651
 80095d8:	08009651 	.word	0x08009651
 80095dc:	08009651 	.word	0x08009651
 80095e0:	08009651 	.word	0x08009651
 80095e4:	08009651 	.word	0x08009651
 80095e8:	08009651 	.word	0x08009651
 80095ec:	08009651 	.word	0x08009651
 80095f0:	08009651 	.word	0x08009651
 80095f4:	08009651 	.word	0x08009651
 80095f8:	08009651 	.word	0x08009651
 80095fc:	08009651 	.word	0x08009651
 8009600:	08009651 	.word	0x08009651
 8009604:	08009651 	.word	0x08009651
 8009608:	08009651 	.word	0x08009651
 800960c:	08009651 	.word	0x08009651
 8009610:	08009651 	.word	0x08009651
 8009614:	08009651 	.word	0x08009651
 8009618:	08009651 	.word	0x08009651
 800961c:	08009651 	.word	0x08009651
 8009620:	08009651 	.word	0x08009651
 8009624:	08009651 	.word	0x08009651
 8009628:	08009651 	.word	0x08009651
 800962c:	08009651 	.word	0x08009651
 8009630:	08009651 	.word	0x08009651
 8009634:	08009651 	.word	0x08009651
 8009638:	08009651 	.word	0x08009651
 800963c:	08009651 	.word	0x08009651
 8009640:	08009651 	.word	0x08009651
 8009644:	08009651 	.word	0x08009651
 8009648:	08009651 	.word	0x08009651
 800964c:	08009651 	.word	0x08009651
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009650:	bf00      	nop
  }

  return (USBD_OK);
 8009652:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8009654:	4618      	mov	r0, r3
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	4805      	ldr	r0, [pc, #20]	; (8009684 <CDC_Receive_HS+0x24>)
 800966e:	f7fe fc07 	bl	8007e80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8009672:	4804      	ldr	r0, [pc, #16]	; (8009684 <CDC_Receive_HS+0x24>)
 8009674:	f7fe fc22 	bl	8007ebc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009678:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	20004ac4 	.word	0x20004ac4

08009688 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009688:	b480      	push	{r7}
 800968a:	b087      	sub	sp, #28
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	4613      	mov	r3, r2
 8009694:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800969a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	371c      	adds	r7, #28
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
	...

080096ac <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	6039      	str	r1, [r7, #0]
 80096b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2212      	movs	r2, #18
 80096bc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80096be:	4b03      	ldr	r3, [pc, #12]	; (80096cc <USBD_HS_DeviceDescriptor+0x20>)
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	200000cc 	.word	0x200000cc

080096d0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	6039      	str	r1, [r7, #0]
 80096da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	2204      	movs	r2, #4
 80096e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80096e2:	4b03      	ldr	r3, [pc, #12]	; (80096f0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	200000e0 	.word	0x200000e0

080096f4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	4603      	mov	r3, r0
 80096fc:	6039      	str	r1, [r7, #0]
 80096fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d105      	bne.n	8009712 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	4907      	ldr	r1, [pc, #28]	; (8009728 <USBD_HS_ProductStrDescriptor+0x34>)
 800970a:	4808      	ldr	r0, [pc, #32]	; (800972c <USBD_HS_ProductStrDescriptor+0x38>)
 800970c:	f7ff fe1e 	bl	800934c <USBD_GetString>
 8009710:	e004      	b.n	800971c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	4904      	ldr	r1, [pc, #16]	; (8009728 <USBD_HS_ProductStrDescriptor+0x34>)
 8009716:	4805      	ldr	r0, [pc, #20]	; (800972c <USBD_HS_ProductStrDescriptor+0x38>)
 8009718:	f7ff fe18 	bl	800934c <USBD_GetString>
  }
  return USBD_StrDesc;
 800971c:	4b02      	ldr	r3, [pc, #8]	; (8009728 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20005da0 	.word	0x20005da0
 800972c:	08009fb4 	.word	0x08009fb4

08009730 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	6039      	str	r1, [r7, #0]
 800973a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	4904      	ldr	r1, [pc, #16]	; (8009750 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009740:	4804      	ldr	r0, [pc, #16]	; (8009754 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009742:	f7ff fe03 	bl	800934c <USBD_GetString>
  return USBD_StrDesc;
 8009746:	4b02      	ldr	r3, [pc, #8]	; (8009750 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	20005da0 	.word	0x20005da0
 8009754:	08009fcc 	.word	0x08009fcc

08009758 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	6039      	str	r1, [r7, #0]
 8009762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	221a      	movs	r2, #26
 8009768:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800976a:	f000 f843 	bl	80097f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800976e:	4b02      	ldr	r3, [pc, #8]	; (8009778 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	200000e4 	.word	0x200000e4

0800977c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	6039      	str	r1, [r7, #0]
 8009786:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009788:	79fb      	ldrb	r3, [r7, #7]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d105      	bne.n	800979a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	4907      	ldr	r1, [pc, #28]	; (80097b0 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009792:	4808      	ldr	r0, [pc, #32]	; (80097b4 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009794:	f7ff fdda 	bl	800934c <USBD_GetString>
 8009798:	e004      	b.n	80097a4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	4904      	ldr	r1, [pc, #16]	; (80097b0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800979e:	4805      	ldr	r0, [pc, #20]	; (80097b4 <USBD_HS_ConfigStrDescriptor+0x38>)
 80097a0:	f7ff fdd4 	bl	800934c <USBD_GetString>
  }
  return USBD_StrDesc;
 80097a4:	4b02      	ldr	r3, [pc, #8]	; (80097b0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	20005da0 	.word	0x20005da0
 80097b4:	08009fe0 	.word	0x08009fe0

080097b8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	6039      	str	r1, [r7, #0]
 80097c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097c4:	79fb      	ldrb	r3, [r7, #7]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d105      	bne.n	80097d6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	4907      	ldr	r1, [pc, #28]	; (80097ec <USBD_HS_InterfaceStrDescriptor+0x34>)
 80097ce:	4808      	ldr	r0, [pc, #32]	; (80097f0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80097d0:	f7ff fdbc 	bl	800934c <USBD_GetString>
 80097d4:	e004      	b.n	80097e0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	4904      	ldr	r1, [pc, #16]	; (80097ec <USBD_HS_InterfaceStrDescriptor+0x34>)
 80097da:	4805      	ldr	r0, [pc, #20]	; (80097f0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80097dc:	f7ff fdb6 	bl	800934c <USBD_GetString>
  }
  return USBD_StrDesc;
 80097e0:	4b02      	ldr	r3, [pc, #8]	; (80097ec <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	20005da0 	.word	0x20005da0
 80097f0:	08009fec 	.word	0x08009fec

080097f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097fa:	4b0f      	ldr	r3, [pc, #60]	; (8009838 <Get_SerialNum+0x44>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009800:	4b0e      	ldr	r3, [pc, #56]	; (800983c <Get_SerialNum+0x48>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009806:	4b0e      	ldr	r3, [pc, #56]	; (8009840 <Get_SerialNum+0x4c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4413      	add	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d009      	beq.n	800982e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800981a:	2208      	movs	r2, #8
 800981c:	4909      	ldr	r1, [pc, #36]	; (8009844 <Get_SerialNum+0x50>)
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 f814 	bl	800984c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009824:	2204      	movs	r2, #4
 8009826:	4908      	ldr	r1, [pc, #32]	; (8009848 <Get_SerialNum+0x54>)
 8009828:	68b8      	ldr	r0, [r7, #8]
 800982a:	f000 f80f 	bl	800984c <IntToUnicode>
  }
}
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	1fff7a10 	.word	0x1fff7a10
 800983c:	1fff7a14 	.word	0x1fff7a14
 8009840:	1fff7a18 	.word	0x1fff7a18
 8009844:	200000e6 	.word	0x200000e6
 8009848:	200000f6 	.word	0x200000f6

0800984c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	4613      	mov	r3, r2
 8009858:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800985e:	2300      	movs	r3, #0
 8009860:	75fb      	strb	r3, [r7, #23]
 8009862:	e027      	b.n	80098b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	0f1b      	lsrs	r3, r3, #28
 8009868:	2b09      	cmp	r3, #9
 800986a:	d80b      	bhi.n	8009884 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	0f1b      	lsrs	r3, r3, #28
 8009870:	b2da      	uxtb	r2, r3
 8009872:	7dfb      	ldrb	r3, [r7, #23]
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	4619      	mov	r1, r3
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	440b      	add	r3, r1
 800987c:	3230      	adds	r2, #48	; 0x30
 800987e:	b2d2      	uxtb	r2, r2
 8009880:	701a      	strb	r2, [r3, #0]
 8009882:	e00a      	b.n	800989a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	0f1b      	lsrs	r3, r3, #28
 8009888:	b2da      	uxtb	r2, r3
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	005b      	lsls	r3, r3, #1
 800988e:	4619      	mov	r1, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	440b      	add	r3, r1
 8009894:	3237      	adds	r2, #55	; 0x37
 8009896:	b2d2      	uxtb	r2, r2
 8009898:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	011b      	lsls	r3, r3, #4
 800989e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	005b      	lsls	r3, r3, #1
 80098a4:	3301      	adds	r3, #1
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	4413      	add	r3, r2
 80098aa:	2200      	movs	r2, #0
 80098ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
 80098b0:	3301      	adds	r3, #1
 80098b2:	75fb      	strb	r3, [r7, #23]
 80098b4:	7dfa      	ldrb	r2, [r7, #23]
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d3d3      	bcc.n	8009864 <IntToUnicode+0x18>
  }
}
 80098bc:	bf00      	nop
 80098be:	bf00      	nop
 80098c0:	371c      	adds	r7, #28
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
	...

080098cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b08a      	sub	sp, #40	; 0x28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098d4:	f107 0314 	add.w	r3, r7, #20
 80098d8:	2200      	movs	r2, #0
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	605a      	str	r2, [r3, #4]
 80098de:	609a      	str	r2, [r3, #8]
 80098e0:	60da      	str	r2, [r3, #12]
 80098e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a1d      	ldr	r2, [pc, #116]	; (8009960 <HAL_PCD_MspInit+0x94>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d134      	bne.n	8009958 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098ee:	2300      	movs	r3, #0
 80098f0:	613b      	str	r3, [r7, #16]
 80098f2:	4b1c      	ldr	r3, [pc, #112]	; (8009964 <HAL_PCD_MspInit+0x98>)
 80098f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f6:	4a1b      	ldr	r2, [pc, #108]	; (8009964 <HAL_PCD_MspInit+0x98>)
 80098f8:	f043 0302 	orr.w	r3, r3, #2
 80098fc:	6313      	str	r3, [r2, #48]	; 0x30
 80098fe:	4b19      	ldr	r3, [pc, #100]	; (8009964 <HAL_PCD_MspInit+0x98>)
 8009900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009902:	f003 0302 	and.w	r3, r3, #2
 8009906:	613b      	str	r3, [r7, #16]
 8009908:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800990a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800990e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009910:	2302      	movs	r3, #2
 8009912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009914:	2300      	movs	r3, #0
 8009916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009918:	2303      	movs	r3, #3
 800991a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800991c:	230c      	movs	r3, #12
 800991e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009920:	f107 0314 	add.w	r3, r7, #20
 8009924:	4619      	mov	r1, r3
 8009926:	4810      	ldr	r0, [pc, #64]	; (8009968 <HAL_PCD_MspInit+0x9c>)
 8009928:	f7f7 f90c 	bl	8000b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800992c:	2300      	movs	r3, #0
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	4b0c      	ldr	r3, [pc, #48]	; (8009964 <HAL_PCD_MspInit+0x98>)
 8009932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009934:	4a0b      	ldr	r2, [pc, #44]	; (8009964 <HAL_PCD_MspInit+0x98>)
 8009936:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800993a:	6313      	str	r3, [r2, #48]	; 0x30
 800993c:	4b09      	ldr	r3, [pc, #36]	; (8009964 <HAL_PCD_MspInit+0x98>)
 800993e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009944:	60fb      	str	r3, [r7, #12]
 8009946:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8009948:	2200      	movs	r2, #0
 800994a:	2105      	movs	r1, #5
 800994c:	204d      	movs	r0, #77	; 0x4d
 800994e:	f7f7 f8cf 	bl	8000af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009952:	204d      	movs	r0, #77	; 0x4d
 8009954:	f7f7 f8e8 	bl	8000b28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009958:	bf00      	nop
 800995a:	3728      	adds	r7, #40	; 0x28
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	40040000 	.word	0x40040000
 8009964:	40023800 	.word	0x40023800
 8009968:	40020400 	.word	0x40020400

0800996c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009980:	4619      	mov	r1, r3
 8009982:	4610      	mov	r0, r2
 8009984:	f7fe fb83 	bl	800808e <USBD_LL_SetupStage>
}
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80099a2:	78fa      	ldrb	r2, [r7, #3]
 80099a4:	6879      	ldr	r1, [r7, #4]
 80099a6:	4613      	mov	r3, r2
 80099a8:	00db      	lsls	r3, r3, #3
 80099aa:	4413      	add	r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	440b      	add	r3, r1
 80099b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	78fb      	ldrb	r3, [r7, #3]
 80099b8:	4619      	mov	r1, r3
 80099ba:	f7fe fbbd 	bl	8008138 <USBD_LL_DataOutStage>
}
 80099be:	bf00      	nop
 80099c0:	3708      	adds	r7, #8
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b082      	sub	sp, #8
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
 80099ce:	460b      	mov	r3, r1
 80099d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80099d8:	78fa      	ldrb	r2, [r7, #3]
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	4613      	mov	r3, r2
 80099de:	00db      	lsls	r3, r3, #3
 80099e0:	4413      	add	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	440b      	add	r3, r1
 80099e6:	334c      	adds	r3, #76	; 0x4c
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	4619      	mov	r1, r3
 80099ee:	f7fe fc56 	bl	800829e <USBD_LL_DataInStage>
}
 80099f2:	bf00      	nop
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b082      	sub	sp, #8
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fe fd8a 	bl	8008522 <USBD_LL_SOF>
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d102      	bne.n	8009a30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	73fb      	strb	r3, [r7, #15]
 8009a2e:	e008      	b.n	8009a42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d102      	bne.n	8009a3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	73fb      	strb	r3, [r7, #15]
 8009a3c:	e001      	b.n	8009a42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009a3e:	f7f6 fe25 	bl	800068c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a48:	7bfa      	ldrb	r2, [r7, #15]
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fe fd2a 	bl	80084a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fe fcd2 	bl	8008402 <USBD_LL_Reset>
}
 8009a5e:	bf00      	nop
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
	...

08009a68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fe fd25 	bl	80084c6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	6812      	ldr	r2, [r2, #0]
 8009a8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a8e:	f043 0301 	orr.w	r3, r3, #1
 8009a92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d005      	beq.n	8009aa8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a9c:	4b04      	ldr	r3, [pc, #16]	; (8009ab0 <HAL_PCD_SuspendCallback+0x48>)
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	4a03      	ldr	r2, [pc, #12]	; (8009ab0 <HAL_PCD_SuspendCallback+0x48>)
 8009aa2:	f043 0306 	orr.w	r3, r3, #6
 8009aa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009aa8:	bf00      	nop
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	e000ed00 	.word	0xe000ed00

08009ab4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe fd15 	bl	80084f2 <USBD_LL_Resume>
}
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	460b      	mov	r3, r1
 8009ada:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ae2:	78fa      	ldrb	r2, [r7, #3]
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe fd6d 	bl	80085c6 <USBD_LL_IsoOUTIncomplete>
}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	460b      	mov	r3, r1
 8009afe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b06:	78fa      	ldrb	r2, [r7, #3]
 8009b08:	4611      	mov	r1, r2
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe fd29 	bl	8008562 <USBD_LL_IsoINIncomplete>
}
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fe fd7f 	bl	800862a <USBD_LL_DevConnected>
}
 8009b2c:	bf00      	nop
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fe fd7c 	bl	8008640 <USBD_LL_DevDisconnected>
}
 8009b48:	bf00      	nop
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d140      	bne.n	8009be2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8009b60:	4a22      	ldr	r2, [pc, #136]	; (8009bec <USBD_LL_Init+0x9c>)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a20      	ldr	r2, [pc, #128]	; (8009bec <USBD_LL_Init+0x9c>)
 8009b6c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009b70:	4b1e      	ldr	r3, [pc, #120]	; (8009bec <USBD_LL_Init+0x9c>)
 8009b72:	4a1f      	ldr	r2, [pc, #124]	; (8009bf0 <USBD_LL_Init+0xa0>)
 8009b74:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8009b76:	4b1d      	ldr	r3, [pc, #116]	; (8009bec <USBD_LL_Init+0x9c>)
 8009b78:	2206      	movs	r2, #6
 8009b7a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8009b7c:	4b1b      	ldr	r3, [pc, #108]	; (8009bec <USBD_LL_Init+0x9c>)
 8009b7e:	2202      	movs	r2, #2
 8009b80:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009b82:	4b1a      	ldr	r3, [pc, #104]	; (8009bec <USBD_LL_Init+0x9c>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8009b88:	4b18      	ldr	r3, [pc, #96]	; (8009bec <USBD_LL_Init+0x9c>)
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8009b8e:	4b17      	ldr	r3, [pc, #92]	; (8009bec <USBD_LL_Init+0x9c>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8009b94:	4b15      	ldr	r3, [pc, #84]	; (8009bec <USBD_LL_Init+0x9c>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8009b9a:	4b14      	ldr	r3, [pc, #80]	; (8009bec <USBD_LL_Init+0x9c>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009ba0:	4b12      	ldr	r3, [pc, #72]	; (8009bec <USBD_LL_Init+0x9c>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8009ba6:	4b11      	ldr	r3, [pc, #68]	; (8009bec <USBD_LL_Init+0x9c>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009bac:	4b0f      	ldr	r3, [pc, #60]	; (8009bec <USBD_LL_Init+0x9c>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8009bb2:	480e      	ldr	r0, [pc, #56]	; (8009bec <USBD_LL_Init+0x9c>)
 8009bb4:	f7f7 f962 	bl	8000e7c <HAL_PCD_Init>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8009bbe:	f7f6 fd65 	bl	800068c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8009bc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bc6:	4809      	ldr	r0, [pc, #36]	; (8009bec <USBD_LL_Init+0x9c>)
 8009bc8:	f7f8 fbb9 	bl	800233e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8009bcc:	2280      	movs	r2, #128	; 0x80
 8009bce:	2100      	movs	r1, #0
 8009bd0:	4806      	ldr	r0, [pc, #24]	; (8009bec <USBD_LL_Init+0x9c>)
 8009bd2:	f7f8 fb6d 	bl	80022b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8009bd6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8009bda:	2101      	movs	r1, #1
 8009bdc:	4803      	ldr	r0, [pc, #12]	; (8009bec <USBD_LL_Init+0x9c>)
 8009bde:	f7f8 fb67 	bl	80022b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	20005fa0 	.word	0x20005fa0
 8009bf0:	40040000 	.word	0x40040000

08009bf4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7f7 fa53 	bl	80010b6 <HAL_PCD_Start>
 8009c10:	4603      	mov	r3, r0
 8009c12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 f942 	bl	8009ea0 <USBD_Get_USB_Status>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b084      	sub	sp, #16
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	4608      	mov	r0, r1
 8009c34:	4611      	mov	r1, r2
 8009c36:	461a      	mov	r2, r3
 8009c38:	4603      	mov	r3, r0
 8009c3a:	70fb      	strb	r3, [r7, #3]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	70bb      	strb	r3, [r7, #2]
 8009c40:	4613      	mov	r3, r2
 8009c42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c52:	78bb      	ldrb	r3, [r7, #2]
 8009c54:	883a      	ldrh	r2, [r7, #0]
 8009c56:	78f9      	ldrb	r1, [r7, #3]
 8009c58:	f7f7 ff24 	bl	8001aa4 <HAL_PCD_EP_Open>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 f91c 	bl	8009ea0 <USBD_Get_USB_Status>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c82:	2300      	movs	r3, #0
 8009c84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c90:	78fa      	ldrb	r2, [r7, #3]
 8009c92:	4611      	mov	r1, r2
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7f7 ff6d 	bl	8001b74 <HAL_PCD_EP_Close>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f000 f8fd 	bl	8009ea0 <USBD_Get_USB_Status>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009caa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009cce:	78fa      	ldrb	r2, [r7, #3]
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7f8 f845 	bl	8001d62 <HAL_PCD_EP_SetStall>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 f8de 	bl	8009ea0 <USBD_Get_USB_Status>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ce8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d0c:	78fa      	ldrb	r2, [r7, #3]
 8009d0e:	4611      	mov	r1, r2
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7f8 f88a 	bl	8001e2a <HAL_PCD_EP_ClrStall>
 8009d16:	4603      	mov	r3, r0
 8009d18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 f8bf 	bl	8009ea0 <USBD_Get_USB_Status>
 8009d22:	4603      	mov	r3, r0
 8009d24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d26:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	da0b      	bge.n	8009d64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d4c:	78fb      	ldrb	r3, [r7, #3]
 8009d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d52:	68f9      	ldr	r1, [r7, #12]
 8009d54:	4613      	mov	r3, r2
 8009d56:	00db      	lsls	r3, r3, #3
 8009d58:	4413      	add	r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	440b      	add	r3, r1
 8009d5e:	333e      	adds	r3, #62	; 0x3e
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	e00b      	b.n	8009d7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d64:	78fb      	ldrb	r3, [r7, #3]
 8009d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d6a:	68f9      	ldr	r1, [r7, #12]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	00db      	lsls	r3, r3, #3
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	440b      	add	r3, r1
 8009d76:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009d7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	460b      	mov	r3, r1
 8009d92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d94:	2300      	movs	r3, #0
 8009d96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009da2:	78fa      	ldrb	r2, [r7, #3]
 8009da4:	4611      	mov	r1, r2
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7f7 fe57 	bl	8001a5a <HAL_PCD_SetAddress>
 8009dac:	4603      	mov	r3, r0
 8009dae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 f874 	bl	8009ea0 <USBD_Get_USB_Status>
 8009db8:	4603      	mov	r3, r0
 8009dba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b086      	sub	sp, #24
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	603b      	str	r3, [r7, #0]
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009de4:	7af9      	ldrb	r1, [r7, #11]
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	f7f7 ff70 	bl	8001cce <HAL_PCD_EP_Transmit>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009df2:	7dfb      	ldrb	r3, [r7, #23]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 f853 	bl	8009ea0 <USBD_Get_USB_Status>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dfe:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	607a      	str	r2, [r7, #4]
 8009e12:	603b      	str	r3, [r7, #0]
 8009e14:	460b      	mov	r3, r1
 8009e16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009e26:	7af9      	ldrb	r1, [r7, #11]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	f7f7 feec 	bl	8001c08 <HAL_PCD_EP_Receive>
 8009e30:	4603      	mov	r3, r0
 8009e32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e34:	7dfb      	ldrb	r3, [r7, #23]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 f832 	bl	8009ea0 <USBD_Get_USB_Status>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e40:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3718      	adds	r7, #24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	460b      	mov	r3, r1
 8009e54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e5c:	78fa      	ldrb	r2, [r7, #3]
 8009e5e:	4611      	mov	r1, r2
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7f7 ff1c 	bl	8001c9e <HAL_PCD_EP_GetRxCount>
 8009e66:	4603      	mov	r3, r0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e78:	4b03      	ldr	r3, [pc, #12]	; (8009e88 <USBD_static_malloc+0x18>)
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	370c      	adds	r7, #12
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop
 8009e88:	200064ac 	.word	0x200064ac

08009e8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]

}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009eae:	79fb      	ldrb	r3, [r7, #7]
 8009eb0:	2b03      	cmp	r3, #3
 8009eb2:	d817      	bhi.n	8009ee4 <USBD_Get_USB_Status+0x44>
 8009eb4:	a201      	add	r2, pc, #4	; (adr r2, 8009ebc <USBD_Get_USB_Status+0x1c>)
 8009eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eba:	bf00      	nop
 8009ebc:	08009ecd 	.word	0x08009ecd
 8009ec0:	08009ed3 	.word	0x08009ed3
 8009ec4:	08009ed9 	.word	0x08009ed9
 8009ec8:	08009edf 	.word	0x08009edf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73fb      	strb	r3, [r7, #15]
    break;
 8009ed0:	e00b      	b.n	8009eea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ed6:	e008      	b.n	8009eea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	73fb      	strb	r3, [r7, #15]
    break;
 8009edc:	e005      	b.n	8009eea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ee2:	e002      	b.n	8009eea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ee8:	bf00      	nop
  }
  return usb_status;
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3714      	adds	r7, #20
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <memset>:
 8009ef8:	4402      	add	r2, r0
 8009efa:	4603      	mov	r3, r0
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d100      	bne.n	8009f02 <memset+0xa>
 8009f00:	4770      	bx	lr
 8009f02:	f803 1b01 	strb.w	r1, [r3], #1
 8009f06:	e7f9      	b.n	8009efc <memset+0x4>

08009f08 <__libc_init_array>:
 8009f08:	b570      	push	{r4, r5, r6, lr}
 8009f0a:	4d0d      	ldr	r5, [pc, #52]	; (8009f40 <__libc_init_array+0x38>)
 8009f0c:	4c0d      	ldr	r4, [pc, #52]	; (8009f44 <__libc_init_array+0x3c>)
 8009f0e:	1b64      	subs	r4, r4, r5
 8009f10:	10a4      	asrs	r4, r4, #2
 8009f12:	2600      	movs	r6, #0
 8009f14:	42a6      	cmp	r6, r4
 8009f16:	d109      	bne.n	8009f2c <__libc_init_array+0x24>
 8009f18:	4d0b      	ldr	r5, [pc, #44]	; (8009f48 <__libc_init_array+0x40>)
 8009f1a:	4c0c      	ldr	r4, [pc, #48]	; (8009f4c <__libc_init_array+0x44>)
 8009f1c:	f000 f826 	bl	8009f6c <_init>
 8009f20:	1b64      	subs	r4, r4, r5
 8009f22:	10a4      	asrs	r4, r4, #2
 8009f24:	2600      	movs	r6, #0
 8009f26:	42a6      	cmp	r6, r4
 8009f28:	d105      	bne.n	8009f36 <__libc_init_array+0x2e>
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f30:	4798      	blx	r3
 8009f32:	3601      	adds	r6, #1
 8009f34:	e7ee      	b.n	8009f14 <__libc_init_array+0xc>
 8009f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f3a:	4798      	blx	r3
 8009f3c:	3601      	adds	r6, #1
 8009f3e:	e7f2      	b.n	8009f26 <__libc_init_array+0x1e>
 8009f40:	0800a064 	.word	0x0800a064
 8009f44:	0800a064 	.word	0x0800a064
 8009f48:	0800a064 	.word	0x0800a064
 8009f4c:	0800a068 	.word	0x0800a068

08009f50 <memcpy>:
 8009f50:	440a      	add	r2, r1
 8009f52:	4291      	cmp	r1, r2
 8009f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f58:	d100      	bne.n	8009f5c <memcpy+0xc>
 8009f5a:	4770      	bx	lr
 8009f5c:	b510      	push	{r4, lr}
 8009f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f66:	4291      	cmp	r1, r2
 8009f68:	d1f9      	bne.n	8009f5e <memcpy+0xe>
 8009f6a:	bd10      	pop	{r4, pc}

08009f6c <_init>:
 8009f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6e:	bf00      	nop
 8009f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f72:	bc08      	pop	{r3}
 8009f74:	469e      	mov	lr, r3
 8009f76:	4770      	bx	lr

08009f78 <_fini>:
 8009f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7a:	bf00      	nop
 8009f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f7e:	bc08      	pop	{r3}
 8009f80:	469e      	mov	lr, r3
 8009f82:	4770      	bx	lr

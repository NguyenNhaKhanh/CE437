
Lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b074  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800b188  0800b188  0001b188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b628  0800b628  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b628  0800b628  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b628  0800b628  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b628  0800b628  0001b628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b62c  0800b62c  0001b62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001d4  0800b804  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  0800b804  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d376  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002316  00000000  00000000  0002d5b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  0002f8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a9  00000000  00000000  00030540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d28  00000000  00000000  00030ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000100c7  00000000  00000000  00049c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bf17  00000000  00000000  00059cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004858  00000000  00000000  000e5bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000ea448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b16c 	.word	0x0800b16c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800b16c 	.word	0x0800b16c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <__aeabi_d2lz>:
 80010b0:	b538      	push	{r3, r4, r5, lr}
 80010b2:	4605      	mov	r5, r0
 80010b4:	460c      	mov	r4, r1
 80010b6:	2200      	movs	r2, #0
 80010b8:	2300      	movs	r3, #0
 80010ba:	4628      	mov	r0, r5
 80010bc:	4621      	mov	r1, r4
 80010be:	f7ff fc7d 	bl	80009bc <__aeabi_dcmplt>
 80010c2:	b928      	cbnz	r0, 80010d0 <__aeabi_d2lz+0x20>
 80010c4:	4628      	mov	r0, r5
 80010c6:	4621      	mov	r1, r4
 80010c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010cc:	f000 b80a 	b.w	80010e4 <__aeabi_d2ulz>
 80010d0:	4628      	mov	r0, r5
 80010d2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80010d6:	f000 f805 	bl	80010e4 <__aeabi_d2ulz>
 80010da:	4240      	negs	r0, r0
 80010dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010e0:	bd38      	pop	{r3, r4, r5, pc}
 80010e2:	bf00      	nop

080010e4 <__aeabi_d2ulz>:
 80010e4:	b5d0      	push	{r4, r6, r7, lr}
 80010e6:	2200      	movs	r2, #0
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <__aeabi_d2ulz+0x34>)
 80010ea:	4606      	mov	r6, r0
 80010ec:	460f      	mov	r7, r1
 80010ee:	f7ff f9f3 	bl	80004d8 <__aeabi_dmul>
 80010f2:	f7ff fcc9 	bl	8000a88 <__aeabi_d2uiz>
 80010f6:	4604      	mov	r4, r0
 80010f8:	f7ff f974 	bl	80003e4 <__aeabi_ui2d>
 80010fc:	2200      	movs	r2, #0
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <__aeabi_d2ulz+0x38>)
 8001100:	f7ff f9ea 	bl	80004d8 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4630      	mov	r0, r6
 800110a:	4639      	mov	r1, r7
 800110c:	f7ff f82c 	bl	8000168 <__aeabi_dsub>
 8001110:	f7ff fcba 	bl	8000a88 <__aeabi_d2uiz>
 8001114:	4621      	mov	r1, r4
 8001116:	bdd0      	pop	{r4, r6, r7, pc}
 8001118:	3df00000 	.word	0x3df00000
 800111c:	41f00000 	.word	0x41f00000

08001120 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8001128:	1d39      	adds	r1, r7, #4
 800112a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800112e:	2201      	movs	r2, #1
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <__io_putchar+0x20>)
 8001132:	f005 f995 	bl	8006460 <HAL_UART_Transmit>

	return ch;
 8001136:	687b      	ldr	r3, [r7, #4]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000274 	.word	0x20000274

08001144 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800114a:	f000 fc61 	bl	8001a10 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800114e:	f000 f8d9 	bl	8001304 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001152:	f000 f9c9 	bl	80014e8 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001156:	f000 f931 	bl	80013bc <MX_ADC1_Init>
	MX_I2C1_Init();
 800115a:	f000 f96d 	bl	8001438 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 800115e:	f000 f999 	bl	8001494 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	uint8_t status = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t busVolt = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t Current = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	847b      	strh	r3, [r7, #34]	; 0x22
	float shuntVolt = 0;
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
	float power = 0;
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
	status = INA219_Init(&ina, &hi2c1, INA219_ADDRESS);
 800117c:	2240      	movs	r2, #64	; 0x40
 800117e:	4956      	ldr	r1, [pc, #344]	; (80012d8 <main+0x194>)
 8001180:	4856      	ldr	r0, [pc, #344]	; (80012dc <main+0x198>)
 8001182:	f005 fc0d 	bl	80069a0 <INA219_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status == 0)
 800118c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001190:	2b00      	cmp	r3, #0
 8001192:	d106      	bne.n	80011a2 <main+0x5e>
		HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800119a:	4851      	ldr	r0, [pc, #324]	; (80012e0 <main+0x19c>)
 800119c:	f001 fd08 	bl	8002bb0 <HAL_GPIO_WritePin>
 80011a0:	e005      	b.n	80011ae <main+0x6a>
	else
		HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a8:	484d      	ldr	r0, [pc, #308]	; (80012e0 <main+0x19c>)
 80011aa:	f001 fd01 	bl	8002bb0 <HAL_GPIO_WritePin>
	float LM35_Temp = 0;
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
 80011b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b8:	4849      	ldr	r0, [pc, #292]	; (80012e0 <main+0x19c>)
 80011ba:	f001 fd11 	bl	8002be0 <HAL_GPIO_TogglePin>
//		sprintf("Hello");
		HAL_Delay(500);
 80011be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c2:	f000 fc87 	bl	8001ad4 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 80011c6:	4847      	ldr	r0, [pc, #284]	; (80012e4 <main+0x1a0>)
 80011c8:	f000 fd80 	bl	8001ccc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 500);
 80011cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011d0:	4844      	ldr	r0, [pc, #272]	; (80012e4 <main+0x1a0>)
 80011d2:	f000 fe55 	bl	8001e80 <HAL_ADC_PollForConversion>
		LM35_Temp = HAL_ADC_GetValue(&hadc1) * 3300 / (4096 *10);
 80011d6:	4843      	ldr	r0, [pc, #268]	; (80012e4 <main+0x1a0>)
 80011d8:	f000 ff58 	bl	800208c <HAL_ADC_GetValue>
 80011dc:	4603      	mov	r3, r0
 80011de:	f640 42e4 	movw	r2, #3300	; 0xce4
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	4a40      	ldr	r2, [pc, #256]	; (80012e8 <main+0x1a4>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	0bdb      	lsrs	r3, r3, #15
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fd70 	bl	8000cd4 <__aeabi_ui2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	617b      	str	r3, [r7, #20]
		HAL_ADC_Stop(&hadc1);
 80011f8:	483a      	ldr	r0, [pc, #232]	; (80012e4 <main+0x1a0>)
 80011fa:	f000 fe15 	bl	8001e28 <HAL_ADC_Stop>
		busVolt = INA219_ReadBusVoltage(&ina);
 80011fe:	4837      	ldr	r0, [pc, #220]	; (80012dc <main+0x198>)
 8001200:	f005 faf4 	bl	80067ec <INA219_ReadBusVoltage>
 8001204:	4603      	mov	r3, r0
 8001206:	84bb      	strh	r3, [r7, #36]	; 0x24
		shuntVolt = INA219_ReadShuntVolage(&ina);
 8001208:	4834      	ldr	r0, [pc, #208]	; (80012dc <main+0x198>)
 800120a:	f005 fb51 	bl	80068b0 <INA219_ReadShuntVolage>
 800120e:	61f8      	str	r0, [r7, #28]
		Current = INA219_ReadCurrent(&ina);
 8001210:	4832      	ldr	r0, [pc, #200]	; (80012dc <main+0x198>)
 8001212:	f005 fb17 	bl	8006844 <INA219_ReadCurrent>
 8001216:	4603      	mov	r3, r0
 8001218:	847b      	strh	r3, [r7, #34]	; 0x22
		power = INA219_ReadPower(&ina);
 800121a:	4830      	ldr	r0, [pc, #192]	; (80012dc <main+0x198>)
 800121c:	f005 fb2a 	bl	8006874 <INA219_ReadPower>
 8001220:	61b8      	str	r0, [r7, #24]
		sprintf(Buf,"Temp: %.2f", LM35_Temp);
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff f900 	bl	8000428 <__aeabi_f2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4638      	mov	r0, r7
 800122e:	492f      	ldr	r1, [pc, #188]	; (80012ec <main+0x1a8>)
 8001230:	f006 fb16 	bl	8007860 <siprintf>
		HAL_UART_Transmit(&huart1, Buf, sizeof(Buf), 200);
 8001234:	4639      	mov	r1, r7
 8001236:	23c8      	movs	r3, #200	; 0xc8
 8001238:	2214      	movs	r2, #20
 800123a:	482d      	ldr	r0, [pc, #180]	; (80012f0 <main+0x1ac>)
 800123c:	f005 f910 	bl	8006460 <HAL_UART_Transmit>
		HAL_Delay(500);
 8001240:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001244:	f000 fc46 	bl	8001ad4 <HAL_Delay>
		sprintf(Buf,"Bus: %d", busVolt);
 8001248:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800124a:	463b      	mov	r3, r7
 800124c:	4929      	ldr	r1, [pc, #164]	; (80012f4 <main+0x1b0>)
 800124e:	4618      	mov	r0, r3
 8001250:	f006 fb06 	bl	8007860 <siprintf>
		HAL_UART_Transmit(&huart1, Buf, sizeof(Buf), 200);
 8001254:	4639      	mov	r1, r7
 8001256:	23c8      	movs	r3, #200	; 0xc8
 8001258:	2214      	movs	r2, #20
 800125a:	4825      	ldr	r0, [pc, #148]	; (80012f0 <main+0x1ac>)
 800125c:	f005 f900 	bl	8006460 <HAL_UART_Transmit>
		HAL_Delay(500);
 8001260:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001264:	f000 fc36 	bl	8001ad4 <HAL_Delay>
		sprintf(Buf,"Shunt: %.2f", shuntVolt);
 8001268:	69f8      	ldr	r0, [r7, #28]
 800126a:	f7ff f8dd 	bl	8000428 <__aeabi_f2d>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4638      	mov	r0, r7
 8001274:	4920      	ldr	r1, [pc, #128]	; (80012f8 <main+0x1b4>)
 8001276:	f006 faf3 	bl	8007860 <siprintf>
		HAL_UART_Transmit(&huart1, Buf, sizeof(Buf), 200);
 800127a:	4639      	mov	r1, r7
 800127c:	23c8      	movs	r3, #200	; 0xc8
 800127e:	2214      	movs	r2, #20
 8001280:	481b      	ldr	r0, [pc, #108]	; (80012f0 <main+0x1ac>)
 8001282:	f005 f8ed 	bl	8006460 <HAL_UART_Transmit>
		HAL_Delay(500);
 8001286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800128a:	f000 fc23 	bl	8001ad4 <HAL_Delay>
		sprintf(Buf,"Cur: %d", Current);
 800128e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001292:	463b      	mov	r3, r7
 8001294:	4919      	ldr	r1, [pc, #100]	; (80012fc <main+0x1b8>)
 8001296:	4618      	mov	r0, r3
 8001298:	f006 fae2 	bl	8007860 <siprintf>
		HAL_UART_Transmit(&huart1, Buf, sizeof(Buf), 200);
 800129c:	4639      	mov	r1, r7
 800129e:	23c8      	movs	r3, #200	; 0xc8
 80012a0:	2214      	movs	r2, #20
 80012a2:	4813      	ldr	r0, [pc, #76]	; (80012f0 <main+0x1ac>)
 80012a4:	f005 f8dc 	bl	8006460 <HAL_UART_Transmit>
		HAL_Delay(500);
 80012a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ac:	f000 fc12 	bl	8001ad4 <HAL_Delay>
		sprintf(Buf,"Power: %.2f", power);
 80012b0:	69b8      	ldr	r0, [r7, #24]
 80012b2:	f7ff f8b9 	bl	8000428 <__aeabi_f2d>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4638      	mov	r0, r7
 80012bc:	4910      	ldr	r1, [pc, #64]	; (8001300 <main+0x1bc>)
 80012be:	f006 facf 	bl	8007860 <siprintf>
		HAL_UART_Transmit(&huart1, Buf, sizeof(Buf), 200);
 80012c2:	4639      	mov	r1, r7
 80012c4:	23c8      	movs	r3, #200	; 0xc8
 80012c6:	2214      	movs	r2, #20
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <main+0x1ac>)
 80012ca:	f005 f8c9 	bl	8006460 <HAL_UART_Transmit>
		HAL_Delay(500);
 80012ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d2:	f000 fbff 	bl	8001ad4 <HAL_Delay>
		HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
 80012d6:	e76d      	b.n	80011b4 <main+0x70>
 80012d8:	20000220 	.word	0x20000220
 80012dc:	200002bc 	.word	0x200002bc
 80012e0:	40010c00 	.word	0x40010c00
 80012e4:	200001f0 	.word	0x200001f0
 80012e8:	cccccccd 	.word	0xcccccccd
 80012ec:	0800b188 	.word	0x0800b188
 80012f0:	20000274 	.word	0x20000274
 80012f4:	0800b194 	.word	0x0800b194
 80012f8:	0800b19c 	.word	0x0800b19c
 80012fc:	0800b1a8 	.word	0x0800b1a8
 8001300:	0800b1b0 	.word	0x0800b1b0

08001304 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b094      	sub	sp, #80	; 0x50
 8001308:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800130a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130e:	2228      	movs	r2, #40	; 0x28
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f006 fb07 	bl	8007926 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001334:	2301      	movs	r3, #1
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001342:	2301      	movs	r3, #1
 8001344:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001346:	2302      	movs	r3, #2
 8001348:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001350:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001354:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135a:	4618      	mov	r0, r3
 800135c:	f004 fab4 	bl	80058c8 <HAL_RCC_OscConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x66>
		Error_Handler();
 8001366:	f000 f90b 	bl	8001580 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800136a:	230f      	movs	r3, #15
 800136c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800137a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2102      	movs	r1, #2
 8001386:	4618      	mov	r0, r3
 8001388:	f004 fd20 	bl	8005dcc <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0x92>
		Error_Handler();
 8001392:	f000 f8f5 	bl	8001580 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001396:	2302      	movs	r3, #2
 8001398:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800139a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800139e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4618      	mov	r0, r3
 80013a4:	f004 fea0 	bl	80060e8 <HAL_RCCEx_PeriphCLKConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0xae>
		Error_Handler();
 80013ae:	f000 f8e7 	bl	8001580 <Error_Handler>
	}
}
 80013b2:	bf00      	nop
 80013b4:	3750      	adds	r7, #80	; 0x50
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <MX_ADC1_Init+0x74>)
 80013ce:	4a19      	ldr	r2, [pc, #100]	; (8001434 <MX_ADC1_Init+0x78>)
 80013d0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <MX_ADC1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <MX_ADC1_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_ADC1_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <MX_ADC1_Init+0x74>)
 80013e6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013ea:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_ADC1_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_ADC1_Init+0x74>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <MX_ADC1_Init+0x74>)
 80013fa:	f000 fb8f 	bl	8001b1c <HAL_ADC_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001404:	f000 f8bc 	bl	8001580 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800140c:	2301      	movs	r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_ADC1_Init+0x74>)
 800141a:	f000 ff15 	bl	8002248 <HAL_ADC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8001424:	f000 f8ac 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200001f0 	.word	0x200001f0
 8001434:	40012400 	.word	0x40012400

08001438 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_I2C1_Init+0x50>)
 800143e:	4a13      	ldr	r2, [pc, #76]	; (800148c <MX_I2C1_Init+0x54>)
 8001440:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_I2C1_Init+0x50>)
 8001444:	4a12      	ldr	r2, [pc, #72]	; (8001490 <MX_I2C1_Init+0x58>)
 8001446:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_I2C1_Init+0x50>)
 8001456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800145a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <MX_I2C1_Init+0x50>)
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_I2C1_Init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <MX_I2C1_Init+0x50>)
 8001476:	f001 fbcd 	bl	8002c14 <HAL_I2C_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001480:	f000 f87e 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000220 	.word	0x20000220
 800148c:	40005400 	.word	0x40005400
 8001490:	000186a0 	.word	0x000186a0

08001494 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <MX_USART1_UART_Init+0x50>)
 800149c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_USART1_UART_Init+0x4c>)
 80014cc:	f004 ff78 	bl	80063c0 <HAL_UART_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80014d6:	f000 f853 	bl	8001580 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000274 	.word	0x20000274
 80014e4:	40013800 	.word	0x40013800

080014e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MX_GPIO_Init+0x90>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a1d      	ldr	r2, [pc, #116]	; (8001578 <MX_GPIO_Init+0x90>)
 8001502:	f043 0320 	orr.w	r3, r3, #32
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_GPIO_Init+0x90>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0320 	and.w	r3, r3, #32
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_GPIO_Init+0x90>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a17      	ldr	r2, [pc, #92]	; (8001578 <MX_GPIO_Init+0x90>)
 800151a:	f043 0304 	orr.w	r3, r3, #4
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_GPIO_Init+0x90>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_GPIO_Init+0x90>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <MX_GPIO_Init+0x90>)
 8001532:	f043 0308 	orr.w	r3, r3, #8
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_GPIO_Init+0x90>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LEDB_Pin | LEDG_Pin | LEDR_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800154a:	480c      	ldr	r0, [pc, #48]	; (800157c <MX_GPIO_Init+0x94>)
 800154c:	f001 fb30 	bl	8002bb0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LEDB_Pin LEDG_Pin LEDR_Pin */
	GPIO_InitStruct.Pin = LEDB_Pin | LEDG_Pin | LEDR_Pin;
 8001550:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001554:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2302      	movs	r3, #2
 8001560:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	4619      	mov	r1, r3
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_GPIO_Init+0x94>)
 800156a:	f001 f99d 	bl	80028a8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800156e:	bf00      	nop
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	40010c00 	.word	0x40010c00

08001580 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001588:	e7fe      	b.n	8001588 <Error_Handler+0x8>
	...

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_MspInit+0x5c>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <HAL_MspInit+0x5c>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6193      	str	r3, [r2, #24]
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_MspInit+0x5c>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_MspInit+0x5c>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_MspInit+0x5c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_MspInit+0x5c>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_MspInit+0x60>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_MspInit+0x60>)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000

080015f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a18      	ldr	r2, [pc, #96]	; (800166c <HAL_ADC_MspInit+0x7c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d129      	bne.n	8001664 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_ADC_MspInit+0x80>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a16      	ldr	r2, [pc, #88]	; (8001670 <HAL_ADC_MspInit+0x80>)
 8001616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_ADC_MspInit+0x80>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_ADC_MspInit+0x80>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a10      	ldr	r2, [pc, #64]	; (8001670 <HAL_ADC_MspInit+0x80>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_ADC_MspInit+0x80>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001640:	2301      	movs	r3, #1
 8001642:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001644:	2303      	movs	r3, #3
 8001646:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	4619      	mov	r1, r3
 800164e:	4809      	ldr	r0, [pc, #36]	; (8001674 <HAL_ADC_MspInit+0x84>)
 8001650:	f001 f92a 	bl	80028a8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2012      	movs	r0, #18
 800165a:	f001 f868 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800165e:	2012      	movs	r0, #18
 8001660:	f001 f881 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40012400 	.word	0x40012400
 8001670:	40021000 	.word	0x40021000
 8001674:	40010800 	.word	0x40010800

08001678 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <HAL_I2C_MspInit+0x90>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d133      	bne.n	8001700 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_I2C_MspInit+0x94>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a1b      	ldr	r2, [pc, #108]	; (800170c <HAL_I2C_MspInit+0x94>)
 800169e:	f043 0308 	orr.w	r3, r3, #8
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_I2C_MspInit+0x94>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016b0:	23c0      	movs	r3, #192	; 0xc0
 80016b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b4:	2312      	movs	r3, #18
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	4619      	mov	r1, r3
 80016c2:	4813      	ldr	r0, [pc, #76]	; (8001710 <HAL_I2C_MspInit+0x98>)
 80016c4:	f001 f8f0 	bl	80028a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_I2C_MspInit+0x94>)
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_I2C_MspInit+0x94>)
 80016ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016d2:	61d3      	str	r3, [r2, #28]
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_I2C_MspInit+0x94>)
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	201f      	movs	r0, #31
 80016e6:	f001 f822 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016ea:	201f      	movs	r0, #31
 80016ec:	f001 f83b 	bl	8002766 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2020      	movs	r0, #32
 80016f6:	f001 f81a 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016fa:	2020      	movs	r0, #32
 80016fc:	f001 f833 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001700:	bf00      	nop
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40005400 	.word	0x40005400
 800170c:	40021000 	.word	0x40021000
 8001710:	40010c00 	.word	0x40010c00

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <HAL_UART_MspInit+0x8c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d131      	bne.n	8001798 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_UART_MspInit+0x90>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a1a      	ldr	r2, [pc, #104]	; (80017a4 <HAL_UART_MspInit+0x90>)
 800173a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_UART_MspInit+0x90>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_UART_MspInit+0x90>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <HAL_UART_MspInit+0x90>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_UART_MspInit+0x90>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001768:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	4619      	mov	r1, r3
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <HAL_UART_MspInit+0x94>)
 800177a:	f001 f895 	bl	80028a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800177e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4619      	mov	r1, r3
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <HAL_UART_MspInit+0x94>)
 8001794:	f001 f888 	bl	80028a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001798:	bf00      	nop
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40013800 	.word	0x40013800
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010800 	.word	0x40010800

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <NMI_Handler+0x4>

080017b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <MemManage_Handler+0x4>

080017be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <UsageFault_Handler+0x4>

080017ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f2:	f000 f953 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <ADC1_2_IRQHandler+0x10>)
 8001802:	f000 fc4f 	bl	80020a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200001f0 	.word	0x200001f0

08001810 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <I2C1_EV_IRQHandler+0x10>)
 8001816:	f001 ffe5 	bl	80037e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000220 	.word	0x20000220

08001824 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <I2C1_ER_IRQHandler+0x10>)
 800182a:	f002 f92e 	bl	8003a8a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000220 	.word	0x20000220

08001838 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return 1;
 800183c:	2301      	movs	r3, #1
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <_kill>:

int _kill(int pid, int sig)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001850:	f006 f8bc 	bl	80079cc <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	2216      	movs	r2, #22
 8001858:	601a      	str	r2, [r3, #0]
  return -1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_exit>:

void _exit (int status)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800186e:	f04f 31ff 	mov.w	r1, #4294967295
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffe7 	bl	8001846 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001878:	e7fe      	b.n	8001878 <_exit+0x12>

0800187a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e00a      	b.n	80018a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800188c:	f3af 8000 	nop.w
 8001890:	4601      	mov	r1, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	60ba      	str	r2, [r7, #8]
 8001898:	b2ca      	uxtb	r2, r1
 800189a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dbf0      	blt.n	800188c <_read+0x12>
  }

  return len;
 80018aa:	687b      	ldr	r3, [r7, #4]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	e009      	b.n	80018da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	60ba      	str	r2, [r7, #8]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fc26 	bl	8001120 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	3301      	adds	r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	429a      	cmp	r2, r3
 80018e0:	dbf1      	blt.n	80018c6 <_write+0x12>
  }
  return len;
 80018e2:	687b      	ldr	r3, [r7, #4]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_close>:

int _close(int file)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001912:	605a      	str	r2, [r3, #4]
  return 0;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <_isatty>:

int _isatty(int file)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001928:	2301      	movs	r3, #1
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <_sbrk+0x5c>)
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <_sbrk+0x60>)
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <_sbrk+0x64>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <_sbrk+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	429a      	cmp	r2, r3
 800197a:	d207      	bcs.n	800198c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800197c:	f006 f826 	bl	80079cc <__errno>
 8001980:	4603      	mov	r3, r0
 8001982:	220c      	movs	r2, #12
 8001984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e009      	b.n	80019a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <_sbrk+0x64>)
 800199c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20005000 	.word	0x20005000
 80019ac:	00000400 	.word	0x00000400
 80019b0:	200002c4 	.word	0x200002c4
 80019b4:	20000420 	.word	0x20000420

080019b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c4:	f7ff fff8 	bl	80019b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c8:	480b      	ldr	r0, [pc, #44]	; (80019f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019ca:	490c      	ldr	r1, [pc, #48]	; (80019fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019cc:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019e0:	4c09      	ldr	r4, [pc, #36]	; (8001a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ee:	f005 fff3 	bl	80079d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019f2:	f7ff fba7 	bl	8001144 <main>
  bx lr
 80019f6:	4770      	bx	lr
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a00:	0800b630 	.word	0x0800b630
  ldr r2, =_sbss
 8001a04:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a08:	20000420 	.word	0x20000420

08001a0c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <CAN1_RX1_IRQHandler>
	...

08001a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_Init+0x28>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <HAL_Init+0x28>)
 8001a1a:	f043 0310 	orr.w	r3, r3, #16
 8001a1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f000 fe79 	bl	8002718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a26:	200f      	movs	r0, #15
 8001a28:	f000 f808 	bl	8001a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a2c:	f7ff fdae 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40022000 	.word	0x40022000

08001a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_InitTick+0x54>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_InitTick+0x58>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 fe91 	bl	8002782 <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00e      	b.n	8001a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b0f      	cmp	r3, #15
 8001a6e:	d80a      	bhi.n	8001a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a70:	2200      	movs	r2, #0
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f000 fe59 	bl	800272e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_InitTick+0x5c>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e000      	b.n	8001a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_IncTick+0x1c>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_IncTick+0x20>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_IncTick+0x20>)
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	200002c8 	.word	0x200002c8

08001ac0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <HAL_GetTick+0x10>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	200002c8 	.word	0x200002c8

08001ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff fff0 	bl	8001ac0 <HAL_GetTick>
 8001ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d005      	beq.n	8001afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_Delay+0x44>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001afa:	bf00      	nop
 8001afc:	f7ff ffe0 	bl	8001ac0 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d8f7      	bhi.n	8001afc <HAL_Delay+0x28>
  {
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000008 	.word	0x20000008

08001b1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e0be      	b.n	8001cbc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fd48 	bl	80015f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fcc3 	bl	80024ec <ADC_ConversionStop_Disable>
 8001b66:	4603      	mov	r3, r0
 8001b68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f040 8099 	bne.w	8001caa <HAL_ADC_Init+0x18e>
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 8095 	bne.w	8001caa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b88:	f023 0302 	bic.w	r3, r3, #2
 8001b8c:	f043 0202 	orr.w	r2, r3, #2
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7b1b      	ldrb	r3, [r3, #12]
 8001ba2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ba4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb4:	d003      	beq.n	8001bbe <HAL_ADC_Init+0xa2>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d102      	bne.n	8001bc4 <HAL_ADC_Init+0xa8>
 8001bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc2:	e000      	b.n	8001bc6 <HAL_ADC_Init+0xaa>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7d1b      	ldrb	r3, [r3, #20]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d119      	bne.n	8001c08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7b1b      	ldrb	r3, [r3, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	035a      	lsls	r2, r3, #13
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	e00b      	b.n	8001c08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	f043 0220 	orr.w	r2, r3, #32
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <HAL_ADC_Init+0x1a8>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	68b9      	ldr	r1, [r7, #8]
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c38:	d003      	beq.n	8001c42 <HAL_ADC_Init+0x126>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d104      	bne.n	8001c4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	051b      	lsls	r3, r3, #20
 8001c4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_ADC_Init+0x1ac>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d10b      	bne.n	8001c88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	f023 0303 	bic.w	r3, r3, #3
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c86:	e018      	b.n	8001cba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	f023 0312 	bic.w	r3, r3, #18
 8001c90:	f043 0210 	orr.w	r2, r3, #16
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	f043 0201 	orr.w	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ca8:	e007      	b.n	8001cba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	f043 0210 	orr.w	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	ffe1f7fd 	.word	0xffe1f7fd
 8001cc8:	ff1f0efe 	.word	0xff1f0efe

08001ccc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_Start+0x1a>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e098      	b.n	8001e18 <HAL_ADC_Start+0x14c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fba2 	bl	8002438 <ADC_Enable>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f040 8087 	bne.w	8001e0e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a41      	ldr	r2, [pc, #260]	; (8001e20 <HAL_ADC_Start+0x154>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d105      	bne.n	8001d2a <HAL_ADC_Start+0x5e>
 8001d1e:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_ADC_Start+0x158>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d115      	bne.n	8001d56 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d026      	beq.n	8001d92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d54:	e01d      	b.n	8001d92 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a2f      	ldr	r2, [pc, #188]	; (8001e24 <HAL_ADC_Start+0x158>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d004      	beq.n	8001d76 <HAL_ADC_Start+0xaa>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a2b      	ldr	r2, [pc, #172]	; (8001e20 <HAL_ADC_Start+0x154>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d10d      	bne.n	8001d92 <HAL_ADC_Start+0xc6>
 8001d76:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_ADC_Start+0x158>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d007      	beq.n	8001d92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d006      	beq.n	8001dac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	f023 0206 	bic.w	r2, r3, #6
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001daa:	e002      	b.n	8001db2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f06f 0202 	mvn.w	r2, #2
 8001dc2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dd2:	d113      	bne.n	8001dfc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001dd8:	4a11      	ldr	r2, [pc, #68]	; (8001e20 <HAL_ADC_Start+0x154>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d105      	bne.n	8001dea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_ADC_Start+0x158>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d108      	bne.n	8001dfc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	e00c      	b.n	8001e16 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	e003      	b.n	8001e16 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40012800 	.word	0x40012800
 8001e24:	40012400 	.word	0x40012400

08001e28 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_Stop+0x1a>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e01a      	b.n	8001e78 <HAL_ADC_Stop+0x50>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fb4e 	bl	80024ec <ADC_ConversionStop_Disable>
 8001e50:	4603      	mov	r3, r0
 8001e52:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e62:	f023 0301 	bic.w	r3, r3, #1
 8001e66:	f043 0201 	orr.w	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e96:	f7ff fe13 	bl	8001ac0 <HAL_GetTick>
 8001e9a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	f043 0220 	orr.w	r2, r3, #32
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e0d3      	b.n	800206a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d131      	bne.n	8001f34 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d12a      	bne.n	8001f34 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ede:	e021      	b.n	8001f24 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee6:	d01d      	beq.n	8001f24 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <HAL_ADC_PollForConversion+0x7e>
 8001eee:	f7ff fde7 	bl	8001ac0 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d212      	bcs.n	8001f24 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10b      	bne.n	8001f24 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	f043 0204 	orr.w	r2, r3, #4
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e0a2      	b.n	800206a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0d6      	beq.n	8001ee0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f32:	e070      	b.n	8002016 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f34:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <HAL_ADC_PollForConversion+0x1f4>)
 8001f36:	681c      	ldr	r4, [r3, #0]
 8001f38:	2002      	movs	r0, #2
 8001f3a:	f004 f98b 	bl	8006254 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6919      	ldr	r1, [r3, #16]
 8001f4a:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <HAL_ADC_PollForConversion+0x1f8>)
 8001f4c:	400b      	ands	r3, r1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d118      	bne.n	8001f84 <HAL_ADC_PollForConversion+0x104>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68d9      	ldr	r1, [r3, #12]
 8001f58:	4b48      	ldr	r3, [pc, #288]	; (800207c <HAL_ADC_PollForConversion+0x1fc>)
 8001f5a:	400b      	ands	r3, r1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d111      	bne.n	8001f84 <HAL_ADC_PollForConversion+0x104>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6919      	ldr	r1, [r3, #16]
 8001f66:	4b46      	ldr	r3, [pc, #280]	; (8002080 <HAL_ADC_PollForConversion+0x200>)
 8001f68:	400b      	ands	r3, r1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d108      	bne.n	8001f80 <HAL_ADC_PollForConversion+0x100>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68d9      	ldr	r1, [r3, #12]
 8001f74:	4b43      	ldr	r3, [pc, #268]	; (8002084 <HAL_ADC_PollForConversion+0x204>)
 8001f76:	400b      	ands	r3, r1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_PollForConversion+0x100>
 8001f7c:	2314      	movs	r3, #20
 8001f7e:	e020      	b.n	8001fc2 <HAL_ADC_PollForConversion+0x142>
 8001f80:	2329      	movs	r3, #41	; 0x29
 8001f82:	e01e      	b.n	8001fc2 <HAL_ADC_PollForConversion+0x142>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6919      	ldr	r1, [r3, #16]
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_ADC_PollForConversion+0x200>)
 8001f8c:	400b      	ands	r3, r1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_ADC_PollForConversion+0x120>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68d9      	ldr	r1, [r3, #12]
 8001f98:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <HAL_ADC_PollForConversion+0x204>)
 8001f9a:	400b      	ands	r3, r1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00d      	beq.n	8001fbc <HAL_ADC_PollForConversion+0x13c>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6919      	ldr	r1, [r3, #16]
 8001fa6:	4b38      	ldr	r3, [pc, #224]	; (8002088 <HAL_ADC_PollForConversion+0x208>)
 8001fa8:	400b      	ands	r3, r1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d108      	bne.n	8001fc0 <HAL_ADC_PollForConversion+0x140>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68d9      	ldr	r1, [r3, #12]
 8001fb4:	4b34      	ldr	r3, [pc, #208]	; (8002088 <HAL_ADC_PollForConversion+0x208>)
 8001fb6:	400b      	ands	r3, r1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_ADC_PollForConversion+0x140>
 8001fbc:	2354      	movs	r3, #84	; 0x54
 8001fbe:	e000      	b.n	8001fc2 <HAL_ADC_PollForConversion+0x142>
 8001fc0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001fc8:	e021      	b.n	800200e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd0:	d01a      	beq.n	8002008 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d007      	beq.n	8001fe8 <HAL_ADC_PollForConversion+0x168>
 8001fd8:	f7ff fd72 	bl	8001ac0 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d20f      	bcs.n	8002008 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d90b      	bls.n	8002008 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	f043 0204 	orr.w	r2, r3, #4
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e030      	b.n	800206a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3301      	adds	r3, #1
 800200c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	429a      	cmp	r2, r3
 8002014:	d8d9      	bhi.n	8001fca <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f06f 0212 	mvn.w	r2, #18
 800201e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002036:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800203a:	d115      	bne.n	8002068 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002040:	2b00      	cmp	r3, #0
 8002042:	d111      	bne.n	8002068 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d105      	bne.n	8002068 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	371c      	adds	r7, #28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd90      	pop	{r4, r7, pc}
 8002072:	bf00      	nop
 8002074:	20000000 	.word	0x20000000
 8002078:	24924924 	.word	0x24924924
 800207c:	00924924 	.word	0x00924924
 8002080:	12492492 	.word	0x12492492
 8002084:	00492492 	.word	0x00492492
 8002088:	00249249 	.word	0x00249249

0800208c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d03e      	beq.n	8002144 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d039      	beq.n	8002144 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80020f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80020f6:	d11d      	bne.n	8002134 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d119      	bne.n	8002134 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0220 	bic.w	r2, r2, #32
 800210e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f874 	bl	8002222 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f06f 0212 	mvn.w	r2, #18
 8002142:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214a:	2b00      	cmp	r3, #0
 800214c:	d04d      	beq.n	80021ea <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d048      	beq.n	80021ea <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	d105      	bne.n	8002170 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800217a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800217e:	d012      	beq.n	80021a6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800218a:	2b00      	cmp	r3, #0
 800218c:	d125      	bne.n	80021da <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002198:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800219c:	d11d      	bne.n	80021da <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d119      	bne.n	80021da <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d105      	bne.n	80021da <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f9c7 	bl	800256e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 020c 	mvn.w	r2, #12
 80021e8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d012      	beq.n	800221a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00d      	beq.n	800221a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f812 	bl	8002234 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0201 	mvn.w	r2, #1
 8002218:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
	...

08002248 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x20>
 8002264:	2302      	movs	r3, #2
 8002266:	e0dc      	b.n	8002422 <HAL_ADC_ConfigChannel+0x1da>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b06      	cmp	r3, #6
 8002276:	d81c      	bhi.n	80022b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	3b05      	subs	r3, #5
 800228a:	221f      	movs	r2, #31
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	4019      	ands	r1, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	3b05      	subs	r3, #5
 80022a4:	fa00 f203 	lsl.w	r2, r0, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	635a      	str	r2, [r3, #52]	; 0x34
 80022b0:	e03c      	b.n	800232c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b0c      	cmp	r3, #12
 80022b8:	d81c      	bhi.n	80022f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	3b23      	subs	r3, #35	; 0x23
 80022cc:	221f      	movs	r2, #31
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	4019      	ands	r1, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	3b23      	subs	r3, #35	; 0x23
 80022e6:	fa00 f203 	lsl.w	r2, r0, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
 80022f2:	e01b      	b.n	800232c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	3b41      	subs	r3, #65	; 0x41
 8002306:	221f      	movs	r2, #31
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	4019      	ands	r1, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	3b41      	subs	r3, #65	; 0x41
 8002320:	fa00 f203 	lsl.w	r2, r0, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b09      	cmp	r3, #9
 8002332:	d91c      	bls.n	800236e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68d9      	ldr	r1, [r3, #12]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4613      	mov	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4413      	add	r3, r2
 8002344:	3b1e      	subs	r3, #30
 8002346:	2207      	movs	r2, #7
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	4019      	ands	r1, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6898      	ldr	r0, [r3, #8]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	3b1e      	subs	r3, #30
 8002360:	fa00 f203 	lsl.w	r2, r0, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	e019      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6919      	ldr	r1, [r3, #16]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	2207      	movs	r2, #7
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	4019      	ands	r1, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6898      	ldr	r0, [r3, #8]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	fa00 f203 	lsl.w	r2, r0, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b10      	cmp	r3, #16
 80023a8:	d003      	beq.n	80023b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023ae:	2b11      	cmp	r3, #17
 80023b0:	d132      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1d      	ldr	r2, [pc, #116]	; (800242c <HAL_ADC_ConfigChannel+0x1e4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d125      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d126      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b10      	cmp	r3, #16
 80023e0:	d11a      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023e2:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_ADC_ConfigChannel+0x1e8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a13      	ldr	r2, [pc, #76]	; (8002434 <HAL_ADC_ConfigChannel+0x1ec>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	0c9a      	lsrs	r2, r3, #18
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023f8:	e002      	b.n	8002400 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f9      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x1b2>
 8002406:	e007      	b.n	8002418 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	f043 0220 	orr.w	r2, r3, #32
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	40012400 	.word	0x40012400
 8002430:	20000000 	.word	0x20000000
 8002434:	431bde83 	.word	0x431bde83

08002438 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d040      	beq.n	80024d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0201 	orr.w	r2, r2, #1
 8002464:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002466:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <ADC_Enable+0xac>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1f      	ldr	r2, [pc, #124]	; (80024e8 <ADC_Enable+0xb0>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	0c9b      	lsrs	r3, r3, #18
 8002472:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002474:	e002      	b.n	800247c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	3b01      	subs	r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f9      	bne.n	8002476 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002482:	f7ff fb1d 	bl	8001ac0 <HAL_GetTick>
 8002486:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002488:	e01f      	b.n	80024ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800248a:	f7ff fb19 	bl	8001ac0 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d918      	bls.n	80024ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d011      	beq.n	80024ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	f043 0210 	orr.w	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e007      	b.n	80024da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d1d8      	bne.n	800248a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000000 	.word	0x20000000
 80024e8:	431bde83 	.word	0x431bde83

080024ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d12e      	bne.n	8002564 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002516:	f7ff fad3 	bl	8001ac0 <HAL_GetTick>
 800251a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800251c:	e01b      	b.n	8002556 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800251e:	f7ff facf 	bl	8001ac0 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d914      	bls.n	8002556 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d10d      	bne.n	8002556 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	f043 0210 	orr.w	r2, r3, #16
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e007      	b.n	8002566 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b01      	cmp	r3, #1
 8002562:	d0dc      	beq.n	800251e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b2:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	60d3      	str	r3, [r2, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0b      	blt.n	800260e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4906      	ldr	r1, [pc, #24]	; (8002618 <__NVIC_EnableIRQ+0x34>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	e000e100 	.word	0xe000e100

0800261c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	2b00      	cmp	r3, #0
 800262e:	db0a      	blt.n	8002646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	490c      	ldr	r1, [pc, #48]	; (8002668 <__NVIC_SetPriority+0x4c>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	440b      	add	r3, r1
 8002640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002644:	e00a      	b.n	800265c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4908      	ldr	r1, [pc, #32]	; (800266c <__NVIC_SetPriority+0x50>)
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	3b04      	subs	r3, #4
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	440b      	add	r3, r1
 800265a:	761a      	strb	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000e100 	.word	0xe000e100
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f1c3 0307 	rsb	r3, r3, #7
 800268a:	2b04      	cmp	r3, #4
 800268c:	bf28      	it	cs
 800268e:	2304      	movcs	r3, #4
 8002690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3304      	adds	r3, #4
 8002696:	2b06      	cmp	r3, #6
 8002698:	d902      	bls.n	80026a0 <NVIC_EncodePriority+0x30>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3b03      	subs	r3, #3
 800269e:	e000      	b.n	80026a2 <NVIC_EncodePriority+0x32>
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43d9      	mvns	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	4313      	orrs	r3, r2
         );
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	; 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e4:	d301      	bcc.n	80026ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <SysTick_Config+0x40>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f2:	210f      	movs	r1, #15
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f7ff ff90 	bl	800261c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <SysTick_Config+0x40>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <SysTick_Config+0x40>)
 8002704:	2207      	movs	r2, #7
 8002706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	e000e010 	.word	0xe000e010

08002718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ff2d 	bl	8002580 <__NVIC_SetPriorityGrouping>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002740:	f7ff ff42 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 8002744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff ff90 	bl	8002670 <NVIC_EncodePriority>
 8002750:	4602      	mov	r2, r0
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff5f 	bl	800261c <__NVIC_SetPriority>
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff35 	bl	80025e4 <__NVIC_EnableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ffa2 	bl	80026d4 <SysTick_Config>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d005      	beq.n	80027c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2204      	movs	r2, #4
 80027b8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e051      	b.n	8002864 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 020e 	bic.w	r2, r2, #14
 80027ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a22      	ldr	r2, [pc, #136]	; (8002870 <HAL_DMA_Abort_IT+0xd4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d029      	beq.n	800283e <HAL_DMA_Abort_IT+0xa2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a21      	ldr	r2, [pc, #132]	; (8002874 <HAL_DMA_Abort_IT+0xd8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d022      	beq.n	800283a <HAL_DMA_Abort_IT+0x9e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <HAL_DMA_Abort_IT+0xdc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01a      	beq.n	8002834 <HAL_DMA_Abort_IT+0x98>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1e      	ldr	r2, [pc, #120]	; (800287c <HAL_DMA_Abort_IT+0xe0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d012      	beq.n	800282e <HAL_DMA_Abort_IT+0x92>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <HAL_DMA_Abort_IT+0xe4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00a      	beq.n	8002828 <HAL_DMA_Abort_IT+0x8c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1b      	ldr	r2, [pc, #108]	; (8002884 <HAL_DMA_Abort_IT+0xe8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d102      	bne.n	8002822 <HAL_DMA_Abort_IT+0x86>
 800281c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002820:	e00e      	b.n	8002840 <HAL_DMA_Abort_IT+0xa4>
 8002822:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002826:	e00b      	b.n	8002840 <HAL_DMA_Abort_IT+0xa4>
 8002828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800282c:	e008      	b.n	8002840 <HAL_DMA_Abort_IT+0xa4>
 800282e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002832:	e005      	b.n	8002840 <HAL_DMA_Abort_IT+0xa4>
 8002834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002838:	e002      	b.n	8002840 <HAL_DMA_Abort_IT+0xa4>
 800283a:	2310      	movs	r3, #16
 800283c:	e000      	b.n	8002840 <HAL_DMA_Abort_IT+0xa4>
 800283e:	2301      	movs	r3, #1
 8002840:	4a11      	ldr	r2, [pc, #68]	; (8002888 <HAL_DMA_Abort_IT+0xec>)
 8002842:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
    } 
  }
  return status;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40020008 	.word	0x40020008
 8002874:	4002001c 	.word	0x4002001c
 8002878:	40020030 	.word	0x40020030
 800287c:	40020044 	.word	0x40020044
 8002880:	40020058 	.word	0x40020058
 8002884:	4002006c 	.word	0x4002006c
 8002888:	40020000 	.word	0x40020000

0800288c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800289a:	b2db      	uxtb	r3, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b08b      	sub	sp, #44	; 0x2c
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028b6:	2300      	movs	r3, #0
 80028b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ba:	e169      	b.n	8002b90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028bc:	2201      	movs	r2, #1
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	f040 8158 	bne.w	8002b8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4a9a      	ldr	r2, [pc, #616]	; (8002b48 <HAL_GPIO_Init+0x2a0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d05e      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 80028e4:	4a98      	ldr	r2, [pc, #608]	; (8002b48 <HAL_GPIO_Init+0x2a0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d875      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 80028ea:	4a98      	ldr	r2, [pc, #608]	; (8002b4c <HAL_GPIO_Init+0x2a4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d058      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 80028f0:	4a96      	ldr	r2, [pc, #600]	; (8002b4c <HAL_GPIO_Init+0x2a4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d86f      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 80028f6:	4a96      	ldr	r2, [pc, #600]	; (8002b50 <HAL_GPIO_Init+0x2a8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d052      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 80028fc:	4a94      	ldr	r2, [pc, #592]	; (8002b50 <HAL_GPIO_Init+0x2a8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d869      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 8002902:	4a94      	ldr	r2, [pc, #592]	; (8002b54 <HAL_GPIO_Init+0x2ac>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d04c      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 8002908:	4a92      	ldr	r2, [pc, #584]	; (8002b54 <HAL_GPIO_Init+0x2ac>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d863      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 800290e:	4a92      	ldr	r2, [pc, #584]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d046      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
 8002914:	4a90      	ldr	r2, [pc, #576]	; (8002b58 <HAL_GPIO_Init+0x2b0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d85d      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 800291a:	2b12      	cmp	r3, #18
 800291c:	d82a      	bhi.n	8002974 <HAL_GPIO_Init+0xcc>
 800291e:	2b12      	cmp	r3, #18
 8002920:	d859      	bhi.n	80029d6 <HAL_GPIO_Init+0x12e>
 8002922:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <HAL_GPIO_Init+0x80>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	080029a3 	.word	0x080029a3
 800292c:	0800297d 	.word	0x0800297d
 8002930:	0800298f 	.word	0x0800298f
 8002934:	080029d1 	.word	0x080029d1
 8002938:	080029d7 	.word	0x080029d7
 800293c:	080029d7 	.word	0x080029d7
 8002940:	080029d7 	.word	0x080029d7
 8002944:	080029d7 	.word	0x080029d7
 8002948:	080029d7 	.word	0x080029d7
 800294c:	080029d7 	.word	0x080029d7
 8002950:	080029d7 	.word	0x080029d7
 8002954:	080029d7 	.word	0x080029d7
 8002958:	080029d7 	.word	0x080029d7
 800295c:	080029d7 	.word	0x080029d7
 8002960:	080029d7 	.word	0x080029d7
 8002964:	080029d7 	.word	0x080029d7
 8002968:	080029d7 	.word	0x080029d7
 800296c:	08002985 	.word	0x08002985
 8002970:	08002999 	.word	0x08002999
 8002974:	4a79      	ldr	r2, [pc, #484]	; (8002b5c <HAL_GPIO_Init+0x2b4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800297a:	e02c      	b.n	80029d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	623b      	str	r3, [r7, #32]
          break;
 8002982:	e029      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	3304      	adds	r3, #4
 800298a:	623b      	str	r3, [r7, #32]
          break;
 800298c:	e024      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	3308      	adds	r3, #8
 8002994:	623b      	str	r3, [r7, #32]
          break;
 8002996:	e01f      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	330c      	adds	r3, #12
 800299e:	623b      	str	r3, [r7, #32]
          break;
 80029a0:	e01a      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029aa:	2304      	movs	r3, #4
 80029ac:	623b      	str	r3, [r7, #32]
          break;
 80029ae:	e013      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d105      	bne.n	80029c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b8:	2308      	movs	r3, #8
 80029ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	611a      	str	r2, [r3, #16]
          break;
 80029c2:	e009      	b.n	80029d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c4:	2308      	movs	r3, #8
 80029c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	615a      	str	r2, [r3, #20]
          break;
 80029ce:	e003      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
          break;
 80029d4:	e000      	b.n	80029d8 <HAL_GPIO_Init+0x130>
          break;
 80029d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2bff      	cmp	r3, #255	; 0xff
 80029dc:	d801      	bhi.n	80029e2 <HAL_GPIO_Init+0x13a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	e001      	b.n	80029e6 <HAL_GPIO_Init+0x13e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2bff      	cmp	r3, #255	; 0xff
 80029ec:	d802      	bhi.n	80029f4 <HAL_GPIO_Init+0x14c>
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	e002      	b.n	80029fa <HAL_GPIO_Init+0x152>
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	3b08      	subs	r3, #8
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	210f      	movs	r1, #15
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	6a39      	ldr	r1, [r7, #32]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	431a      	orrs	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80b1 	beq.w	8002b8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a28:	4b4d      	ldr	r3, [pc, #308]	; (8002b60 <HAL_GPIO_Init+0x2b8>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4a4c      	ldr	r2, [pc, #304]	; (8002b60 <HAL_GPIO_Init+0x2b8>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6193      	str	r3, [r2, #24]
 8002a34:	4b4a      	ldr	r3, [pc, #296]	; (8002b60 <HAL_GPIO_Init+0x2b8>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a40:	4a48      	ldr	r2, [pc, #288]	; (8002b64 <HAL_GPIO_Init+0x2bc>)
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4013      	ands	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a40      	ldr	r2, [pc, #256]	; (8002b68 <HAL_GPIO_Init+0x2c0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d013      	beq.n	8002a94 <HAL_GPIO_Init+0x1ec>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a3f      	ldr	r2, [pc, #252]	; (8002b6c <HAL_GPIO_Init+0x2c4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00d      	beq.n	8002a90 <HAL_GPIO_Init+0x1e8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a3e      	ldr	r2, [pc, #248]	; (8002b70 <HAL_GPIO_Init+0x2c8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d007      	beq.n	8002a8c <HAL_GPIO_Init+0x1e4>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a3d      	ldr	r2, [pc, #244]	; (8002b74 <HAL_GPIO_Init+0x2cc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d101      	bne.n	8002a88 <HAL_GPIO_Init+0x1e0>
 8002a84:	2303      	movs	r3, #3
 8002a86:	e006      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a88:	2304      	movs	r3, #4
 8002a8a:	e004      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e002      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <HAL_GPIO_Init+0x1ee>
 8002a94:	2300      	movs	r3, #0
 8002a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a98:	f002 0203 	and.w	r2, r2, #3
 8002a9c:	0092      	lsls	r2, r2, #2
 8002a9e:	4093      	lsls	r3, r2
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aa6:	492f      	ldr	r1, [pc, #188]	; (8002b64 <HAL_GPIO_Init+0x2bc>)
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	089b      	lsrs	r3, r3, #2
 8002aac:	3302      	adds	r3, #2
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d006      	beq.n	8002ace <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	492c      	ldr	r1, [pc, #176]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	608b      	str	r3, [r1, #8]
 8002acc:	e006      	b.n	8002adc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ace:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	4928      	ldr	r1, [pc, #160]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ae8:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	4922      	ldr	r1, [pc, #136]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60cb      	str	r3, [r1, #12]
 8002af4:	e006      	b.n	8002b04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002af6:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	491e      	ldr	r1, [pc, #120]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d006      	beq.n	8002b1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	4918      	ldr	r1, [pc, #96]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]
 8002b1c:	e006      	b.n	8002b2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b1e:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	4914      	ldr	r1, [pc, #80]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d021      	beq.n	8002b7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	490e      	ldr	r1, [pc, #56]	; (8002b78 <HAL_GPIO_Init+0x2d0>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]
 8002b44:	e021      	b.n	8002b8a <HAL_GPIO_Init+0x2e2>
 8002b46:	bf00      	nop
 8002b48:	10320000 	.word	0x10320000
 8002b4c:	10310000 	.word	0x10310000
 8002b50:	10220000 	.word	0x10220000
 8002b54:	10210000 	.word	0x10210000
 8002b58:	10120000 	.word	0x10120000
 8002b5c:	10110000 	.word	0x10110000
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40010800 	.word	0x40010800
 8002b6c:	40010c00 	.word	0x40010c00
 8002b70:	40011000 	.word	0x40011000
 8002b74:	40011400 	.word	0x40011400
 8002b78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	4909      	ldr	r1, [pc, #36]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f47f ae8e 	bne.w	80028bc <HAL_GPIO_Init+0x14>
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	372c      	adds	r7, #44	; 0x2c
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	40010400 	.word	0x40010400

08002bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bc0:	787b      	ldrb	r3, [r7, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bcc:	e003      	b.n	8002bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	041a      	lsls	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	611a      	str	r2, [r3, #16]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	041a      	lsls	r2, r3, #16
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	43d9      	mvns	r1, r3
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	400b      	ands	r3, r1
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	611a      	str	r2, [r3, #16]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e12b      	b.n	8002e7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe fd1c 	bl	8001678 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2224      	movs	r2, #36	; 0x24
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c78:	f003 f9f0 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 8002c7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4a81      	ldr	r2, [pc, #516]	; (8002e88 <HAL_I2C_Init+0x274>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d807      	bhi.n	8002c98 <HAL_I2C_Init+0x84>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a80      	ldr	r2, [pc, #512]	; (8002e8c <HAL_I2C_Init+0x278>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	bf94      	ite	ls
 8002c90:	2301      	movls	r3, #1
 8002c92:	2300      	movhi	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	e006      	b.n	8002ca6 <HAL_I2C_Init+0x92>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a7d      	ldr	r2, [pc, #500]	; (8002e90 <HAL_I2C_Init+0x27c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	bf94      	ite	ls
 8002ca0:	2301      	movls	r3, #1
 8002ca2:	2300      	movhi	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e0e7      	b.n	8002e7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4a78      	ldr	r2, [pc, #480]	; (8002e94 <HAL_I2C_Init+0x280>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	0c9b      	lsrs	r3, r3, #18
 8002cb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4a6a      	ldr	r2, [pc, #424]	; (8002e88 <HAL_I2C_Init+0x274>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d802      	bhi.n	8002ce8 <HAL_I2C_Init+0xd4>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	e009      	b.n	8002cfc <HAL_I2C_Init+0xe8>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	4a69      	ldr	r2, [pc, #420]	; (8002e98 <HAL_I2C_Init+0x284>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	495c      	ldr	r1, [pc, #368]	; (8002e88 <HAL_I2C_Init+0x274>)
 8002d18:	428b      	cmp	r3, r1
 8002d1a:	d819      	bhi.n	8002d50 <HAL_I2C_Init+0x13c>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1e59      	subs	r1, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d2a:	1c59      	adds	r1, r3, #1
 8002d2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d30:	400b      	ands	r3, r1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_I2C_Init+0x138>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1e59      	subs	r1, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4a:	e051      	b.n	8002df0 <HAL_I2C_Init+0x1dc>
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	e04f      	b.n	8002df0 <HAL_I2C_Init+0x1dc>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d111      	bne.n	8002d7c <HAL_I2C_Init+0x168>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1e58      	subs	r0, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6859      	ldr	r1, [r3, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	440b      	add	r3, r1
 8002d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	e012      	b.n	8002da2 <HAL_I2C_Init+0x18e>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	0099      	lsls	r1, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d92:	3301      	adds	r3, #1
 8002d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf0c      	ite	eq
 8002d9c:	2301      	moveq	r3, #1
 8002d9e:	2300      	movne	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_Init+0x196>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e022      	b.n	8002df0 <HAL_I2C_Init+0x1dc>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10e      	bne.n	8002dd0 <HAL_I2C_Init+0x1bc>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1e58      	subs	r0, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6859      	ldr	r1, [r3, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	440b      	add	r3, r1
 8002dc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dce:	e00f      	b.n	8002df0 <HAL_I2C_Init+0x1dc>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1e58      	subs	r0, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	0099      	lsls	r1, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	6809      	ldr	r1, [r1, #0]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69da      	ldr	r2, [r3, #28]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6911      	ldr	r1, [r2, #16]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68d2      	ldr	r2, [r2, #12]
 8002e2a:	4311      	orrs	r1, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	000186a0 	.word	0x000186a0
 8002e8c:	001e847f 	.word	0x001e847f
 8002e90:	003d08ff 	.word	0x003d08ff
 8002e94:	431bde83 	.word	0x431bde83
 8002e98:	10624dd3 	.word	0x10624dd3

08002e9c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eae:	2b80      	cmp	r3, #128	; 0x80
 8002eb0:	d103      	bne.n	8002eba <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
  }
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	4608      	mov	r0, r1
 8002ece:	4611      	mov	r1, r2
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	817b      	strh	r3, [r7, #10]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	813b      	strh	r3, [r7, #8]
 8002eda:	4613      	mov	r3, r2
 8002edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ede:	f7fe fdef 	bl	8001ac0 <HAL_GetTick>
 8002ee2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	f040 80d9 	bne.w	80030a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	2319      	movs	r3, #25
 8002ef8:	2201      	movs	r2, #1
 8002efa:	496d      	ldr	r1, [pc, #436]	; (80030b0 <HAL_I2C_Mem_Write+0x1ec>)
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f002 fa61 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e0cc      	b.n	80030a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Mem_Write+0x56>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e0c5      	b.n	80030a6 <HAL_I2C_Mem_Write+0x1e2>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d007      	beq.n	8002f40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2221      	movs	r2, #33	; 0x21
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2240      	movs	r2, #64	; 0x40
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a3a      	ldr	r2, [r7, #32]
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a4d      	ldr	r2, [pc, #308]	; (80030b4 <HAL_I2C_Mem_Write+0x1f0>)
 8002f80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f82:	88f8      	ldrh	r0, [r7, #6]
 8002f84:	893a      	ldrh	r2, [r7, #8]
 8002f86:	8979      	ldrh	r1, [r7, #10]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	4603      	mov	r3, r0
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f001 fff0 	bl	8004f78 <I2C_RequestMemoryWrite>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d052      	beq.n	8003044 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e081      	b.n	80030a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f002 fb26 	bl	80055f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00d      	beq.n	8002fce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d107      	bne.n	8002fca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e06b      	b.n	80030a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	781a      	ldrb	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b04      	cmp	r3, #4
 800300a:	d11b      	bne.n	8003044 <HAL_I2C_Mem_Write+0x180>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	2b00      	cmp	r3, #0
 8003012:	d017      	beq.n	8003044 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1aa      	bne.n	8002fa2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f002 fb19 	bl	8005688 <I2C_WaitOnBTFFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00d      	beq.n	8003078 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	2b04      	cmp	r3, #4
 8003062:	d107      	bne.n	8003074 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003072:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e016      	b.n	80030a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	e000      	b.n	80030a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80030a4:	2302      	movs	r3, #2
  }
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	00100002 	.word	0x00100002
 80030b4:	ffff0000 	.word	0xffff0000

080030b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08c      	sub	sp, #48	; 0x30
 80030bc:	af02      	add	r7, sp, #8
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	4608      	mov	r0, r1
 80030c2:	4611      	mov	r1, r2
 80030c4:	461a      	mov	r2, r3
 80030c6:	4603      	mov	r3, r0
 80030c8:	817b      	strh	r3, [r7, #10]
 80030ca:	460b      	mov	r3, r1
 80030cc:	813b      	strh	r3, [r7, #8]
 80030ce:	4613      	mov	r3, r2
 80030d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030d6:	f7fe fcf3 	bl	8001ac0 <HAL_GetTick>
 80030da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	f040 8244 	bne.w	8003572 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2319      	movs	r3, #25
 80030f0:	2201      	movs	r2, #1
 80030f2:	4982      	ldr	r1, [pc, #520]	; (80032fc <HAL_I2C_Mem_Read+0x244>)
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f002 f965 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003100:	2302      	movs	r3, #2
 8003102:	e237      	b.n	8003574 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_I2C_Mem_Read+0x5a>
 800310e:	2302      	movs	r3, #2
 8003110:	e230      	b.n	8003574 <HAL_I2C_Mem_Read+0x4bc>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d007      	beq.n	8003138 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003146:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2222      	movs	r2, #34	; 0x22
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2240      	movs	r2, #64	; 0x40
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003162:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003168:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a62      	ldr	r2, [pc, #392]	; (8003300 <HAL_I2C_Mem_Read+0x248>)
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800317a:	88f8      	ldrh	r0, [r7, #6]
 800317c:	893a      	ldrh	r2, [r7, #8]
 800317e:	8979      	ldrh	r1, [r7, #10]
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	4603      	mov	r3, r0
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f001 ff8a 	bl	80050a4 <I2C_RequestMemoryRead>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e1ec      	b.n	8003574 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d113      	bne.n	80031ca <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	e1c0      	b.n	800354c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d11e      	bne.n	8003210 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031e2:	b672      	cpsid	i
}
 80031e4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800320c:	b662      	cpsie	i
}
 800320e:	e035      	b.n	800327c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003214:	2b02      	cmp	r3, #2
 8003216:	d11e      	bne.n	8003256 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003226:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003228:	b672      	cpsid	i
}
 800322a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003250:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003252:	b662      	cpsie	i
}
 8003254:	e012      	b.n	800327c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003264:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800327c:	e166      	b.n	800354c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	2b03      	cmp	r3, #3
 8003284:	f200 811f 	bhi.w	80034c6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328c:	2b01      	cmp	r3, #1
 800328e:	d123      	bne.n	80032d8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003292:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f002 fa71 	bl	800577c <I2C_WaitOnRXNEFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e167      	b.n	8003574 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032d6:	e139      	b.n	800354c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d152      	bne.n	8003386 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e6:	2200      	movs	r2, #0
 80032e8:	4906      	ldr	r1, [pc, #24]	; (8003304 <HAL_I2C_Mem_Read+0x24c>)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f002 f86a 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e13c      	b.n	8003574 <HAL_I2C_Mem_Read+0x4bc>
 80032fa:	bf00      	nop
 80032fc:	00100002 	.word	0x00100002
 8003300:	ffff0000 	.word	0xffff0000
 8003304:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003308:	b672      	cpsid	i
}
 800330a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800334e:	b662      	cpsie	i
}
 8003350:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003384:	e0e2      	b.n	800354c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	2200      	movs	r2, #0
 800338e:	497b      	ldr	r1, [pc, #492]	; (800357c <HAL_I2C_Mem_Read+0x4c4>)
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f002 f817 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0e9      	b.n	8003574 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033b0:	b672      	cpsid	i
}
 80033b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033e6:	4b66      	ldr	r3, [pc, #408]	; (8003580 <HAL_I2C_Mem_Read+0x4c8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	08db      	lsrs	r3, r3, #3
 80033ec:	4a65      	ldr	r2, [pc, #404]	; (8003584 <HAL_I2C_Mem_Read+0x4cc>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	0a1a      	lsrs	r2, r3, #8
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	00da      	lsls	r2, r3, #3
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	3b01      	subs	r3, #1
 8003404:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d118      	bne.n	800343e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f043 0220 	orr.w	r2, r3, #32
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800342e:	b662      	cpsie	i
}
 8003430:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e09a      	b.n	8003574 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b04      	cmp	r3, #4
 800344a:	d1d9      	bne.n	8003400 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800348e:	b662      	cpsie	i
}
 8003490:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034c4:	e042      	b.n	800354c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f002 f956 	bl	800577c <I2C_WaitOnRXNEFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e04c      	b.n	8003574 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b04      	cmp	r3, #4
 8003518:	d118      	bne.n	800354c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f ae94 	bne.w	800327e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	e000      	b.n	8003574 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003572:	2302      	movs	r3, #2
  }
}
 8003574:	4618      	mov	r0, r3
 8003576:	3728      	adds	r7, #40	; 0x28
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	00010004 	.word	0x00010004
 8003580:	20000000 	.word	0x20000000
 8003584:	14f8b589 	.word	0x14f8b589

08003588 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	; 0x28
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	460b      	mov	r3, r1
 8003596:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003598:	f7fe fa92 	bl	8001ac0 <HAL_GetTick>
 800359c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	f040 8111 	bne.w	80037d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	2319      	movs	r3, #25
 80035b6:	2201      	movs	r2, #1
 80035b8:	4988      	ldr	r1, [pc, #544]	; (80037dc <HAL_I2C_IsDeviceReady+0x254>)
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f001 ff02 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
 80035c8:	e104      	b.n	80037d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_I2C_IsDeviceReady+0x50>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e0fd      	b.n	80037d4 <HAL_I2C_IsDeviceReady+0x24c>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d007      	beq.n	80035fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800360c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2224      	movs	r2, #36	; 0x24
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4a70      	ldr	r2, [pc, #448]	; (80037e0 <HAL_I2C_IsDeviceReady+0x258>)
 8003620:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003630:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2200      	movs	r2, #0
 800363a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f001 fec0 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00d      	beq.n	8003666 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003658:	d103      	bne.n	8003662 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003660:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e0b6      	b.n	80037d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003666:	897b      	ldrh	r3, [r7, #10]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003674:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003676:	f7fe fa23 	bl	8001ac0 <HAL_GetTick>
 800367a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b02      	cmp	r3, #2
 8003688:	bf0c      	ite	eq
 800368a:	2301      	moveq	r3, #1
 800368c:	2300      	movne	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a0:	bf0c      	ite	eq
 80036a2:	2301      	moveq	r3, #1
 80036a4:	2300      	movne	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036aa:	e025      	b.n	80036f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036ac:	f7fe fa08 	bl	8001ac0 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d302      	bcc.n	80036c2 <HAL_I2C_IsDeviceReady+0x13a>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d103      	bne.n	80036ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	22a0      	movs	r2, #160	; 0xa0
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	bf0c      	ite	eq
 80036d8:	2301      	moveq	r3, #1
 80036da:	2300      	movne	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2ba0      	cmp	r3, #160	; 0xa0
 8003702:	d005      	beq.n	8003710 <HAL_I2C_IsDeviceReady+0x188>
 8003704:	7dfb      	ldrb	r3, [r7, #23]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d102      	bne.n	8003710 <HAL_I2C_IsDeviceReady+0x188>
 800370a:	7dbb      	ldrb	r3, [r7, #22]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0cd      	beq.n	80036ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b02      	cmp	r3, #2
 8003724:	d129      	bne.n	800377a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003734:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	2319      	movs	r3, #25
 8003752:	2201      	movs	r2, #1
 8003754:	4921      	ldr	r1, [pc, #132]	; (80037dc <HAL_I2C_IsDeviceReady+0x254>)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f001 fe34 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e036      	b.n	80037d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e02c      	b.n	80037d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003788:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003792:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2319      	movs	r3, #25
 800379a:	2201      	movs	r2, #1
 800379c:	490f      	ldr	r1, [pc, #60]	; (80037dc <HAL_I2C_IsDeviceReady+0x254>)
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f001 fe10 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e012      	b.n	80037d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	3301      	adds	r3, #1
 80037b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	f4ff af32 	bcc.w	8003622 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
  }
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	00100002 	.word	0x00100002
 80037e0:	ffff0000 	.word	0xffff0000

080037e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003804:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b10      	cmp	r3, #16
 8003812:	d003      	beq.n	800381c <HAL_I2C_EV_IRQHandler+0x38>
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b40      	cmp	r3, #64	; 0x40
 8003818:	f040 80b1 	bne.w	800397e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10d      	bne.n	8003852 <HAL_I2C_EV_IRQHandler+0x6e>
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800383c:	d003      	beq.n	8003846 <HAL_I2C_EV_IRQHandler+0x62>
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003844:	d101      	bne.n	800384a <HAL_I2C_EV_IRQHandler+0x66>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_I2C_EV_IRQHandler+0x68>
 800384a:	2300      	movs	r3, #0
 800384c:	2b01      	cmp	r3, #1
 800384e:	f000 8114 	beq.w	8003a7a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00b      	beq.n	8003874 <HAL_I2C_EV_IRQHandler+0x90>
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003862:	2b00      	cmp	r3, #0
 8003864:	d006      	beq.n	8003874 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f002 f813 	bl	8005892 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fd60 	bl	8004332 <I2C_Master_SB>
 8003872:	e083      	b.n	800397c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_I2C_EV_IRQHandler+0xac>
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fdd7 	bl	800443c <I2C_Master_ADD10>
 800388e:	e075      	b.n	800397c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_I2C_EV_IRQHandler+0xc8>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fdf2 	bl	800448e <I2C_Master_ADDR>
 80038aa:	e067      	b.n	800397c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d036      	beq.n	8003924 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c4:	f000 80db 	beq.w	8003a7e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00d      	beq.n	80038ee <HAL_I2C_EV_IRQHandler+0x10a>
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_I2C_EV_IRQHandler+0x10a>
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d103      	bne.n	80038ee <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f9d4 	bl	8003c94 <I2C_MasterTransmit_TXE>
 80038ec:	e046      	b.n	800397c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80c2 	beq.w	8003a7e <HAL_I2C_EV_IRQHandler+0x29a>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80bc 	beq.w	8003a7e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003906:	7bbb      	ldrb	r3, [r7, #14]
 8003908:	2b21      	cmp	r3, #33	; 0x21
 800390a:	d103      	bne.n	8003914 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fa5d 	bl	8003dcc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003912:	e0b4      	b.n	8003a7e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b40      	cmp	r3, #64	; 0x40
 8003918:	f040 80b1 	bne.w	8003a7e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 facb 	bl	8003eb8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003922:	e0ac      	b.n	8003a7e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003932:	f000 80a4 	beq.w	8003a7e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00d      	beq.n	800395c <HAL_I2C_EV_IRQHandler+0x178>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_I2C_EV_IRQHandler+0x178>
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fb47 	bl	8003fe8 <I2C_MasterReceive_RXNE>
 800395a:	e00f      	b.n	800397c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 808b 	beq.w	8003a7e <HAL_I2C_EV_IRQHandler+0x29a>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 8085 	beq.w	8003a7e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 fbf2 	bl	800415e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800397a:	e080      	b.n	8003a7e <HAL_I2C_EV_IRQHandler+0x29a>
 800397c:	e07f      	b.n	8003a7e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d004      	beq.n	8003990 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	e007      	b.n	80039a0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d011      	beq.n	80039ce <HAL_I2C_EV_IRQHandler+0x1ea>
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00c      	beq.n	80039ce <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80039c4:	69b9      	ldr	r1, [r7, #24]
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 ffb8 	bl	800493c <I2C_Slave_ADDR>
 80039cc:	e05a      	b.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_I2C_EV_IRQHandler+0x206>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fff2 	bl	80049cc <I2C_Slave_STOPF>
 80039e8:	e04c      	b.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039ea:	7bbb      	ldrb	r3, [r7, #14]
 80039ec:	2b21      	cmp	r3, #33	; 0x21
 80039ee:	d002      	beq.n	80039f6 <HAL_I2C_EV_IRQHandler+0x212>
 80039f0:	7bbb      	ldrb	r3, [r7, #14]
 80039f2:	2b29      	cmp	r3, #41	; 0x29
 80039f4:	d120      	bne.n	8003a38 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00d      	beq.n	8003a1c <HAL_I2C_EV_IRQHandler+0x238>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <HAL_I2C_EV_IRQHandler+0x238>
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d103      	bne.n	8003a1c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fed5 	bl	80047c4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a1a:	e032      	b.n	8003a82 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d02d      	beq.n	8003a82 <HAL_I2C_EV_IRQHandler+0x29e>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d028      	beq.n	8003a82 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 ff04 	bl	800483e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a36:	e024      	b.n	8003a82 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <HAL_I2C_EV_IRQHandler+0x27a>
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_I2C_EV_IRQHandler+0x27a>
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 ff11 	bl	800487e <I2C_SlaveReceive_RXNE>
 8003a5c:	e012      	b.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00d      	beq.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 ff41 	bl	80048fa <I2C_SlaveReceive_BTF>
 8003a78:	e004      	b.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003a7a:	bf00      	nop
 8003a7c:	e002      	b.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a7e:	bf00      	nop
 8003a80:	e000      	b.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a82:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b08a      	sub	sp, #40	; 0x28
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d015      	beq.n	8003ae4 <HAL_I2C_ER_IRQHandler+0x5a>
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d010      	beq.n	8003ae4 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ad2:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ae2:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00d      	beq.n	8003b0a <HAL_I2C_ER_IRQHandler+0x80>
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	f043 0302 	orr.w	r3, r3, #2
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003b08:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d03e      	beq.n	8003b92 <HAL_I2C_ER_IRQHandler+0x108>
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d039      	beq.n	8003b92 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8003b1e:	7efb      	ldrb	r3, [r7, #27]
 8003b20:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b30:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003b38:	7ebb      	ldrb	r3, [r7, #26]
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d112      	bne.n	8003b64 <HAL_I2C_ER_IRQHandler+0xda>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10f      	bne.n	8003b64 <HAL_I2C_ER_IRQHandler+0xda>
 8003b44:	7cfb      	ldrb	r3, [r7, #19]
 8003b46:	2b21      	cmp	r3, #33	; 0x21
 8003b48:	d008      	beq.n	8003b5c <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003b4a:	7cfb      	ldrb	r3, [r7, #19]
 8003b4c:	2b29      	cmp	r3, #41	; 0x29
 8003b4e:	d005      	beq.n	8003b5c <HAL_I2C_ER_IRQHandler+0xd2>
 8003b50:	7cfb      	ldrb	r3, [r7, #19]
 8003b52:	2b28      	cmp	r3, #40	; 0x28
 8003b54:	d106      	bne.n	8003b64 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b21      	cmp	r3, #33	; 0x21
 8003b5a:	d103      	bne.n	8003b64 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f001 f865 	bl	8004c2c <I2C_Slave_AF>
 8003b62:	e016      	b.n	8003b92 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b6c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	f043 0304 	orr.w	r3, r3, #4
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b76:	7efb      	ldrb	r3, [r7, #27]
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d002      	beq.n	8003b82 <HAL_I2C_ER_IRQHandler+0xf8>
 8003b7c:	7efb      	ldrb	r3, [r7, #27]
 8003b7e:	2b40      	cmp	r3, #64	; 0x40
 8003b80:	d107      	bne.n	8003b92 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00d      	beq.n	8003bb8 <HAL_I2C_ER_IRQHandler+0x12e>
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	f043 0308 	orr.w	r3, r3, #8
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003bb6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d008      	beq.n	8003bd0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f001 f8a2 	bl	8004d14 <I2C_ITError>
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	3728      	adds	r7, #40	; 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr

08003bea <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr

08003c0e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	70fb      	strb	r3, [r7, #3]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr

08003c3a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr

08003c82 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr

08003c94 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003caa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d150      	bne.n	8003d5c <I2C_MasterTransmit_TXE+0xc8>
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	2b21      	cmp	r3, #33	; 0x21
 8003cbe:	d14d      	bne.n	8003d5c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d01d      	beq.n	8003d02 <I2C_MasterTransmit_TXE+0x6e>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d01a      	beq.n	8003d02 <I2C_MasterTransmit_TXE+0x6e>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cd2:	d016      	beq.n	8003d02 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ce2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2211      	movs	r2, #17
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff ff6c 	bl	8003bd8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d00:	e060      	b.n	8003dc4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d10:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d20:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d107      	bne.n	8003d4c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ff81 	bl	8003c4c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d4a:	e03b      	b.n	8003dc4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff3f 	bl	8003bd8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d5a:	e033      	b.n	8003dc4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	2b21      	cmp	r3, #33	; 0x21
 8003d60:	d005      	beq.n	8003d6e <I2C_MasterTransmit_TXE+0xda>
 8003d62:	7bbb      	ldrb	r3, [r7, #14]
 8003d64:	2b40      	cmp	r3, #64	; 0x40
 8003d66:	d12d      	bne.n	8003dc4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	2b22      	cmp	r3, #34	; 0x22
 8003d6c:	d12a      	bne.n	8003dc4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d108      	bne.n	8003d8a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d86:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003d88:	e01c      	b.n	8003dc4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d103      	bne.n	8003d9e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f88e 	bl	8003eb8 <I2C_MemoryTransmit_TXE_BTF>
}
 8003d9c:	e012      	b.n	8003dc4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	781a      	ldrb	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003dc2:	e7ff      	b.n	8003dc4 <I2C_MasterTransmit_TXE+0x130>
 8003dc4:	bf00      	nop
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b21      	cmp	r3, #33	; 0x21
 8003de4:	d164      	bne.n	8003eb0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d012      	beq.n	8003e16 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	781a      	ldrb	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003e14:	e04c      	b.n	8003eb0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d01d      	beq.n	8003e58 <I2C_MasterTransmit_BTF+0x8c>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d01a      	beq.n	8003e58 <I2C_MasterTransmit_BTF+0x8c>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e28:	d016      	beq.n	8003e58 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e38:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2211      	movs	r2, #17
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff fec1 	bl	8003bd8 <HAL_I2C_MasterTxCpltCallback>
}
 8003e56:	e02b      	b.n	8003eb0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e66:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e76:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b40      	cmp	r3, #64	; 0x40
 8003e90:	d107      	bne.n	8003ea2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fed6 	bl	8003c4c <HAL_I2C_MemTxCpltCallback>
}
 8003ea0:	e006      	b.n	8003eb0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff fe94 	bl	8003bd8 <HAL_I2C_MasterTxCpltCallback>
}
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d11d      	bne.n	8003f0c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d10b      	bne.n	8003ef0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee8:	1c9a      	adds	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003eee:	e077      	b.n	8003fe0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	121b      	asrs	r3, r3, #8
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f0a:	e069      	b.n	8003fe0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d10b      	bne.n	8003f2c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f2a:	e059      	b.n	8003fe0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d152      	bne.n	8003fda <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b22      	cmp	r3, #34	; 0x22
 8003f38:	d10d      	bne.n	8003f56 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f48:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f54:	e044      	b.n	8003fe0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d015      	beq.n	8003f8c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b21      	cmp	r3, #33	; 0x21
 8003f64:	d112      	bne.n	8003f8c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	781a      	ldrb	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f8a:	e029      	b.n	8003fe0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d124      	bne.n	8003fe0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	2b21      	cmp	r3, #33	; 0x21
 8003f9a:	d121      	bne.n	8003fe0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003faa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff fe3a 	bl	8003c4c <HAL_I2C_MemTxCpltCallback>
}
 8003fd8:	e002      	b.n	8003fe0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fe ff5e 	bl	8002e9c <I2C_Flush_DR>
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b22      	cmp	r3, #34	; 0x22
 8003ffa:	f040 80ac 	bne.w	8004156 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b03      	cmp	r3, #3
 800400a:	d921      	bls.n	8004050 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b03      	cmp	r3, #3
 800403a:	f040 808c 	bne.w	8004156 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800404e:	e082      	b.n	8004156 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	2b02      	cmp	r3, #2
 8004056:	d075      	beq.n	8004144 <I2C_MasterReceive_RXNE+0x15c>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d002      	beq.n	8004064 <I2C_MasterReceive_RXNE+0x7c>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d16f      	bne.n	8004144 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f001 fb57 	bl	8005718 <I2C_WaitOnSTOPRequestThroughIT>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d142      	bne.n	80040f6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800408e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b40      	cmp	r3, #64	; 0x40
 80040c8:	d10a      	bne.n	80040e0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff fdc0 	bl	8003c5e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040de:	e03a      	b.n	8004156 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2212      	movs	r2, #18
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff fd7b 	bl	8003bea <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040f4:	e02f      	b.n	8004156 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004104:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7ff fd97 	bl	8003c70 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004142:	e008      	b.n	8004156 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004152:	605a      	str	r2, [r3, #4]
}
 8004154:	e7ff      	b.n	8004156 <I2C_MasterReceive_RXNE+0x16e>
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b04      	cmp	r3, #4
 8004174:	d11b      	bne.n	80041ae <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004184:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80041ac:	e0bd      	b.n	800432a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d129      	bne.n	800420c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d00a      	beq.n	80041e4 <I2C_MasterReceive_BTF+0x86>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d007      	beq.n	80041e4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800420a:	e08e      	b.n	800432a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d176      	bne.n	8004304 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d002      	beq.n	8004222 <I2C_MasterReceive_BTF+0xc4>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b10      	cmp	r3, #16
 8004220:	d108      	bne.n	8004234 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	e019      	b.n	8004268 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b04      	cmp	r3, #4
 8004238:	d002      	beq.n	8004240 <I2C_MasterReceive_BTF+0xe2>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d108      	bne.n	8004252 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	e00a      	b.n	8004268 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b10      	cmp	r3, #16
 8004256:	d007      	beq.n	8004268 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004266:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042c2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b40      	cmp	r3, #64	; 0x40
 80042d6:	d10a      	bne.n	80042ee <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff fcb9 	bl	8003c5e <HAL_I2C_MemRxCpltCallback>
}
 80042ec:	e01d      	b.n	800432a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2212      	movs	r2, #18
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff fc74 	bl	8003bea <HAL_I2C_MasterRxCpltCallback>
}
 8004302:	e012      	b.n	800432a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d117      	bne.n	8004376 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800435e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004360:	e067      	b.n	8004432 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	b2da      	uxtb	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	611a      	str	r2, [r3, #16]
}
 8004374:	e05d      	b.n	8004432 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800437e:	d133      	bne.n	80043e8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b21      	cmp	r3, #33	; 0x21
 800438a:	d109      	bne.n	80043a0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004390:	b2db      	uxtb	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800439c:	611a      	str	r2, [r3, #16]
 800439e:	e008      	b.n	80043b2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <I2C_Master_SB+0x92>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d108      	bne.n	80043d6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d032      	beq.n	8004432 <I2C_Master_SB+0x100>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d02d      	beq.n	8004432 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e4:	605a      	str	r2, [r3, #4]
}
 80043e6:	e024      	b.n	8004432 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10e      	bne.n	800440e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	11db      	asrs	r3, r3, #7
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	f003 0306 	and.w	r3, r3, #6
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f063 030f 	orn	r3, r3, #15
 8004404:	b2da      	uxtb	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	611a      	str	r2, [r3, #16]
}
 800440c:	e011      	b.n	8004432 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004412:	2b01      	cmp	r3, #1
 8004414:	d10d      	bne.n	8004432 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	b29b      	uxth	r3, r3
 800441c:	11db      	asrs	r3, r3, #7
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f003 0306 	and.w	r3, r3, #6
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f063 030e 	orn	r3, r3, #14
 800442a:	b2da      	uxtb	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	611a      	str	r2, [r3, #16]
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004448:	b2da      	uxtb	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <I2C_Master_ADD10+0x26>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	d108      	bne.n	8004474 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <I2C_Master_ADD10+0x48>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004482:	605a      	str	r2, [r3, #4]
  }
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr

0800448e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800448e:	b480      	push	{r7}
 8004490:	b091      	sub	sp, #68	; 0x44
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800449c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b22      	cmp	r3, #34	; 0x22
 80044b6:	f040 8174 	bne.w	80047a2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10f      	bne.n	80044e2 <I2C_Master_ADDR+0x54>
 80044c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80044c6:	2b40      	cmp	r3, #64	; 0x40
 80044c8:	d10b      	bne.n	80044e2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ca:	2300      	movs	r3, #0
 80044cc:	633b      	str	r3, [r7, #48]	; 0x30
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	633b      	str	r3, [r7, #48]	; 0x30
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	633b      	str	r3, [r7, #48]	; 0x30
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	e16b      	b.n	80047ba <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d11d      	bne.n	8004526 <I2C_Master_ADDR+0x98>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044f2:	d118      	bne.n	8004526 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f4:	2300      	movs	r3, #0
 80044f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004508:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004518:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	651a      	str	r2, [r3, #80]	; 0x50
 8004524:	e149      	b.n	80047ba <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d113      	bne.n	8004558 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004530:	2300      	movs	r3, #0
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
 8004544:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e120      	b.n	800479a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b01      	cmp	r3, #1
 8004560:	f040 808a 	bne.w	8004678 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004566:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800456a:	d137      	bne.n	80045dc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800458a:	d113      	bne.n	80045b4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459c:	2300      	movs	r3, #0
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	e0f2      	b.n	800479a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b4:	2300      	movs	r3, #0
 80045b6:	623b      	str	r3, [r7, #32]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	623b      	str	r3, [r7, #32]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	623b      	str	r3, [r7, #32]
 80045c8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e0de      	b.n	800479a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80045dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d02e      	beq.n	8004640 <I2C_Master_ADDR+0x1b2>
 80045e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d02b      	beq.n	8004640 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80045e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ea:	2b12      	cmp	r3, #18
 80045ec:	d102      	bne.n	80045f4 <I2C_Master_ADDR+0x166>
 80045ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d125      	bne.n	8004640 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d00e      	beq.n	8004618 <I2C_Master_ADDR+0x18a>
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d00b      	beq.n	8004618 <I2C_Master_ADDR+0x18a>
 8004600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004602:	2b10      	cmp	r3, #16
 8004604:	d008      	beq.n	8004618 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	e007      	b.n	8004628 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004626:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004628:	2300      	movs	r3, #0
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	e0ac      	b.n	800479a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004650:	2300      	movs	r3, #0
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	61bb      	str	r3, [r7, #24]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	e090      	b.n	800479a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d158      	bne.n	8004734 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	2b04      	cmp	r3, #4
 8004686:	d021      	beq.n	80046cc <I2C_Master_ADDR+0x23e>
 8004688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468a:	2b02      	cmp	r3, #2
 800468c:	d01e      	beq.n	80046cc <I2C_Master_ADDR+0x23e>
 800468e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004690:	2b10      	cmp	r3, #16
 8004692:	d01b      	beq.n	80046cc <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	e012      	b.n	80046f2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046da:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	613b      	str	r3, [r7, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004700:	d14b      	bne.n	800479a <I2C_Master_ADDR+0x30c>
 8004702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004704:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004708:	d00b      	beq.n	8004722 <I2C_Master_ADDR+0x294>
 800470a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470c:	2b01      	cmp	r3, #1
 800470e:	d008      	beq.n	8004722 <I2C_Master_ADDR+0x294>
 8004710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004712:	2b08      	cmp	r3, #8
 8004714:	d005      	beq.n	8004722 <I2C_Master_ADDR+0x294>
 8004716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004718:	2b10      	cmp	r3, #16
 800471a:	d002      	beq.n	8004722 <I2C_Master_ADDR+0x294>
 800471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471e:	2b20      	cmp	r3, #32
 8004720:	d13b      	bne.n	800479a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004730:	605a      	str	r2, [r3, #4]
 8004732:	e032      	b.n	800479a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004742:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004752:	d117      	bne.n	8004784 <I2C_Master_ADDR+0x2f6>
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800475a:	d00b      	beq.n	8004774 <I2C_Master_ADDR+0x2e6>
 800475c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475e:	2b01      	cmp	r3, #1
 8004760:	d008      	beq.n	8004774 <I2C_Master_ADDR+0x2e6>
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	2b08      	cmp	r3, #8
 8004766:	d005      	beq.n	8004774 <I2C_Master_ADDR+0x2e6>
 8004768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476a:	2b10      	cmp	r3, #16
 800476c:	d002      	beq.n	8004774 <I2C_Master_ADDR+0x2e6>
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	2b20      	cmp	r3, #32
 8004772:	d107      	bne.n	8004784 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004782:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80047a0:	e00b      	b.n	80047ba <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a2:	2300      	movs	r3, #0
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	68bb      	ldr	r3, [r7, #8]
}
 80047b8:	e7ff      	b.n	80047ba <I2C_Master_ADDR+0x32c>
 80047ba:	bf00      	nop
 80047bc:	3744      	adds	r7, #68	; 0x44
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d02b      	beq.n	8004836 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	781a      	ldrb	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d114      	bne.n	8004836 <I2C_SlaveTransmit_TXE+0x72>
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	2b29      	cmp	r3, #41	; 0x29
 8004810:	d111      	bne.n	8004836 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004820:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2221      	movs	r2, #33	; 0x21
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2228      	movs	r2, #40	; 0x28
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff f9e3 	bl	8003bfc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d011      	beq.n	8004874 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	781a      	ldrb	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr

0800487e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d02c      	beq.n	80048f2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d114      	bne.n	80048f2 <I2C_SlaveReceive_RXNE+0x74>
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b2a      	cmp	r3, #42	; 0x2a
 80048cc:	d111      	bne.n	80048f2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2222      	movs	r2, #34	; 0x22
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2228      	movs	r2, #40	; 0x28
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff f98e 	bl	8003c0e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80048f2:	bf00      	nop
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d012      	beq.n	8004932 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004928:	b29b      	uxth	r3, r3
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr

0800493c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004946:	2300      	movs	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004956:	2b28      	cmp	r3, #40	; 0x28
 8004958:	d125      	bne.n	80049a6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004968:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497e:	2b00      	cmp	r3, #0
 8004980:	d103      	bne.n	800498a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	81bb      	strh	r3, [r7, #12]
 8004988:	e002      	b.n	8004990 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004998:	89ba      	ldrh	r2, [r7, #12]
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	4619      	mov	r1, r3
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff f93e 	bl	8003c20 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80049a4:	e00e      	b.n	80049c4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a6:	2300      	movs	r3, #0
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	60bb      	str	r3, [r7, #8]
 80049ba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049da:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049ea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80049ec:	2300      	movs	r3, #0
 80049ee:	60bb      	str	r3, [r7, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	60bb      	str	r3, [r7, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a18:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a28:	d172      	bne.n	8004b10 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	2b22      	cmp	r3, #34	; 0x22
 8004a2e:	d002      	beq.n	8004a36 <I2C_Slave_STOPF+0x6a>
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	2b2a      	cmp	r3, #42	; 0x2a
 8004a34:	d135      	bne.n	8004aa2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f043 0204 	orr.w	r2, r3, #4
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fd ff0c 	bl	800288c <HAL_DMA_GetState>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d049      	beq.n	8004b0e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	4a69      	ldr	r2, [pc, #420]	; (8004c24 <I2C_Slave_STOPF+0x258>)
 8004a80:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fd fe88 	bl	800279c <HAL_DMA_Abort_IT>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d03d      	beq.n	8004b0e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aa0:	e035      	b.n	8004b0e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f043 0204 	orr.w	r2, r3, #4
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ad4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fd fed6 	bl	800288c <HAL_DMA_GetState>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d014      	beq.n	8004b10 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aea:	4a4e      	ldr	r2, [pc, #312]	; (8004c24 <I2C_Slave_STOPF+0x258>)
 8004aec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fd fe52 	bl	800279c <HAL_DMA_Abort_IT>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d008      	beq.n	8004b10 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b08:	4610      	mov	r0, r2
 8004b0a:	4798      	blx	r3
 8004b0c:	e000      	b.n	8004b10 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b0e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d03e      	beq.n	8004b98 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d112      	bne.n	8004b4e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d112      	bne.n	8004b82 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	f043 0204 	orr.w	r2, r3, #4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f8b7 	bl	8004d14 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004ba6:	e039      	b.n	8004c1c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	2b2a      	cmp	r3, #42	; 0x2a
 8004bac:	d109      	bne.n	8004bc2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2228      	movs	r2, #40	; 0x28
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff f826 	bl	8003c0e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b28      	cmp	r3, #40	; 0x28
 8004bcc:	d111      	bne.n	8004bf2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a15      	ldr	r2, [pc, #84]	; (8004c28 <I2C_Slave_STOPF+0x25c>)
 8004bd2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff f825 	bl	8003c3a <HAL_I2C_ListenCpltCallback>
}
 8004bf0:	e014      	b.n	8004c1c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	2b22      	cmp	r3, #34	; 0x22
 8004bf8:	d002      	beq.n	8004c00 <I2C_Slave_STOPF+0x234>
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
 8004bfc:	2b22      	cmp	r3, #34	; 0x22
 8004bfe:	d10d      	bne.n	8004c1c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fe fff9 	bl	8003c0e <HAL_I2C_SlaveRxCpltCallback>
}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	08005275 	.word	0x08005275
 8004c28:	ffff0000 	.word	0xffff0000

08004c2c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d002      	beq.n	8004c4e <I2C_Slave_AF+0x22>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d129      	bne.n	8004ca2 <I2C_Slave_AF+0x76>
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b28      	cmp	r3, #40	; 0x28
 8004c52:	d126      	bne.n	8004ca2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a2e      	ldr	r2, [pc, #184]	; (8004d10 <I2C_Slave_AF+0xe4>)
 8004c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c68:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c72:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c82:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fe ffcd 	bl	8003c3a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004ca0:	e031      	b.n	8004d06 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b21      	cmp	r3, #33	; 0x21
 8004ca6:	d129      	bne.n	8004cfc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a19      	ldr	r2, [pc, #100]	; (8004d10 <I2C_Slave_AF+0xe4>)
 8004cac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2221      	movs	r2, #33	; 0x21
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cd2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cdc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cec:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fe f8d4 	bl	8002e9c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7fe ff81 	bl	8003bfc <HAL_I2C_SlaveTxCpltCallback>
}
 8004cfa:	e004      	b.n	8004d06 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d04:	615a      	str	r2, [r3, #20]
}
 8004d06:	bf00      	nop
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	ffff0000 	.word	0xffff0000

08004d14 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d2c:	7bbb      	ldrb	r3, [r7, #14]
 8004d2e:	2b10      	cmp	r3, #16
 8004d30:	d002      	beq.n	8004d38 <I2C_ITError+0x24>
 8004d32:	7bbb      	ldrb	r3, [r7, #14]
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	d10a      	bne.n	8004d4e <I2C_ITError+0x3a>
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	2b22      	cmp	r3, #34	; 0x22
 8004d3c:	d107      	bne.n	8004d4e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d4c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d54:	2b28      	cmp	r3, #40	; 0x28
 8004d56:	d107      	bne.n	8004d68 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2228      	movs	r2, #40	; 0x28
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d66:	e015      	b.n	8004d94 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d76:	d00a      	beq.n	8004d8e <I2C_ITError+0x7a>
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	2b60      	cmp	r3, #96	; 0x60
 8004d7c:	d007      	beq.n	8004d8e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da2:	d162      	bne.n	8004e6a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004db2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d020      	beq.n	8004e04 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc6:	4a6a      	ldr	r2, [pc, #424]	; (8004f70 <I2C_ITError+0x25c>)
 8004dc8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fd fce4 	bl	800279c <HAL_DMA_Abort_IT>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 8089 	beq.w	8004eee <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0201 	bic.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4798      	blx	r3
 8004e02:	e074      	b.n	8004eee <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	4a59      	ldr	r2, [pc, #356]	; (8004f70 <I2C_ITError+0x25c>)
 8004e0a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fd fcc3 	bl	800279c <HAL_DMA_Abort_IT>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d068      	beq.n	8004eee <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e26:	2b40      	cmp	r3, #64	; 0x40
 8004e28:	d10b      	bne.n	8004e42 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0201 	bic.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e64:	4610      	mov	r0, r2
 8004e66:	4798      	blx	r3
 8004e68:	e041      	b.n	8004eee <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b60      	cmp	r3, #96	; 0x60
 8004e74:	d125      	bne.n	8004ec2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b40      	cmp	r3, #64	; 0x40
 8004e90:	d10b      	bne.n	8004eaa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fe fee1 	bl	8003c82 <HAL_I2C_AbortCpltCallback>
 8004ec0:	e015      	b.n	8004eee <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ecc:	2b40      	cmp	r3, #64	; 0x40
 8004ece:	d10b      	bne.n	8004ee8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fe fec1 	bl	8003c70 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10e      	bne.n	8004f1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d109      	bne.n	8004f1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d104      	bne.n	8004f1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f2a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f32:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d113      	bne.n	8004f68 <I2C_ITError+0x254>
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	2b28      	cmp	r3, #40	; 0x28
 8004f44:	d110      	bne.n	8004f68 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a0a      	ldr	r2, [pc, #40]	; (8004f74 <I2C_ITError+0x260>)
 8004f4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fe fe69 	bl	8003c3a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f68:	bf00      	nop
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	08005275 	.word	0x08005275
 8004f74:	ffff0000 	.word	0xffff0000

08004f78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	4608      	mov	r0, r1
 8004f82:	4611      	mov	r1, r2
 8004f84:	461a      	mov	r2, r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	817b      	strh	r3, [r7, #10]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	813b      	strh	r3, [r7, #8]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 fa08 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00d      	beq.n	8004fd6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc8:	d103      	bne.n	8004fd2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e05f      	b.n	8005096 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fd6:	897b      	ldrh	r3, [r7, #10]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fe4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	6a3a      	ldr	r2, [r7, #32]
 8004fea:	492d      	ldr	r1, [pc, #180]	; (80050a0 <I2C_RequestMemoryWrite+0x128>)
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 fa63 	bl	80054b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e04c      	b.n	8005096 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005014:	6a39      	ldr	r1, [r7, #32]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 faee 	bl	80055f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00d      	beq.n	800503e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	2b04      	cmp	r3, #4
 8005028:	d107      	bne.n	800503a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005038:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e02b      	b.n	8005096 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d105      	bne.n	8005050 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005044:	893b      	ldrh	r3, [r7, #8]
 8005046:	b2da      	uxtb	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	611a      	str	r2, [r3, #16]
 800504e:	e021      	b.n	8005094 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005050:	893b      	ldrh	r3, [r7, #8]
 8005052:	0a1b      	lsrs	r3, r3, #8
 8005054:	b29b      	uxth	r3, r3
 8005056:	b2da      	uxtb	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800505e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005060:	6a39      	ldr	r1, [r7, #32]
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fac8 	bl	80055f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00d      	beq.n	800508a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	2b04      	cmp	r3, #4
 8005074:	d107      	bne.n	8005086 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005084:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e005      	b.n	8005096 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800508a:	893b      	ldrh	r3, [r7, #8]
 800508c:	b2da      	uxtb	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	00010002 	.word	0x00010002

080050a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	4608      	mov	r0, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	461a      	mov	r2, r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	817b      	strh	r3, [r7, #10]
 80050b6:	460b      	mov	r3, r1
 80050b8:	813b      	strh	r3, [r7, #8]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f96a 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00d      	beq.n	8005112 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005104:	d103      	bne.n	800510e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800510c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e0aa      	b.n	8005268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005112:	897b      	ldrh	r3, [r7, #10]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	461a      	mov	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005120:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	6a3a      	ldr	r2, [r7, #32]
 8005126:	4952      	ldr	r1, [pc, #328]	; (8005270 <I2C_RequestMemoryRead+0x1cc>)
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f9c5 	bl	80054b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e097      	b.n	8005268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800514e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005150:	6a39      	ldr	r1, [r7, #32]
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 fa50 	bl	80055f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00d      	beq.n	800517a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	2b04      	cmp	r3, #4
 8005164:	d107      	bne.n	8005176 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005174:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e076      	b.n	8005268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d105      	bne.n	800518c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005180:	893b      	ldrh	r3, [r7, #8]
 8005182:	b2da      	uxtb	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	611a      	str	r2, [r3, #16]
 800518a:	e021      	b.n	80051d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800518c:	893b      	ldrh	r3, [r7, #8]
 800518e:	0a1b      	lsrs	r3, r3, #8
 8005190:	b29b      	uxth	r3, r3
 8005192:	b2da      	uxtb	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800519a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519c:	6a39      	ldr	r1, [r7, #32]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 fa2a 	bl	80055f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00d      	beq.n	80051c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d107      	bne.n	80051c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e050      	b.n	8005268 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051c6:	893b      	ldrh	r3, [r7, #8]
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d2:	6a39      	ldr	r1, [r7, #32]
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fa0f 	bl	80055f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00d      	beq.n	80051fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d107      	bne.n	80051f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e035      	b.n	8005268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800520a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	2200      	movs	r2, #0
 8005214:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f8d3 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00d      	beq.n	8005240 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005232:	d103      	bne.n	800523c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e013      	b.n	8005268 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005240:	897b      	ldrh	r3, [r7, #10]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	b2da      	uxtb	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	6a3a      	ldr	r2, [r7, #32]
 8005254:	4906      	ldr	r1, [pc, #24]	; (8005270 <I2C_RequestMemoryRead+0x1cc>)
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f92e 	bl	80054b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	00010002 	.word	0x00010002

08005274 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800528e:	4b4b      	ldr	r3, [pc, #300]	; (80053bc <I2C_DMAAbort+0x148>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	08db      	lsrs	r3, r3, #3
 8005294:	4a4a      	ldr	r2, [pc, #296]	; (80053c0 <I2C_DMAAbort+0x14c>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	0a1a      	lsrs	r2, r3, #8
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	00da      	lsls	r2, r3, #3
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f043 0220 	orr.w	r2, r3, #32
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80052ba:	e00a      	b.n	80052d2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3b01      	subs	r3, #1
 80052c0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d0:	d0ea      	beq.n	80052a8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	2200      	movs	r2, #0
 80052e0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	2200      	movs	r2, #0
 80052f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005300:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2200      	movs	r2, #0
 8005306:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005314:	2200      	movs	r2, #0
 8005316:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	2200      	movs	r2, #0
 8005326:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0201 	bic.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b60      	cmp	r3, #96	; 0x60
 8005342:	d10e      	bne.n	8005362 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2200      	movs	r2, #0
 8005358:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800535a:	6978      	ldr	r0, [r7, #20]
 800535c:	f7fe fc91 	bl	8003c82 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005360:	e027      	b.n	80053b2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005362:	7cfb      	ldrb	r3, [r7, #19]
 8005364:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005368:	2b28      	cmp	r3, #40	; 0x28
 800536a:	d117      	bne.n	800539c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0201 	orr.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800538a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2200      	movs	r2, #0
 8005390:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2228      	movs	r2, #40	; 0x28
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800539a:	e007      	b.n	80053ac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80053ac:	6978      	ldr	r0, [r7, #20]
 80053ae:	f7fe fc5f 	bl	8003c70 <HAL_I2C_ErrorCallback>
}
 80053b2:	bf00      	nop
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20000000 	.word	0x20000000
 80053c0:	14f8b589 	.word	0x14f8b589

080053c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	4613      	mov	r3, r2
 80053d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053d4:	e048      	b.n	8005468 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d044      	beq.n	8005468 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053de:	f7fc fb6f 	bl	8001ac0 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d302      	bcc.n	80053f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d139      	bne.n	8005468 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	0c1b      	lsrs	r3, r3, #16
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d10d      	bne.n	800541a <I2C_WaitOnFlagUntilTimeout+0x56>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	43da      	mvns	r2, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4013      	ands	r3, r2
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	bf0c      	ite	eq
 8005410:	2301      	moveq	r3, #1
 8005412:	2300      	movne	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	e00c      	b.n	8005434 <I2C_WaitOnFlagUntilTimeout+0x70>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	43da      	mvns	r2, r3
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4013      	ands	r3, r2
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	bf0c      	ite	eq
 800542c:	2301      	moveq	r3, #1
 800542e:	2300      	movne	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	429a      	cmp	r2, r3
 8005438:	d116      	bne.n	8005468 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	f043 0220 	orr.w	r2, r3, #32
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e023      	b.n	80054b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	0c1b      	lsrs	r3, r3, #16
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b01      	cmp	r3, #1
 8005470:	d10d      	bne.n	800548e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	43da      	mvns	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	4013      	ands	r3, r2
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	bf0c      	ite	eq
 8005484:	2301      	moveq	r3, #1
 8005486:	2300      	movne	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	e00c      	b.n	80054a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	43da      	mvns	r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	4013      	ands	r3, r2
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	461a      	mov	r2, r3
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d093      	beq.n	80053d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054c6:	e071      	b.n	80055ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d6:	d123      	bne.n	8005520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	f043 0204 	orr.w	r2, r3, #4
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e067      	b.n	80055f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005526:	d041      	beq.n	80055ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005528:	f7fc faca 	bl	8001ac0 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	429a      	cmp	r2, r3
 8005536:	d302      	bcc.n	800553e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d136      	bne.n	80055ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	0c1b      	lsrs	r3, r3, #16
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	d10c      	bne.n	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	43da      	mvns	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4013      	ands	r3, r2
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	bf14      	ite	ne
 800555a:	2301      	movne	r3, #1
 800555c:	2300      	moveq	r3, #0
 800555e:	b2db      	uxtb	r3, r3
 8005560:	e00b      	b.n	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	43da      	mvns	r2, r3
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4013      	ands	r3, r2
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	bf14      	ite	ne
 8005574:	2301      	movne	r3, #1
 8005576:	2300      	moveq	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d016      	beq.n	80055ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005598:	f043 0220 	orr.w	r2, r3, #32
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e021      	b.n	80055f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	0c1b      	lsrs	r3, r3, #16
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d10c      	bne.n	80055d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	43da      	mvns	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4013      	ands	r3, r2
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	bf14      	ite	ne
 80055c8:	2301      	movne	r3, #1
 80055ca:	2300      	moveq	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	e00b      	b.n	80055e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	43da      	mvns	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4013      	ands	r3, r2
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bf14      	ite	ne
 80055e2:	2301      	movne	r3, #1
 80055e4:	2300      	moveq	r3, #0
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f47f af6d 	bne.w	80054c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005604:	e034      	b.n	8005670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f915 	bl	8005836 <I2C_IsAcknowledgeFailed>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e034      	b.n	8005680 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561c:	d028      	beq.n	8005670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561e:	f7fc fa4f 	bl	8001ac0 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	429a      	cmp	r2, r3
 800562c:	d302      	bcc.n	8005634 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d11d      	bne.n	8005670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563e:	2b80      	cmp	r3, #128	; 0x80
 8005640:	d016      	beq.n	8005670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	f043 0220 	orr.w	r2, r3, #32
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e007      	b.n	8005680 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	2b80      	cmp	r3, #128	; 0x80
 800567c:	d1c3      	bne.n	8005606 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005694:	e034      	b.n	8005700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f8cd 	bl	8005836 <I2C_IsAcknowledgeFailed>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e034      	b.n	8005710 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d028      	beq.n	8005700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ae:	f7fc fa07 	bl	8001ac0 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d11d      	bne.n	8005700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d016      	beq.n	8005700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	f043 0220 	orr.w	r2, r3, #32
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e007      	b.n	8005710 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f003 0304 	and.w	r3, r3, #4
 800570a:	2b04      	cmp	r3, #4
 800570c:	d1c3      	bne.n	8005696 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005724:	4b13      	ldr	r3, [pc, #76]	; (8005774 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	08db      	lsrs	r3, r3, #3
 800572a:	4a13      	ldr	r2, [pc, #76]	; (8005778 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800572c:	fba2 2303 	umull	r2, r3, r2, r3
 8005730:	0a1a      	lsrs	r2, r3, #8
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3b01      	subs	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d107      	bne.n	8005756 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f043 0220 	orr.w	r2, r3, #32
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e008      	b.n	8005768 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005764:	d0e9      	beq.n	800573a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	20000000 	.word	0x20000000
 8005778:	14f8b589 	.word	0x14f8b589

0800577c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005788:	e049      	b.n	800581e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b10      	cmp	r3, #16
 8005796:	d119      	bne.n	80057cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0210 	mvn.w	r2, #16
 80057a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e030      	b.n	800582e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057cc:	f7fc f978 	bl	8001ac0 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d302      	bcc.n	80057e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d11d      	bne.n	800581e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	d016      	beq.n	800581e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f043 0220 	orr.w	r2, r3, #32
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e007      	b.n	800582e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	d1ae      	bne.n	800578a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584c:	d11b      	bne.n	8005886 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005856:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	f043 0204 	orr.w	r2, r3, #4
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr

08005892 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80058a2:	d103      	bne.n	80058ac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80058aa:	e007      	b.n	80058bc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80058b4:	d102      	bne.n	80058bc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2208      	movs	r2, #8
 80058ba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr
	...

080058c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e272      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 8087 	beq.w	80059f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058e8:	4b92      	ldr	r3, [pc, #584]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f003 030c 	and.w	r3, r3, #12
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d00c      	beq.n	800590e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80058f4:	4b8f      	ldr	r3, [pc, #572]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 030c 	and.w	r3, r3, #12
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d112      	bne.n	8005926 <HAL_RCC_OscConfig+0x5e>
 8005900:	4b8c      	ldr	r3, [pc, #560]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590c:	d10b      	bne.n	8005926 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800590e:	4b89      	ldr	r3, [pc, #548]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d06c      	beq.n	80059f4 <HAL_RCC_OscConfig+0x12c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d168      	bne.n	80059f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e24c      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592e:	d106      	bne.n	800593e <HAL_RCC_OscConfig+0x76>
 8005930:	4b80      	ldr	r3, [pc, #512]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a7f      	ldr	r2, [pc, #508]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e02e      	b.n	800599c <HAL_RCC_OscConfig+0xd4>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10c      	bne.n	8005960 <HAL_RCC_OscConfig+0x98>
 8005946:	4b7b      	ldr	r3, [pc, #492]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a7a      	ldr	r2, [pc, #488]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 800594c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	4b78      	ldr	r3, [pc, #480]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a77      	ldr	r2, [pc, #476]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e01d      	b.n	800599c <HAL_RCC_OscConfig+0xd4>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005968:	d10c      	bne.n	8005984 <HAL_RCC_OscConfig+0xbc>
 800596a:	4b72      	ldr	r3, [pc, #456]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a71      	ldr	r2, [pc, #452]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	4b6f      	ldr	r3, [pc, #444]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a6e      	ldr	r2, [pc, #440]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 800597c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	e00b      	b.n	800599c <HAL_RCC_OscConfig+0xd4>
 8005984:	4b6b      	ldr	r3, [pc, #428]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a6a      	ldr	r2, [pc, #424]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 800598a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	4b68      	ldr	r3, [pc, #416]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a67      	ldr	r2, [pc, #412]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800599a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d013      	beq.n	80059cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a4:	f7fc f88c 	bl	8001ac0 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ac:	f7fc f888 	bl	8001ac0 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b64      	cmp	r3, #100	; 0x64
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e200      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059be:	4b5d      	ldr	r3, [pc, #372]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0f0      	beq.n	80059ac <HAL_RCC_OscConfig+0xe4>
 80059ca:	e014      	b.n	80059f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059cc:	f7fc f878 	bl	8001ac0 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d4:	f7fc f874 	bl	8001ac0 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b64      	cmp	r3, #100	; 0x64
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e1ec      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059e6:	4b53      	ldr	r3, [pc, #332]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f0      	bne.n	80059d4 <HAL_RCC_OscConfig+0x10c>
 80059f2:	e000      	b.n	80059f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d063      	beq.n	8005aca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a02:	4b4c      	ldr	r3, [pc, #304]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f003 030c 	and.w	r3, r3, #12
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005a0e:	4b49      	ldr	r3, [pc, #292]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f003 030c 	and.w	r3, r3, #12
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d11c      	bne.n	8005a54 <HAL_RCC_OscConfig+0x18c>
 8005a1a:	4b46      	ldr	r3, [pc, #280]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d116      	bne.n	8005a54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a26:	4b43      	ldr	r3, [pc, #268]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <HAL_RCC_OscConfig+0x176>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d001      	beq.n	8005a3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e1c0      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a3e:	4b3d      	ldr	r3, [pc, #244]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	4939      	ldr	r1, [pc, #228]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a52:	e03a      	b.n	8005aca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d020      	beq.n	8005a9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a5c:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a62:	f7fc f82d 	bl	8001ac0 <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a6a:	f7fc f829 	bl	8001ac0 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e1a1      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a7c:	4b2d      	ldr	r3, [pc, #180]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d0f0      	beq.n	8005a6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a88:	4b2a      	ldr	r3, [pc, #168]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	4927      	ldr	r1, [pc, #156]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	600b      	str	r3, [r1, #0]
 8005a9c:	e015      	b.n	8005aca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a9e:	4b26      	ldr	r3, [pc, #152]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa4:	f7fc f80c 	bl	8001ac0 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aac:	f7fc f808 	bl	8001ac0 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e180      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005abe:	4b1d      	ldr	r3, [pc, #116]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d03a      	beq.n	8005b4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d019      	beq.n	8005b12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ade:	4b17      	ldr	r3, [pc, #92]	; (8005b3c <HAL_RCC_OscConfig+0x274>)
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ae4:	f7fb ffec 	bl	8001ac0 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aec:	f7fb ffe8 	bl	8001ac0 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e160      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005afe:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <HAL_RCC_OscConfig+0x26c>)
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0f0      	beq.n	8005aec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005b0a:	2001      	movs	r0, #1
 8005b0c:	f000 face 	bl	80060ac <RCC_Delay>
 8005b10:	e01c      	b.n	8005b4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b12:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <HAL_RCC_OscConfig+0x274>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b18:	f7fb ffd2 	bl	8001ac0 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b1e:	e00f      	b.n	8005b40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b20:	f7fb ffce 	bl	8001ac0 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d908      	bls.n	8005b40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e146      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
 8005b32:	bf00      	nop
 8005b34:	40021000 	.word	0x40021000
 8005b38:	42420000 	.word	0x42420000
 8005b3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b40:	4b92      	ldr	r3, [pc, #584]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e9      	bne.n	8005b20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 80a6 	beq.w	8005ca6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b5e:	4b8b      	ldr	r3, [pc, #556]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10d      	bne.n	8005b86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b6a:	4b88      	ldr	r3, [pc, #544]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	4a87      	ldr	r2, [pc, #540]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b74:	61d3      	str	r3, [r2, #28]
 8005b76:	4b85      	ldr	r3, [pc, #532]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b82:	2301      	movs	r3, #1
 8005b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b86:	4b82      	ldr	r3, [pc, #520]	; (8005d90 <HAL_RCC_OscConfig+0x4c8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d118      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b92:	4b7f      	ldr	r3, [pc, #508]	; (8005d90 <HAL_RCC_OscConfig+0x4c8>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a7e      	ldr	r2, [pc, #504]	; (8005d90 <HAL_RCC_OscConfig+0x4c8>)
 8005b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b9e:	f7fb ff8f 	bl	8001ac0 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ba6:	f7fb ff8b 	bl	8001ac0 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b64      	cmp	r3, #100	; 0x64
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e103      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb8:	4b75      	ldr	r3, [pc, #468]	; (8005d90 <HAL_RCC_OscConfig+0x4c8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0f0      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d106      	bne.n	8005bda <HAL_RCC_OscConfig+0x312>
 8005bcc:	4b6f      	ldr	r3, [pc, #444]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	4a6e      	ldr	r2, [pc, #440]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	6213      	str	r3, [r2, #32]
 8005bd8:	e02d      	b.n	8005c36 <HAL_RCC_OscConfig+0x36e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10c      	bne.n	8005bfc <HAL_RCC_OscConfig+0x334>
 8005be2:	4b6a      	ldr	r3, [pc, #424]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	4a69      	ldr	r2, [pc, #420]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	6213      	str	r3, [r2, #32]
 8005bee:	4b67      	ldr	r3, [pc, #412]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	4a66      	ldr	r2, [pc, #408]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005bf4:	f023 0304 	bic.w	r3, r3, #4
 8005bf8:	6213      	str	r3, [r2, #32]
 8005bfa:	e01c      	b.n	8005c36 <HAL_RCC_OscConfig+0x36e>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	2b05      	cmp	r3, #5
 8005c02:	d10c      	bne.n	8005c1e <HAL_RCC_OscConfig+0x356>
 8005c04:	4b61      	ldr	r3, [pc, #388]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	4a60      	ldr	r2, [pc, #384]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005c0a:	f043 0304 	orr.w	r3, r3, #4
 8005c0e:	6213      	str	r3, [r2, #32]
 8005c10:	4b5e      	ldr	r3, [pc, #376]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	4a5d      	ldr	r2, [pc, #372]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005c16:	f043 0301 	orr.w	r3, r3, #1
 8005c1a:	6213      	str	r3, [r2, #32]
 8005c1c:	e00b      	b.n	8005c36 <HAL_RCC_OscConfig+0x36e>
 8005c1e:	4b5b      	ldr	r3, [pc, #364]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	4a5a      	ldr	r2, [pc, #360]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005c24:	f023 0301 	bic.w	r3, r3, #1
 8005c28:	6213      	str	r3, [r2, #32]
 8005c2a:	4b58      	ldr	r3, [pc, #352]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	4a57      	ldr	r2, [pc, #348]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005c30:	f023 0304 	bic.w	r3, r3, #4
 8005c34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d015      	beq.n	8005c6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c3e:	f7fb ff3f 	bl	8001ac0 <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c44:	e00a      	b.n	8005c5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c46:	f7fb ff3b 	bl	8001ac0 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e0b1      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5c:	4b4b      	ldr	r3, [pc, #300]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0ee      	beq.n	8005c46 <HAL_RCC_OscConfig+0x37e>
 8005c68:	e014      	b.n	8005c94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6a:	f7fb ff29 	bl	8001ac0 <HAL_GetTick>
 8005c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c70:	e00a      	b.n	8005c88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c72:	f7fb ff25 	bl	8001ac0 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e09b      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c88:	4b40      	ldr	r3, [pc, #256]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1ee      	bne.n	8005c72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d105      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c9a:	4b3c      	ldr	r3, [pc, #240]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	4a3b      	ldr	r2, [pc, #236]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ca4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8087 	beq.w	8005dbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cb0:	4b36      	ldr	r3, [pc, #216]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 030c 	and.w	r3, r3, #12
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d061      	beq.n	8005d80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d146      	bne.n	8005d52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc4:	4b33      	ldr	r3, [pc, #204]	; (8005d94 <HAL_RCC_OscConfig+0x4cc>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cca:	f7fb fef9 	bl	8001ac0 <HAL_GetTick>
 8005cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cd0:	e008      	b.n	8005ce4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd2:	f7fb fef5 	bl	8001ac0 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e06d      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ce4:	4b29      	ldr	r3, [pc, #164]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1f0      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf8:	d108      	bne.n	8005d0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005cfa:	4b24      	ldr	r3, [pc, #144]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	4921      	ldr	r1, [pc, #132]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d0c:	4b1f      	ldr	r3, [pc, #124]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a19      	ldr	r1, [r3, #32]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	491b      	ldr	r1, [pc, #108]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d24:	4b1b      	ldr	r3, [pc, #108]	; (8005d94 <HAL_RCC_OscConfig+0x4cc>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2a:	f7fb fec9 	bl	8001ac0 <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d32:	f7fb fec5 	bl	8001ac0 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e03d      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d44:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0f0      	beq.n	8005d32 <HAL_RCC_OscConfig+0x46a>
 8005d50:	e035      	b.n	8005dbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d52:	4b10      	ldr	r3, [pc, #64]	; (8005d94 <HAL_RCC_OscConfig+0x4cc>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d58:	f7fb feb2 	bl	8001ac0 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d60:	f7fb feae 	bl	8001ac0 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e026      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d72:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <HAL_RCC_OscConfig+0x4c4>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <HAL_RCC_OscConfig+0x498>
 8005d7e:	e01e      	b.n	8005dbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d107      	bne.n	8005d98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e019      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	40007000 	.word	0x40007000
 8005d94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d98:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <HAL_RCC_OscConfig+0x500>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d106      	bne.n	8005dba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d001      	beq.n	8005dbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40021000 	.word	0x40021000

08005dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e0d0      	b.n	8005f82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005de0:	4b6a      	ldr	r3, [pc, #424]	; (8005f8c <HAL_RCC_ClockConfig+0x1c0>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d910      	bls.n	8005e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dee:	4b67      	ldr	r3, [pc, #412]	; (8005f8c <HAL_RCC_ClockConfig+0x1c0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f023 0207 	bic.w	r2, r3, #7
 8005df6:	4965      	ldr	r1, [pc, #404]	; (8005f8c <HAL_RCC_ClockConfig+0x1c0>)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dfe:	4b63      	ldr	r3, [pc, #396]	; (8005f8c <HAL_RCC_ClockConfig+0x1c0>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d001      	beq.n	8005e10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e0b8      	b.n	8005f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d020      	beq.n	8005e5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d005      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e28:	4b59      	ldr	r3, [pc, #356]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	4a58      	ldr	r2, [pc, #352]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005e2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e40:	4b53      	ldr	r3, [pc, #332]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	4a52      	ldr	r2, [pc, #328]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005e46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005e4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e4c:	4b50      	ldr	r3, [pc, #320]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	494d      	ldr	r1, [pc, #308]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d040      	beq.n	8005eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d107      	bne.n	8005e82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e72:	4b47      	ldr	r3, [pc, #284]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d115      	bne.n	8005eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e07f      	b.n	8005f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d107      	bne.n	8005e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e8a:	4b41      	ldr	r3, [pc, #260]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e073      	b.n	8005f82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e9a:	4b3d      	ldr	r3, [pc, #244]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e06b      	b.n	8005f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eaa:	4b39      	ldr	r3, [pc, #228]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f023 0203 	bic.w	r2, r3, #3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	4936      	ldr	r1, [pc, #216]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ebc:	f7fb fe00 	bl	8001ac0 <HAL_GetTick>
 8005ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec2:	e00a      	b.n	8005eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ec4:	f7fb fdfc 	bl	8001ac0 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e053      	b.n	8005f82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eda:	4b2d      	ldr	r3, [pc, #180]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f003 020c 	and.w	r2, r3, #12
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d1eb      	bne.n	8005ec4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005eec:	4b27      	ldr	r3, [pc, #156]	; (8005f8c <HAL_RCC_ClockConfig+0x1c0>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d210      	bcs.n	8005f1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efa:	4b24      	ldr	r3, [pc, #144]	; (8005f8c <HAL_RCC_ClockConfig+0x1c0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f023 0207 	bic.w	r2, r3, #7
 8005f02:	4922      	ldr	r1, [pc, #136]	; (8005f8c <HAL_RCC_ClockConfig+0x1c0>)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f0a:	4b20      	ldr	r3, [pc, #128]	; (8005f8c <HAL_RCC_ClockConfig+0x1c0>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d001      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e032      	b.n	8005f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d008      	beq.n	8005f3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f28:	4b19      	ldr	r3, [pc, #100]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	4916      	ldr	r1, [pc, #88]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d009      	beq.n	8005f5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f46:	4b12      	ldr	r3, [pc, #72]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	490e      	ldr	r1, [pc, #56]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f5a:	f000 f821 	bl	8005fa0 <HAL_RCC_GetSysClockFreq>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <HAL_RCC_ClockConfig+0x1c4>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	091b      	lsrs	r3, r3, #4
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	490a      	ldr	r1, [pc, #40]	; (8005f94 <HAL_RCC_ClockConfig+0x1c8>)
 8005f6c:	5ccb      	ldrb	r3, [r1, r3]
 8005f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f72:	4a09      	ldr	r2, [pc, #36]	; (8005f98 <HAL_RCC_ClockConfig+0x1cc>)
 8005f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f76:	4b09      	ldr	r3, [pc, #36]	; (8005f9c <HAL_RCC_ClockConfig+0x1d0>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fb fd5e 	bl	8001a3c <HAL_InitTick>

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	40022000 	.word	0x40022000
 8005f90:	40021000 	.word	0x40021000
 8005f94:	0800b1bc 	.word	0x0800b1bc
 8005f98:	20000000 	.word	0x20000000
 8005f9c:	20000004 	.word	0x20000004

08005fa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	2300      	movs	r3, #0
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005fba:	4b1e      	ldr	r3, [pc, #120]	; (8006034 <HAL_RCC_GetSysClockFreq+0x94>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f003 030c 	and.w	r3, r3, #12
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d002      	beq.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x30>
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d003      	beq.n	8005fd6 <HAL_RCC_GetSysClockFreq+0x36>
 8005fce:	e027      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005fd0:	4b19      	ldr	r3, [pc, #100]	; (8006038 <HAL_RCC_GetSysClockFreq+0x98>)
 8005fd2:	613b      	str	r3, [r7, #16]
      break;
 8005fd4:	e027      	b.n	8006026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	0c9b      	lsrs	r3, r3, #18
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	4a17      	ldr	r2, [pc, #92]	; (800603c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005fe0:	5cd3      	ldrb	r3, [r2, r3]
 8005fe2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d010      	beq.n	8006010 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005fee:	4b11      	ldr	r3, [pc, #68]	; (8006034 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	0c5b      	lsrs	r3, r3, #17
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	4a11      	ldr	r2, [pc, #68]	; (8006040 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ffa:	5cd3      	ldrb	r3, [r2, r3]
 8005ffc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a0d      	ldr	r2, [pc, #52]	; (8006038 <HAL_RCC_GetSysClockFreq+0x98>)
 8006002:	fb03 f202 	mul.w	r2, r3, r2
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	fbb2 f3f3 	udiv	r3, r2, r3
 800600c:	617b      	str	r3, [r7, #20]
 800600e:	e004      	b.n	800601a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a0c      	ldr	r2, [pc, #48]	; (8006044 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006014:	fb02 f303 	mul.w	r3, r2, r3
 8006018:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	613b      	str	r3, [r7, #16]
      break;
 800601e:	e002      	b.n	8006026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <HAL_RCC_GetSysClockFreq+0x98>)
 8006022:	613b      	str	r3, [r7, #16]
      break;
 8006024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006026:	693b      	ldr	r3, [r7, #16]
}
 8006028:	4618      	mov	r0, r3
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40021000 	.word	0x40021000
 8006038:	007a1200 	.word	0x007a1200
 800603c:	0800b1d4 	.word	0x0800b1d4
 8006040:	0800b1e4 	.word	0x0800b1e4
 8006044:	003d0900 	.word	0x003d0900

08006048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800604c:	4b02      	ldr	r3, [pc, #8]	; (8006058 <HAL_RCC_GetHCLKFreq+0x10>)
 800604e:	681b      	ldr	r3, [r3, #0]
}
 8006050:	4618      	mov	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	bc80      	pop	{r7}
 8006056:	4770      	bx	lr
 8006058:	20000000 	.word	0x20000000

0800605c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006060:	f7ff fff2 	bl	8006048 <HAL_RCC_GetHCLKFreq>
 8006064:	4602      	mov	r2, r0
 8006066:	4b05      	ldr	r3, [pc, #20]	; (800607c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	0a1b      	lsrs	r3, r3, #8
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	4903      	ldr	r1, [pc, #12]	; (8006080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006072:	5ccb      	ldrb	r3, [r1, r3]
 8006074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006078:	4618      	mov	r0, r3
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40021000 	.word	0x40021000
 8006080:	0800b1cc 	.word	0x0800b1cc

08006084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006088:	f7ff ffde 	bl	8006048 <HAL_RCC_GetHCLKFreq>
 800608c:	4602      	mov	r2, r0
 800608e:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	0adb      	lsrs	r3, r3, #11
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	4903      	ldr	r1, [pc, #12]	; (80060a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800609a:	5ccb      	ldrb	r3, [r1, r3]
 800609c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40021000 	.word	0x40021000
 80060a8:	0800b1cc 	.word	0x0800b1cc

080060ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80060b4:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <RCC_Delay+0x34>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a0a      	ldr	r2, [pc, #40]	; (80060e4 <RCC_Delay+0x38>)
 80060ba:	fba2 2303 	umull	r2, r3, r2, r3
 80060be:	0a5b      	lsrs	r3, r3, #9
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80060c8:	bf00      	nop
  }
  while (Delay --);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	1e5a      	subs	r2, r3, #1
 80060ce:	60fa      	str	r2, [r7, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1f9      	bne.n	80060c8 <RCC_Delay+0x1c>
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	bc80      	pop	{r7}
 80060de:	4770      	bx	lr
 80060e0:	20000000 	.word	0x20000000
 80060e4:	10624dd3 	.word	0x10624dd3

080060e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	2300      	movs	r3, #0
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	d07d      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006104:	2300      	movs	r3, #0
 8006106:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006108:	4b4f      	ldr	r3, [pc, #316]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10d      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006114:	4b4c      	ldr	r3, [pc, #304]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	4a4b      	ldr	r2, [pc, #300]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800611a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800611e:	61d3      	str	r3, [r2, #28]
 8006120:	4b49      	ldr	r3, [pc, #292]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006128:	60bb      	str	r3, [r7, #8]
 800612a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800612c:	2301      	movs	r3, #1
 800612e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006130:	4b46      	ldr	r3, [pc, #280]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006138:	2b00      	cmp	r3, #0
 800613a:	d118      	bne.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800613c:	4b43      	ldr	r3, [pc, #268]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a42      	ldr	r2, [pc, #264]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006146:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006148:	f7fb fcba 	bl	8001ac0 <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800614e:	e008      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006150:	f7fb fcb6 	bl	8001ac0 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b64      	cmp	r3, #100	; 0x64
 800615c:	d901      	bls.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e06d      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006162:	4b3a      	ldr	r3, [pc, #232]	; (800624c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0f0      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800616e:	4b36      	ldr	r3, [pc, #216]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006176:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d02e      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	429a      	cmp	r2, r3
 800618a:	d027      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800618c:	4b2e      	ldr	r3, [pc, #184]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006194:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006196:	4b2e      	ldr	r3, [pc, #184]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006198:	2201      	movs	r2, #1
 800619a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800619c:	4b2c      	ldr	r3, [pc, #176]	; (8006250 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061a2:	4a29      	ldr	r2, [pc, #164]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d014      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b2:	f7fb fc85 	bl	8001ac0 <HAL_GetTick>
 80061b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061b8:	e00a      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ba:	f7fb fc81 	bl	8001ac0 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e036      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061d0:	4b1d      	ldr	r3, [pc, #116]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0ee      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061dc:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	4917      	ldr	r1, [pc, #92]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80061ee:	7dfb      	ldrb	r3, [r7, #23]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d105      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061f4:	4b14      	ldr	r3, [pc, #80]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	4a13      	ldr	r2, [pc, #76]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d008      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800620c:	4b0e      	ldr	r3, [pc, #56]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	490b      	ldr	r1, [pc, #44]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800621a:	4313      	orrs	r3, r2
 800621c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0310 	and.w	r3, r3, #16
 8006226:	2b00      	cmp	r3, #0
 8006228:	d008      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800622a:	4b07      	ldr	r3, [pc, #28]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	4904      	ldr	r1, [pc, #16]	; (8006248 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006238:	4313      	orrs	r3, r2
 800623a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40021000 	.word	0x40021000
 800624c:	40007000 	.word	0x40007000
 8006250:	42420440 	.word	0x42420440

08006254 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	2300      	movs	r3, #0
 8006262:	61fb      	str	r3, [r7, #28]
 8006264:	2300      	movs	r3, #0
 8006266:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	2300      	movs	r3, #0
 800626e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b10      	cmp	r3, #16
 8006274:	d00a      	beq.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b10      	cmp	r3, #16
 800627a:	f200 808a 	bhi.w	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d045      	beq.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b02      	cmp	r3, #2
 8006288:	d075      	beq.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800628a:	e082      	b.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800628c:	4b46      	ldr	r3, [pc, #280]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006292:	4b45      	ldr	r3, [pc, #276]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d07b      	beq.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	0c9b      	lsrs	r3, r3, #18
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	4a41      	ldr	r2, [pc, #260]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80062a8:	5cd3      	ldrb	r3, [r2, r3]
 80062aa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d015      	beq.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80062b6:	4b3c      	ldr	r3, [pc, #240]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	0c5b      	lsrs	r3, r3, #17
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	4a3b      	ldr	r2, [pc, #236]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80062c2:	5cd3      	ldrb	r3, [r2, r3]
 80062c4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00d      	beq.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80062d0:	4a38      	ldr	r2, [pc, #224]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	fb02 f303 	mul.w	r3, r2, r3
 80062de:	61fb      	str	r3, [r7, #28]
 80062e0:	e004      	b.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	4a34      	ldr	r2, [pc, #208]	; (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80062ec:	4b2e      	ldr	r3, [pc, #184]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062f8:	d102      	bne.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	61bb      	str	r3, [r7, #24]
      break;
 80062fe:	e04a      	b.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	4a2d      	ldr	r2, [pc, #180]	; (80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006306:	fba2 2303 	umull	r2, r3, r2, r3
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	61bb      	str	r3, [r7, #24]
      break;
 800630e:	e042      	b.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006310:	4b25      	ldr	r3, [pc, #148]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800631c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006320:	d108      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800632c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	e01f      	b.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800633e:	d109      	bne.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006340:	4b19      	ldr	r3, [pc, #100]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800634c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	e00f      	b.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800635a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800635e:	d11c      	bne.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006360:	4b11      	ldr	r3, [pc, #68]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d016      	beq.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800636c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006370:	61bb      	str	r3, [r7, #24]
      break;
 8006372:	e012      	b.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006374:	e011      	b.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006376:	f7ff fe85 	bl	8006084 <HAL_RCC_GetPCLK2Freq>
 800637a:	4602      	mov	r2, r0
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	0b9b      	lsrs	r3, r3, #14
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	3301      	adds	r3, #1
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	fbb2 f3f3 	udiv	r3, r2, r3
 800638e:	61bb      	str	r3, [r7, #24]
      break;
 8006390:	e004      	b.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006392:	bf00      	nop
 8006394:	e002      	b.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006396:	bf00      	nop
 8006398:	e000      	b.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800639a:	bf00      	nop
    }
  }
  return (frequency);
 800639c:	69bb      	ldr	r3, [r7, #24]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3720      	adds	r7, #32
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	40021000 	.word	0x40021000
 80063ac:	0800b1e8 	.word	0x0800b1e8
 80063b0:	0800b1f8 	.word	0x0800b1f8
 80063b4:	007a1200 	.word	0x007a1200
 80063b8:	003d0900 	.word	0x003d0900
 80063bc:	aaaaaaab 	.word	0xaaaaaaab

080063c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e042      	b.n	8006458 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fb f994 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2224      	movs	r2, #36	; 0x24
 80063f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f91d 	bl	8006644 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695a      	ldr	r2, [r3, #20]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08a      	sub	sp, #40	; 0x28
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b20      	cmp	r3, #32
 800647e:	d16d      	bne.n	800655c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <HAL_UART_Transmit+0x2c>
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e066      	b.n	800655e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2221      	movs	r2, #33	; 0x21
 800649a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800649e:	f7fb fb0f 	bl	8001ac0 <HAL_GetTick>
 80064a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	88fa      	ldrh	r2, [r7, #6]
 80064a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	88fa      	ldrh	r2, [r7, #6]
 80064ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b8:	d108      	bne.n	80064cc <HAL_UART_Transmit+0x6c>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d104      	bne.n	80064cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	e003      	b.n	80064d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064d4:	e02a      	b.n	800652c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2200      	movs	r2, #0
 80064de:	2180      	movs	r1, #128	; 0x80
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 f840 	bl	8006566 <UART_WaitOnFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e036      	b.n	800655e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10b      	bne.n	800650e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006504:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	3302      	adds	r3, #2
 800650a:	61bb      	str	r3, [r7, #24]
 800650c:	e007      	b.n	800651e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	781a      	ldrb	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	3301      	adds	r3, #1
 800651c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006522:	b29b      	uxth	r3, r3
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006530:	b29b      	uxth	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1cf      	bne.n	80064d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2200      	movs	r2, #0
 800653e:	2140      	movs	r1, #64	; 0x40
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f810 	bl	8006566 <UART_WaitOnFlagUntilTimeout>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e006      	b.n	800655e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006558:	2300      	movs	r3, #0
 800655a:	e000      	b.n	800655e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800655c:	2302      	movs	r3, #2
  }
}
 800655e:	4618      	mov	r0, r3
 8006560:	3720      	adds	r7, #32
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b090      	sub	sp, #64	; 0x40
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	603b      	str	r3, [r7, #0]
 8006572:	4613      	mov	r3, r2
 8006574:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006576:	e050      	b.n	800661a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657e:	d04c      	beq.n	800661a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006582:	2b00      	cmp	r3, #0
 8006584:	d007      	beq.n	8006596 <UART_WaitOnFlagUntilTimeout+0x30>
 8006586:	f7fb fa9b 	bl	8001ac0 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006592:	429a      	cmp	r2, r3
 8006594:	d241      	bcs.n	800661a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	330c      	adds	r3, #12
 800659c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	e853 3f00 	ldrex	r3, [r3]
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	330c      	adds	r3, #12
 80065b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065b6:	637a      	str	r2, [r7, #52]	; 0x34
 80065b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e5      	bne.n	8006596 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3314      	adds	r3, #20
 80065d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	613b      	str	r3, [r7, #16]
   return(result);
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f023 0301 	bic.w	r3, r3, #1
 80065e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3314      	adds	r3, #20
 80065e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065ea:	623a      	str	r2, [r7, #32]
 80065ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	69f9      	ldr	r1, [r7, #28]
 80065f0:	6a3a      	ldr	r2, [r7, #32]
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e5      	bne.n	80065ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2220      	movs	r2, #32
 8006602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e00f      	b.n	800663a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4013      	ands	r3, r2
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	429a      	cmp	r2, r3
 8006628:	bf0c      	ite	eq
 800662a:	2301      	moveq	r3, #1
 800662c:	2300      	movne	r3, #0
 800662e:	b2db      	uxtb	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	429a      	cmp	r2, r3
 8006636:	d09f      	beq.n	8006578 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3740      	adds	r7, #64	; 0x40
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
	...

08006644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800667e:	f023 030c 	bic.w	r3, r3, #12
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6812      	ldr	r2, [r2, #0]
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	430b      	orrs	r3, r1
 800668a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a2c      	ldr	r2, [pc, #176]	; (8006758 <UART_SetConfig+0x114>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d103      	bne.n	80066b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80066ac:	f7ff fcea 	bl	8006084 <HAL_RCC_GetPCLK2Freq>
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	e002      	b.n	80066ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80066b4:	f7ff fcd2 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 80066b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4613      	mov	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	009a      	lsls	r2, r3, #2
 80066c4:	441a      	add	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d0:	4a22      	ldr	r2, [pc, #136]	; (800675c <UART_SetConfig+0x118>)
 80066d2:	fba2 2303 	umull	r2, r3, r2, r3
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	0119      	lsls	r1, r3, #4
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	009a      	lsls	r2, r3, #2
 80066e4:	441a      	add	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80066f0:	4b1a      	ldr	r3, [pc, #104]	; (800675c <UART_SetConfig+0x118>)
 80066f2:	fba3 0302 	umull	r0, r3, r3, r2
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	2064      	movs	r0, #100	; 0x64
 80066fa:	fb00 f303 	mul.w	r3, r0, r3
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	3332      	adds	r3, #50	; 0x32
 8006704:	4a15      	ldr	r2, [pc, #84]	; (800675c <UART_SetConfig+0x118>)
 8006706:	fba2 2303 	umull	r2, r3, r2, r3
 800670a:	095b      	lsrs	r3, r3, #5
 800670c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006710:	4419      	add	r1, r3
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	4613      	mov	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	009a      	lsls	r2, r3, #2
 800671c:	441a      	add	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	fbb2 f2f3 	udiv	r2, r2, r3
 8006728:	4b0c      	ldr	r3, [pc, #48]	; (800675c <UART_SetConfig+0x118>)
 800672a:	fba3 0302 	umull	r0, r3, r3, r2
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	2064      	movs	r0, #100	; 0x64
 8006732:	fb00 f303 	mul.w	r3, r0, r3
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	3332      	adds	r3, #50	; 0x32
 800673c:	4a07      	ldr	r2, [pc, #28]	; (800675c <UART_SetConfig+0x118>)
 800673e:	fba2 2303 	umull	r2, r3, r2, r3
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	f003 020f 	and.w	r2, r3, #15
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	440a      	add	r2, r1
 800674e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	40013800 	.word	0x40013800
 800675c:	51eb851f 	.word	0x51eb851f

08006760 <INA219_Read_Reg>:
int16_t ina219_currentDivider_mA = 0;
int16_t ina219_powerMultiplier_mW = 0;


float INA219_Read_Reg(INA219_t *ina219, uint8_t Register)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af04      	add	r7, sp, #16
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6818      	ldr	r0, [r3, #0]
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	b29a      	uxth	r2, r3
 8006774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006778:	9302      	str	r3, [sp, #8]
 800677a:	2302      	movs	r3, #2
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	f107 030c 	add.w	r3, r7, #12
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	2301      	movs	r3, #1
 8006786:	2180      	movs	r1, #128	; 0x80
 8006788:	f7fc fc96 	bl	80030b8 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 800678c:	7b3b      	ldrb	r3, [r7, #12]
 800678e:	021b      	lsls	r3, r3, #8
 8006790:	7b7a      	ldrb	r2, [r7, #13]
 8006792:	4313      	orrs	r3, r2
 8006794:	4618      	mov	r0, r3
 8006796:	f7fa faa1 	bl	8000cdc <__aeabi_i2f>
 800679a:	4603      	mov	r3, r0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <INA219_Write_Reg>:


void INA219_Write_Reg(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af04      	add	r7, sp, #16
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	70fb      	strb	r3, [r7, #3]
 80067b0:	4613      	mov	r3, r2
 80067b2:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80067b4:	883b      	ldrh	r3, [r7, #0]
 80067b6:	0a1b      	lsrs	r3, r3, #8
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 80067be:	883b      	ldrh	r3, [r7, #0]
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6818      	ldr	r0, [r3, #0]
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067d0:	9302      	str	r3, [sp, #8]
 80067d2:	2302      	movs	r3, #2
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	f107 030c 	add.w	r3, r7, #12
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	2301      	movs	r3, #1
 80067de:	2180      	movs	r1, #128	; 0x80
 80067e0:	f7fc fb70 	bl	8002ec4 <HAL_I2C_Mem_Write>
}
 80067e4:	bf00      	nop
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
	uint16_t result = INA219_Read_Reg(ina219, INA219_REG_BUSVOLTAGE);
 80067f4:	2102      	movs	r1, #2
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff ffb2 	bl	8006760 <INA219_Read_Reg>
 80067fc:	4603      	mov	r3, r0
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fa fc36 	bl	8001070 <__aeabi_f2uiz>
 8006804:	4603      	mov	r3, r0
 8006806:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8006808:	89fb      	ldrh	r3, [r7, #14]
 800680a:	08db      	lsrs	r3, r3, #3
 800680c:	b29b      	uxth	r3, r3
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	b29b      	uxth	r3, r3

}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_Read_Reg(ina219, INA219_REG_CURRENT);
 8006822:	2104      	movs	r1, #4
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7ff ff9b 	bl	8006760 <INA219_Read_Reg>
 800682a:	4603      	mov	r3, r0
 800682c:	4618      	mov	r0, r3
 800682e:	f7fa fbf9 	bl	8001024 <__aeabi_f2iz>
 8006832:	4603      	mov	r3, r0
 8006834:	81fb      	strh	r3, [r7, #14]

	return (result );
 8006836:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff ffe4 	bl	800681a <INA219_ReadCurrent_raw>
 8006852:	4603      	mov	r3, r0
 8006854:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8006856:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800685a:	4a05      	ldr	r2, [pc, #20]	; (8006870 <INA219_ReadCurrent+0x2c>)
 800685c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006860:	fb93 f3f2 	sdiv	r3, r3, r2
 8006864:	b21b      	sxth	r3, r3
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	200002ce 	.word	0x200002ce

08006874 <INA219_ReadPower>:

float INA219_ReadPower(INA219_t *ina219) {
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	float result = INA219_Read_Reg(ina219, INA219_REG_POWER);
 800687c:	2103      	movs	r1, #3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff ff6e 	bl	8006760 <INA219_Read_Reg>
 8006884:	60f8      	str	r0, [r7, #12]
	return (result / ina219_powerMultiplier_mW);
 8006886:	4b08      	ldr	r3, [pc, #32]	; (80068a8 <INA219_ReadPower+0x34>)
 8006888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800688c:	4618      	mov	r0, r3
 800688e:	f7fa fa25 	bl	8000cdc <__aeabi_i2f>
 8006892:	4603      	mov	r3, r0
 8006894:	4619      	mov	r1, r3
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7fa fb28 	bl	8000eec <__aeabi_fdiv>
 800689c:	4603      	mov	r3, r0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	200002d0 	.word	0x200002d0
 80068ac:	00000000 	.word	0x00000000

080068b0 <INA219_ReadShuntVolage>:

float INA219_ReadShuntVolage(INA219_t *ina219)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	float result = INA219_Read_Reg(ina219, INA219_REG_SHUNTVOLTAGE);
 80068b8:	2101      	movs	r1, #1
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff ff50 	bl	8006760 <INA219_Read_Reg>
 80068c0:	60f8      	str	r0, [r7, #12]

	return (result * 0.01 );
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f7f9 fdb0 	bl	8000428 <__aeabi_f2d>
 80068c8:	a307      	add	r3, pc, #28	; (adr r3, 80068e8 <INA219_ReadShuntVolage+0x38>)
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	f7f9 fe03 	bl	80004d8 <__aeabi_dmul>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4610      	mov	r0, r2
 80068d8:	4619      	mov	r1, r3
 80068da:	f7fa f8f5 	bl	8000ac8 <__aeabi_d2f>
 80068de:	4603      	mov	r3, r0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	47ae147b 	.word	0x47ae147b
 80068ec:	3f847ae1 	.word	0x3f847ae1

080068f0 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
	INA219_Write_Reg(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 80068f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80068fc:	2100      	movs	r1, #0
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff ff50 	bl	80067a4 <INA219_Write_Reg>
	HAL_Delay(1);
 8006904:	2001      	movs	r0, #1
 8006906:	f7fb f8e5 	bl	8001ad4 <HAL_Delay>
}
 800690a:	bf00      	nop
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	460b      	mov	r3, r1
 800691c:	807b      	strh	r3, [r7, #2]
	INA219_Write_Reg(ina219, INA219_REG_CALIBRATION, CalibrationData);
 800691e:	887b      	ldrh	r3, [r7, #2]
 8006920:	461a      	mov	r2, r3
 8006922:	2105      	movs	r1, #5
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff ff3d 	bl	80067a4 <INA219_Write_Reg>
}
 800692a:	bf00      	nop
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <INA219_setConfig>:
	uint16_t result = INA219_Read_Reg(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	460b      	mov	r3, r1
 800693c:	807b      	strh	r3, [r7, #2]
	INA219_Write_Reg(ina219, INA219_REG_CONFIG, Config);
 800693e:	887b      	ldrh	r3, [r7, #2]
 8006940:	461a      	mov	r2, r3
 8006942:	2100      	movs	r1, #0
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7ff ff2d 	bl	80067a4 <INA219_Write_Reg>
}
 800694a:	bf00      	nop
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <INA219_setCalibration_12V_2A>:

	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_12V_2A(INA219_t* ina219) {
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 800695c:	f641 139f 	movw	r3, #6559	; 0x199f
 8006960:	81fb      	strh	r3, [r7, #14]
					INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
					INA219_CONFIG_SADCRES_12BIT_1S_532US |
					INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
	ina219_calibrationValue = 4096;
 8006962:	4b0c      	ldr	r3, [pc, #48]	; (8006994 <INA219_setCalibration_12V_2A+0x40>)
 8006964:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006968:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10;
 800696a:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <INA219_setCalibration_12V_2A+0x44>)
 800696c:	220a      	movs	r2, #10
 800696e:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2.0f;
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <INA219_setCalibration_12V_2A+0x48>)
 8006972:	2202      	movs	r2, #2
 8006974:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8006976:	4b07      	ldr	r3, [pc, #28]	; (8006994 <INA219_setCalibration_12V_2A+0x40>)
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff ffc8 	bl	8006912 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8006982:	89fb      	ldrh	r3, [r7, #14]
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff ffd3 	bl	8006932 <INA219_setConfig>
}
 800698c:	bf00      	nop
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	200002cc 	.word	0x200002cc
 8006998:	200002ce 	.word	0x200002ce
 800699c:	200002d0 	.word	0x200002d0

080069a0 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	4613      	mov	r3, r2
 80069ac:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	79fa      	ldrb	r2, [r7, #7]
 80069b8:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 80069ba:	4b10      	ldr	r3, [pc, #64]	; (80069fc <INA219_Init+0x5c>)
 80069bc:	2200      	movs	r2, #0
 80069be:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 80069c0:	4b0f      	ldr	r3, [pc, #60]	; (8006a00 <INA219_Init+0x60>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	b299      	uxth	r1, r3
 80069ce:	2302      	movs	r3, #2
 80069d0:	2203      	movs	r2, #3
 80069d2:	68b8      	ldr	r0, [r7, #8]
 80069d4:	f7fc fdd8 	bl	8003588 <HAL_I2C_IsDeviceReady>
 80069d8:	4603      	mov	r3, r0
 80069da:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d107      	bne.n	80069f2 <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f7ff ff84 	bl	80068f0 <INA219_Reset>
		INA219_setCalibration_12V_2A(ina219);
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f7ff ffb3 	bl	8006954 <INA219_setCalibration_12V_2A>

		return 1;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <INA219_Init+0x54>
	}

	else
	{
		return 0;
 80069f2:	2300      	movs	r3, #0
	}
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	200002ce 	.word	0x200002ce
 8006a00:	200002d0 	.word	0x200002d0

08006a04 <__cvt>:
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a0a:	461f      	mov	r7, r3
 8006a0c:	bfbb      	ittet	lt
 8006a0e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006a12:	461f      	movlt	r7, r3
 8006a14:	2300      	movge	r3, #0
 8006a16:	232d      	movlt	r3, #45	; 0x2d
 8006a18:	b088      	sub	sp, #32
 8006a1a:	4614      	mov	r4, r2
 8006a1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a1e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006a20:	7013      	strb	r3, [r2, #0]
 8006a22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a24:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006a28:	f023 0820 	bic.w	r8, r3, #32
 8006a2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a30:	d005      	beq.n	8006a3e <__cvt+0x3a>
 8006a32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a36:	d100      	bne.n	8006a3a <__cvt+0x36>
 8006a38:	3501      	adds	r5, #1
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e000      	b.n	8006a40 <__cvt+0x3c>
 8006a3e:	2303      	movs	r3, #3
 8006a40:	aa07      	add	r2, sp, #28
 8006a42:	9204      	str	r2, [sp, #16]
 8006a44:	aa06      	add	r2, sp, #24
 8006a46:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006a4a:	e9cd 3500 	strd	r3, r5, [sp]
 8006a4e:	4622      	mov	r2, r4
 8006a50:	463b      	mov	r3, r7
 8006a52:	f001 f885 	bl	8007b60 <_dtoa_r>
 8006a56:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	d102      	bne.n	8006a64 <__cvt+0x60>
 8006a5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a60:	07db      	lsls	r3, r3, #31
 8006a62:	d522      	bpl.n	8006aaa <__cvt+0xa6>
 8006a64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a68:	eb06 0905 	add.w	r9, r6, r5
 8006a6c:	d110      	bne.n	8006a90 <__cvt+0x8c>
 8006a6e:	7833      	ldrb	r3, [r6, #0]
 8006a70:	2b30      	cmp	r3, #48	; 0x30
 8006a72:	d10a      	bne.n	8006a8a <__cvt+0x86>
 8006a74:	2200      	movs	r2, #0
 8006a76:	2300      	movs	r3, #0
 8006a78:	4620      	mov	r0, r4
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	f7f9 ff94 	bl	80009a8 <__aeabi_dcmpeq>
 8006a80:	b918      	cbnz	r0, 8006a8a <__cvt+0x86>
 8006a82:	f1c5 0501 	rsb	r5, r5, #1
 8006a86:	f8ca 5000 	str.w	r5, [sl]
 8006a8a:	f8da 3000 	ldr.w	r3, [sl]
 8006a8e:	4499      	add	r9, r3
 8006a90:	2200      	movs	r2, #0
 8006a92:	2300      	movs	r3, #0
 8006a94:	4620      	mov	r0, r4
 8006a96:	4639      	mov	r1, r7
 8006a98:	f7f9 ff86 	bl	80009a8 <__aeabi_dcmpeq>
 8006a9c:	b108      	cbz	r0, 8006aa2 <__cvt+0x9e>
 8006a9e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006aa2:	2230      	movs	r2, #48	; 0x30
 8006aa4:	9b07      	ldr	r3, [sp, #28]
 8006aa6:	454b      	cmp	r3, r9
 8006aa8:	d307      	bcc.n	8006aba <__cvt+0xb6>
 8006aaa:	4630      	mov	r0, r6
 8006aac:	9b07      	ldr	r3, [sp, #28]
 8006aae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006ab0:	1b9b      	subs	r3, r3, r6
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	b008      	add	sp, #32
 8006ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aba:	1c59      	adds	r1, r3, #1
 8006abc:	9107      	str	r1, [sp, #28]
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	e7f0      	b.n	8006aa4 <__cvt+0xa0>

08006ac2 <__exponent>:
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ac6:	2900      	cmp	r1, #0
 8006ac8:	f803 2b02 	strb.w	r2, [r3], #2
 8006acc:	bfb6      	itet	lt
 8006ace:	222d      	movlt	r2, #45	; 0x2d
 8006ad0:	222b      	movge	r2, #43	; 0x2b
 8006ad2:	4249      	neglt	r1, r1
 8006ad4:	2909      	cmp	r1, #9
 8006ad6:	7042      	strb	r2, [r0, #1]
 8006ad8:	dd2a      	ble.n	8006b30 <__exponent+0x6e>
 8006ada:	f10d 0207 	add.w	r2, sp, #7
 8006ade:	4617      	mov	r7, r2
 8006ae0:	260a      	movs	r6, #10
 8006ae2:	fb91 f5f6 	sdiv	r5, r1, r6
 8006ae6:	4694      	mov	ip, r2
 8006ae8:	fb06 1415 	mls	r4, r6, r5, r1
 8006aec:	3430      	adds	r4, #48	; 0x30
 8006aee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006af2:	460c      	mov	r4, r1
 8006af4:	2c63      	cmp	r4, #99	; 0x63
 8006af6:	4629      	mov	r1, r5
 8006af8:	f102 32ff 	add.w	r2, r2, #4294967295
 8006afc:	dcf1      	bgt.n	8006ae2 <__exponent+0x20>
 8006afe:	3130      	adds	r1, #48	; 0x30
 8006b00:	f1ac 0402 	sub.w	r4, ip, #2
 8006b04:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b08:	4622      	mov	r2, r4
 8006b0a:	1c41      	adds	r1, r0, #1
 8006b0c:	42ba      	cmp	r2, r7
 8006b0e:	d30a      	bcc.n	8006b26 <__exponent+0x64>
 8006b10:	f10d 0209 	add.w	r2, sp, #9
 8006b14:	eba2 020c 	sub.w	r2, r2, ip
 8006b18:	42bc      	cmp	r4, r7
 8006b1a:	bf88      	it	hi
 8006b1c:	2200      	movhi	r2, #0
 8006b1e:	4413      	add	r3, r2
 8006b20:	1a18      	subs	r0, r3, r0
 8006b22:	b003      	add	sp, #12
 8006b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b26:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006b2a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006b2e:	e7ed      	b.n	8006b0c <__exponent+0x4a>
 8006b30:	2330      	movs	r3, #48	; 0x30
 8006b32:	3130      	adds	r1, #48	; 0x30
 8006b34:	7083      	strb	r3, [r0, #2]
 8006b36:	70c1      	strb	r1, [r0, #3]
 8006b38:	1d03      	adds	r3, r0, #4
 8006b3a:	e7f1      	b.n	8006b20 <__exponent+0x5e>

08006b3c <_printf_float>:
 8006b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	b091      	sub	sp, #68	; 0x44
 8006b42:	460c      	mov	r4, r1
 8006b44:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006b48:	4616      	mov	r6, r2
 8006b4a:	461f      	mov	r7, r3
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	f000 fef3 	bl	8007938 <_localeconv_r>
 8006b52:	6803      	ldr	r3, [r0, #0]
 8006b54:	4618      	mov	r0, r3
 8006b56:	9309      	str	r3, [sp, #36]	; 0x24
 8006b58:	f7f9 fafa 	bl	8000150 <strlen>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	930e      	str	r3, [sp, #56]	; 0x38
 8006b60:	f8d8 3000 	ldr.w	r3, [r8]
 8006b64:	900a      	str	r0, [sp, #40]	; 0x28
 8006b66:	3307      	adds	r3, #7
 8006b68:	f023 0307 	bic.w	r3, r3, #7
 8006b6c:	f103 0208 	add.w	r2, r3, #8
 8006b70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006b74:	f8d4 b000 	ldr.w	fp, [r4]
 8006b78:	f8c8 2000 	str.w	r2, [r8]
 8006b7c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006b80:	4652      	mov	r2, sl
 8006b82:	4643      	mov	r3, r8
 8006b84:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b88:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006b8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b92:	4650      	mov	r0, sl
 8006b94:	4b9c      	ldr	r3, [pc, #624]	; (8006e08 <_printf_float+0x2cc>)
 8006b96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b98:	f7f9 ff38 	bl	8000a0c <__aeabi_dcmpun>
 8006b9c:	bb70      	cbnz	r0, 8006bfc <_printf_float+0xc0>
 8006b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba2:	4650      	mov	r0, sl
 8006ba4:	4b98      	ldr	r3, [pc, #608]	; (8006e08 <_printf_float+0x2cc>)
 8006ba6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ba8:	f7f9 ff12 	bl	80009d0 <__aeabi_dcmple>
 8006bac:	bb30      	cbnz	r0, 8006bfc <_printf_float+0xc0>
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	4650      	mov	r0, sl
 8006bb4:	4641      	mov	r1, r8
 8006bb6:	f7f9 ff01 	bl	80009bc <__aeabi_dcmplt>
 8006bba:	b110      	cbz	r0, 8006bc2 <_printf_float+0x86>
 8006bbc:	232d      	movs	r3, #45	; 0x2d
 8006bbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc2:	4a92      	ldr	r2, [pc, #584]	; (8006e0c <_printf_float+0x2d0>)
 8006bc4:	4b92      	ldr	r3, [pc, #584]	; (8006e10 <_printf_float+0x2d4>)
 8006bc6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006bca:	bf94      	ite	ls
 8006bcc:	4690      	movls	r8, r2
 8006bce:	4698      	movhi	r8, r3
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	f04f 0a00 	mov.w	sl, #0
 8006bd6:	6123      	str	r3, [r4, #16]
 8006bd8:	f02b 0304 	bic.w	r3, fp, #4
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	4633      	mov	r3, r6
 8006be0:	4621      	mov	r1, r4
 8006be2:	4628      	mov	r0, r5
 8006be4:	9700      	str	r7, [sp, #0]
 8006be6:	aa0f      	add	r2, sp, #60	; 0x3c
 8006be8:	f000 f9d6 	bl	8006f98 <_printf_common>
 8006bec:	3001      	adds	r0, #1
 8006bee:	f040 8090 	bne.w	8006d12 <_printf_float+0x1d6>
 8006bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf6:	b011      	add	sp, #68	; 0x44
 8006bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	4643      	mov	r3, r8
 8006c00:	4650      	mov	r0, sl
 8006c02:	4641      	mov	r1, r8
 8006c04:	f7f9 ff02 	bl	8000a0c <__aeabi_dcmpun>
 8006c08:	b148      	cbz	r0, 8006c1e <_printf_float+0xe2>
 8006c0a:	f1b8 0f00 	cmp.w	r8, #0
 8006c0e:	bfb8      	it	lt
 8006c10:	232d      	movlt	r3, #45	; 0x2d
 8006c12:	4a80      	ldr	r2, [pc, #512]	; (8006e14 <_printf_float+0x2d8>)
 8006c14:	bfb8      	it	lt
 8006c16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c1a:	4b7f      	ldr	r3, [pc, #508]	; (8006e18 <_printf_float+0x2dc>)
 8006c1c:	e7d3      	b.n	8006bc6 <_printf_float+0x8a>
 8006c1e:	6863      	ldr	r3, [r4, #4]
 8006c20:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	d142      	bne.n	8006cae <_printf_float+0x172>
 8006c28:	2306      	movs	r3, #6
 8006c2a:	6063      	str	r3, [r4, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	9206      	str	r2, [sp, #24]
 8006c30:	aa0e      	add	r2, sp, #56	; 0x38
 8006c32:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006c36:	aa0d      	add	r2, sp, #52	; 0x34
 8006c38:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006c3c:	9203      	str	r2, [sp, #12]
 8006c3e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006c42:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006c46:	6023      	str	r3, [r4, #0]
 8006c48:	6863      	ldr	r3, [r4, #4]
 8006c4a:	4652      	mov	r2, sl
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	4628      	mov	r0, r5
 8006c50:	4643      	mov	r3, r8
 8006c52:	910b      	str	r1, [sp, #44]	; 0x2c
 8006c54:	f7ff fed6 	bl	8006a04 <__cvt>
 8006c58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c5a:	4680      	mov	r8, r0
 8006c5c:	2947      	cmp	r1, #71	; 0x47
 8006c5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006c60:	d108      	bne.n	8006c74 <_printf_float+0x138>
 8006c62:	1cc8      	adds	r0, r1, #3
 8006c64:	db02      	blt.n	8006c6c <_printf_float+0x130>
 8006c66:	6863      	ldr	r3, [r4, #4]
 8006c68:	4299      	cmp	r1, r3
 8006c6a:	dd40      	ble.n	8006cee <_printf_float+0x1b2>
 8006c6c:	f1a9 0902 	sub.w	r9, r9, #2
 8006c70:	fa5f f989 	uxtb.w	r9, r9
 8006c74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c78:	d81f      	bhi.n	8006cba <_printf_float+0x17e>
 8006c7a:	464a      	mov	r2, r9
 8006c7c:	3901      	subs	r1, #1
 8006c7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c82:	910d      	str	r1, [sp, #52]	; 0x34
 8006c84:	f7ff ff1d 	bl	8006ac2 <__exponent>
 8006c88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c8a:	4682      	mov	sl, r0
 8006c8c:	1813      	adds	r3, r2, r0
 8006c8e:	2a01      	cmp	r2, #1
 8006c90:	6123      	str	r3, [r4, #16]
 8006c92:	dc02      	bgt.n	8006c9a <_printf_float+0x15e>
 8006c94:	6822      	ldr	r2, [r4, #0]
 8006c96:	07d2      	lsls	r2, r2, #31
 8006c98:	d501      	bpl.n	8006c9e <_printf_float+0x162>
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	6123      	str	r3, [r4, #16]
 8006c9e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d09b      	beq.n	8006bde <_printf_float+0xa2>
 8006ca6:	232d      	movs	r3, #45	; 0x2d
 8006ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cac:	e797      	b.n	8006bde <_printf_float+0xa2>
 8006cae:	2947      	cmp	r1, #71	; 0x47
 8006cb0:	d1bc      	bne.n	8006c2c <_printf_float+0xf0>
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1ba      	bne.n	8006c2c <_printf_float+0xf0>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e7b7      	b.n	8006c2a <_printf_float+0xee>
 8006cba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006cbe:	d118      	bne.n	8006cf2 <_printf_float+0x1b6>
 8006cc0:	2900      	cmp	r1, #0
 8006cc2:	6863      	ldr	r3, [r4, #4]
 8006cc4:	dd0b      	ble.n	8006cde <_printf_float+0x1a2>
 8006cc6:	6121      	str	r1, [r4, #16]
 8006cc8:	b913      	cbnz	r3, 8006cd0 <_printf_float+0x194>
 8006cca:	6822      	ldr	r2, [r4, #0]
 8006ccc:	07d0      	lsls	r0, r2, #31
 8006cce:	d502      	bpl.n	8006cd6 <_printf_float+0x19a>
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	440b      	add	r3, r1
 8006cd4:	6123      	str	r3, [r4, #16]
 8006cd6:	f04f 0a00 	mov.w	sl, #0
 8006cda:	65a1      	str	r1, [r4, #88]	; 0x58
 8006cdc:	e7df      	b.n	8006c9e <_printf_float+0x162>
 8006cde:	b913      	cbnz	r3, 8006ce6 <_printf_float+0x1aa>
 8006ce0:	6822      	ldr	r2, [r4, #0]
 8006ce2:	07d2      	lsls	r2, r2, #31
 8006ce4:	d501      	bpl.n	8006cea <_printf_float+0x1ae>
 8006ce6:	3302      	adds	r3, #2
 8006ce8:	e7f4      	b.n	8006cd4 <_printf_float+0x198>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e7f2      	b.n	8006cd4 <_printf_float+0x198>
 8006cee:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cf4:	4299      	cmp	r1, r3
 8006cf6:	db05      	blt.n	8006d04 <_printf_float+0x1c8>
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	6121      	str	r1, [r4, #16]
 8006cfc:	07d8      	lsls	r0, r3, #31
 8006cfe:	d5ea      	bpl.n	8006cd6 <_printf_float+0x19a>
 8006d00:	1c4b      	adds	r3, r1, #1
 8006d02:	e7e7      	b.n	8006cd4 <_printf_float+0x198>
 8006d04:	2900      	cmp	r1, #0
 8006d06:	bfcc      	ite	gt
 8006d08:	2201      	movgt	r2, #1
 8006d0a:	f1c1 0202 	rsble	r2, r1, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	e7e0      	b.n	8006cd4 <_printf_float+0x198>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	055a      	lsls	r2, r3, #21
 8006d16:	d407      	bmi.n	8006d28 <_printf_float+0x1ec>
 8006d18:	6923      	ldr	r3, [r4, #16]
 8006d1a:	4642      	mov	r2, r8
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	4628      	mov	r0, r5
 8006d20:	47b8      	blx	r7
 8006d22:	3001      	adds	r0, #1
 8006d24:	d12b      	bne.n	8006d7e <_printf_float+0x242>
 8006d26:	e764      	b.n	8006bf2 <_printf_float+0xb6>
 8006d28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d2c:	f240 80dd 	bls.w	8006eea <_printf_float+0x3ae>
 8006d30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d34:	2200      	movs	r2, #0
 8006d36:	2300      	movs	r3, #0
 8006d38:	f7f9 fe36 	bl	80009a8 <__aeabi_dcmpeq>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d033      	beq.n	8006da8 <_printf_float+0x26c>
 8006d40:	2301      	movs	r3, #1
 8006d42:	4631      	mov	r1, r6
 8006d44:	4628      	mov	r0, r5
 8006d46:	4a35      	ldr	r2, [pc, #212]	; (8006e1c <_printf_float+0x2e0>)
 8006d48:	47b8      	blx	r7
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	f43f af51 	beq.w	8006bf2 <_printf_float+0xb6>
 8006d50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d54:	429a      	cmp	r2, r3
 8006d56:	db02      	blt.n	8006d5e <_printf_float+0x222>
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	07d8      	lsls	r0, r3, #31
 8006d5c:	d50f      	bpl.n	8006d7e <_printf_float+0x242>
 8006d5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d62:	4631      	mov	r1, r6
 8006d64:	4628      	mov	r0, r5
 8006d66:	47b8      	blx	r7
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f43f af42 	beq.w	8006bf2 <_printf_float+0xb6>
 8006d6e:	f04f 0800 	mov.w	r8, #0
 8006d72:	f104 091a 	add.w	r9, r4, #26
 8006d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	4543      	cmp	r3, r8
 8006d7c:	dc09      	bgt.n	8006d92 <_printf_float+0x256>
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	079b      	lsls	r3, r3, #30
 8006d82:	f100 8104 	bmi.w	8006f8e <_printf_float+0x452>
 8006d86:	68e0      	ldr	r0, [r4, #12]
 8006d88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d8a:	4298      	cmp	r0, r3
 8006d8c:	bfb8      	it	lt
 8006d8e:	4618      	movlt	r0, r3
 8006d90:	e731      	b.n	8006bf6 <_printf_float+0xba>
 8006d92:	2301      	movs	r3, #1
 8006d94:	464a      	mov	r2, r9
 8006d96:	4631      	mov	r1, r6
 8006d98:	4628      	mov	r0, r5
 8006d9a:	47b8      	blx	r7
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	f43f af28 	beq.w	8006bf2 <_printf_float+0xb6>
 8006da2:	f108 0801 	add.w	r8, r8, #1
 8006da6:	e7e6      	b.n	8006d76 <_printf_float+0x23a>
 8006da8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	dc38      	bgt.n	8006e20 <_printf_float+0x2e4>
 8006dae:	2301      	movs	r3, #1
 8006db0:	4631      	mov	r1, r6
 8006db2:	4628      	mov	r0, r5
 8006db4:	4a19      	ldr	r2, [pc, #100]	; (8006e1c <_printf_float+0x2e0>)
 8006db6:	47b8      	blx	r7
 8006db8:	3001      	adds	r0, #1
 8006dba:	f43f af1a 	beq.w	8006bf2 <_printf_float+0xb6>
 8006dbe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	d102      	bne.n	8006dcc <_printf_float+0x290>
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	07d9      	lsls	r1, r3, #31
 8006dca:	d5d8      	bpl.n	8006d7e <_printf_float+0x242>
 8006dcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	47b8      	blx	r7
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	f43f af0b 	beq.w	8006bf2 <_printf_float+0xb6>
 8006ddc:	f04f 0900 	mov.w	r9, #0
 8006de0:	f104 0a1a 	add.w	sl, r4, #26
 8006de4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006de6:	425b      	negs	r3, r3
 8006de8:	454b      	cmp	r3, r9
 8006dea:	dc01      	bgt.n	8006df0 <_printf_float+0x2b4>
 8006dec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dee:	e794      	b.n	8006d1a <_printf_float+0x1de>
 8006df0:	2301      	movs	r3, #1
 8006df2:	4652      	mov	r2, sl
 8006df4:	4631      	mov	r1, r6
 8006df6:	4628      	mov	r0, r5
 8006df8:	47b8      	blx	r7
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	f43f aef9 	beq.w	8006bf2 <_printf_float+0xb6>
 8006e00:	f109 0901 	add.w	r9, r9, #1
 8006e04:	e7ee      	b.n	8006de4 <_printf_float+0x2a8>
 8006e06:	bf00      	nop
 8006e08:	7fefffff 	.word	0x7fefffff
 8006e0c:	0800b1fa 	.word	0x0800b1fa
 8006e10:	0800b1fe 	.word	0x0800b1fe
 8006e14:	0800b202 	.word	0x0800b202
 8006e18:	0800b206 	.word	0x0800b206
 8006e1c:	0800b20a 	.word	0x0800b20a
 8006e20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e24:	429a      	cmp	r2, r3
 8006e26:	bfa8      	it	ge
 8006e28:	461a      	movge	r2, r3
 8006e2a:	2a00      	cmp	r2, #0
 8006e2c:	4691      	mov	r9, r2
 8006e2e:	dc37      	bgt.n	8006ea0 <_printf_float+0x364>
 8006e30:	f04f 0b00 	mov.w	fp, #0
 8006e34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e38:	f104 021a 	add.w	r2, r4, #26
 8006e3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006e40:	ebaa 0309 	sub.w	r3, sl, r9
 8006e44:	455b      	cmp	r3, fp
 8006e46:	dc33      	bgt.n	8006eb0 <_printf_float+0x374>
 8006e48:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	db3b      	blt.n	8006ec8 <_printf_float+0x38c>
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	07da      	lsls	r2, r3, #31
 8006e54:	d438      	bmi.n	8006ec8 <_printf_float+0x38c>
 8006e56:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006e5a:	eba2 0903 	sub.w	r9, r2, r3
 8006e5e:	eba2 020a 	sub.w	r2, r2, sl
 8006e62:	4591      	cmp	r9, r2
 8006e64:	bfa8      	it	ge
 8006e66:	4691      	movge	r9, r2
 8006e68:	f1b9 0f00 	cmp.w	r9, #0
 8006e6c:	dc34      	bgt.n	8006ed8 <_printf_float+0x39c>
 8006e6e:	f04f 0800 	mov.w	r8, #0
 8006e72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e76:	f104 0a1a 	add.w	sl, r4, #26
 8006e7a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	eba3 0309 	sub.w	r3, r3, r9
 8006e84:	4543      	cmp	r3, r8
 8006e86:	f77f af7a 	ble.w	8006d7e <_printf_float+0x242>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4628      	mov	r0, r5
 8006e92:	47b8      	blx	r7
 8006e94:	3001      	adds	r0, #1
 8006e96:	f43f aeac 	beq.w	8006bf2 <_printf_float+0xb6>
 8006e9a:	f108 0801 	add.w	r8, r8, #1
 8006e9e:	e7ec      	b.n	8006e7a <_printf_float+0x33e>
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4642      	mov	r2, r8
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	47b8      	blx	r7
 8006eaa:	3001      	adds	r0, #1
 8006eac:	d1c0      	bne.n	8006e30 <_printf_float+0x2f4>
 8006eae:	e6a0      	b.n	8006bf2 <_printf_float+0xb6>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	920b      	str	r2, [sp, #44]	; 0x2c
 8006eb8:	47b8      	blx	r7
 8006eba:	3001      	adds	r0, #1
 8006ebc:	f43f ae99 	beq.w	8006bf2 <_printf_float+0xb6>
 8006ec0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ec2:	f10b 0b01 	add.w	fp, fp, #1
 8006ec6:	e7b9      	b.n	8006e3c <_printf_float+0x300>
 8006ec8:	4631      	mov	r1, r6
 8006eca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ece:	4628      	mov	r0, r5
 8006ed0:	47b8      	blx	r7
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	d1bf      	bne.n	8006e56 <_printf_float+0x31a>
 8006ed6:	e68c      	b.n	8006bf2 <_printf_float+0xb6>
 8006ed8:	464b      	mov	r3, r9
 8006eda:	4631      	mov	r1, r6
 8006edc:	4628      	mov	r0, r5
 8006ede:	eb08 020a 	add.w	r2, r8, sl
 8006ee2:	47b8      	blx	r7
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d1c2      	bne.n	8006e6e <_printf_float+0x332>
 8006ee8:	e683      	b.n	8006bf2 <_printf_float+0xb6>
 8006eea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006eec:	2a01      	cmp	r2, #1
 8006eee:	dc01      	bgt.n	8006ef4 <_printf_float+0x3b8>
 8006ef0:	07db      	lsls	r3, r3, #31
 8006ef2:	d539      	bpl.n	8006f68 <_printf_float+0x42c>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	4642      	mov	r2, r8
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4628      	mov	r0, r5
 8006efc:	47b8      	blx	r7
 8006efe:	3001      	adds	r0, #1
 8006f00:	f43f ae77 	beq.w	8006bf2 <_printf_float+0xb6>
 8006f04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f08:	4631      	mov	r1, r6
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	47b8      	blx	r7
 8006f0e:	3001      	adds	r0, #1
 8006f10:	f43f ae6f 	beq.w	8006bf2 <_printf_float+0xb6>
 8006f14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006f20:	f7f9 fd42 	bl	80009a8 <__aeabi_dcmpeq>
 8006f24:	b9d8      	cbnz	r0, 8006f5e <_printf_float+0x422>
 8006f26:	f109 33ff 	add.w	r3, r9, #4294967295
 8006f2a:	f108 0201 	add.w	r2, r8, #1
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b8      	blx	r7
 8006f34:	3001      	adds	r0, #1
 8006f36:	d10e      	bne.n	8006f56 <_printf_float+0x41a>
 8006f38:	e65b      	b.n	8006bf2 <_printf_float+0xb6>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	464a      	mov	r2, r9
 8006f3e:	4631      	mov	r1, r6
 8006f40:	4628      	mov	r0, r5
 8006f42:	47b8      	blx	r7
 8006f44:	3001      	adds	r0, #1
 8006f46:	f43f ae54 	beq.w	8006bf2 <_printf_float+0xb6>
 8006f4a:	f108 0801 	add.w	r8, r8, #1
 8006f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f50:	3b01      	subs	r3, #1
 8006f52:	4543      	cmp	r3, r8
 8006f54:	dcf1      	bgt.n	8006f3a <_printf_float+0x3fe>
 8006f56:	4653      	mov	r3, sl
 8006f58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f5c:	e6de      	b.n	8006d1c <_printf_float+0x1e0>
 8006f5e:	f04f 0800 	mov.w	r8, #0
 8006f62:	f104 091a 	add.w	r9, r4, #26
 8006f66:	e7f2      	b.n	8006f4e <_printf_float+0x412>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	4642      	mov	r2, r8
 8006f6c:	e7df      	b.n	8006f2e <_printf_float+0x3f2>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	464a      	mov	r2, r9
 8006f72:	4631      	mov	r1, r6
 8006f74:	4628      	mov	r0, r5
 8006f76:	47b8      	blx	r7
 8006f78:	3001      	adds	r0, #1
 8006f7a:	f43f ae3a 	beq.w	8006bf2 <_printf_float+0xb6>
 8006f7e:	f108 0801 	add.w	r8, r8, #1
 8006f82:	68e3      	ldr	r3, [r4, #12]
 8006f84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f86:	1a5b      	subs	r3, r3, r1
 8006f88:	4543      	cmp	r3, r8
 8006f8a:	dcf0      	bgt.n	8006f6e <_printf_float+0x432>
 8006f8c:	e6fb      	b.n	8006d86 <_printf_float+0x24a>
 8006f8e:	f04f 0800 	mov.w	r8, #0
 8006f92:	f104 0919 	add.w	r9, r4, #25
 8006f96:	e7f4      	b.n	8006f82 <_printf_float+0x446>

08006f98 <_printf_common>:
 8006f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9c:	4616      	mov	r6, r2
 8006f9e:	4699      	mov	r9, r3
 8006fa0:	688a      	ldr	r2, [r1, #8]
 8006fa2:	690b      	ldr	r3, [r1, #16]
 8006fa4:	4607      	mov	r7, r0
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	bfb8      	it	lt
 8006faa:	4613      	movlt	r3, r2
 8006fac:	6033      	str	r3, [r6, #0]
 8006fae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fb8:	b10a      	cbz	r2, 8006fbe <_printf_common+0x26>
 8006fba:	3301      	adds	r3, #1
 8006fbc:	6033      	str	r3, [r6, #0]
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	0699      	lsls	r1, r3, #26
 8006fc2:	bf42      	ittt	mi
 8006fc4:	6833      	ldrmi	r3, [r6, #0]
 8006fc6:	3302      	addmi	r3, #2
 8006fc8:	6033      	strmi	r3, [r6, #0]
 8006fca:	6825      	ldr	r5, [r4, #0]
 8006fcc:	f015 0506 	ands.w	r5, r5, #6
 8006fd0:	d106      	bne.n	8006fe0 <_printf_common+0x48>
 8006fd2:	f104 0a19 	add.w	sl, r4, #25
 8006fd6:	68e3      	ldr	r3, [r4, #12]
 8006fd8:	6832      	ldr	r2, [r6, #0]
 8006fda:	1a9b      	subs	r3, r3, r2
 8006fdc:	42ab      	cmp	r3, r5
 8006fde:	dc2b      	bgt.n	8007038 <_printf_common+0xa0>
 8006fe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fe4:	1e13      	subs	r3, r2, #0
 8006fe6:	6822      	ldr	r2, [r4, #0]
 8006fe8:	bf18      	it	ne
 8006fea:	2301      	movne	r3, #1
 8006fec:	0692      	lsls	r2, r2, #26
 8006fee:	d430      	bmi.n	8007052 <_printf_common+0xba>
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ff8:	47c0      	blx	r8
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	d023      	beq.n	8007046 <_printf_common+0xae>
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	6922      	ldr	r2, [r4, #16]
 8007002:	f003 0306 	and.w	r3, r3, #6
 8007006:	2b04      	cmp	r3, #4
 8007008:	bf14      	ite	ne
 800700a:	2500      	movne	r5, #0
 800700c:	6833      	ldreq	r3, [r6, #0]
 800700e:	f04f 0600 	mov.w	r6, #0
 8007012:	bf08      	it	eq
 8007014:	68e5      	ldreq	r5, [r4, #12]
 8007016:	f104 041a 	add.w	r4, r4, #26
 800701a:	bf08      	it	eq
 800701c:	1aed      	subeq	r5, r5, r3
 800701e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007022:	bf08      	it	eq
 8007024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007028:	4293      	cmp	r3, r2
 800702a:	bfc4      	itt	gt
 800702c:	1a9b      	subgt	r3, r3, r2
 800702e:	18ed      	addgt	r5, r5, r3
 8007030:	42b5      	cmp	r5, r6
 8007032:	d11a      	bne.n	800706a <_printf_common+0xd2>
 8007034:	2000      	movs	r0, #0
 8007036:	e008      	b.n	800704a <_printf_common+0xb2>
 8007038:	2301      	movs	r3, #1
 800703a:	4652      	mov	r2, sl
 800703c:	4649      	mov	r1, r9
 800703e:	4638      	mov	r0, r7
 8007040:	47c0      	blx	r8
 8007042:	3001      	adds	r0, #1
 8007044:	d103      	bne.n	800704e <_printf_common+0xb6>
 8007046:	f04f 30ff 	mov.w	r0, #4294967295
 800704a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704e:	3501      	adds	r5, #1
 8007050:	e7c1      	b.n	8006fd6 <_printf_common+0x3e>
 8007052:	2030      	movs	r0, #48	; 0x30
 8007054:	18e1      	adds	r1, r4, r3
 8007056:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007060:	4422      	add	r2, r4
 8007062:	3302      	adds	r3, #2
 8007064:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007068:	e7c2      	b.n	8006ff0 <_printf_common+0x58>
 800706a:	2301      	movs	r3, #1
 800706c:	4622      	mov	r2, r4
 800706e:	4649      	mov	r1, r9
 8007070:	4638      	mov	r0, r7
 8007072:	47c0      	blx	r8
 8007074:	3001      	adds	r0, #1
 8007076:	d0e6      	beq.n	8007046 <_printf_common+0xae>
 8007078:	3601      	adds	r6, #1
 800707a:	e7d9      	b.n	8007030 <_printf_common+0x98>

0800707c <_printf_i>:
 800707c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007080:	7e0f      	ldrb	r7, [r1, #24]
 8007082:	4691      	mov	r9, r2
 8007084:	2f78      	cmp	r7, #120	; 0x78
 8007086:	4680      	mov	r8, r0
 8007088:	460c      	mov	r4, r1
 800708a:	469a      	mov	sl, r3
 800708c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800708e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007092:	d807      	bhi.n	80070a4 <_printf_i+0x28>
 8007094:	2f62      	cmp	r7, #98	; 0x62
 8007096:	d80a      	bhi.n	80070ae <_printf_i+0x32>
 8007098:	2f00      	cmp	r7, #0
 800709a:	f000 80d5 	beq.w	8007248 <_printf_i+0x1cc>
 800709e:	2f58      	cmp	r7, #88	; 0x58
 80070a0:	f000 80c1 	beq.w	8007226 <_printf_i+0x1aa>
 80070a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070ac:	e03a      	b.n	8007124 <_printf_i+0xa8>
 80070ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070b2:	2b15      	cmp	r3, #21
 80070b4:	d8f6      	bhi.n	80070a4 <_printf_i+0x28>
 80070b6:	a101      	add	r1, pc, #4	; (adr r1, 80070bc <_printf_i+0x40>)
 80070b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070bc:	08007115 	.word	0x08007115
 80070c0:	08007129 	.word	0x08007129
 80070c4:	080070a5 	.word	0x080070a5
 80070c8:	080070a5 	.word	0x080070a5
 80070cc:	080070a5 	.word	0x080070a5
 80070d0:	080070a5 	.word	0x080070a5
 80070d4:	08007129 	.word	0x08007129
 80070d8:	080070a5 	.word	0x080070a5
 80070dc:	080070a5 	.word	0x080070a5
 80070e0:	080070a5 	.word	0x080070a5
 80070e4:	080070a5 	.word	0x080070a5
 80070e8:	0800722f 	.word	0x0800722f
 80070ec:	08007155 	.word	0x08007155
 80070f0:	080071e9 	.word	0x080071e9
 80070f4:	080070a5 	.word	0x080070a5
 80070f8:	080070a5 	.word	0x080070a5
 80070fc:	08007251 	.word	0x08007251
 8007100:	080070a5 	.word	0x080070a5
 8007104:	08007155 	.word	0x08007155
 8007108:	080070a5 	.word	0x080070a5
 800710c:	080070a5 	.word	0x080070a5
 8007110:	080071f1 	.word	0x080071f1
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	1d1a      	adds	r2, r3, #4
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	602a      	str	r2, [r5, #0]
 800711c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007124:	2301      	movs	r3, #1
 8007126:	e0a0      	b.n	800726a <_printf_i+0x1ee>
 8007128:	6820      	ldr	r0, [r4, #0]
 800712a:	682b      	ldr	r3, [r5, #0]
 800712c:	0607      	lsls	r7, r0, #24
 800712e:	f103 0104 	add.w	r1, r3, #4
 8007132:	6029      	str	r1, [r5, #0]
 8007134:	d501      	bpl.n	800713a <_printf_i+0xbe>
 8007136:	681e      	ldr	r6, [r3, #0]
 8007138:	e003      	b.n	8007142 <_printf_i+0xc6>
 800713a:	0646      	lsls	r6, r0, #25
 800713c:	d5fb      	bpl.n	8007136 <_printf_i+0xba>
 800713e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007142:	2e00      	cmp	r6, #0
 8007144:	da03      	bge.n	800714e <_printf_i+0xd2>
 8007146:	232d      	movs	r3, #45	; 0x2d
 8007148:	4276      	negs	r6, r6
 800714a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800714e:	230a      	movs	r3, #10
 8007150:	4859      	ldr	r0, [pc, #356]	; (80072b8 <_printf_i+0x23c>)
 8007152:	e012      	b.n	800717a <_printf_i+0xfe>
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	6820      	ldr	r0, [r4, #0]
 8007158:	1d19      	adds	r1, r3, #4
 800715a:	6029      	str	r1, [r5, #0]
 800715c:	0605      	lsls	r5, r0, #24
 800715e:	d501      	bpl.n	8007164 <_printf_i+0xe8>
 8007160:	681e      	ldr	r6, [r3, #0]
 8007162:	e002      	b.n	800716a <_printf_i+0xee>
 8007164:	0641      	lsls	r1, r0, #25
 8007166:	d5fb      	bpl.n	8007160 <_printf_i+0xe4>
 8007168:	881e      	ldrh	r6, [r3, #0]
 800716a:	2f6f      	cmp	r7, #111	; 0x6f
 800716c:	bf0c      	ite	eq
 800716e:	2308      	moveq	r3, #8
 8007170:	230a      	movne	r3, #10
 8007172:	4851      	ldr	r0, [pc, #324]	; (80072b8 <_printf_i+0x23c>)
 8007174:	2100      	movs	r1, #0
 8007176:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800717a:	6865      	ldr	r5, [r4, #4]
 800717c:	2d00      	cmp	r5, #0
 800717e:	bfa8      	it	ge
 8007180:	6821      	ldrge	r1, [r4, #0]
 8007182:	60a5      	str	r5, [r4, #8]
 8007184:	bfa4      	itt	ge
 8007186:	f021 0104 	bicge.w	r1, r1, #4
 800718a:	6021      	strge	r1, [r4, #0]
 800718c:	b90e      	cbnz	r6, 8007192 <_printf_i+0x116>
 800718e:	2d00      	cmp	r5, #0
 8007190:	d04b      	beq.n	800722a <_printf_i+0x1ae>
 8007192:	4615      	mov	r5, r2
 8007194:	fbb6 f1f3 	udiv	r1, r6, r3
 8007198:	fb03 6711 	mls	r7, r3, r1, r6
 800719c:	5dc7      	ldrb	r7, [r0, r7]
 800719e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071a2:	4637      	mov	r7, r6
 80071a4:	42bb      	cmp	r3, r7
 80071a6:	460e      	mov	r6, r1
 80071a8:	d9f4      	bls.n	8007194 <_printf_i+0x118>
 80071aa:	2b08      	cmp	r3, #8
 80071ac:	d10b      	bne.n	80071c6 <_printf_i+0x14a>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	07de      	lsls	r6, r3, #31
 80071b2:	d508      	bpl.n	80071c6 <_printf_i+0x14a>
 80071b4:	6923      	ldr	r3, [r4, #16]
 80071b6:	6861      	ldr	r1, [r4, #4]
 80071b8:	4299      	cmp	r1, r3
 80071ba:	bfde      	ittt	le
 80071bc:	2330      	movle	r3, #48	; 0x30
 80071be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071c6:	1b52      	subs	r2, r2, r5
 80071c8:	6122      	str	r2, [r4, #16]
 80071ca:	464b      	mov	r3, r9
 80071cc:	4621      	mov	r1, r4
 80071ce:	4640      	mov	r0, r8
 80071d0:	f8cd a000 	str.w	sl, [sp]
 80071d4:	aa03      	add	r2, sp, #12
 80071d6:	f7ff fedf 	bl	8006f98 <_printf_common>
 80071da:	3001      	adds	r0, #1
 80071dc:	d14a      	bne.n	8007274 <_printf_i+0x1f8>
 80071de:	f04f 30ff 	mov.w	r0, #4294967295
 80071e2:	b004      	add	sp, #16
 80071e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	f043 0320 	orr.w	r3, r3, #32
 80071ee:	6023      	str	r3, [r4, #0]
 80071f0:	2778      	movs	r7, #120	; 0x78
 80071f2:	4832      	ldr	r0, [pc, #200]	; (80072bc <_printf_i+0x240>)
 80071f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	6829      	ldr	r1, [r5, #0]
 80071fc:	061f      	lsls	r7, r3, #24
 80071fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8007202:	d402      	bmi.n	800720a <_printf_i+0x18e>
 8007204:	065f      	lsls	r7, r3, #25
 8007206:	bf48      	it	mi
 8007208:	b2b6      	uxthmi	r6, r6
 800720a:	07df      	lsls	r7, r3, #31
 800720c:	bf48      	it	mi
 800720e:	f043 0320 	orrmi.w	r3, r3, #32
 8007212:	6029      	str	r1, [r5, #0]
 8007214:	bf48      	it	mi
 8007216:	6023      	strmi	r3, [r4, #0]
 8007218:	b91e      	cbnz	r6, 8007222 <_printf_i+0x1a6>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	f023 0320 	bic.w	r3, r3, #32
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	2310      	movs	r3, #16
 8007224:	e7a6      	b.n	8007174 <_printf_i+0xf8>
 8007226:	4824      	ldr	r0, [pc, #144]	; (80072b8 <_printf_i+0x23c>)
 8007228:	e7e4      	b.n	80071f4 <_printf_i+0x178>
 800722a:	4615      	mov	r5, r2
 800722c:	e7bd      	b.n	80071aa <_printf_i+0x12e>
 800722e:	682b      	ldr	r3, [r5, #0]
 8007230:	6826      	ldr	r6, [r4, #0]
 8007232:	1d18      	adds	r0, r3, #4
 8007234:	6961      	ldr	r1, [r4, #20]
 8007236:	6028      	str	r0, [r5, #0]
 8007238:	0635      	lsls	r5, r6, #24
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	d501      	bpl.n	8007242 <_printf_i+0x1c6>
 800723e:	6019      	str	r1, [r3, #0]
 8007240:	e002      	b.n	8007248 <_printf_i+0x1cc>
 8007242:	0670      	lsls	r0, r6, #25
 8007244:	d5fb      	bpl.n	800723e <_printf_i+0x1c2>
 8007246:	8019      	strh	r1, [r3, #0]
 8007248:	2300      	movs	r3, #0
 800724a:	4615      	mov	r5, r2
 800724c:	6123      	str	r3, [r4, #16]
 800724e:	e7bc      	b.n	80071ca <_printf_i+0x14e>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	2100      	movs	r1, #0
 8007254:	1d1a      	adds	r2, r3, #4
 8007256:	602a      	str	r2, [r5, #0]
 8007258:	681d      	ldr	r5, [r3, #0]
 800725a:	6862      	ldr	r2, [r4, #4]
 800725c:	4628      	mov	r0, r5
 800725e:	f000 fbe2 	bl	8007a26 <memchr>
 8007262:	b108      	cbz	r0, 8007268 <_printf_i+0x1ec>
 8007264:	1b40      	subs	r0, r0, r5
 8007266:	6060      	str	r0, [r4, #4]
 8007268:	6863      	ldr	r3, [r4, #4]
 800726a:	6123      	str	r3, [r4, #16]
 800726c:	2300      	movs	r3, #0
 800726e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007272:	e7aa      	b.n	80071ca <_printf_i+0x14e>
 8007274:	462a      	mov	r2, r5
 8007276:	4649      	mov	r1, r9
 8007278:	4640      	mov	r0, r8
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	47d0      	blx	sl
 800727e:	3001      	adds	r0, #1
 8007280:	d0ad      	beq.n	80071de <_printf_i+0x162>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	079b      	lsls	r3, r3, #30
 8007286:	d413      	bmi.n	80072b0 <_printf_i+0x234>
 8007288:	68e0      	ldr	r0, [r4, #12]
 800728a:	9b03      	ldr	r3, [sp, #12]
 800728c:	4298      	cmp	r0, r3
 800728e:	bfb8      	it	lt
 8007290:	4618      	movlt	r0, r3
 8007292:	e7a6      	b.n	80071e2 <_printf_i+0x166>
 8007294:	2301      	movs	r3, #1
 8007296:	4632      	mov	r2, r6
 8007298:	4649      	mov	r1, r9
 800729a:	4640      	mov	r0, r8
 800729c:	47d0      	blx	sl
 800729e:	3001      	adds	r0, #1
 80072a0:	d09d      	beq.n	80071de <_printf_i+0x162>
 80072a2:	3501      	adds	r5, #1
 80072a4:	68e3      	ldr	r3, [r4, #12]
 80072a6:	9903      	ldr	r1, [sp, #12]
 80072a8:	1a5b      	subs	r3, r3, r1
 80072aa:	42ab      	cmp	r3, r5
 80072ac:	dcf2      	bgt.n	8007294 <_printf_i+0x218>
 80072ae:	e7eb      	b.n	8007288 <_printf_i+0x20c>
 80072b0:	2500      	movs	r5, #0
 80072b2:	f104 0619 	add.w	r6, r4, #25
 80072b6:	e7f5      	b.n	80072a4 <_printf_i+0x228>
 80072b8:	0800b20c 	.word	0x0800b20c
 80072bc:	0800b21d 	.word	0x0800b21d

080072c0 <_scanf_float>:
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	b087      	sub	sp, #28
 80072c6:	9303      	str	r3, [sp, #12]
 80072c8:	688b      	ldr	r3, [r1, #8]
 80072ca:	4617      	mov	r7, r2
 80072cc:	1e5a      	subs	r2, r3, #1
 80072ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80072d2:	bf85      	ittet	hi
 80072d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80072d8:	195b      	addhi	r3, r3, r5
 80072da:	2300      	movls	r3, #0
 80072dc:	9302      	strhi	r3, [sp, #8]
 80072de:	bf88      	it	hi
 80072e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80072e4:	468b      	mov	fp, r1
 80072e6:	f04f 0500 	mov.w	r5, #0
 80072ea:	bf8c      	ite	hi
 80072ec:	608b      	strhi	r3, [r1, #8]
 80072ee:	9302      	strls	r3, [sp, #8]
 80072f0:	680b      	ldr	r3, [r1, #0]
 80072f2:	4680      	mov	r8, r0
 80072f4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80072f8:	f84b 3b1c 	str.w	r3, [fp], #28
 80072fc:	460c      	mov	r4, r1
 80072fe:	465e      	mov	r6, fp
 8007300:	46aa      	mov	sl, r5
 8007302:	46a9      	mov	r9, r5
 8007304:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007308:	9501      	str	r5, [sp, #4]
 800730a:	68a2      	ldr	r2, [r4, #8]
 800730c:	b152      	cbz	r2, 8007324 <_scanf_float+0x64>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b4e      	cmp	r3, #78	; 0x4e
 8007314:	d864      	bhi.n	80073e0 <_scanf_float+0x120>
 8007316:	2b40      	cmp	r3, #64	; 0x40
 8007318:	d83c      	bhi.n	8007394 <_scanf_float+0xd4>
 800731a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800731e:	b2c8      	uxtb	r0, r1
 8007320:	280e      	cmp	r0, #14
 8007322:	d93a      	bls.n	800739a <_scanf_float+0xda>
 8007324:	f1b9 0f00 	cmp.w	r9, #0
 8007328:	d003      	beq.n	8007332 <_scanf_float+0x72>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007336:	f1ba 0f01 	cmp.w	sl, #1
 800733a:	f200 8113 	bhi.w	8007564 <_scanf_float+0x2a4>
 800733e:	455e      	cmp	r6, fp
 8007340:	f200 8105 	bhi.w	800754e <_scanf_float+0x28e>
 8007344:	2501      	movs	r5, #1
 8007346:	4628      	mov	r0, r5
 8007348:	b007      	add	sp, #28
 800734a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007352:	2a0d      	cmp	r2, #13
 8007354:	d8e6      	bhi.n	8007324 <_scanf_float+0x64>
 8007356:	a101      	add	r1, pc, #4	; (adr r1, 800735c <_scanf_float+0x9c>)
 8007358:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800735c:	0800749b 	.word	0x0800749b
 8007360:	08007325 	.word	0x08007325
 8007364:	08007325 	.word	0x08007325
 8007368:	08007325 	.word	0x08007325
 800736c:	080074fb 	.word	0x080074fb
 8007370:	080074d3 	.word	0x080074d3
 8007374:	08007325 	.word	0x08007325
 8007378:	08007325 	.word	0x08007325
 800737c:	080074a9 	.word	0x080074a9
 8007380:	08007325 	.word	0x08007325
 8007384:	08007325 	.word	0x08007325
 8007388:	08007325 	.word	0x08007325
 800738c:	08007325 	.word	0x08007325
 8007390:	08007461 	.word	0x08007461
 8007394:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007398:	e7db      	b.n	8007352 <_scanf_float+0x92>
 800739a:	290e      	cmp	r1, #14
 800739c:	d8c2      	bhi.n	8007324 <_scanf_float+0x64>
 800739e:	a001      	add	r0, pc, #4	; (adr r0, 80073a4 <_scanf_float+0xe4>)
 80073a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80073a4:	08007453 	.word	0x08007453
 80073a8:	08007325 	.word	0x08007325
 80073ac:	08007453 	.word	0x08007453
 80073b0:	080074e7 	.word	0x080074e7
 80073b4:	08007325 	.word	0x08007325
 80073b8:	08007401 	.word	0x08007401
 80073bc:	0800743d 	.word	0x0800743d
 80073c0:	0800743d 	.word	0x0800743d
 80073c4:	0800743d 	.word	0x0800743d
 80073c8:	0800743d 	.word	0x0800743d
 80073cc:	0800743d 	.word	0x0800743d
 80073d0:	0800743d 	.word	0x0800743d
 80073d4:	0800743d 	.word	0x0800743d
 80073d8:	0800743d 	.word	0x0800743d
 80073dc:	0800743d 	.word	0x0800743d
 80073e0:	2b6e      	cmp	r3, #110	; 0x6e
 80073e2:	d809      	bhi.n	80073f8 <_scanf_float+0x138>
 80073e4:	2b60      	cmp	r3, #96	; 0x60
 80073e6:	d8b2      	bhi.n	800734e <_scanf_float+0x8e>
 80073e8:	2b54      	cmp	r3, #84	; 0x54
 80073ea:	d077      	beq.n	80074dc <_scanf_float+0x21c>
 80073ec:	2b59      	cmp	r3, #89	; 0x59
 80073ee:	d199      	bne.n	8007324 <_scanf_float+0x64>
 80073f0:	2d07      	cmp	r5, #7
 80073f2:	d197      	bne.n	8007324 <_scanf_float+0x64>
 80073f4:	2508      	movs	r5, #8
 80073f6:	e029      	b.n	800744c <_scanf_float+0x18c>
 80073f8:	2b74      	cmp	r3, #116	; 0x74
 80073fa:	d06f      	beq.n	80074dc <_scanf_float+0x21c>
 80073fc:	2b79      	cmp	r3, #121	; 0x79
 80073fe:	e7f6      	b.n	80073ee <_scanf_float+0x12e>
 8007400:	6821      	ldr	r1, [r4, #0]
 8007402:	05c8      	lsls	r0, r1, #23
 8007404:	d51a      	bpl.n	800743c <_scanf_float+0x17c>
 8007406:	9b02      	ldr	r3, [sp, #8]
 8007408:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800740c:	6021      	str	r1, [r4, #0]
 800740e:	f109 0901 	add.w	r9, r9, #1
 8007412:	b11b      	cbz	r3, 800741c <_scanf_float+0x15c>
 8007414:	3b01      	subs	r3, #1
 8007416:	3201      	adds	r2, #1
 8007418:	9302      	str	r3, [sp, #8]
 800741a:	60a2      	str	r2, [r4, #8]
 800741c:	68a3      	ldr	r3, [r4, #8]
 800741e:	3b01      	subs	r3, #1
 8007420:	60a3      	str	r3, [r4, #8]
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	3301      	adds	r3, #1
 8007426:	6123      	str	r3, [r4, #16]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3b01      	subs	r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	607b      	str	r3, [r7, #4]
 8007430:	f340 8084 	ble.w	800753c <_scanf_float+0x27c>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	3301      	adds	r3, #1
 8007438:	603b      	str	r3, [r7, #0]
 800743a:	e766      	b.n	800730a <_scanf_float+0x4a>
 800743c:	eb1a 0f05 	cmn.w	sl, r5
 8007440:	f47f af70 	bne.w	8007324 <_scanf_float+0x64>
 8007444:	6822      	ldr	r2, [r4, #0]
 8007446:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800744a:	6022      	str	r2, [r4, #0]
 800744c:	f806 3b01 	strb.w	r3, [r6], #1
 8007450:	e7e4      	b.n	800741c <_scanf_float+0x15c>
 8007452:	6822      	ldr	r2, [r4, #0]
 8007454:	0610      	lsls	r0, r2, #24
 8007456:	f57f af65 	bpl.w	8007324 <_scanf_float+0x64>
 800745a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800745e:	e7f4      	b.n	800744a <_scanf_float+0x18a>
 8007460:	f1ba 0f00 	cmp.w	sl, #0
 8007464:	d10e      	bne.n	8007484 <_scanf_float+0x1c4>
 8007466:	f1b9 0f00 	cmp.w	r9, #0
 800746a:	d10e      	bne.n	800748a <_scanf_float+0x1ca>
 800746c:	6822      	ldr	r2, [r4, #0]
 800746e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007472:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007476:	d108      	bne.n	800748a <_scanf_float+0x1ca>
 8007478:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800747c:	f04f 0a01 	mov.w	sl, #1
 8007480:	6022      	str	r2, [r4, #0]
 8007482:	e7e3      	b.n	800744c <_scanf_float+0x18c>
 8007484:	f1ba 0f02 	cmp.w	sl, #2
 8007488:	d055      	beq.n	8007536 <_scanf_float+0x276>
 800748a:	2d01      	cmp	r5, #1
 800748c:	d002      	beq.n	8007494 <_scanf_float+0x1d4>
 800748e:	2d04      	cmp	r5, #4
 8007490:	f47f af48 	bne.w	8007324 <_scanf_float+0x64>
 8007494:	3501      	adds	r5, #1
 8007496:	b2ed      	uxtb	r5, r5
 8007498:	e7d8      	b.n	800744c <_scanf_float+0x18c>
 800749a:	f1ba 0f01 	cmp.w	sl, #1
 800749e:	f47f af41 	bne.w	8007324 <_scanf_float+0x64>
 80074a2:	f04f 0a02 	mov.w	sl, #2
 80074a6:	e7d1      	b.n	800744c <_scanf_float+0x18c>
 80074a8:	b97d      	cbnz	r5, 80074ca <_scanf_float+0x20a>
 80074aa:	f1b9 0f00 	cmp.w	r9, #0
 80074ae:	f47f af3c 	bne.w	800732a <_scanf_float+0x6a>
 80074b2:	6822      	ldr	r2, [r4, #0]
 80074b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80074b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80074bc:	f47f af39 	bne.w	8007332 <_scanf_float+0x72>
 80074c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80074c4:	2501      	movs	r5, #1
 80074c6:	6022      	str	r2, [r4, #0]
 80074c8:	e7c0      	b.n	800744c <_scanf_float+0x18c>
 80074ca:	2d03      	cmp	r5, #3
 80074cc:	d0e2      	beq.n	8007494 <_scanf_float+0x1d4>
 80074ce:	2d05      	cmp	r5, #5
 80074d0:	e7de      	b.n	8007490 <_scanf_float+0x1d0>
 80074d2:	2d02      	cmp	r5, #2
 80074d4:	f47f af26 	bne.w	8007324 <_scanf_float+0x64>
 80074d8:	2503      	movs	r5, #3
 80074da:	e7b7      	b.n	800744c <_scanf_float+0x18c>
 80074dc:	2d06      	cmp	r5, #6
 80074de:	f47f af21 	bne.w	8007324 <_scanf_float+0x64>
 80074e2:	2507      	movs	r5, #7
 80074e4:	e7b2      	b.n	800744c <_scanf_float+0x18c>
 80074e6:	6822      	ldr	r2, [r4, #0]
 80074e8:	0591      	lsls	r1, r2, #22
 80074ea:	f57f af1b 	bpl.w	8007324 <_scanf_float+0x64>
 80074ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80074f2:	6022      	str	r2, [r4, #0]
 80074f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80074f8:	e7a8      	b.n	800744c <_scanf_float+0x18c>
 80074fa:	6822      	ldr	r2, [r4, #0]
 80074fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007500:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007504:	d006      	beq.n	8007514 <_scanf_float+0x254>
 8007506:	0550      	lsls	r0, r2, #21
 8007508:	f57f af0c 	bpl.w	8007324 <_scanf_float+0x64>
 800750c:	f1b9 0f00 	cmp.w	r9, #0
 8007510:	f43f af0f 	beq.w	8007332 <_scanf_float+0x72>
 8007514:	0591      	lsls	r1, r2, #22
 8007516:	bf58      	it	pl
 8007518:	9901      	ldrpl	r1, [sp, #4]
 800751a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800751e:	bf58      	it	pl
 8007520:	eba9 0101 	subpl.w	r1, r9, r1
 8007524:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007528:	f04f 0900 	mov.w	r9, #0
 800752c:	bf58      	it	pl
 800752e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007532:	6022      	str	r2, [r4, #0]
 8007534:	e78a      	b.n	800744c <_scanf_float+0x18c>
 8007536:	f04f 0a03 	mov.w	sl, #3
 800753a:	e787      	b.n	800744c <_scanf_float+0x18c>
 800753c:	4639      	mov	r1, r7
 800753e:	4640      	mov	r0, r8
 8007540:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007544:	4798      	blx	r3
 8007546:	2800      	cmp	r0, #0
 8007548:	f43f aedf 	beq.w	800730a <_scanf_float+0x4a>
 800754c:	e6ea      	b.n	8007324 <_scanf_float+0x64>
 800754e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007552:	463a      	mov	r2, r7
 8007554:	4640      	mov	r0, r8
 8007556:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800755a:	4798      	blx	r3
 800755c:	6923      	ldr	r3, [r4, #16]
 800755e:	3b01      	subs	r3, #1
 8007560:	6123      	str	r3, [r4, #16]
 8007562:	e6ec      	b.n	800733e <_scanf_float+0x7e>
 8007564:	1e6b      	subs	r3, r5, #1
 8007566:	2b06      	cmp	r3, #6
 8007568:	d825      	bhi.n	80075b6 <_scanf_float+0x2f6>
 800756a:	2d02      	cmp	r5, #2
 800756c:	d836      	bhi.n	80075dc <_scanf_float+0x31c>
 800756e:	455e      	cmp	r6, fp
 8007570:	f67f aee8 	bls.w	8007344 <_scanf_float+0x84>
 8007574:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007578:	463a      	mov	r2, r7
 800757a:	4640      	mov	r0, r8
 800757c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007580:	4798      	blx	r3
 8007582:	6923      	ldr	r3, [r4, #16]
 8007584:	3b01      	subs	r3, #1
 8007586:	6123      	str	r3, [r4, #16]
 8007588:	e7f1      	b.n	800756e <_scanf_float+0x2ae>
 800758a:	9802      	ldr	r0, [sp, #8]
 800758c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007590:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007594:	463a      	mov	r2, r7
 8007596:	9002      	str	r0, [sp, #8]
 8007598:	4640      	mov	r0, r8
 800759a:	4798      	blx	r3
 800759c:	6923      	ldr	r3, [r4, #16]
 800759e:	3b01      	subs	r3, #1
 80075a0:	6123      	str	r3, [r4, #16]
 80075a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075a6:	fa5f fa8a 	uxtb.w	sl, sl
 80075aa:	f1ba 0f02 	cmp.w	sl, #2
 80075ae:	d1ec      	bne.n	800758a <_scanf_float+0x2ca>
 80075b0:	3d03      	subs	r5, #3
 80075b2:	b2ed      	uxtb	r5, r5
 80075b4:	1b76      	subs	r6, r6, r5
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	05da      	lsls	r2, r3, #23
 80075ba:	d52f      	bpl.n	800761c <_scanf_float+0x35c>
 80075bc:	055b      	lsls	r3, r3, #21
 80075be:	d510      	bpl.n	80075e2 <_scanf_float+0x322>
 80075c0:	455e      	cmp	r6, fp
 80075c2:	f67f aebf 	bls.w	8007344 <_scanf_float+0x84>
 80075c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075ca:	463a      	mov	r2, r7
 80075cc:	4640      	mov	r0, r8
 80075ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075d2:	4798      	blx	r3
 80075d4:	6923      	ldr	r3, [r4, #16]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	6123      	str	r3, [r4, #16]
 80075da:	e7f1      	b.n	80075c0 <_scanf_float+0x300>
 80075dc:	46aa      	mov	sl, r5
 80075de:	9602      	str	r6, [sp, #8]
 80075e0:	e7df      	b.n	80075a2 <_scanf_float+0x2e2>
 80075e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80075e6:	6923      	ldr	r3, [r4, #16]
 80075e8:	2965      	cmp	r1, #101	; 0x65
 80075ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80075ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80075f2:	6123      	str	r3, [r4, #16]
 80075f4:	d00c      	beq.n	8007610 <_scanf_float+0x350>
 80075f6:	2945      	cmp	r1, #69	; 0x45
 80075f8:	d00a      	beq.n	8007610 <_scanf_float+0x350>
 80075fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075fe:	463a      	mov	r2, r7
 8007600:	4640      	mov	r0, r8
 8007602:	4798      	blx	r3
 8007604:	6923      	ldr	r3, [r4, #16]
 8007606:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800760a:	3b01      	subs	r3, #1
 800760c:	1eb5      	subs	r5, r6, #2
 800760e:	6123      	str	r3, [r4, #16]
 8007610:	463a      	mov	r2, r7
 8007612:	4640      	mov	r0, r8
 8007614:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007618:	4798      	blx	r3
 800761a:	462e      	mov	r6, r5
 800761c:	6825      	ldr	r5, [r4, #0]
 800761e:	f015 0510 	ands.w	r5, r5, #16
 8007622:	d155      	bne.n	80076d0 <_scanf_float+0x410>
 8007624:	7035      	strb	r5, [r6, #0]
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800762c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007630:	d11d      	bne.n	800766e <_scanf_float+0x3ae>
 8007632:	9b01      	ldr	r3, [sp, #4]
 8007634:	454b      	cmp	r3, r9
 8007636:	eba3 0209 	sub.w	r2, r3, r9
 800763a:	d125      	bne.n	8007688 <_scanf_float+0x3c8>
 800763c:	2200      	movs	r2, #0
 800763e:	4659      	mov	r1, fp
 8007640:	4640      	mov	r0, r8
 8007642:	f002 fc21 	bl	8009e88 <_strtod_r>
 8007646:	9b03      	ldr	r3, [sp, #12]
 8007648:	f8d4 c000 	ldr.w	ip, [r4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f01c 0f02 	tst.w	ip, #2
 8007652:	4606      	mov	r6, r0
 8007654:	460f      	mov	r7, r1
 8007656:	f103 0204 	add.w	r2, r3, #4
 800765a:	d020      	beq.n	800769e <_scanf_float+0x3de>
 800765c:	9903      	ldr	r1, [sp, #12]
 800765e:	600a      	str	r2, [r1, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	e9c3 6700 	strd	r6, r7, [r3]
 8007666:	68e3      	ldr	r3, [r4, #12]
 8007668:	3301      	adds	r3, #1
 800766a:	60e3      	str	r3, [r4, #12]
 800766c:	e66b      	b.n	8007346 <_scanf_float+0x86>
 800766e:	9b04      	ldr	r3, [sp, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0e3      	beq.n	800763c <_scanf_float+0x37c>
 8007674:	9905      	ldr	r1, [sp, #20]
 8007676:	230a      	movs	r3, #10
 8007678:	462a      	mov	r2, r5
 800767a:	4640      	mov	r0, r8
 800767c:	3101      	adds	r1, #1
 800767e:	f002 fc87 	bl	8009f90 <_strtol_r>
 8007682:	9b04      	ldr	r3, [sp, #16]
 8007684:	9e05      	ldr	r6, [sp, #20]
 8007686:	1ac2      	subs	r2, r0, r3
 8007688:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800768c:	429e      	cmp	r6, r3
 800768e:	bf28      	it	cs
 8007690:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007694:	4630      	mov	r0, r6
 8007696:	490f      	ldr	r1, [pc, #60]	; (80076d4 <_scanf_float+0x414>)
 8007698:	f000 f8e2 	bl	8007860 <siprintf>
 800769c:	e7ce      	b.n	800763c <_scanf_float+0x37c>
 800769e:	f01c 0f04 	tst.w	ip, #4
 80076a2:	d1db      	bne.n	800765c <_scanf_float+0x39c>
 80076a4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80076a8:	f8cc 2000 	str.w	r2, [ip]
 80076ac:	f8d3 8000 	ldr.w	r8, [r3]
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	f7f9 f9aa 	bl	8000a0c <__aeabi_dcmpun>
 80076b8:	b128      	cbz	r0, 80076c6 <_scanf_float+0x406>
 80076ba:	4807      	ldr	r0, [pc, #28]	; (80076d8 <_scanf_float+0x418>)
 80076bc:	f000 f9c2 	bl	8007a44 <nanf>
 80076c0:	f8c8 0000 	str.w	r0, [r8]
 80076c4:	e7cf      	b.n	8007666 <_scanf_float+0x3a6>
 80076c6:	4630      	mov	r0, r6
 80076c8:	4639      	mov	r1, r7
 80076ca:	f7f9 f9fd 	bl	8000ac8 <__aeabi_d2f>
 80076ce:	e7f7      	b.n	80076c0 <_scanf_float+0x400>
 80076d0:	2500      	movs	r5, #0
 80076d2:	e638      	b.n	8007346 <_scanf_float+0x86>
 80076d4:	0800b22e 	.word	0x0800b22e
 80076d8:	0800b5c5 	.word	0x0800b5c5

080076dc <std>:
 80076dc:	2300      	movs	r3, #0
 80076de:	b510      	push	{r4, lr}
 80076e0:	4604      	mov	r4, r0
 80076e2:	e9c0 3300 	strd	r3, r3, [r0]
 80076e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ea:	6083      	str	r3, [r0, #8]
 80076ec:	8181      	strh	r1, [r0, #12]
 80076ee:	6643      	str	r3, [r0, #100]	; 0x64
 80076f0:	81c2      	strh	r2, [r0, #14]
 80076f2:	6183      	str	r3, [r0, #24]
 80076f4:	4619      	mov	r1, r3
 80076f6:	2208      	movs	r2, #8
 80076f8:	305c      	adds	r0, #92	; 0x5c
 80076fa:	f000 f914 	bl	8007926 <memset>
 80076fe:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <std+0x58>)
 8007700:	6224      	str	r4, [r4, #32]
 8007702:	6263      	str	r3, [r4, #36]	; 0x24
 8007704:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <std+0x5c>)
 8007706:	62a3      	str	r3, [r4, #40]	; 0x28
 8007708:	4b0c      	ldr	r3, [pc, #48]	; (800773c <std+0x60>)
 800770a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800770c:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <std+0x64>)
 800770e:	6323      	str	r3, [r4, #48]	; 0x30
 8007710:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <std+0x68>)
 8007712:	429c      	cmp	r4, r3
 8007714:	d006      	beq.n	8007724 <std+0x48>
 8007716:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800771a:	4294      	cmp	r4, r2
 800771c:	d002      	beq.n	8007724 <std+0x48>
 800771e:	33d0      	adds	r3, #208	; 0xd0
 8007720:	429c      	cmp	r4, r3
 8007722:	d105      	bne.n	8007730 <std+0x54>
 8007724:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800772c:	f000 b978 	b.w	8007a20 <__retarget_lock_init_recursive>
 8007730:	bd10      	pop	{r4, pc}
 8007732:	bf00      	nop
 8007734:	080078a1 	.word	0x080078a1
 8007738:	080078c3 	.word	0x080078c3
 800773c:	080078fb 	.word	0x080078fb
 8007740:	0800791f 	.word	0x0800791f
 8007744:	200002d4 	.word	0x200002d4

08007748 <stdio_exit_handler>:
 8007748:	4a02      	ldr	r2, [pc, #8]	; (8007754 <stdio_exit_handler+0xc>)
 800774a:	4903      	ldr	r1, [pc, #12]	; (8007758 <stdio_exit_handler+0x10>)
 800774c:	4803      	ldr	r0, [pc, #12]	; (800775c <stdio_exit_handler+0x14>)
 800774e:	f000 b869 	b.w	8007824 <_fwalk_sglue>
 8007752:	bf00      	nop
 8007754:	2000000c 	.word	0x2000000c
 8007758:	0800a349 	.word	0x0800a349
 800775c:	20000018 	.word	0x20000018

08007760 <cleanup_stdio>:
 8007760:	6841      	ldr	r1, [r0, #4]
 8007762:	4b0c      	ldr	r3, [pc, #48]	; (8007794 <cleanup_stdio+0x34>)
 8007764:	b510      	push	{r4, lr}
 8007766:	4299      	cmp	r1, r3
 8007768:	4604      	mov	r4, r0
 800776a:	d001      	beq.n	8007770 <cleanup_stdio+0x10>
 800776c:	f002 fdec 	bl	800a348 <_fflush_r>
 8007770:	68a1      	ldr	r1, [r4, #8]
 8007772:	4b09      	ldr	r3, [pc, #36]	; (8007798 <cleanup_stdio+0x38>)
 8007774:	4299      	cmp	r1, r3
 8007776:	d002      	beq.n	800777e <cleanup_stdio+0x1e>
 8007778:	4620      	mov	r0, r4
 800777a:	f002 fde5 	bl	800a348 <_fflush_r>
 800777e:	68e1      	ldr	r1, [r4, #12]
 8007780:	4b06      	ldr	r3, [pc, #24]	; (800779c <cleanup_stdio+0x3c>)
 8007782:	4299      	cmp	r1, r3
 8007784:	d004      	beq.n	8007790 <cleanup_stdio+0x30>
 8007786:	4620      	mov	r0, r4
 8007788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800778c:	f002 bddc 	b.w	800a348 <_fflush_r>
 8007790:	bd10      	pop	{r4, pc}
 8007792:	bf00      	nop
 8007794:	200002d4 	.word	0x200002d4
 8007798:	2000033c 	.word	0x2000033c
 800779c:	200003a4 	.word	0x200003a4

080077a0 <global_stdio_init.part.0>:
 80077a0:	b510      	push	{r4, lr}
 80077a2:	4b0b      	ldr	r3, [pc, #44]	; (80077d0 <global_stdio_init.part.0+0x30>)
 80077a4:	4c0b      	ldr	r4, [pc, #44]	; (80077d4 <global_stdio_init.part.0+0x34>)
 80077a6:	4a0c      	ldr	r2, [pc, #48]	; (80077d8 <global_stdio_init.part.0+0x38>)
 80077a8:	4620      	mov	r0, r4
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	2104      	movs	r1, #4
 80077ae:	2200      	movs	r2, #0
 80077b0:	f7ff ff94 	bl	80076dc <std>
 80077b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80077b8:	2201      	movs	r2, #1
 80077ba:	2109      	movs	r1, #9
 80077bc:	f7ff ff8e 	bl	80076dc <std>
 80077c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80077c4:	2202      	movs	r2, #2
 80077c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ca:	2112      	movs	r1, #18
 80077cc:	f7ff bf86 	b.w	80076dc <std>
 80077d0:	2000040c 	.word	0x2000040c
 80077d4:	200002d4 	.word	0x200002d4
 80077d8:	08007749 	.word	0x08007749

080077dc <__sfp_lock_acquire>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__sfp_lock_acquire+0x8>)
 80077de:	f000 b920 	b.w	8007a22 <__retarget_lock_acquire_recursive>
 80077e2:	bf00      	nop
 80077e4:	20000415 	.word	0x20000415

080077e8 <__sfp_lock_release>:
 80077e8:	4801      	ldr	r0, [pc, #4]	; (80077f0 <__sfp_lock_release+0x8>)
 80077ea:	f000 b91b 	b.w	8007a24 <__retarget_lock_release_recursive>
 80077ee:	bf00      	nop
 80077f0:	20000415 	.word	0x20000415

080077f4 <__sinit>:
 80077f4:	b510      	push	{r4, lr}
 80077f6:	4604      	mov	r4, r0
 80077f8:	f7ff fff0 	bl	80077dc <__sfp_lock_acquire>
 80077fc:	6a23      	ldr	r3, [r4, #32]
 80077fe:	b11b      	cbz	r3, 8007808 <__sinit+0x14>
 8007800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007804:	f7ff bff0 	b.w	80077e8 <__sfp_lock_release>
 8007808:	4b04      	ldr	r3, [pc, #16]	; (800781c <__sinit+0x28>)
 800780a:	6223      	str	r3, [r4, #32]
 800780c:	4b04      	ldr	r3, [pc, #16]	; (8007820 <__sinit+0x2c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1f5      	bne.n	8007800 <__sinit+0xc>
 8007814:	f7ff ffc4 	bl	80077a0 <global_stdio_init.part.0>
 8007818:	e7f2      	b.n	8007800 <__sinit+0xc>
 800781a:	bf00      	nop
 800781c:	08007761 	.word	0x08007761
 8007820:	2000040c 	.word	0x2000040c

08007824 <_fwalk_sglue>:
 8007824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007828:	4607      	mov	r7, r0
 800782a:	4688      	mov	r8, r1
 800782c:	4614      	mov	r4, r2
 800782e:	2600      	movs	r6, #0
 8007830:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007834:	f1b9 0901 	subs.w	r9, r9, #1
 8007838:	d505      	bpl.n	8007846 <_fwalk_sglue+0x22>
 800783a:	6824      	ldr	r4, [r4, #0]
 800783c:	2c00      	cmp	r4, #0
 800783e:	d1f7      	bne.n	8007830 <_fwalk_sglue+0xc>
 8007840:	4630      	mov	r0, r6
 8007842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007846:	89ab      	ldrh	r3, [r5, #12]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d907      	bls.n	800785c <_fwalk_sglue+0x38>
 800784c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007850:	3301      	adds	r3, #1
 8007852:	d003      	beq.n	800785c <_fwalk_sglue+0x38>
 8007854:	4629      	mov	r1, r5
 8007856:	4638      	mov	r0, r7
 8007858:	47c0      	blx	r8
 800785a:	4306      	orrs	r6, r0
 800785c:	3568      	adds	r5, #104	; 0x68
 800785e:	e7e9      	b.n	8007834 <_fwalk_sglue+0x10>

08007860 <siprintf>:
 8007860:	b40e      	push	{r1, r2, r3}
 8007862:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007866:	b500      	push	{lr}
 8007868:	b09c      	sub	sp, #112	; 0x70
 800786a:	ab1d      	add	r3, sp, #116	; 0x74
 800786c:	9002      	str	r0, [sp, #8]
 800786e:	9006      	str	r0, [sp, #24]
 8007870:	9107      	str	r1, [sp, #28]
 8007872:	9104      	str	r1, [sp, #16]
 8007874:	4808      	ldr	r0, [pc, #32]	; (8007898 <siprintf+0x38>)
 8007876:	4909      	ldr	r1, [pc, #36]	; (800789c <siprintf+0x3c>)
 8007878:	f853 2b04 	ldr.w	r2, [r3], #4
 800787c:	9105      	str	r1, [sp, #20]
 800787e:	6800      	ldr	r0, [r0, #0]
 8007880:	a902      	add	r1, sp, #8
 8007882:	9301      	str	r3, [sp, #4]
 8007884:	f002 fbe0 	bl	800a048 <_svfiprintf_r>
 8007888:	2200      	movs	r2, #0
 800788a:	9b02      	ldr	r3, [sp, #8]
 800788c:	701a      	strb	r2, [r3, #0]
 800788e:	b01c      	add	sp, #112	; 0x70
 8007890:	f85d eb04 	ldr.w	lr, [sp], #4
 8007894:	b003      	add	sp, #12
 8007896:	4770      	bx	lr
 8007898:	20000064 	.word	0x20000064
 800789c:	ffff0208 	.word	0xffff0208

080078a0 <__sread>:
 80078a0:	b510      	push	{r4, lr}
 80078a2:	460c      	mov	r4, r1
 80078a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a8:	f000 f86c 	bl	8007984 <_read_r>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	bfab      	itete	ge
 80078b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078b2:	89a3      	ldrhlt	r3, [r4, #12]
 80078b4:	181b      	addge	r3, r3, r0
 80078b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078ba:	bfac      	ite	ge
 80078bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80078be:	81a3      	strhlt	r3, [r4, #12]
 80078c0:	bd10      	pop	{r4, pc}

080078c2 <__swrite>:
 80078c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078c6:	461f      	mov	r7, r3
 80078c8:	898b      	ldrh	r3, [r1, #12]
 80078ca:	4605      	mov	r5, r0
 80078cc:	05db      	lsls	r3, r3, #23
 80078ce:	460c      	mov	r4, r1
 80078d0:	4616      	mov	r6, r2
 80078d2:	d505      	bpl.n	80078e0 <__swrite+0x1e>
 80078d4:	2302      	movs	r3, #2
 80078d6:	2200      	movs	r2, #0
 80078d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078dc:	f000 f840 	bl	8007960 <_lseek_r>
 80078e0:	89a3      	ldrh	r3, [r4, #12]
 80078e2:	4632      	mov	r2, r6
 80078e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078e8:	81a3      	strh	r3, [r4, #12]
 80078ea:	4628      	mov	r0, r5
 80078ec:	463b      	mov	r3, r7
 80078ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078f6:	f000 b857 	b.w	80079a8 <_write_r>

080078fa <__sseek>:
 80078fa:	b510      	push	{r4, lr}
 80078fc:	460c      	mov	r4, r1
 80078fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007902:	f000 f82d 	bl	8007960 <_lseek_r>
 8007906:	1c43      	adds	r3, r0, #1
 8007908:	89a3      	ldrh	r3, [r4, #12]
 800790a:	bf15      	itete	ne
 800790c:	6560      	strne	r0, [r4, #84]	; 0x54
 800790e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007916:	81a3      	strheq	r3, [r4, #12]
 8007918:	bf18      	it	ne
 800791a:	81a3      	strhne	r3, [r4, #12]
 800791c:	bd10      	pop	{r4, pc}

0800791e <__sclose>:
 800791e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007922:	f000 b80d 	b.w	8007940 <_close_r>

08007926 <memset>:
 8007926:	4603      	mov	r3, r0
 8007928:	4402      	add	r2, r0
 800792a:	4293      	cmp	r3, r2
 800792c:	d100      	bne.n	8007930 <memset+0xa>
 800792e:	4770      	bx	lr
 8007930:	f803 1b01 	strb.w	r1, [r3], #1
 8007934:	e7f9      	b.n	800792a <memset+0x4>
	...

08007938 <_localeconv_r>:
 8007938:	4800      	ldr	r0, [pc, #0]	; (800793c <_localeconv_r+0x4>)
 800793a:	4770      	bx	lr
 800793c:	20000158 	.word	0x20000158

08007940 <_close_r>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	2300      	movs	r3, #0
 8007944:	4d05      	ldr	r5, [pc, #20]	; (800795c <_close_r+0x1c>)
 8007946:	4604      	mov	r4, r0
 8007948:	4608      	mov	r0, r1
 800794a:	602b      	str	r3, [r5, #0]
 800794c:	f7f9 ffce 	bl	80018ec <_close>
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	d102      	bne.n	800795a <_close_r+0x1a>
 8007954:	682b      	ldr	r3, [r5, #0]
 8007956:	b103      	cbz	r3, 800795a <_close_r+0x1a>
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	bd38      	pop	{r3, r4, r5, pc}
 800795c:	20000410 	.word	0x20000410

08007960 <_lseek_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4604      	mov	r4, r0
 8007964:	4608      	mov	r0, r1
 8007966:	4611      	mov	r1, r2
 8007968:	2200      	movs	r2, #0
 800796a:	4d05      	ldr	r5, [pc, #20]	; (8007980 <_lseek_r+0x20>)
 800796c:	602a      	str	r2, [r5, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	f7f9 ffe0 	bl	8001934 <_lseek>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d102      	bne.n	800797e <_lseek_r+0x1e>
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	b103      	cbz	r3, 800797e <_lseek_r+0x1e>
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	20000410 	.word	0x20000410

08007984 <_read_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4604      	mov	r4, r0
 8007988:	4608      	mov	r0, r1
 800798a:	4611      	mov	r1, r2
 800798c:	2200      	movs	r2, #0
 800798e:	4d05      	ldr	r5, [pc, #20]	; (80079a4 <_read_r+0x20>)
 8007990:	602a      	str	r2, [r5, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	f7f9 ff71 	bl	800187a <_read>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	d102      	bne.n	80079a2 <_read_r+0x1e>
 800799c:	682b      	ldr	r3, [r5, #0]
 800799e:	b103      	cbz	r3, 80079a2 <_read_r+0x1e>
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	20000410 	.word	0x20000410

080079a8 <_write_r>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4604      	mov	r4, r0
 80079ac:	4608      	mov	r0, r1
 80079ae:	4611      	mov	r1, r2
 80079b0:	2200      	movs	r2, #0
 80079b2:	4d05      	ldr	r5, [pc, #20]	; (80079c8 <_write_r+0x20>)
 80079b4:	602a      	str	r2, [r5, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	f7f9 ff7c 	bl	80018b4 <_write>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d102      	bne.n	80079c6 <_write_r+0x1e>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	b103      	cbz	r3, 80079c6 <_write_r+0x1e>
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
 80079c8:	20000410 	.word	0x20000410

080079cc <__errno>:
 80079cc:	4b01      	ldr	r3, [pc, #4]	; (80079d4 <__errno+0x8>)
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	20000064 	.word	0x20000064

080079d8 <__libc_init_array>:
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	2600      	movs	r6, #0
 80079dc:	4d0c      	ldr	r5, [pc, #48]	; (8007a10 <__libc_init_array+0x38>)
 80079de:	4c0d      	ldr	r4, [pc, #52]	; (8007a14 <__libc_init_array+0x3c>)
 80079e0:	1b64      	subs	r4, r4, r5
 80079e2:	10a4      	asrs	r4, r4, #2
 80079e4:	42a6      	cmp	r6, r4
 80079e6:	d109      	bne.n	80079fc <__libc_init_array+0x24>
 80079e8:	f003 fbc0 	bl	800b16c <_init>
 80079ec:	2600      	movs	r6, #0
 80079ee:	4d0a      	ldr	r5, [pc, #40]	; (8007a18 <__libc_init_array+0x40>)
 80079f0:	4c0a      	ldr	r4, [pc, #40]	; (8007a1c <__libc_init_array+0x44>)
 80079f2:	1b64      	subs	r4, r4, r5
 80079f4:	10a4      	asrs	r4, r4, #2
 80079f6:	42a6      	cmp	r6, r4
 80079f8:	d105      	bne.n	8007a06 <__libc_init_array+0x2e>
 80079fa:	bd70      	pop	{r4, r5, r6, pc}
 80079fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a00:	4798      	blx	r3
 8007a02:	3601      	adds	r6, #1
 8007a04:	e7ee      	b.n	80079e4 <__libc_init_array+0xc>
 8007a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a0a:	4798      	blx	r3
 8007a0c:	3601      	adds	r6, #1
 8007a0e:	e7f2      	b.n	80079f6 <__libc_init_array+0x1e>
 8007a10:	0800b628 	.word	0x0800b628
 8007a14:	0800b628 	.word	0x0800b628
 8007a18:	0800b628 	.word	0x0800b628
 8007a1c:	0800b62c 	.word	0x0800b62c

08007a20 <__retarget_lock_init_recursive>:
 8007a20:	4770      	bx	lr

08007a22 <__retarget_lock_acquire_recursive>:
 8007a22:	4770      	bx	lr

08007a24 <__retarget_lock_release_recursive>:
 8007a24:	4770      	bx	lr

08007a26 <memchr>:
 8007a26:	4603      	mov	r3, r0
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	b2c9      	uxtb	r1, r1
 8007a2c:	4402      	add	r2, r0
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	4618      	mov	r0, r3
 8007a32:	d101      	bne.n	8007a38 <memchr+0x12>
 8007a34:	2000      	movs	r0, #0
 8007a36:	e003      	b.n	8007a40 <memchr+0x1a>
 8007a38:	7804      	ldrb	r4, [r0, #0]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	428c      	cmp	r4, r1
 8007a3e:	d1f6      	bne.n	8007a2e <memchr+0x8>
 8007a40:	bd10      	pop	{r4, pc}
	...

08007a44 <nanf>:
 8007a44:	4800      	ldr	r0, [pc, #0]	; (8007a48 <nanf+0x4>)
 8007a46:	4770      	bx	lr
 8007a48:	7fc00000 	.word	0x7fc00000

08007a4c <quorem>:
 8007a4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a50:	6903      	ldr	r3, [r0, #16]
 8007a52:	690c      	ldr	r4, [r1, #16]
 8007a54:	4607      	mov	r7, r0
 8007a56:	42a3      	cmp	r3, r4
 8007a58:	db7f      	blt.n	8007b5a <quorem+0x10e>
 8007a5a:	3c01      	subs	r4, #1
 8007a5c:	f100 0514 	add.w	r5, r0, #20
 8007a60:	f101 0814 	add.w	r8, r1, #20
 8007a64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a68:	9301      	str	r3, [sp, #4]
 8007a6a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a72:	3301      	adds	r3, #1
 8007a74:	429a      	cmp	r2, r3
 8007a76:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a7a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a7e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a82:	d331      	bcc.n	8007ae8 <quorem+0x9c>
 8007a84:	f04f 0e00 	mov.w	lr, #0
 8007a88:	4640      	mov	r0, r8
 8007a8a:	46ac      	mov	ip, r5
 8007a8c:	46f2      	mov	sl, lr
 8007a8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a92:	b293      	uxth	r3, r2
 8007a94:	fb06 e303 	mla	r3, r6, r3, lr
 8007a98:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a9c:	0c1a      	lsrs	r2, r3, #16
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	fb06 220e 	mla	r2, r6, lr, r2
 8007aa4:	ebaa 0303 	sub.w	r3, sl, r3
 8007aa8:	f8dc a000 	ldr.w	sl, [ip]
 8007aac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ab0:	fa1f fa8a 	uxth.w	sl, sl
 8007ab4:	4453      	add	r3, sl
 8007ab6:	f8dc a000 	ldr.w	sl, [ip]
 8007aba:	b292      	uxth	r2, r2
 8007abc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ac0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aca:	4581      	cmp	r9, r0
 8007acc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ad0:	f84c 3b04 	str.w	r3, [ip], #4
 8007ad4:	d2db      	bcs.n	8007a8e <quorem+0x42>
 8007ad6:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ada:	b92b      	cbnz	r3, 8007ae8 <quorem+0x9c>
 8007adc:	9b01      	ldr	r3, [sp, #4]
 8007ade:	3b04      	subs	r3, #4
 8007ae0:	429d      	cmp	r5, r3
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	d32d      	bcc.n	8007b42 <quorem+0xf6>
 8007ae6:	613c      	str	r4, [r7, #16]
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f001 f9dd 	bl	8008ea8 <__mcmp>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	db23      	blt.n	8007b3a <quorem+0xee>
 8007af2:	4629      	mov	r1, r5
 8007af4:	2000      	movs	r0, #0
 8007af6:	3601      	adds	r6, #1
 8007af8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007afc:	f8d1 c000 	ldr.w	ip, [r1]
 8007b00:	b293      	uxth	r3, r2
 8007b02:	1ac3      	subs	r3, r0, r3
 8007b04:	0c12      	lsrs	r2, r2, #16
 8007b06:	fa1f f08c 	uxth.w	r0, ip
 8007b0a:	4403      	add	r3, r0
 8007b0c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007b10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b1a:	45c1      	cmp	r9, r8
 8007b1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b20:	f841 3b04 	str.w	r3, [r1], #4
 8007b24:	d2e8      	bcs.n	8007af8 <quorem+0xac>
 8007b26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b2e:	b922      	cbnz	r2, 8007b3a <quorem+0xee>
 8007b30:	3b04      	subs	r3, #4
 8007b32:	429d      	cmp	r5, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	d30a      	bcc.n	8007b4e <quorem+0x102>
 8007b38:	613c      	str	r4, [r7, #16]
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	b003      	add	sp, #12
 8007b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b42:	6812      	ldr	r2, [r2, #0]
 8007b44:	3b04      	subs	r3, #4
 8007b46:	2a00      	cmp	r2, #0
 8007b48:	d1cd      	bne.n	8007ae6 <quorem+0x9a>
 8007b4a:	3c01      	subs	r4, #1
 8007b4c:	e7c8      	b.n	8007ae0 <quorem+0x94>
 8007b4e:	6812      	ldr	r2, [r2, #0]
 8007b50:	3b04      	subs	r3, #4
 8007b52:	2a00      	cmp	r2, #0
 8007b54:	d1f0      	bne.n	8007b38 <quorem+0xec>
 8007b56:	3c01      	subs	r4, #1
 8007b58:	e7eb      	b.n	8007b32 <quorem+0xe6>
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	e7ee      	b.n	8007b3c <quorem+0xf0>
	...

08007b60 <_dtoa_r>:
 8007b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b64:	4616      	mov	r6, r2
 8007b66:	461f      	mov	r7, r3
 8007b68:	69c4      	ldr	r4, [r0, #28]
 8007b6a:	b099      	sub	sp, #100	; 0x64
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007b72:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007b76:	b974      	cbnz	r4, 8007b96 <_dtoa_r+0x36>
 8007b78:	2010      	movs	r0, #16
 8007b7a:	f000 fe1d 	bl	80087b8 <malloc>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	61e8      	str	r0, [r5, #28]
 8007b82:	b920      	cbnz	r0, 8007b8e <_dtoa_r+0x2e>
 8007b84:	21ef      	movs	r1, #239	; 0xef
 8007b86:	4bac      	ldr	r3, [pc, #688]	; (8007e38 <_dtoa_r+0x2d8>)
 8007b88:	48ac      	ldr	r0, [pc, #688]	; (8007e3c <_dtoa_r+0x2dc>)
 8007b8a:	f002 fc55 	bl	800a438 <__assert_func>
 8007b8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b92:	6004      	str	r4, [r0, #0]
 8007b94:	60c4      	str	r4, [r0, #12]
 8007b96:	69eb      	ldr	r3, [r5, #28]
 8007b98:	6819      	ldr	r1, [r3, #0]
 8007b9a:	b151      	cbz	r1, 8007bb2 <_dtoa_r+0x52>
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	4093      	lsls	r3, r2
 8007ba2:	604a      	str	r2, [r1, #4]
 8007ba4:	608b      	str	r3, [r1, #8]
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f000 fefa 	bl	80089a0 <_Bfree>
 8007bac:	2200      	movs	r2, #0
 8007bae:	69eb      	ldr	r3, [r5, #28]
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	1e3b      	subs	r3, r7, #0
 8007bb4:	bfaf      	iteee	ge
 8007bb6:	2300      	movge	r3, #0
 8007bb8:	2201      	movlt	r2, #1
 8007bba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007bbe:	9305      	strlt	r3, [sp, #20]
 8007bc0:	bfa8      	it	ge
 8007bc2:	f8c8 3000 	strge.w	r3, [r8]
 8007bc6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007bca:	4b9d      	ldr	r3, [pc, #628]	; (8007e40 <_dtoa_r+0x2e0>)
 8007bcc:	bfb8      	it	lt
 8007bce:	f8c8 2000 	strlt.w	r2, [r8]
 8007bd2:	ea33 0309 	bics.w	r3, r3, r9
 8007bd6:	d119      	bne.n	8007c0c <_dtoa_r+0xac>
 8007bd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007be4:	4333      	orrs	r3, r6
 8007be6:	f000 8589 	beq.w	80086fc <_dtoa_r+0xb9c>
 8007bea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007bec:	b953      	cbnz	r3, 8007c04 <_dtoa_r+0xa4>
 8007bee:	4b95      	ldr	r3, [pc, #596]	; (8007e44 <_dtoa_r+0x2e4>)
 8007bf0:	e023      	b.n	8007c3a <_dtoa_r+0xda>
 8007bf2:	4b95      	ldr	r3, [pc, #596]	; (8007e48 <_dtoa_r+0x2e8>)
 8007bf4:	9303      	str	r3, [sp, #12]
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007bfa:	6013      	str	r3, [r2, #0]
 8007bfc:	9803      	ldr	r0, [sp, #12]
 8007bfe:	b019      	add	sp, #100	; 0x64
 8007c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c04:	4b8f      	ldr	r3, [pc, #572]	; (8007e44 <_dtoa_r+0x2e4>)
 8007c06:	9303      	str	r3, [sp, #12]
 8007c08:	3303      	adds	r3, #3
 8007c0a:	e7f5      	b.n	8007bf8 <_dtoa_r+0x98>
 8007c0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007c10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007c14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f7f8 fec4 	bl	80009a8 <__aeabi_dcmpeq>
 8007c20:	4680      	mov	r8, r0
 8007c22:	b160      	cbz	r0, 8007c3e <_dtoa_r+0xde>
 8007c24:	2301      	movs	r3, #1
 8007c26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 8562 	beq.w	80086f6 <_dtoa_r+0xb96>
 8007c32:	4b86      	ldr	r3, [pc, #536]	; (8007e4c <_dtoa_r+0x2ec>)
 8007c34:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	9303      	str	r3, [sp, #12]
 8007c3c:	e7de      	b.n	8007bfc <_dtoa_r+0x9c>
 8007c3e:	ab16      	add	r3, sp, #88	; 0x58
 8007c40:	9301      	str	r3, [sp, #4]
 8007c42:	ab17      	add	r3, sp, #92	; 0x5c
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	4628      	mov	r0, r5
 8007c48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c4c:	f001 fa3c 	bl	80090c8 <__d2b>
 8007c50:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007c54:	4682      	mov	sl, r0
 8007c56:	2c00      	cmp	r4, #0
 8007c58:	d07e      	beq.n	8007d58 <_dtoa_r+0x1f8>
 8007c5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c60:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c68:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007c6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c70:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007c74:	4619      	mov	r1, r3
 8007c76:	2200      	movs	r2, #0
 8007c78:	4b75      	ldr	r3, [pc, #468]	; (8007e50 <_dtoa_r+0x2f0>)
 8007c7a:	f7f8 fa75 	bl	8000168 <__aeabi_dsub>
 8007c7e:	a368      	add	r3, pc, #416	; (adr r3, 8007e20 <_dtoa_r+0x2c0>)
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	f7f8 fc28 	bl	80004d8 <__aeabi_dmul>
 8007c88:	a367      	add	r3, pc, #412	; (adr r3, 8007e28 <_dtoa_r+0x2c8>)
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	f7f8 fa6d 	bl	800016c <__adddf3>
 8007c92:	4606      	mov	r6, r0
 8007c94:	4620      	mov	r0, r4
 8007c96:	460f      	mov	r7, r1
 8007c98:	f7f8 fbb4 	bl	8000404 <__aeabi_i2d>
 8007c9c:	a364      	add	r3, pc, #400	; (adr r3, 8007e30 <_dtoa_r+0x2d0>)
 8007c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca2:	f7f8 fc19 	bl	80004d8 <__aeabi_dmul>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4630      	mov	r0, r6
 8007cac:	4639      	mov	r1, r7
 8007cae:	f7f8 fa5d 	bl	800016c <__adddf3>
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	460f      	mov	r7, r1
 8007cb6:	f7f8 febf 	bl	8000a38 <__aeabi_d2iz>
 8007cba:	2200      	movs	r2, #0
 8007cbc:	4683      	mov	fp, r0
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	f7f8 fe7a 	bl	80009bc <__aeabi_dcmplt>
 8007cc8:	b148      	cbz	r0, 8007cde <_dtoa_r+0x17e>
 8007cca:	4658      	mov	r0, fp
 8007ccc:	f7f8 fb9a 	bl	8000404 <__aeabi_i2d>
 8007cd0:	4632      	mov	r2, r6
 8007cd2:	463b      	mov	r3, r7
 8007cd4:	f7f8 fe68 	bl	80009a8 <__aeabi_dcmpeq>
 8007cd8:	b908      	cbnz	r0, 8007cde <_dtoa_r+0x17e>
 8007cda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cde:	f1bb 0f16 	cmp.w	fp, #22
 8007ce2:	d857      	bhi.n	8007d94 <_dtoa_r+0x234>
 8007ce4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ce8:	4b5a      	ldr	r3, [pc, #360]	; (8007e54 <_dtoa_r+0x2f4>)
 8007cea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	f7f8 fe63 	bl	80009bc <__aeabi_dcmplt>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d04e      	beq.n	8007d98 <_dtoa_r+0x238>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d00:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d04:	1b1b      	subs	r3, r3, r4
 8007d06:	1e5a      	subs	r2, r3, #1
 8007d08:	bf46      	itte	mi
 8007d0a:	f1c3 0901 	rsbmi	r9, r3, #1
 8007d0e:	2300      	movmi	r3, #0
 8007d10:	f04f 0900 	movpl.w	r9, #0
 8007d14:	9209      	str	r2, [sp, #36]	; 0x24
 8007d16:	bf48      	it	mi
 8007d18:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007d1a:	f1bb 0f00 	cmp.w	fp, #0
 8007d1e:	db3d      	blt.n	8007d9c <_dtoa_r+0x23c>
 8007d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d22:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007d26:	445b      	add	r3, fp
 8007d28:	9309      	str	r3, [sp, #36]	; 0x24
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8007d2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d30:	2b09      	cmp	r3, #9
 8007d32:	d867      	bhi.n	8007e04 <_dtoa_r+0x2a4>
 8007d34:	2b05      	cmp	r3, #5
 8007d36:	bfc4      	itt	gt
 8007d38:	3b04      	subgt	r3, #4
 8007d3a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d3e:	bfc8      	it	gt
 8007d40:	2400      	movgt	r4, #0
 8007d42:	f1a3 0302 	sub.w	r3, r3, #2
 8007d46:	bfd8      	it	le
 8007d48:	2401      	movle	r4, #1
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	f200 8086 	bhi.w	8007e5c <_dtoa_r+0x2fc>
 8007d50:	e8df f003 	tbb	[pc, r3]
 8007d54:	5637392c 	.word	0x5637392c
 8007d58:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007d5c:	441c      	add	r4, r3
 8007d5e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	bfc1      	itttt	gt
 8007d66:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d6a:	fa09 f903 	lslgt.w	r9, r9, r3
 8007d6e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007d72:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007d76:	bfd6      	itet	le
 8007d78:	f1c3 0320 	rsble	r3, r3, #32
 8007d7c:	ea49 0003 	orrgt.w	r0, r9, r3
 8007d80:	fa06 f003 	lslle.w	r0, r6, r3
 8007d84:	f7f8 fb2e 	bl	80003e4 <__aeabi_ui2d>
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007d8e:	3c01      	subs	r4, #1
 8007d90:	9213      	str	r2, [sp, #76]	; 0x4c
 8007d92:	e76f      	b.n	8007c74 <_dtoa_r+0x114>
 8007d94:	2301      	movs	r3, #1
 8007d96:	e7b3      	b.n	8007d00 <_dtoa_r+0x1a0>
 8007d98:	900f      	str	r0, [sp, #60]	; 0x3c
 8007d9a:	e7b2      	b.n	8007d02 <_dtoa_r+0x1a2>
 8007d9c:	f1cb 0300 	rsb	r3, fp, #0
 8007da0:	930a      	str	r3, [sp, #40]	; 0x28
 8007da2:	2300      	movs	r3, #0
 8007da4:	eba9 090b 	sub.w	r9, r9, fp
 8007da8:	930e      	str	r3, [sp, #56]	; 0x38
 8007daa:	e7c0      	b.n	8007d2e <_dtoa_r+0x1ce>
 8007dac:	2300      	movs	r3, #0
 8007dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8007db0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	dc55      	bgt.n	8007e62 <_dtoa_r+0x302>
 8007db6:	2301      	movs	r3, #1
 8007db8:	461a      	mov	r2, r3
 8007dba:	9306      	str	r3, [sp, #24]
 8007dbc:	9308      	str	r3, [sp, #32]
 8007dbe:	9223      	str	r2, [sp, #140]	; 0x8c
 8007dc0:	e00b      	b.n	8007dda <_dtoa_r+0x27a>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e7f3      	b.n	8007dae <_dtoa_r+0x24e>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007dcc:	445b      	add	r3, fp
 8007dce:	9306      	str	r3, [sp, #24]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	9308      	str	r3, [sp, #32]
 8007dd6:	bfb8      	it	lt
 8007dd8:	2301      	movlt	r3, #1
 8007dda:	2100      	movs	r1, #0
 8007ddc:	2204      	movs	r2, #4
 8007dde:	69e8      	ldr	r0, [r5, #28]
 8007de0:	f102 0614 	add.w	r6, r2, #20
 8007de4:	429e      	cmp	r6, r3
 8007de6:	d940      	bls.n	8007e6a <_dtoa_r+0x30a>
 8007de8:	6041      	str	r1, [r0, #4]
 8007dea:	4628      	mov	r0, r5
 8007dec:	f000 fd98 	bl	8008920 <_Balloc>
 8007df0:	9003      	str	r0, [sp, #12]
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d13c      	bne.n	8007e70 <_dtoa_r+0x310>
 8007df6:	4602      	mov	r2, r0
 8007df8:	f240 11af 	movw	r1, #431	; 0x1af
 8007dfc:	4b16      	ldr	r3, [pc, #88]	; (8007e58 <_dtoa_r+0x2f8>)
 8007dfe:	e6c3      	b.n	8007b88 <_dtoa_r+0x28>
 8007e00:	2301      	movs	r3, #1
 8007e02:	e7e1      	b.n	8007dc8 <_dtoa_r+0x268>
 8007e04:	2401      	movs	r4, #1
 8007e06:	2300      	movs	r3, #0
 8007e08:	940b      	str	r4, [sp, #44]	; 0x2c
 8007e0a:	9322      	str	r3, [sp, #136]	; 0x88
 8007e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e10:	2200      	movs	r2, #0
 8007e12:	9306      	str	r3, [sp, #24]
 8007e14:	9308      	str	r3, [sp, #32]
 8007e16:	2312      	movs	r3, #18
 8007e18:	e7d1      	b.n	8007dbe <_dtoa_r+0x25e>
 8007e1a:	bf00      	nop
 8007e1c:	f3af 8000 	nop.w
 8007e20:	636f4361 	.word	0x636f4361
 8007e24:	3fd287a7 	.word	0x3fd287a7
 8007e28:	8b60c8b3 	.word	0x8b60c8b3
 8007e2c:	3fc68a28 	.word	0x3fc68a28
 8007e30:	509f79fb 	.word	0x509f79fb
 8007e34:	3fd34413 	.word	0x3fd34413
 8007e38:	0800b240 	.word	0x0800b240
 8007e3c:	0800b257 	.word	0x0800b257
 8007e40:	7ff00000 	.word	0x7ff00000
 8007e44:	0800b23c 	.word	0x0800b23c
 8007e48:	0800b233 	.word	0x0800b233
 8007e4c:	0800b20b 	.word	0x0800b20b
 8007e50:	3ff80000 	.word	0x3ff80000
 8007e54:	0800b348 	.word	0x0800b348
 8007e58:	0800b2af 	.word	0x0800b2af
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e60:	e7d4      	b.n	8007e0c <_dtoa_r+0x2ac>
 8007e62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e64:	9306      	str	r3, [sp, #24]
 8007e66:	9308      	str	r3, [sp, #32]
 8007e68:	e7b7      	b.n	8007dda <_dtoa_r+0x27a>
 8007e6a:	3101      	adds	r1, #1
 8007e6c:	0052      	lsls	r2, r2, #1
 8007e6e:	e7b7      	b.n	8007de0 <_dtoa_r+0x280>
 8007e70:	69eb      	ldr	r3, [r5, #28]
 8007e72:	9a03      	ldr	r2, [sp, #12]
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	9b08      	ldr	r3, [sp, #32]
 8007e78:	2b0e      	cmp	r3, #14
 8007e7a:	f200 80a8 	bhi.w	8007fce <_dtoa_r+0x46e>
 8007e7e:	2c00      	cmp	r4, #0
 8007e80:	f000 80a5 	beq.w	8007fce <_dtoa_r+0x46e>
 8007e84:	f1bb 0f00 	cmp.w	fp, #0
 8007e88:	dd34      	ble.n	8007ef4 <_dtoa_r+0x394>
 8007e8a:	4b9a      	ldr	r3, [pc, #616]	; (80080f4 <_dtoa_r+0x594>)
 8007e8c:	f00b 020f 	and.w	r2, fp, #15
 8007e90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007e98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e9c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007ea0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007ea4:	d016      	beq.n	8007ed4 <_dtoa_r+0x374>
 8007ea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007eaa:	4b93      	ldr	r3, [pc, #588]	; (80080f8 <_dtoa_r+0x598>)
 8007eac:	2703      	movs	r7, #3
 8007eae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007eb2:	f7f8 fc3b 	bl	800072c <__aeabi_ddiv>
 8007eb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007eba:	f004 040f 	and.w	r4, r4, #15
 8007ebe:	4e8e      	ldr	r6, [pc, #568]	; (80080f8 <_dtoa_r+0x598>)
 8007ec0:	b954      	cbnz	r4, 8007ed8 <_dtoa_r+0x378>
 8007ec2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ec6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eca:	f7f8 fc2f 	bl	800072c <__aeabi_ddiv>
 8007ece:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ed2:	e029      	b.n	8007f28 <_dtoa_r+0x3c8>
 8007ed4:	2702      	movs	r7, #2
 8007ed6:	e7f2      	b.n	8007ebe <_dtoa_r+0x35e>
 8007ed8:	07e1      	lsls	r1, r4, #31
 8007eda:	d508      	bpl.n	8007eee <_dtoa_r+0x38e>
 8007edc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ee0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ee4:	f7f8 faf8 	bl	80004d8 <__aeabi_dmul>
 8007ee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007eec:	3701      	adds	r7, #1
 8007eee:	1064      	asrs	r4, r4, #1
 8007ef0:	3608      	adds	r6, #8
 8007ef2:	e7e5      	b.n	8007ec0 <_dtoa_r+0x360>
 8007ef4:	f000 80a5 	beq.w	8008042 <_dtoa_r+0x4e2>
 8007ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007efc:	f1cb 0400 	rsb	r4, fp, #0
 8007f00:	4b7c      	ldr	r3, [pc, #496]	; (80080f4 <_dtoa_r+0x594>)
 8007f02:	f004 020f 	and.w	r2, r4, #15
 8007f06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	f7f8 fae3 	bl	80004d8 <__aeabi_dmul>
 8007f12:	2702      	movs	r7, #2
 8007f14:	2300      	movs	r3, #0
 8007f16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f1a:	4e77      	ldr	r6, [pc, #476]	; (80080f8 <_dtoa_r+0x598>)
 8007f1c:	1124      	asrs	r4, r4, #4
 8007f1e:	2c00      	cmp	r4, #0
 8007f20:	f040 8084 	bne.w	800802c <_dtoa_r+0x4cc>
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1d2      	bne.n	8007ece <_dtoa_r+0x36e>
 8007f28:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007f2c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007f30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 8087 	beq.w	8008046 <_dtoa_r+0x4e6>
 8007f38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	4b6f      	ldr	r3, [pc, #444]	; (80080fc <_dtoa_r+0x59c>)
 8007f40:	f7f8 fd3c 	bl	80009bc <__aeabi_dcmplt>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d07e      	beq.n	8008046 <_dtoa_r+0x4e6>
 8007f48:	9b08      	ldr	r3, [sp, #32]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d07b      	beq.n	8008046 <_dtoa_r+0x4e6>
 8007f4e:	9b06      	ldr	r3, [sp, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	dd38      	ble.n	8007fc6 <_dtoa_r+0x466>
 8007f54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4b69      	ldr	r3, [pc, #420]	; (8008100 <_dtoa_r+0x5a0>)
 8007f5c:	f7f8 fabc 	bl	80004d8 <__aeabi_dmul>
 8007f60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f64:	9c06      	ldr	r4, [sp, #24]
 8007f66:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007f6a:	3701      	adds	r7, #1
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	f7f8 fa49 	bl	8000404 <__aeabi_i2d>
 8007f72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f76:	f7f8 faaf 	bl	80004d8 <__aeabi_dmul>
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	4b61      	ldr	r3, [pc, #388]	; (8008104 <_dtoa_r+0x5a4>)
 8007f7e:	f7f8 f8f5 	bl	800016c <__adddf3>
 8007f82:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007f86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f8a:	9611      	str	r6, [sp, #68]	; 0x44
 8007f8c:	2c00      	cmp	r4, #0
 8007f8e:	d15d      	bne.n	800804c <_dtoa_r+0x4ec>
 8007f90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f94:	2200      	movs	r2, #0
 8007f96:	4b5c      	ldr	r3, [pc, #368]	; (8008108 <_dtoa_r+0x5a8>)
 8007f98:	f7f8 f8e6 	bl	8000168 <__aeabi_dsub>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fa4:	4633      	mov	r3, r6
 8007fa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fa8:	f7f8 fd26 	bl	80009f8 <__aeabi_dcmpgt>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	f040 8295 	bne.w	80084dc <_dtoa_r+0x97c>
 8007fb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007fbc:	f7f8 fcfe 	bl	80009bc <__aeabi_dcmplt>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	f040 8289 	bne.w	80084d8 <_dtoa_r+0x978>
 8007fc6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007fca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007fce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f2c0 8151 	blt.w	8008278 <_dtoa_r+0x718>
 8007fd6:	f1bb 0f0e 	cmp.w	fp, #14
 8007fda:	f300 814d 	bgt.w	8008278 <_dtoa_r+0x718>
 8007fde:	4b45      	ldr	r3, [pc, #276]	; (80080f4 <_dtoa_r+0x594>)
 8007fe0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007fe4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007fe8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007fec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f280 80da 	bge.w	80081a8 <_dtoa_r+0x648>
 8007ff4:	9b08      	ldr	r3, [sp, #32]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f300 80d6 	bgt.w	80081a8 <_dtoa_r+0x648>
 8007ffc:	f040 826b 	bne.w	80084d6 <_dtoa_r+0x976>
 8008000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008004:	2200      	movs	r2, #0
 8008006:	4b40      	ldr	r3, [pc, #256]	; (8008108 <_dtoa_r+0x5a8>)
 8008008:	f7f8 fa66 	bl	80004d8 <__aeabi_dmul>
 800800c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008010:	f7f8 fce8 	bl	80009e4 <__aeabi_dcmpge>
 8008014:	9c08      	ldr	r4, [sp, #32]
 8008016:	4626      	mov	r6, r4
 8008018:	2800      	cmp	r0, #0
 800801a:	f040 8241 	bne.w	80084a0 <_dtoa_r+0x940>
 800801e:	2331      	movs	r3, #49	; 0x31
 8008020:	9f03      	ldr	r7, [sp, #12]
 8008022:	f10b 0b01 	add.w	fp, fp, #1
 8008026:	f807 3b01 	strb.w	r3, [r7], #1
 800802a:	e23d      	b.n	80084a8 <_dtoa_r+0x948>
 800802c:	07e2      	lsls	r2, r4, #31
 800802e:	d505      	bpl.n	800803c <_dtoa_r+0x4dc>
 8008030:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008034:	f7f8 fa50 	bl	80004d8 <__aeabi_dmul>
 8008038:	2301      	movs	r3, #1
 800803a:	3701      	adds	r7, #1
 800803c:	1064      	asrs	r4, r4, #1
 800803e:	3608      	adds	r6, #8
 8008040:	e76d      	b.n	8007f1e <_dtoa_r+0x3be>
 8008042:	2702      	movs	r7, #2
 8008044:	e770      	b.n	8007f28 <_dtoa_r+0x3c8>
 8008046:	46d8      	mov	r8, fp
 8008048:	9c08      	ldr	r4, [sp, #32]
 800804a:	e78f      	b.n	8007f6c <_dtoa_r+0x40c>
 800804c:	9903      	ldr	r1, [sp, #12]
 800804e:	4b29      	ldr	r3, [pc, #164]	; (80080f4 <_dtoa_r+0x594>)
 8008050:	4421      	add	r1, r4
 8008052:	9112      	str	r1, [sp, #72]	; 0x48
 8008054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008056:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800805a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800805e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008062:	2900      	cmp	r1, #0
 8008064:	d054      	beq.n	8008110 <_dtoa_r+0x5b0>
 8008066:	2000      	movs	r0, #0
 8008068:	4928      	ldr	r1, [pc, #160]	; (800810c <_dtoa_r+0x5ac>)
 800806a:	f7f8 fb5f 	bl	800072c <__aeabi_ddiv>
 800806e:	463b      	mov	r3, r7
 8008070:	4632      	mov	r2, r6
 8008072:	f7f8 f879 	bl	8000168 <__aeabi_dsub>
 8008076:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800807a:	9f03      	ldr	r7, [sp, #12]
 800807c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008080:	f7f8 fcda 	bl	8000a38 <__aeabi_d2iz>
 8008084:	4604      	mov	r4, r0
 8008086:	f7f8 f9bd 	bl	8000404 <__aeabi_i2d>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008092:	f7f8 f869 	bl	8000168 <__aeabi_dsub>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	3430      	adds	r4, #48	; 0x30
 800809c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80080a4:	f807 4b01 	strb.w	r4, [r7], #1
 80080a8:	f7f8 fc88 	bl	80009bc <__aeabi_dcmplt>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d173      	bne.n	8008198 <_dtoa_r+0x638>
 80080b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080b4:	2000      	movs	r0, #0
 80080b6:	4911      	ldr	r1, [pc, #68]	; (80080fc <_dtoa_r+0x59c>)
 80080b8:	f7f8 f856 	bl	8000168 <__aeabi_dsub>
 80080bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80080c0:	f7f8 fc7c 	bl	80009bc <__aeabi_dcmplt>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	f040 80b6 	bne.w	8008236 <_dtoa_r+0x6d6>
 80080ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080cc:	429f      	cmp	r7, r3
 80080ce:	f43f af7a 	beq.w	8007fc6 <_dtoa_r+0x466>
 80080d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080d6:	2200      	movs	r2, #0
 80080d8:	4b09      	ldr	r3, [pc, #36]	; (8008100 <_dtoa_r+0x5a0>)
 80080da:	f7f8 f9fd 	bl	80004d8 <__aeabi_dmul>
 80080de:	2200      	movs	r2, #0
 80080e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080e8:	4b05      	ldr	r3, [pc, #20]	; (8008100 <_dtoa_r+0x5a0>)
 80080ea:	f7f8 f9f5 	bl	80004d8 <__aeabi_dmul>
 80080ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080f2:	e7c3      	b.n	800807c <_dtoa_r+0x51c>
 80080f4:	0800b348 	.word	0x0800b348
 80080f8:	0800b320 	.word	0x0800b320
 80080fc:	3ff00000 	.word	0x3ff00000
 8008100:	40240000 	.word	0x40240000
 8008104:	401c0000 	.word	0x401c0000
 8008108:	40140000 	.word	0x40140000
 800810c:	3fe00000 	.word	0x3fe00000
 8008110:	4630      	mov	r0, r6
 8008112:	4639      	mov	r1, r7
 8008114:	f7f8 f9e0 	bl	80004d8 <__aeabi_dmul>
 8008118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800811a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800811e:	9c03      	ldr	r4, [sp, #12]
 8008120:	9314      	str	r3, [sp, #80]	; 0x50
 8008122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008126:	f7f8 fc87 	bl	8000a38 <__aeabi_d2iz>
 800812a:	9015      	str	r0, [sp, #84]	; 0x54
 800812c:	f7f8 f96a 	bl	8000404 <__aeabi_i2d>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008138:	f7f8 f816 	bl	8000168 <__aeabi_dsub>
 800813c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800813e:	4606      	mov	r6, r0
 8008140:	3330      	adds	r3, #48	; 0x30
 8008142:	f804 3b01 	strb.w	r3, [r4], #1
 8008146:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008148:	460f      	mov	r7, r1
 800814a:	429c      	cmp	r4, r3
 800814c:	f04f 0200 	mov.w	r2, #0
 8008150:	d124      	bne.n	800819c <_dtoa_r+0x63c>
 8008152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008156:	4baf      	ldr	r3, [pc, #700]	; (8008414 <_dtoa_r+0x8b4>)
 8008158:	f7f8 f808 	bl	800016c <__adddf3>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4630      	mov	r0, r6
 8008162:	4639      	mov	r1, r7
 8008164:	f7f8 fc48 	bl	80009f8 <__aeabi_dcmpgt>
 8008168:	2800      	cmp	r0, #0
 800816a:	d163      	bne.n	8008234 <_dtoa_r+0x6d4>
 800816c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008170:	2000      	movs	r0, #0
 8008172:	49a8      	ldr	r1, [pc, #672]	; (8008414 <_dtoa_r+0x8b4>)
 8008174:	f7f7 fff8 	bl	8000168 <__aeabi_dsub>
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	4630      	mov	r0, r6
 800817e:	4639      	mov	r1, r7
 8008180:	f7f8 fc1c 	bl	80009bc <__aeabi_dcmplt>
 8008184:	2800      	cmp	r0, #0
 8008186:	f43f af1e 	beq.w	8007fc6 <_dtoa_r+0x466>
 800818a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800818c:	1e7b      	subs	r3, r7, #1
 800818e:	9314      	str	r3, [sp, #80]	; 0x50
 8008190:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008194:	2b30      	cmp	r3, #48	; 0x30
 8008196:	d0f8      	beq.n	800818a <_dtoa_r+0x62a>
 8008198:	46c3      	mov	fp, r8
 800819a:	e03b      	b.n	8008214 <_dtoa_r+0x6b4>
 800819c:	4b9e      	ldr	r3, [pc, #632]	; (8008418 <_dtoa_r+0x8b8>)
 800819e:	f7f8 f99b 	bl	80004d8 <__aeabi_dmul>
 80081a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081a6:	e7bc      	b.n	8008122 <_dtoa_r+0x5c2>
 80081a8:	9f03      	ldr	r7, [sp, #12]
 80081aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80081ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081b2:	4640      	mov	r0, r8
 80081b4:	4649      	mov	r1, r9
 80081b6:	f7f8 fab9 	bl	800072c <__aeabi_ddiv>
 80081ba:	f7f8 fc3d 	bl	8000a38 <__aeabi_d2iz>
 80081be:	4604      	mov	r4, r0
 80081c0:	f7f8 f920 	bl	8000404 <__aeabi_i2d>
 80081c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081c8:	f7f8 f986 	bl	80004d8 <__aeabi_dmul>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4640      	mov	r0, r8
 80081d2:	4649      	mov	r1, r9
 80081d4:	f7f7 ffc8 	bl	8000168 <__aeabi_dsub>
 80081d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80081dc:	f807 6b01 	strb.w	r6, [r7], #1
 80081e0:	9e03      	ldr	r6, [sp, #12]
 80081e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80081e6:	1bbe      	subs	r6, r7, r6
 80081e8:	45b4      	cmp	ip, r6
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	d136      	bne.n	800825e <_dtoa_r+0x6fe>
 80081f0:	f7f7 ffbc 	bl	800016c <__adddf3>
 80081f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081f8:	4680      	mov	r8, r0
 80081fa:	4689      	mov	r9, r1
 80081fc:	f7f8 fbfc 	bl	80009f8 <__aeabi_dcmpgt>
 8008200:	bb58      	cbnz	r0, 800825a <_dtoa_r+0x6fa>
 8008202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008206:	4640      	mov	r0, r8
 8008208:	4649      	mov	r1, r9
 800820a:	f7f8 fbcd 	bl	80009a8 <__aeabi_dcmpeq>
 800820e:	b108      	cbz	r0, 8008214 <_dtoa_r+0x6b4>
 8008210:	07e3      	lsls	r3, r4, #31
 8008212:	d422      	bmi.n	800825a <_dtoa_r+0x6fa>
 8008214:	4651      	mov	r1, sl
 8008216:	4628      	mov	r0, r5
 8008218:	f000 fbc2 	bl	80089a0 <_Bfree>
 800821c:	2300      	movs	r3, #0
 800821e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008220:	703b      	strb	r3, [r7, #0]
 8008222:	f10b 0301 	add.w	r3, fp, #1
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800822a:	2b00      	cmp	r3, #0
 800822c:	f43f ace6 	beq.w	8007bfc <_dtoa_r+0x9c>
 8008230:	601f      	str	r7, [r3, #0]
 8008232:	e4e3      	b.n	8007bfc <_dtoa_r+0x9c>
 8008234:	4627      	mov	r7, r4
 8008236:	463b      	mov	r3, r7
 8008238:	461f      	mov	r7, r3
 800823a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800823e:	2a39      	cmp	r2, #57	; 0x39
 8008240:	d107      	bne.n	8008252 <_dtoa_r+0x6f2>
 8008242:	9a03      	ldr	r2, [sp, #12]
 8008244:	429a      	cmp	r2, r3
 8008246:	d1f7      	bne.n	8008238 <_dtoa_r+0x6d8>
 8008248:	2230      	movs	r2, #48	; 0x30
 800824a:	9903      	ldr	r1, [sp, #12]
 800824c:	f108 0801 	add.w	r8, r8, #1
 8008250:	700a      	strb	r2, [r1, #0]
 8008252:	781a      	ldrb	r2, [r3, #0]
 8008254:	3201      	adds	r2, #1
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	e79e      	b.n	8008198 <_dtoa_r+0x638>
 800825a:	46d8      	mov	r8, fp
 800825c:	e7eb      	b.n	8008236 <_dtoa_r+0x6d6>
 800825e:	2200      	movs	r2, #0
 8008260:	4b6d      	ldr	r3, [pc, #436]	; (8008418 <_dtoa_r+0x8b8>)
 8008262:	f7f8 f939 	bl	80004d8 <__aeabi_dmul>
 8008266:	2200      	movs	r2, #0
 8008268:	2300      	movs	r3, #0
 800826a:	4680      	mov	r8, r0
 800826c:	4689      	mov	r9, r1
 800826e:	f7f8 fb9b 	bl	80009a8 <__aeabi_dcmpeq>
 8008272:	2800      	cmp	r0, #0
 8008274:	d09b      	beq.n	80081ae <_dtoa_r+0x64e>
 8008276:	e7cd      	b.n	8008214 <_dtoa_r+0x6b4>
 8008278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800827a:	2a00      	cmp	r2, #0
 800827c:	f000 80c4 	beq.w	8008408 <_dtoa_r+0x8a8>
 8008280:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008282:	2a01      	cmp	r2, #1
 8008284:	f300 80a8 	bgt.w	80083d8 <_dtoa_r+0x878>
 8008288:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800828a:	2a00      	cmp	r2, #0
 800828c:	f000 80a0 	beq.w	80083d0 <_dtoa_r+0x870>
 8008290:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008294:	464f      	mov	r7, r9
 8008296:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800829a:	2101      	movs	r1, #1
 800829c:	441a      	add	r2, r3
 800829e:	4628      	mov	r0, r5
 80082a0:	4499      	add	r9, r3
 80082a2:	9209      	str	r2, [sp, #36]	; 0x24
 80082a4:	f000 fc7c 	bl	8008ba0 <__i2b>
 80082a8:	4606      	mov	r6, r0
 80082aa:	b15f      	cbz	r7, 80082c4 <_dtoa_r+0x764>
 80082ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	dd08      	ble.n	80082c4 <_dtoa_r+0x764>
 80082b2:	42bb      	cmp	r3, r7
 80082b4:	bfa8      	it	ge
 80082b6:	463b      	movge	r3, r7
 80082b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082ba:	eba9 0903 	sub.w	r9, r9, r3
 80082be:	1aff      	subs	r7, r7, r3
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	9309      	str	r3, [sp, #36]	; 0x24
 80082c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c6:	b1f3      	cbz	r3, 8008306 <_dtoa_r+0x7a6>
 80082c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 80a0 	beq.w	8008410 <_dtoa_r+0x8b0>
 80082d0:	2c00      	cmp	r4, #0
 80082d2:	dd10      	ble.n	80082f6 <_dtoa_r+0x796>
 80082d4:	4631      	mov	r1, r6
 80082d6:	4622      	mov	r2, r4
 80082d8:	4628      	mov	r0, r5
 80082da:	f000 fd1f 	bl	8008d1c <__pow5mult>
 80082de:	4652      	mov	r2, sl
 80082e0:	4601      	mov	r1, r0
 80082e2:	4606      	mov	r6, r0
 80082e4:	4628      	mov	r0, r5
 80082e6:	f000 fc71 	bl	8008bcc <__multiply>
 80082ea:	4680      	mov	r8, r0
 80082ec:	4651      	mov	r1, sl
 80082ee:	4628      	mov	r0, r5
 80082f0:	f000 fb56 	bl	80089a0 <_Bfree>
 80082f4:	46c2      	mov	sl, r8
 80082f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f8:	1b1a      	subs	r2, r3, r4
 80082fa:	d004      	beq.n	8008306 <_dtoa_r+0x7a6>
 80082fc:	4651      	mov	r1, sl
 80082fe:	4628      	mov	r0, r5
 8008300:	f000 fd0c 	bl	8008d1c <__pow5mult>
 8008304:	4682      	mov	sl, r0
 8008306:	2101      	movs	r1, #1
 8008308:	4628      	mov	r0, r5
 800830a:	f000 fc49 	bl	8008ba0 <__i2b>
 800830e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008310:	4604      	mov	r4, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	f340 8082 	ble.w	800841c <_dtoa_r+0x8bc>
 8008318:	461a      	mov	r2, r3
 800831a:	4601      	mov	r1, r0
 800831c:	4628      	mov	r0, r5
 800831e:	f000 fcfd 	bl	8008d1c <__pow5mult>
 8008322:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008324:	4604      	mov	r4, r0
 8008326:	2b01      	cmp	r3, #1
 8008328:	dd7b      	ble.n	8008422 <_dtoa_r+0x8c2>
 800832a:	f04f 0800 	mov.w	r8, #0
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008334:	6918      	ldr	r0, [r3, #16]
 8008336:	f000 fbe5 	bl	8008b04 <__hi0bits>
 800833a:	f1c0 0020 	rsb	r0, r0, #32
 800833e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008340:	4418      	add	r0, r3
 8008342:	f010 001f 	ands.w	r0, r0, #31
 8008346:	f000 8092 	beq.w	800846e <_dtoa_r+0x90e>
 800834a:	f1c0 0320 	rsb	r3, r0, #32
 800834e:	2b04      	cmp	r3, #4
 8008350:	f340 8085 	ble.w	800845e <_dtoa_r+0x8fe>
 8008354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008356:	f1c0 001c 	rsb	r0, r0, #28
 800835a:	4403      	add	r3, r0
 800835c:	4481      	add	r9, r0
 800835e:	4407      	add	r7, r0
 8008360:	9309      	str	r3, [sp, #36]	; 0x24
 8008362:	f1b9 0f00 	cmp.w	r9, #0
 8008366:	dd05      	ble.n	8008374 <_dtoa_r+0x814>
 8008368:	4651      	mov	r1, sl
 800836a:	464a      	mov	r2, r9
 800836c:	4628      	mov	r0, r5
 800836e:	f000 fd2f 	bl	8008dd0 <__lshift>
 8008372:	4682      	mov	sl, r0
 8008374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008376:	2b00      	cmp	r3, #0
 8008378:	dd05      	ble.n	8008386 <_dtoa_r+0x826>
 800837a:	4621      	mov	r1, r4
 800837c:	461a      	mov	r2, r3
 800837e:	4628      	mov	r0, r5
 8008380:	f000 fd26 	bl	8008dd0 <__lshift>
 8008384:	4604      	mov	r4, r0
 8008386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008388:	2b00      	cmp	r3, #0
 800838a:	d072      	beq.n	8008472 <_dtoa_r+0x912>
 800838c:	4621      	mov	r1, r4
 800838e:	4650      	mov	r0, sl
 8008390:	f000 fd8a 	bl	8008ea8 <__mcmp>
 8008394:	2800      	cmp	r0, #0
 8008396:	da6c      	bge.n	8008472 <_dtoa_r+0x912>
 8008398:	2300      	movs	r3, #0
 800839a:	4651      	mov	r1, sl
 800839c:	220a      	movs	r2, #10
 800839e:	4628      	mov	r0, r5
 80083a0:	f000 fb20 	bl	80089e4 <__multadd>
 80083a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083a6:	4682      	mov	sl, r0
 80083a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f000 81ac 	beq.w	800870a <_dtoa_r+0xbaa>
 80083b2:	2300      	movs	r3, #0
 80083b4:	4631      	mov	r1, r6
 80083b6:	220a      	movs	r2, #10
 80083b8:	4628      	mov	r0, r5
 80083ba:	f000 fb13 	bl	80089e4 <__multadd>
 80083be:	9b06      	ldr	r3, [sp, #24]
 80083c0:	4606      	mov	r6, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f300 8093 	bgt.w	80084ee <_dtoa_r+0x98e>
 80083c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	dc59      	bgt.n	8008482 <_dtoa_r+0x922>
 80083ce:	e08e      	b.n	80084ee <_dtoa_r+0x98e>
 80083d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80083d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083d6:	e75d      	b.n	8008294 <_dtoa_r+0x734>
 80083d8:	9b08      	ldr	r3, [sp, #32]
 80083da:	1e5c      	subs	r4, r3, #1
 80083dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083de:	42a3      	cmp	r3, r4
 80083e0:	bfbf      	itttt	lt
 80083e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80083e4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80083e6:	1ae3      	sublt	r3, r4, r3
 80083e8:	18d2      	addlt	r2, r2, r3
 80083ea:	bfa8      	it	ge
 80083ec:	1b1c      	subge	r4, r3, r4
 80083ee:	9b08      	ldr	r3, [sp, #32]
 80083f0:	bfbe      	ittt	lt
 80083f2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80083f4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80083f6:	2400      	movlt	r4, #0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	bfb5      	itete	lt
 80083fc:	eba9 0703 	sublt.w	r7, r9, r3
 8008400:	464f      	movge	r7, r9
 8008402:	2300      	movlt	r3, #0
 8008404:	9b08      	ldrge	r3, [sp, #32]
 8008406:	e747      	b.n	8008298 <_dtoa_r+0x738>
 8008408:	464f      	mov	r7, r9
 800840a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800840c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800840e:	e74c      	b.n	80082aa <_dtoa_r+0x74a>
 8008410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008412:	e773      	b.n	80082fc <_dtoa_r+0x79c>
 8008414:	3fe00000 	.word	0x3fe00000
 8008418:	40240000 	.word	0x40240000
 800841c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800841e:	2b01      	cmp	r3, #1
 8008420:	dc18      	bgt.n	8008454 <_dtoa_r+0x8f4>
 8008422:	9b04      	ldr	r3, [sp, #16]
 8008424:	b9b3      	cbnz	r3, 8008454 <_dtoa_r+0x8f4>
 8008426:	9b05      	ldr	r3, [sp, #20]
 8008428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800842c:	b993      	cbnz	r3, 8008454 <_dtoa_r+0x8f4>
 800842e:	9b05      	ldr	r3, [sp, #20]
 8008430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008434:	0d1b      	lsrs	r3, r3, #20
 8008436:	051b      	lsls	r3, r3, #20
 8008438:	b17b      	cbz	r3, 800845a <_dtoa_r+0x8fa>
 800843a:	f04f 0801 	mov.w	r8, #1
 800843e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008440:	f109 0901 	add.w	r9, r9, #1
 8008444:	3301      	adds	r3, #1
 8008446:	9309      	str	r3, [sp, #36]	; 0x24
 8008448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800844a:	2b00      	cmp	r3, #0
 800844c:	f47f af6f 	bne.w	800832e <_dtoa_r+0x7ce>
 8008450:	2001      	movs	r0, #1
 8008452:	e774      	b.n	800833e <_dtoa_r+0x7de>
 8008454:	f04f 0800 	mov.w	r8, #0
 8008458:	e7f6      	b.n	8008448 <_dtoa_r+0x8e8>
 800845a:	4698      	mov	r8, r3
 800845c:	e7f4      	b.n	8008448 <_dtoa_r+0x8e8>
 800845e:	d080      	beq.n	8008362 <_dtoa_r+0x802>
 8008460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008462:	331c      	adds	r3, #28
 8008464:	441a      	add	r2, r3
 8008466:	4499      	add	r9, r3
 8008468:	441f      	add	r7, r3
 800846a:	9209      	str	r2, [sp, #36]	; 0x24
 800846c:	e779      	b.n	8008362 <_dtoa_r+0x802>
 800846e:	4603      	mov	r3, r0
 8008470:	e7f6      	b.n	8008460 <_dtoa_r+0x900>
 8008472:	9b08      	ldr	r3, [sp, #32]
 8008474:	2b00      	cmp	r3, #0
 8008476:	dc34      	bgt.n	80084e2 <_dtoa_r+0x982>
 8008478:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800847a:	2b02      	cmp	r3, #2
 800847c:	dd31      	ble.n	80084e2 <_dtoa_r+0x982>
 800847e:	9b08      	ldr	r3, [sp, #32]
 8008480:	9306      	str	r3, [sp, #24]
 8008482:	9b06      	ldr	r3, [sp, #24]
 8008484:	b963      	cbnz	r3, 80084a0 <_dtoa_r+0x940>
 8008486:	4621      	mov	r1, r4
 8008488:	2205      	movs	r2, #5
 800848a:	4628      	mov	r0, r5
 800848c:	f000 faaa 	bl	80089e4 <__multadd>
 8008490:	4601      	mov	r1, r0
 8008492:	4604      	mov	r4, r0
 8008494:	4650      	mov	r0, sl
 8008496:	f000 fd07 	bl	8008ea8 <__mcmp>
 800849a:	2800      	cmp	r0, #0
 800849c:	f73f adbf 	bgt.w	800801e <_dtoa_r+0x4be>
 80084a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084a2:	9f03      	ldr	r7, [sp, #12]
 80084a4:	ea6f 0b03 	mvn.w	fp, r3
 80084a8:	f04f 0800 	mov.w	r8, #0
 80084ac:	4621      	mov	r1, r4
 80084ae:	4628      	mov	r0, r5
 80084b0:	f000 fa76 	bl	80089a0 <_Bfree>
 80084b4:	2e00      	cmp	r6, #0
 80084b6:	f43f aead 	beq.w	8008214 <_dtoa_r+0x6b4>
 80084ba:	f1b8 0f00 	cmp.w	r8, #0
 80084be:	d005      	beq.n	80084cc <_dtoa_r+0x96c>
 80084c0:	45b0      	cmp	r8, r6
 80084c2:	d003      	beq.n	80084cc <_dtoa_r+0x96c>
 80084c4:	4641      	mov	r1, r8
 80084c6:	4628      	mov	r0, r5
 80084c8:	f000 fa6a 	bl	80089a0 <_Bfree>
 80084cc:	4631      	mov	r1, r6
 80084ce:	4628      	mov	r0, r5
 80084d0:	f000 fa66 	bl	80089a0 <_Bfree>
 80084d4:	e69e      	b.n	8008214 <_dtoa_r+0x6b4>
 80084d6:	2400      	movs	r4, #0
 80084d8:	4626      	mov	r6, r4
 80084da:	e7e1      	b.n	80084a0 <_dtoa_r+0x940>
 80084dc:	46c3      	mov	fp, r8
 80084de:	4626      	mov	r6, r4
 80084e0:	e59d      	b.n	800801e <_dtoa_r+0x4be>
 80084e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 80c8 	beq.w	800867a <_dtoa_r+0xb1a>
 80084ea:	9b08      	ldr	r3, [sp, #32]
 80084ec:	9306      	str	r3, [sp, #24]
 80084ee:	2f00      	cmp	r7, #0
 80084f0:	dd05      	ble.n	80084fe <_dtoa_r+0x99e>
 80084f2:	4631      	mov	r1, r6
 80084f4:	463a      	mov	r2, r7
 80084f6:	4628      	mov	r0, r5
 80084f8:	f000 fc6a 	bl	8008dd0 <__lshift>
 80084fc:	4606      	mov	r6, r0
 80084fe:	f1b8 0f00 	cmp.w	r8, #0
 8008502:	d05b      	beq.n	80085bc <_dtoa_r+0xa5c>
 8008504:	4628      	mov	r0, r5
 8008506:	6871      	ldr	r1, [r6, #4]
 8008508:	f000 fa0a 	bl	8008920 <_Balloc>
 800850c:	4607      	mov	r7, r0
 800850e:	b928      	cbnz	r0, 800851c <_dtoa_r+0x9bc>
 8008510:	4602      	mov	r2, r0
 8008512:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008516:	4b81      	ldr	r3, [pc, #516]	; (800871c <_dtoa_r+0xbbc>)
 8008518:	f7ff bb36 	b.w	8007b88 <_dtoa_r+0x28>
 800851c:	6932      	ldr	r2, [r6, #16]
 800851e:	f106 010c 	add.w	r1, r6, #12
 8008522:	3202      	adds	r2, #2
 8008524:	0092      	lsls	r2, r2, #2
 8008526:	300c      	adds	r0, #12
 8008528:	f001 ff72 	bl	800a410 <memcpy>
 800852c:	2201      	movs	r2, #1
 800852e:	4639      	mov	r1, r7
 8008530:	4628      	mov	r0, r5
 8008532:	f000 fc4d 	bl	8008dd0 <__lshift>
 8008536:	46b0      	mov	r8, r6
 8008538:	4606      	mov	r6, r0
 800853a:	9b03      	ldr	r3, [sp, #12]
 800853c:	9a03      	ldr	r2, [sp, #12]
 800853e:	3301      	adds	r3, #1
 8008540:	9308      	str	r3, [sp, #32]
 8008542:	9b06      	ldr	r3, [sp, #24]
 8008544:	4413      	add	r3, r2
 8008546:	930b      	str	r3, [sp, #44]	; 0x2c
 8008548:	9b04      	ldr	r3, [sp, #16]
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	930a      	str	r3, [sp, #40]	; 0x28
 8008550:	9b08      	ldr	r3, [sp, #32]
 8008552:	4621      	mov	r1, r4
 8008554:	3b01      	subs	r3, #1
 8008556:	4650      	mov	r0, sl
 8008558:	9304      	str	r3, [sp, #16]
 800855a:	f7ff fa77 	bl	8007a4c <quorem>
 800855e:	4641      	mov	r1, r8
 8008560:	9006      	str	r0, [sp, #24]
 8008562:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008566:	4650      	mov	r0, sl
 8008568:	f000 fc9e 	bl	8008ea8 <__mcmp>
 800856c:	4632      	mov	r2, r6
 800856e:	9009      	str	r0, [sp, #36]	; 0x24
 8008570:	4621      	mov	r1, r4
 8008572:	4628      	mov	r0, r5
 8008574:	f000 fcb4 	bl	8008ee0 <__mdiff>
 8008578:	68c2      	ldr	r2, [r0, #12]
 800857a:	4607      	mov	r7, r0
 800857c:	bb02      	cbnz	r2, 80085c0 <_dtoa_r+0xa60>
 800857e:	4601      	mov	r1, r0
 8008580:	4650      	mov	r0, sl
 8008582:	f000 fc91 	bl	8008ea8 <__mcmp>
 8008586:	4602      	mov	r2, r0
 8008588:	4639      	mov	r1, r7
 800858a:	4628      	mov	r0, r5
 800858c:	920c      	str	r2, [sp, #48]	; 0x30
 800858e:	f000 fa07 	bl	80089a0 <_Bfree>
 8008592:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008594:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008596:	9f08      	ldr	r7, [sp, #32]
 8008598:	ea43 0102 	orr.w	r1, r3, r2
 800859c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800859e:	4319      	orrs	r1, r3
 80085a0:	d110      	bne.n	80085c4 <_dtoa_r+0xa64>
 80085a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80085a6:	d029      	beq.n	80085fc <_dtoa_r+0xa9c>
 80085a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	dd02      	ble.n	80085b4 <_dtoa_r+0xa54>
 80085ae:	9b06      	ldr	r3, [sp, #24]
 80085b0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80085b4:	9b04      	ldr	r3, [sp, #16]
 80085b6:	f883 9000 	strb.w	r9, [r3]
 80085ba:	e777      	b.n	80084ac <_dtoa_r+0x94c>
 80085bc:	4630      	mov	r0, r6
 80085be:	e7ba      	b.n	8008536 <_dtoa_r+0x9d6>
 80085c0:	2201      	movs	r2, #1
 80085c2:	e7e1      	b.n	8008588 <_dtoa_r+0xa28>
 80085c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	db04      	blt.n	80085d4 <_dtoa_r+0xa74>
 80085ca:	9922      	ldr	r1, [sp, #136]	; 0x88
 80085cc:	430b      	orrs	r3, r1
 80085ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80085d0:	430b      	orrs	r3, r1
 80085d2:	d120      	bne.n	8008616 <_dtoa_r+0xab6>
 80085d4:	2a00      	cmp	r2, #0
 80085d6:	dded      	ble.n	80085b4 <_dtoa_r+0xa54>
 80085d8:	4651      	mov	r1, sl
 80085da:	2201      	movs	r2, #1
 80085dc:	4628      	mov	r0, r5
 80085de:	f000 fbf7 	bl	8008dd0 <__lshift>
 80085e2:	4621      	mov	r1, r4
 80085e4:	4682      	mov	sl, r0
 80085e6:	f000 fc5f 	bl	8008ea8 <__mcmp>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	dc03      	bgt.n	80085f6 <_dtoa_r+0xa96>
 80085ee:	d1e1      	bne.n	80085b4 <_dtoa_r+0xa54>
 80085f0:	f019 0f01 	tst.w	r9, #1
 80085f4:	d0de      	beq.n	80085b4 <_dtoa_r+0xa54>
 80085f6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80085fa:	d1d8      	bne.n	80085ae <_dtoa_r+0xa4e>
 80085fc:	2339      	movs	r3, #57	; 0x39
 80085fe:	9a04      	ldr	r2, [sp, #16]
 8008600:	7013      	strb	r3, [r2, #0]
 8008602:	463b      	mov	r3, r7
 8008604:	461f      	mov	r7, r3
 8008606:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800860a:	3b01      	subs	r3, #1
 800860c:	2a39      	cmp	r2, #57	; 0x39
 800860e:	d06b      	beq.n	80086e8 <_dtoa_r+0xb88>
 8008610:	3201      	adds	r2, #1
 8008612:	701a      	strb	r2, [r3, #0]
 8008614:	e74a      	b.n	80084ac <_dtoa_r+0x94c>
 8008616:	2a00      	cmp	r2, #0
 8008618:	dd07      	ble.n	800862a <_dtoa_r+0xaca>
 800861a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800861e:	d0ed      	beq.n	80085fc <_dtoa_r+0xa9c>
 8008620:	9a04      	ldr	r2, [sp, #16]
 8008622:	f109 0301 	add.w	r3, r9, #1
 8008626:	7013      	strb	r3, [r2, #0]
 8008628:	e740      	b.n	80084ac <_dtoa_r+0x94c>
 800862a:	9b08      	ldr	r3, [sp, #32]
 800862c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800862e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008632:	4293      	cmp	r3, r2
 8008634:	d042      	beq.n	80086bc <_dtoa_r+0xb5c>
 8008636:	4651      	mov	r1, sl
 8008638:	2300      	movs	r3, #0
 800863a:	220a      	movs	r2, #10
 800863c:	4628      	mov	r0, r5
 800863e:	f000 f9d1 	bl	80089e4 <__multadd>
 8008642:	45b0      	cmp	r8, r6
 8008644:	4682      	mov	sl, r0
 8008646:	f04f 0300 	mov.w	r3, #0
 800864a:	f04f 020a 	mov.w	r2, #10
 800864e:	4641      	mov	r1, r8
 8008650:	4628      	mov	r0, r5
 8008652:	d107      	bne.n	8008664 <_dtoa_r+0xb04>
 8008654:	f000 f9c6 	bl	80089e4 <__multadd>
 8008658:	4680      	mov	r8, r0
 800865a:	4606      	mov	r6, r0
 800865c:	9b08      	ldr	r3, [sp, #32]
 800865e:	3301      	adds	r3, #1
 8008660:	9308      	str	r3, [sp, #32]
 8008662:	e775      	b.n	8008550 <_dtoa_r+0x9f0>
 8008664:	f000 f9be 	bl	80089e4 <__multadd>
 8008668:	4631      	mov	r1, r6
 800866a:	4680      	mov	r8, r0
 800866c:	2300      	movs	r3, #0
 800866e:	220a      	movs	r2, #10
 8008670:	4628      	mov	r0, r5
 8008672:	f000 f9b7 	bl	80089e4 <__multadd>
 8008676:	4606      	mov	r6, r0
 8008678:	e7f0      	b.n	800865c <_dtoa_r+0xafc>
 800867a:	9b08      	ldr	r3, [sp, #32]
 800867c:	9306      	str	r3, [sp, #24]
 800867e:	9f03      	ldr	r7, [sp, #12]
 8008680:	4621      	mov	r1, r4
 8008682:	4650      	mov	r0, sl
 8008684:	f7ff f9e2 	bl	8007a4c <quorem>
 8008688:	9b03      	ldr	r3, [sp, #12]
 800868a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800868e:	f807 9b01 	strb.w	r9, [r7], #1
 8008692:	1afa      	subs	r2, r7, r3
 8008694:	9b06      	ldr	r3, [sp, #24]
 8008696:	4293      	cmp	r3, r2
 8008698:	dd07      	ble.n	80086aa <_dtoa_r+0xb4a>
 800869a:	4651      	mov	r1, sl
 800869c:	2300      	movs	r3, #0
 800869e:	220a      	movs	r2, #10
 80086a0:	4628      	mov	r0, r5
 80086a2:	f000 f99f 	bl	80089e4 <__multadd>
 80086a6:	4682      	mov	sl, r0
 80086a8:	e7ea      	b.n	8008680 <_dtoa_r+0xb20>
 80086aa:	9b06      	ldr	r3, [sp, #24]
 80086ac:	f04f 0800 	mov.w	r8, #0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	bfcc      	ite	gt
 80086b4:	461f      	movgt	r7, r3
 80086b6:	2701      	movle	r7, #1
 80086b8:	9b03      	ldr	r3, [sp, #12]
 80086ba:	441f      	add	r7, r3
 80086bc:	4651      	mov	r1, sl
 80086be:	2201      	movs	r2, #1
 80086c0:	4628      	mov	r0, r5
 80086c2:	f000 fb85 	bl	8008dd0 <__lshift>
 80086c6:	4621      	mov	r1, r4
 80086c8:	4682      	mov	sl, r0
 80086ca:	f000 fbed 	bl	8008ea8 <__mcmp>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	dc97      	bgt.n	8008602 <_dtoa_r+0xaa2>
 80086d2:	d102      	bne.n	80086da <_dtoa_r+0xb7a>
 80086d4:	f019 0f01 	tst.w	r9, #1
 80086d8:	d193      	bne.n	8008602 <_dtoa_r+0xaa2>
 80086da:	463b      	mov	r3, r7
 80086dc:	461f      	mov	r7, r3
 80086de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086e2:	2a30      	cmp	r2, #48	; 0x30
 80086e4:	d0fa      	beq.n	80086dc <_dtoa_r+0xb7c>
 80086e6:	e6e1      	b.n	80084ac <_dtoa_r+0x94c>
 80086e8:	9a03      	ldr	r2, [sp, #12]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d18a      	bne.n	8008604 <_dtoa_r+0xaa4>
 80086ee:	2331      	movs	r3, #49	; 0x31
 80086f0:	f10b 0b01 	add.w	fp, fp, #1
 80086f4:	e797      	b.n	8008626 <_dtoa_r+0xac6>
 80086f6:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <_dtoa_r+0xbc0>)
 80086f8:	f7ff ba9f 	b.w	8007c3a <_dtoa_r+0xda>
 80086fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f47f aa77 	bne.w	8007bf2 <_dtoa_r+0x92>
 8008704:	4b07      	ldr	r3, [pc, #28]	; (8008724 <_dtoa_r+0xbc4>)
 8008706:	f7ff ba98 	b.w	8007c3a <_dtoa_r+0xda>
 800870a:	9b06      	ldr	r3, [sp, #24]
 800870c:	2b00      	cmp	r3, #0
 800870e:	dcb6      	bgt.n	800867e <_dtoa_r+0xb1e>
 8008710:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008712:	2b02      	cmp	r3, #2
 8008714:	f73f aeb5 	bgt.w	8008482 <_dtoa_r+0x922>
 8008718:	e7b1      	b.n	800867e <_dtoa_r+0xb1e>
 800871a:	bf00      	nop
 800871c:	0800b2af 	.word	0x0800b2af
 8008720:	0800b20a 	.word	0x0800b20a
 8008724:	0800b233 	.word	0x0800b233

08008728 <_free_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4605      	mov	r5, r0
 800872c:	2900      	cmp	r1, #0
 800872e:	d040      	beq.n	80087b2 <_free_r+0x8a>
 8008730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008734:	1f0c      	subs	r4, r1, #4
 8008736:	2b00      	cmp	r3, #0
 8008738:	bfb8      	it	lt
 800873a:	18e4      	addlt	r4, r4, r3
 800873c:	f000 f8e4 	bl	8008908 <__malloc_lock>
 8008740:	4a1c      	ldr	r2, [pc, #112]	; (80087b4 <_free_r+0x8c>)
 8008742:	6813      	ldr	r3, [r2, #0]
 8008744:	b933      	cbnz	r3, 8008754 <_free_r+0x2c>
 8008746:	6063      	str	r3, [r4, #4]
 8008748:	6014      	str	r4, [r2, #0]
 800874a:	4628      	mov	r0, r5
 800874c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008750:	f000 b8e0 	b.w	8008914 <__malloc_unlock>
 8008754:	42a3      	cmp	r3, r4
 8008756:	d908      	bls.n	800876a <_free_r+0x42>
 8008758:	6820      	ldr	r0, [r4, #0]
 800875a:	1821      	adds	r1, r4, r0
 800875c:	428b      	cmp	r3, r1
 800875e:	bf01      	itttt	eq
 8008760:	6819      	ldreq	r1, [r3, #0]
 8008762:	685b      	ldreq	r3, [r3, #4]
 8008764:	1809      	addeq	r1, r1, r0
 8008766:	6021      	streq	r1, [r4, #0]
 8008768:	e7ed      	b.n	8008746 <_free_r+0x1e>
 800876a:	461a      	mov	r2, r3
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	b10b      	cbz	r3, 8008774 <_free_r+0x4c>
 8008770:	42a3      	cmp	r3, r4
 8008772:	d9fa      	bls.n	800876a <_free_r+0x42>
 8008774:	6811      	ldr	r1, [r2, #0]
 8008776:	1850      	adds	r0, r2, r1
 8008778:	42a0      	cmp	r0, r4
 800877a:	d10b      	bne.n	8008794 <_free_r+0x6c>
 800877c:	6820      	ldr	r0, [r4, #0]
 800877e:	4401      	add	r1, r0
 8008780:	1850      	adds	r0, r2, r1
 8008782:	4283      	cmp	r3, r0
 8008784:	6011      	str	r1, [r2, #0]
 8008786:	d1e0      	bne.n	800874a <_free_r+0x22>
 8008788:	6818      	ldr	r0, [r3, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	4408      	add	r0, r1
 800878e:	6010      	str	r0, [r2, #0]
 8008790:	6053      	str	r3, [r2, #4]
 8008792:	e7da      	b.n	800874a <_free_r+0x22>
 8008794:	d902      	bls.n	800879c <_free_r+0x74>
 8008796:	230c      	movs	r3, #12
 8008798:	602b      	str	r3, [r5, #0]
 800879a:	e7d6      	b.n	800874a <_free_r+0x22>
 800879c:	6820      	ldr	r0, [r4, #0]
 800879e:	1821      	adds	r1, r4, r0
 80087a0:	428b      	cmp	r3, r1
 80087a2:	bf01      	itttt	eq
 80087a4:	6819      	ldreq	r1, [r3, #0]
 80087a6:	685b      	ldreq	r3, [r3, #4]
 80087a8:	1809      	addeq	r1, r1, r0
 80087aa:	6021      	streq	r1, [r4, #0]
 80087ac:	6063      	str	r3, [r4, #4]
 80087ae:	6054      	str	r4, [r2, #4]
 80087b0:	e7cb      	b.n	800874a <_free_r+0x22>
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	20000418 	.word	0x20000418

080087b8 <malloc>:
 80087b8:	4b02      	ldr	r3, [pc, #8]	; (80087c4 <malloc+0xc>)
 80087ba:	4601      	mov	r1, r0
 80087bc:	6818      	ldr	r0, [r3, #0]
 80087be:	f000 b823 	b.w	8008808 <_malloc_r>
 80087c2:	bf00      	nop
 80087c4:	20000064 	.word	0x20000064

080087c8 <sbrk_aligned>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	4e0e      	ldr	r6, [pc, #56]	; (8008804 <sbrk_aligned+0x3c>)
 80087cc:	460c      	mov	r4, r1
 80087ce:	6831      	ldr	r1, [r6, #0]
 80087d0:	4605      	mov	r5, r0
 80087d2:	b911      	cbnz	r1, 80087da <sbrk_aligned+0x12>
 80087d4:	f001 fe0c 	bl	800a3f0 <_sbrk_r>
 80087d8:	6030      	str	r0, [r6, #0]
 80087da:	4621      	mov	r1, r4
 80087dc:	4628      	mov	r0, r5
 80087de:	f001 fe07 	bl	800a3f0 <_sbrk_r>
 80087e2:	1c43      	adds	r3, r0, #1
 80087e4:	d00a      	beq.n	80087fc <sbrk_aligned+0x34>
 80087e6:	1cc4      	adds	r4, r0, #3
 80087e8:	f024 0403 	bic.w	r4, r4, #3
 80087ec:	42a0      	cmp	r0, r4
 80087ee:	d007      	beq.n	8008800 <sbrk_aligned+0x38>
 80087f0:	1a21      	subs	r1, r4, r0
 80087f2:	4628      	mov	r0, r5
 80087f4:	f001 fdfc 	bl	800a3f0 <_sbrk_r>
 80087f8:	3001      	adds	r0, #1
 80087fa:	d101      	bne.n	8008800 <sbrk_aligned+0x38>
 80087fc:	f04f 34ff 	mov.w	r4, #4294967295
 8008800:	4620      	mov	r0, r4
 8008802:	bd70      	pop	{r4, r5, r6, pc}
 8008804:	2000041c 	.word	0x2000041c

08008808 <_malloc_r>:
 8008808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800880c:	1ccd      	adds	r5, r1, #3
 800880e:	f025 0503 	bic.w	r5, r5, #3
 8008812:	3508      	adds	r5, #8
 8008814:	2d0c      	cmp	r5, #12
 8008816:	bf38      	it	cc
 8008818:	250c      	movcc	r5, #12
 800881a:	2d00      	cmp	r5, #0
 800881c:	4607      	mov	r7, r0
 800881e:	db01      	blt.n	8008824 <_malloc_r+0x1c>
 8008820:	42a9      	cmp	r1, r5
 8008822:	d905      	bls.n	8008830 <_malloc_r+0x28>
 8008824:	230c      	movs	r3, #12
 8008826:	2600      	movs	r6, #0
 8008828:	603b      	str	r3, [r7, #0]
 800882a:	4630      	mov	r0, r6
 800882c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008830:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008904 <_malloc_r+0xfc>
 8008834:	f000 f868 	bl	8008908 <__malloc_lock>
 8008838:	f8d8 3000 	ldr.w	r3, [r8]
 800883c:	461c      	mov	r4, r3
 800883e:	bb5c      	cbnz	r4, 8008898 <_malloc_r+0x90>
 8008840:	4629      	mov	r1, r5
 8008842:	4638      	mov	r0, r7
 8008844:	f7ff ffc0 	bl	80087c8 <sbrk_aligned>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	4604      	mov	r4, r0
 800884c:	d155      	bne.n	80088fa <_malloc_r+0xf2>
 800884e:	f8d8 4000 	ldr.w	r4, [r8]
 8008852:	4626      	mov	r6, r4
 8008854:	2e00      	cmp	r6, #0
 8008856:	d145      	bne.n	80088e4 <_malloc_r+0xdc>
 8008858:	2c00      	cmp	r4, #0
 800885a:	d048      	beq.n	80088ee <_malloc_r+0xe6>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	4631      	mov	r1, r6
 8008860:	4638      	mov	r0, r7
 8008862:	eb04 0903 	add.w	r9, r4, r3
 8008866:	f001 fdc3 	bl	800a3f0 <_sbrk_r>
 800886a:	4581      	cmp	r9, r0
 800886c:	d13f      	bne.n	80088ee <_malloc_r+0xe6>
 800886e:	6821      	ldr	r1, [r4, #0]
 8008870:	4638      	mov	r0, r7
 8008872:	1a6d      	subs	r5, r5, r1
 8008874:	4629      	mov	r1, r5
 8008876:	f7ff ffa7 	bl	80087c8 <sbrk_aligned>
 800887a:	3001      	adds	r0, #1
 800887c:	d037      	beq.n	80088ee <_malloc_r+0xe6>
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	442b      	add	r3, r5
 8008882:	6023      	str	r3, [r4, #0]
 8008884:	f8d8 3000 	ldr.w	r3, [r8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d038      	beq.n	80088fe <_malloc_r+0xf6>
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	42a2      	cmp	r2, r4
 8008890:	d12b      	bne.n	80088ea <_malloc_r+0xe2>
 8008892:	2200      	movs	r2, #0
 8008894:	605a      	str	r2, [r3, #4]
 8008896:	e00f      	b.n	80088b8 <_malloc_r+0xb0>
 8008898:	6822      	ldr	r2, [r4, #0]
 800889a:	1b52      	subs	r2, r2, r5
 800889c:	d41f      	bmi.n	80088de <_malloc_r+0xd6>
 800889e:	2a0b      	cmp	r2, #11
 80088a0:	d917      	bls.n	80088d2 <_malloc_r+0xca>
 80088a2:	1961      	adds	r1, r4, r5
 80088a4:	42a3      	cmp	r3, r4
 80088a6:	6025      	str	r5, [r4, #0]
 80088a8:	bf18      	it	ne
 80088aa:	6059      	strne	r1, [r3, #4]
 80088ac:	6863      	ldr	r3, [r4, #4]
 80088ae:	bf08      	it	eq
 80088b0:	f8c8 1000 	streq.w	r1, [r8]
 80088b4:	5162      	str	r2, [r4, r5]
 80088b6:	604b      	str	r3, [r1, #4]
 80088b8:	4638      	mov	r0, r7
 80088ba:	f104 060b 	add.w	r6, r4, #11
 80088be:	f000 f829 	bl	8008914 <__malloc_unlock>
 80088c2:	f026 0607 	bic.w	r6, r6, #7
 80088c6:	1d23      	adds	r3, r4, #4
 80088c8:	1af2      	subs	r2, r6, r3
 80088ca:	d0ae      	beq.n	800882a <_malloc_r+0x22>
 80088cc:	1b9b      	subs	r3, r3, r6
 80088ce:	50a3      	str	r3, [r4, r2]
 80088d0:	e7ab      	b.n	800882a <_malloc_r+0x22>
 80088d2:	42a3      	cmp	r3, r4
 80088d4:	6862      	ldr	r2, [r4, #4]
 80088d6:	d1dd      	bne.n	8008894 <_malloc_r+0x8c>
 80088d8:	f8c8 2000 	str.w	r2, [r8]
 80088dc:	e7ec      	b.n	80088b8 <_malloc_r+0xb0>
 80088de:	4623      	mov	r3, r4
 80088e0:	6864      	ldr	r4, [r4, #4]
 80088e2:	e7ac      	b.n	800883e <_malloc_r+0x36>
 80088e4:	4634      	mov	r4, r6
 80088e6:	6876      	ldr	r6, [r6, #4]
 80088e8:	e7b4      	b.n	8008854 <_malloc_r+0x4c>
 80088ea:	4613      	mov	r3, r2
 80088ec:	e7cc      	b.n	8008888 <_malloc_r+0x80>
 80088ee:	230c      	movs	r3, #12
 80088f0:	4638      	mov	r0, r7
 80088f2:	603b      	str	r3, [r7, #0]
 80088f4:	f000 f80e 	bl	8008914 <__malloc_unlock>
 80088f8:	e797      	b.n	800882a <_malloc_r+0x22>
 80088fa:	6025      	str	r5, [r4, #0]
 80088fc:	e7dc      	b.n	80088b8 <_malloc_r+0xb0>
 80088fe:	605b      	str	r3, [r3, #4]
 8008900:	deff      	udf	#255	; 0xff
 8008902:	bf00      	nop
 8008904:	20000418 	.word	0x20000418

08008908 <__malloc_lock>:
 8008908:	4801      	ldr	r0, [pc, #4]	; (8008910 <__malloc_lock+0x8>)
 800890a:	f7ff b88a 	b.w	8007a22 <__retarget_lock_acquire_recursive>
 800890e:	bf00      	nop
 8008910:	20000414 	.word	0x20000414

08008914 <__malloc_unlock>:
 8008914:	4801      	ldr	r0, [pc, #4]	; (800891c <__malloc_unlock+0x8>)
 8008916:	f7ff b885 	b.w	8007a24 <__retarget_lock_release_recursive>
 800891a:	bf00      	nop
 800891c:	20000414 	.word	0x20000414

08008920 <_Balloc>:
 8008920:	b570      	push	{r4, r5, r6, lr}
 8008922:	69c6      	ldr	r6, [r0, #28]
 8008924:	4604      	mov	r4, r0
 8008926:	460d      	mov	r5, r1
 8008928:	b976      	cbnz	r6, 8008948 <_Balloc+0x28>
 800892a:	2010      	movs	r0, #16
 800892c:	f7ff ff44 	bl	80087b8 <malloc>
 8008930:	4602      	mov	r2, r0
 8008932:	61e0      	str	r0, [r4, #28]
 8008934:	b920      	cbnz	r0, 8008940 <_Balloc+0x20>
 8008936:	216b      	movs	r1, #107	; 0x6b
 8008938:	4b17      	ldr	r3, [pc, #92]	; (8008998 <_Balloc+0x78>)
 800893a:	4818      	ldr	r0, [pc, #96]	; (800899c <_Balloc+0x7c>)
 800893c:	f001 fd7c 	bl	800a438 <__assert_func>
 8008940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008944:	6006      	str	r6, [r0, #0]
 8008946:	60c6      	str	r6, [r0, #12]
 8008948:	69e6      	ldr	r6, [r4, #28]
 800894a:	68f3      	ldr	r3, [r6, #12]
 800894c:	b183      	cbz	r3, 8008970 <_Balloc+0x50>
 800894e:	69e3      	ldr	r3, [r4, #28]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008956:	b9b8      	cbnz	r0, 8008988 <_Balloc+0x68>
 8008958:	2101      	movs	r1, #1
 800895a:	fa01 f605 	lsl.w	r6, r1, r5
 800895e:	1d72      	adds	r2, r6, #5
 8008960:	4620      	mov	r0, r4
 8008962:	0092      	lsls	r2, r2, #2
 8008964:	f001 fd86 	bl	800a474 <_calloc_r>
 8008968:	b160      	cbz	r0, 8008984 <_Balloc+0x64>
 800896a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800896e:	e00e      	b.n	800898e <_Balloc+0x6e>
 8008970:	2221      	movs	r2, #33	; 0x21
 8008972:	2104      	movs	r1, #4
 8008974:	4620      	mov	r0, r4
 8008976:	f001 fd7d 	bl	800a474 <_calloc_r>
 800897a:	69e3      	ldr	r3, [r4, #28]
 800897c:	60f0      	str	r0, [r6, #12]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e4      	bne.n	800894e <_Balloc+0x2e>
 8008984:	2000      	movs	r0, #0
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	6802      	ldr	r2, [r0, #0]
 800898a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800898e:	2300      	movs	r3, #0
 8008990:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008994:	e7f7      	b.n	8008986 <_Balloc+0x66>
 8008996:	bf00      	nop
 8008998:	0800b240 	.word	0x0800b240
 800899c:	0800b2c0 	.word	0x0800b2c0

080089a0 <_Bfree>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	69c6      	ldr	r6, [r0, #28]
 80089a4:	4605      	mov	r5, r0
 80089a6:	460c      	mov	r4, r1
 80089a8:	b976      	cbnz	r6, 80089c8 <_Bfree+0x28>
 80089aa:	2010      	movs	r0, #16
 80089ac:	f7ff ff04 	bl	80087b8 <malloc>
 80089b0:	4602      	mov	r2, r0
 80089b2:	61e8      	str	r0, [r5, #28]
 80089b4:	b920      	cbnz	r0, 80089c0 <_Bfree+0x20>
 80089b6:	218f      	movs	r1, #143	; 0x8f
 80089b8:	4b08      	ldr	r3, [pc, #32]	; (80089dc <_Bfree+0x3c>)
 80089ba:	4809      	ldr	r0, [pc, #36]	; (80089e0 <_Bfree+0x40>)
 80089bc:	f001 fd3c 	bl	800a438 <__assert_func>
 80089c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089c4:	6006      	str	r6, [r0, #0]
 80089c6:	60c6      	str	r6, [r0, #12]
 80089c8:	b13c      	cbz	r4, 80089da <_Bfree+0x3a>
 80089ca:	69eb      	ldr	r3, [r5, #28]
 80089cc:	6862      	ldr	r2, [r4, #4]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089d4:	6021      	str	r1, [r4, #0]
 80089d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089da:	bd70      	pop	{r4, r5, r6, pc}
 80089dc:	0800b240 	.word	0x0800b240
 80089e0:	0800b2c0 	.word	0x0800b2c0

080089e4 <__multadd>:
 80089e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e8:	4607      	mov	r7, r0
 80089ea:	460c      	mov	r4, r1
 80089ec:	461e      	mov	r6, r3
 80089ee:	2000      	movs	r0, #0
 80089f0:	690d      	ldr	r5, [r1, #16]
 80089f2:	f101 0c14 	add.w	ip, r1, #20
 80089f6:	f8dc 3000 	ldr.w	r3, [ip]
 80089fa:	3001      	adds	r0, #1
 80089fc:	b299      	uxth	r1, r3
 80089fe:	fb02 6101 	mla	r1, r2, r1, r6
 8008a02:	0c1e      	lsrs	r6, r3, #16
 8008a04:	0c0b      	lsrs	r3, r1, #16
 8008a06:	fb02 3306 	mla	r3, r2, r6, r3
 8008a0a:	b289      	uxth	r1, r1
 8008a0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a10:	4285      	cmp	r5, r0
 8008a12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a16:	f84c 1b04 	str.w	r1, [ip], #4
 8008a1a:	dcec      	bgt.n	80089f6 <__multadd+0x12>
 8008a1c:	b30e      	cbz	r6, 8008a62 <__multadd+0x7e>
 8008a1e:	68a3      	ldr	r3, [r4, #8]
 8008a20:	42ab      	cmp	r3, r5
 8008a22:	dc19      	bgt.n	8008a58 <__multadd+0x74>
 8008a24:	6861      	ldr	r1, [r4, #4]
 8008a26:	4638      	mov	r0, r7
 8008a28:	3101      	adds	r1, #1
 8008a2a:	f7ff ff79 	bl	8008920 <_Balloc>
 8008a2e:	4680      	mov	r8, r0
 8008a30:	b928      	cbnz	r0, 8008a3e <__multadd+0x5a>
 8008a32:	4602      	mov	r2, r0
 8008a34:	21ba      	movs	r1, #186	; 0xba
 8008a36:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <__multadd+0x84>)
 8008a38:	480c      	ldr	r0, [pc, #48]	; (8008a6c <__multadd+0x88>)
 8008a3a:	f001 fcfd 	bl	800a438 <__assert_func>
 8008a3e:	6922      	ldr	r2, [r4, #16]
 8008a40:	f104 010c 	add.w	r1, r4, #12
 8008a44:	3202      	adds	r2, #2
 8008a46:	0092      	lsls	r2, r2, #2
 8008a48:	300c      	adds	r0, #12
 8008a4a:	f001 fce1 	bl	800a410 <memcpy>
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4638      	mov	r0, r7
 8008a52:	f7ff ffa5 	bl	80089a0 <_Bfree>
 8008a56:	4644      	mov	r4, r8
 8008a58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a5c:	3501      	adds	r5, #1
 8008a5e:	615e      	str	r6, [r3, #20]
 8008a60:	6125      	str	r5, [r4, #16]
 8008a62:	4620      	mov	r0, r4
 8008a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a68:	0800b2af 	.word	0x0800b2af
 8008a6c:	0800b2c0 	.word	0x0800b2c0

08008a70 <__s2b>:
 8008a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a74:	4615      	mov	r5, r2
 8008a76:	2209      	movs	r2, #9
 8008a78:	461f      	mov	r7, r3
 8008a7a:	3308      	adds	r3, #8
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a82:	4606      	mov	r6, r0
 8008a84:	2201      	movs	r2, #1
 8008a86:	2100      	movs	r1, #0
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	db09      	blt.n	8008aa0 <__s2b+0x30>
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	f7ff ff47 	bl	8008920 <_Balloc>
 8008a92:	b940      	cbnz	r0, 8008aa6 <__s2b+0x36>
 8008a94:	4602      	mov	r2, r0
 8008a96:	21d3      	movs	r1, #211	; 0xd3
 8008a98:	4b18      	ldr	r3, [pc, #96]	; (8008afc <__s2b+0x8c>)
 8008a9a:	4819      	ldr	r0, [pc, #100]	; (8008b00 <__s2b+0x90>)
 8008a9c:	f001 fccc 	bl	800a438 <__assert_func>
 8008aa0:	0052      	lsls	r2, r2, #1
 8008aa2:	3101      	adds	r1, #1
 8008aa4:	e7f0      	b.n	8008a88 <__s2b+0x18>
 8008aa6:	9b08      	ldr	r3, [sp, #32]
 8008aa8:	2d09      	cmp	r5, #9
 8008aaa:	6143      	str	r3, [r0, #20]
 8008aac:	f04f 0301 	mov.w	r3, #1
 8008ab0:	6103      	str	r3, [r0, #16]
 8008ab2:	dd16      	ble.n	8008ae2 <__s2b+0x72>
 8008ab4:	f104 0909 	add.w	r9, r4, #9
 8008ab8:	46c8      	mov	r8, r9
 8008aba:	442c      	add	r4, r5
 8008abc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ac0:	4601      	mov	r1, r0
 8008ac2:	220a      	movs	r2, #10
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	3b30      	subs	r3, #48	; 0x30
 8008ac8:	f7ff ff8c 	bl	80089e4 <__multadd>
 8008acc:	45a0      	cmp	r8, r4
 8008ace:	d1f5      	bne.n	8008abc <__s2b+0x4c>
 8008ad0:	f1a5 0408 	sub.w	r4, r5, #8
 8008ad4:	444c      	add	r4, r9
 8008ad6:	1b2d      	subs	r5, r5, r4
 8008ad8:	1963      	adds	r3, r4, r5
 8008ada:	42bb      	cmp	r3, r7
 8008adc:	db04      	blt.n	8008ae8 <__s2b+0x78>
 8008ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ae2:	2509      	movs	r5, #9
 8008ae4:	340a      	adds	r4, #10
 8008ae6:	e7f6      	b.n	8008ad6 <__s2b+0x66>
 8008ae8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008aec:	4601      	mov	r1, r0
 8008aee:	220a      	movs	r2, #10
 8008af0:	4630      	mov	r0, r6
 8008af2:	3b30      	subs	r3, #48	; 0x30
 8008af4:	f7ff ff76 	bl	80089e4 <__multadd>
 8008af8:	e7ee      	b.n	8008ad8 <__s2b+0x68>
 8008afa:	bf00      	nop
 8008afc:	0800b2af 	.word	0x0800b2af
 8008b00:	0800b2c0 	.word	0x0800b2c0

08008b04 <__hi0bits>:
 8008b04:	0c02      	lsrs	r2, r0, #16
 8008b06:	0412      	lsls	r2, r2, #16
 8008b08:	4603      	mov	r3, r0
 8008b0a:	b9ca      	cbnz	r2, 8008b40 <__hi0bits+0x3c>
 8008b0c:	0403      	lsls	r3, r0, #16
 8008b0e:	2010      	movs	r0, #16
 8008b10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008b14:	bf04      	itt	eq
 8008b16:	021b      	lsleq	r3, r3, #8
 8008b18:	3008      	addeq	r0, #8
 8008b1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008b1e:	bf04      	itt	eq
 8008b20:	011b      	lsleq	r3, r3, #4
 8008b22:	3004      	addeq	r0, #4
 8008b24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008b28:	bf04      	itt	eq
 8008b2a:	009b      	lsleq	r3, r3, #2
 8008b2c:	3002      	addeq	r0, #2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	db05      	blt.n	8008b3e <__hi0bits+0x3a>
 8008b32:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008b36:	f100 0001 	add.w	r0, r0, #1
 8008b3a:	bf08      	it	eq
 8008b3c:	2020      	moveq	r0, #32
 8008b3e:	4770      	bx	lr
 8008b40:	2000      	movs	r0, #0
 8008b42:	e7e5      	b.n	8008b10 <__hi0bits+0xc>

08008b44 <__lo0bits>:
 8008b44:	6803      	ldr	r3, [r0, #0]
 8008b46:	4602      	mov	r2, r0
 8008b48:	f013 0007 	ands.w	r0, r3, #7
 8008b4c:	d00b      	beq.n	8008b66 <__lo0bits+0x22>
 8008b4e:	07d9      	lsls	r1, r3, #31
 8008b50:	d421      	bmi.n	8008b96 <__lo0bits+0x52>
 8008b52:	0798      	lsls	r0, r3, #30
 8008b54:	bf49      	itett	mi
 8008b56:	085b      	lsrmi	r3, r3, #1
 8008b58:	089b      	lsrpl	r3, r3, #2
 8008b5a:	2001      	movmi	r0, #1
 8008b5c:	6013      	strmi	r3, [r2, #0]
 8008b5e:	bf5c      	itt	pl
 8008b60:	2002      	movpl	r0, #2
 8008b62:	6013      	strpl	r3, [r2, #0]
 8008b64:	4770      	bx	lr
 8008b66:	b299      	uxth	r1, r3
 8008b68:	b909      	cbnz	r1, 8008b6e <__lo0bits+0x2a>
 8008b6a:	2010      	movs	r0, #16
 8008b6c:	0c1b      	lsrs	r3, r3, #16
 8008b6e:	b2d9      	uxtb	r1, r3
 8008b70:	b909      	cbnz	r1, 8008b76 <__lo0bits+0x32>
 8008b72:	3008      	adds	r0, #8
 8008b74:	0a1b      	lsrs	r3, r3, #8
 8008b76:	0719      	lsls	r1, r3, #28
 8008b78:	bf04      	itt	eq
 8008b7a:	091b      	lsreq	r3, r3, #4
 8008b7c:	3004      	addeq	r0, #4
 8008b7e:	0799      	lsls	r1, r3, #30
 8008b80:	bf04      	itt	eq
 8008b82:	089b      	lsreq	r3, r3, #2
 8008b84:	3002      	addeq	r0, #2
 8008b86:	07d9      	lsls	r1, r3, #31
 8008b88:	d403      	bmi.n	8008b92 <__lo0bits+0x4e>
 8008b8a:	085b      	lsrs	r3, r3, #1
 8008b8c:	f100 0001 	add.w	r0, r0, #1
 8008b90:	d003      	beq.n	8008b9a <__lo0bits+0x56>
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	4770      	bx	lr
 8008b96:	2000      	movs	r0, #0
 8008b98:	4770      	bx	lr
 8008b9a:	2020      	movs	r0, #32
 8008b9c:	4770      	bx	lr
	...

08008ba0 <__i2b>:
 8008ba0:	b510      	push	{r4, lr}
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	f7ff febb 	bl	8008920 <_Balloc>
 8008baa:	4602      	mov	r2, r0
 8008bac:	b928      	cbnz	r0, 8008bba <__i2b+0x1a>
 8008bae:	f240 1145 	movw	r1, #325	; 0x145
 8008bb2:	4b04      	ldr	r3, [pc, #16]	; (8008bc4 <__i2b+0x24>)
 8008bb4:	4804      	ldr	r0, [pc, #16]	; (8008bc8 <__i2b+0x28>)
 8008bb6:	f001 fc3f 	bl	800a438 <__assert_func>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	6144      	str	r4, [r0, #20]
 8008bbe:	6103      	str	r3, [r0, #16]
 8008bc0:	bd10      	pop	{r4, pc}
 8008bc2:	bf00      	nop
 8008bc4:	0800b2af 	.word	0x0800b2af
 8008bc8:	0800b2c0 	.word	0x0800b2c0

08008bcc <__multiply>:
 8008bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd0:	4691      	mov	r9, r2
 8008bd2:	690a      	ldr	r2, [r1, #16]
 8008bd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bd8:	460c      	mov	r4, r1
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	bfbe      	ittt	lt
 8008bde:	460b      	movlt	r3, r1
 8008be0:	464c      	movlt	r4, r9
 8008be2:	4699      	movlt	r9, r3
 8008be4:	6927      	ldr	r7, [r4, #16]
 8008be6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008bea:	68a3      	ldr	r3, [r4, #8]
 8008bec:	6861      	ldr	r1, [r4, #4]
 8008bee:	eb07 060a 	add.w	r6, r7, sl
 8008bf2:	42b3      	cmp	r3, r6
 8008bf4:	b085      	sub	sp, #20
 8008bf6:	bfb8      	it	lt
 8008bf8:	3101      	addlt	r1, #1
 8008bfa:	f7ff fe91 	bl	8008920 <_Balloc>
 8008bfe:	b930      	cbnz	r0, 8008c0e <__multiply+0x42>
 8008c00:	4602      	mov	r2, r0
 8008c02:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008c06:	4b43      	ldr	r3, [pc, #268]	; (8008d14 <__multiply+0x148>)
 8008c08:	4843      	ldr	r0, [pc, #268]	; (8008d18 <__multiply+0x14c>)
 8008c0a:	f001 fc15 	bl	800a438 <__assert_func>
 8008c0e:	f100 0514 	add.w	r5, r0, #20
 8008c12:	462b      	mov	r3, r5
 8008c14:	2200      	movs	r2, #0
 8008c16:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c1a:	4543      	cmp	r3, r8
 8008c1c:	d321      	bcc.n	8008c62 <__multiply+0x96>
 8008c1e:	f104 0314 	add.w	r3, r4, #20
 8008c22:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c26:	f109 0314 	add.w	r3, r9, #20
 8008c2a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c2e:	9202      	str	r2, [sp, #8]
 8008c30:	1b3a      	subs	r2, r7, r4
 8008c32:	3a15      	subs	r2, #21
 8008c34:	f022 0203 	bic.w	r2, r2, #3
 8008c38:	3204      	adds	r2, #4
 8008c3a:	f104 0115 	add.w	r1, r4, #21
 8008c3e:	428f      	cmp	r7, r1
 8008c40:	bf38      	it	cc
 8008c42:	2204      	movcc	r2, #4
 8008c44:	9201      	str	r2, [sp, #4]
 8008c46:	9a02      	ldr	r2, [sp, #8]
 8008c48:	9303      	str	r3, [sp, #12]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d80c      	bhi.n	8008c68 <__multiply+0x9c>
 8008c4e:	2e00      	cmp	r6, #0
 8008c50:	dd03      	ble.n	8008c5a <__multiply+0x8e>
 8008c52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d05a      	beq.n	8008d10 <__multiply+0x144>
 8008c5a:	6106      	str	r6, [r0, #16]
 8008c5c:	b005      	add	sp, #20
 8008c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c62:	f843 2b04 	str.w	r2, [r3], #4
 8008c66:	e7d8      	b.n	8008c1a <__multiply+0x4e>
 8008c68:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c6c:	f1ba 0f00 	cmp.w	sl, #0
 8008c70:	d023      	beq.n	8008cba <__multiply+0xee>
 8008c72:	46a9      	mov	r9, r5
 8008c74:	f04f 0c00 	mov.w	ip, #0
 8008c78:	f104 0e14 	add.w	lr, r4, #20
 8008c7c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c80:	f8d9 1000 	ldr.w	r1, [r9]
 8008c84:	fa1f fb82 	uxth.w	fp, r2
 8008c88:	b289      	uxth	r1, r1
 8008c8a:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c8e:	4461      	add	r1, ip
 8008c90:	f8d9 c000 	ldr.w	ip, [r9]
 8008c94:	0c12      	lsrs	r2, r2, #16
 8008c96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008c9a:	fb0a c202 	mla	r2, sl, r2, ip
 8008c9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ca2:	b289      	uxth	r1, r1
 8008ca4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ca8:	4577      	cmp	r7, lr
 8008caa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008cae:	f849 1b04 	str.w	r1, [r9], #4
 8008cb2:	d8e3      	bhi.n	8008c7c <__multiply+0xb0>
 8008cb4:	9a01      	ldr	r2, [sp, #4]
 8008cb6:	f845 c002 	str.w	ip, [r5, r2]
 8008cba:	9a03      	ldr	r2, [sp, #12]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008cc2:	f1b9 0f00 	cmp.w	r9, #0
 8008cc6:	d021      	beq.n	8008d0c <__multiply+0x140>
 8008cc8:	46ae      	mov	lr, r5
 8008cca:	f04f 0a00 	mov.w	sl, #0
 8008cce:	6829      	ldr	r1, [r5, #0]
 8008cd0:	f104 0c14 	add.w	ip, r4, #20
 8008cd4:	f8bc b000 	ldrh.w	fp, [ip]
 8008cd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008cdc:	b289      	uxth	r1, r1
 8008cde:	fb09 220b 	mla	r2, r9, fp, r2
 8008ce2:	4452      	add	r2, sl
 8008ce4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ce8:	f84e 1b04 	str.w	r1, [lr], #4
 8008cec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008cf0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cf4:	f8be 1000 	ldrh.w	r1, [lr]
 8008cf8:	4567      	cmp	r7, ip
 8008cfa:	fb09 110a 	mla	r1, r9, sl, r1
 8008cfe:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008d02:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d06:	d8e5      	bhi.n	8008cd4 <__multiply+0x108>
 8008d08:	9a01      	ldr	r2, [sp, #4]
 8008d0a:	50a9      	str	r1, [r5, r2]
 8008d0c:	3504      	adds	r5, #4
 8008d0e:	e79a      	b.n	8008c46 <__multiply+0x7a>
 8008d10:	3e01      	subs	r6, #1
 8008d12:	e79c      	b.n	8008c4e <__multiply+0x82>
 8008d14:	0800b2af 	.word	0x0800b2af
 8008d18:	0800b2c0 	.word	0x0800b2c0

08008d1c <__pow5mult>:
 8008d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d20:	4615      	mov	r5, r2
 8008d22:	f012 0203 	ands.w	r2, r2, #3
 8008d26:	4606      	mov	r6, r0
 8008d28:	460f      	mov	r7, r1
 8008d2a:	d007      	beq.n	8008d3c <__pow5mult+0x20>
 8008d2c:	4c25      	ldr	r4, [pc, #148]	; (8008dc4 <__pow5mult+0xa8>)
 8008d2e:	3a01      	subs	r2, #1
 8008d30:	2300      	movs	r3, #0
 8008d32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d36:	f7ff fe55 	bl	80089e4 <__multadd>
 8008d3a:	4607      	mov	r7, r0
 8008d3c:	10ad      	asrs	r5, r5, #2
 8008d3e:	d03d      	beq.n	8008dbc <__pow5mult+0xa0>
 8008d40:	69f4      	ldr	r4, [r6, #28]
 8008d42:	b97c      	cbnz	r4, 8008d64 <__pow5mult+0x48>
 8008d44:	2010      	movs	r0, #16
 8008d46:	f7ff fd37 	bl	80087b8 <malloc>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	61f0      	str	r0, [r6, #28]
 8008d4e:	b928      	cbnz	r0, 8008d5c <__pow5mult+0x40>
 8008d50:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008d54:	4b1c      	ldr	r3, [pc, #112]	; (8008dc8 <__pow5mult+0xac>)
 8008d56:	481d      	ldr	r0, [pc, #116]	; (8008dcc <__pow5mult+0xb0>)
 8008d58:	f001 fb6e 	bl	800a438 <__assert_func>
 8008d5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d60:	6004      	str	r4, [r0, #0]
 8008d62:	60c4      	str	r4, [r0, #12]
 8008d64:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008d68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d6c:	b94c      	cbnz	r4, 8008d82 <__pow5mult+0x66>
 8008d6e:	f240 2171 	movw	r1, #625	; 0x271
 8008d72:	4630      	mov	r0, r6
 8008d74:	f7ff ff14 	bl	8008ba0 <__i2b>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d80:	6003      	str	r3, [r0, #0]
 8008d82:	f04f 0900 	mov.w	r9, #0
 8008d86:	07eb      	lsls	r3, r5, #31
 8008d88:	d50a      	bpl.n	8008da0 <__pow5mult+0x84>
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f7ff ff1c 	bl	8008bcc <__multiply>
 8008d94:	4680      	mov	r8, r0
 8008d96:	4639      	mov	r1, r7
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f7ff fe01 	bl	80089a0 <_Bfree>
 8008d9e:	4647      	mov	r7, r8
 8008da0:	106d      	asrs	r5, r5, #1
 8008da2:	d00b      	beq.n	8008dbc <__pow5mult+0xa0>
 8008da4:	6820      	ldr	r0, [r4, #0]
 8008da6:	b938      	cbnz	r0, 8008db8 <__pow5mult+0x9c>
 8008da8:	4622      	mov	r2, r4
 8008daa:	4621      	mov	r1, r4
 8008dac:	4630      	mov	r0, r6
 8008dae:	f7ff ff0d 	bl	8008bcc <__multiply>
 8008db2:	6020      	str	r0, [r4, #0]
 8008db4:	f8c0 9000 	str.w	r9, [r0]
 8008db8:	4604      	mov	r4, r0
 8008dba:	e7e4      	b.n	8008d86 <__pow5mult+0x6a>
 8008dbc:	4638      	mov	r0, r7
 8008dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc2:	bf00      	nop
 8008dc4:	0800b410 	.word	0x0800b410
 8008dc8:	0800b240 	.word	0x0800b240
 8008dcc:	0800b2c0 	.word	0x0800b2c0

08008dd0 <__lshift>:
 8008dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	4607      	mov	r7, r0
 8008dd8:	4691      	mov	r9, r2
 8008dda:	6923      	ldr	r3, [r4, #16]
 8008ddc:	6849      	ldr	r1, [r1, #4]
 8008dde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008de2:	68a3      	ldr	r3, [r4, #8]
 8008de4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008de8:	f108 0601 	add.w	r6, r8, #1
 8008dec:	42b3      	cmp	r3, r6
 8008dee:	db0b      	blt.n	8008e08 <__lshift+0x38>
 8008df0:	4638      	mov	r0, r7
 8008df2:	f7ff fd95 	bl	8008920 <_Balloc>
 8008df6:	4605      	mov	r5, r0
 8008df8:	b948      	cbnz	r0, 8008e0e <__lshift+0x3e>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008e00:	4b27      	ldr	r3, [pc, #156]	; (8008ea0 <__lshift+0xd0>)
 8008e02:	4828      	ldr	r0, [pc, #160]	; (8008ea4 <__lshift+0xd4>)
 8008e04:	f001 fb18 	bl	800a438 <__assert_func>
 8008e08:	3101      	adds	r1, #1
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	e7ee      	b.n	8008dec <__lshift+0x1c>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f100 0114 	add.w	r1, r0, #20
 8008e14:	f100 0210 	add.w	r2, r0, #16
 8008e18:	4618      	mov	r0, r3
 8008e1a:	4553      	cmp	r3, sl
 8008e1c:	db33      	blt.n	8008e86 <__lshift+0xb6>
 8008e1e:	6920      	ldr	r0, [r4, #16]
 8008e20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e24:	f104 0314 	add.w	r3, r4, #20
 8008e28:	f019 091f 	ands.w	r9, r9, #31
 8008e2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e34:	d02b      	beq.n	8008e8e <__lshift+0xbe>
 8008e36:	468a      	mov	sl, r1
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f1c9 0e20 	rsb	lr, r9, #32
 8008e3e:	6818      	ldr	r0, [r3, #0]
 8008e40:	fa00 f009 	lsl.w	r0, r0, r9
 8008e44:	4310      	orrs	r0, r2
 8008e46:	f84a 0b04 	str.w	r0, [sl], #4
 8008e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4e:	459c      	cmp	ip, r3
 8008e50:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e54:	d8f3      	bhi.n	8008e3e <__lshift+0x6e>
 8008e56:	ebac 0304 	sub.w	r3, ip, r4
 8008e5a:	3b15      	subs	r3, #21
 8008e5c:	f023 0303 	bic.w	r3, r3, #3
 8008e60:	3304      	adds	r3, #4
 8008e62:	f104 0015 	add.w	r0, r4, #21
 8008e66:	4584      	cmp	ip, r0
 8008e68:	bf38      	it	cc
 8008e6a:	2304      	movcc	r3, #4
 8008e6c:	50ca      	str	r2, [r1, r3]
 8008e6e:	b10a      	cbz	r2, 8008e74 <__lshift+0xa4>
 8008e70:	f108 0602 	add.w	r6, r8, #2
 8008e74:	3e01      	subs	r6, #1
 8008e76:	4638      	mov	r0, r7
 8008e78:	4621      	mov	r1, r4
 8008e7a:	612e      	str	r6, [r5, #16]
 8008e7c:	f7ff fd90 	bl	80089a0 <_Bfree>
 8008e80:	4628      	mov	r0, r5
 8008e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e86:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	e7c5      	b.n	8008e1a <__lshift+0x4a>
 8008e8e:	3904      	subs	r1, #4
 8008e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e94:	459c      	cmp	ip, r3
 8008e96:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e9a:	d8f9      	bhi.n	8008e90 <__lshift+0xc0>
 8008e9c:	e7ea      	b.n	8008e74 <__lshift+0xa4>
 8008e9e:	bf00      	nop
 8008ea0:	0800b2af 	.word	0x0800b2af
 8008ea4:	0800b2c0 	.word	0x0800b2c0

08008ea8 <__mcmp>:
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	690a      	ldr	r2, [r1, #16]
 8008eac:	6900      	ldr	r0, [r0, #16]
 8008eae:	b530      	push	{r4, r5, lr}
 8008eb0:	1a80      	subs	r0, r0, r2
 8008eb2:	d10d      	bne.n	8008ed0 <__mcmp+0x28>
 8008eb4:	3314      	adds	r3, #20
 8008eb6:	3114      	adds	r1, #20
 8008eb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ebc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ec0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ec4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ec8:	4295      	cmp	r5, r2
 8008eca:	d002      	beq.n	8008ed2 <__mcmp+0x2a>
 8008ecc:	d304      	bcc.n	8008ed8 <__mcmp+0x30>
 8008ece:	2001      	movs	r0, #1
 8008ed0:	bd30      	pop	{r4, r5, pc}
 8008ed2:	42a3      	cmp	r3, r4
 8008ed4:	d3f4      	bcc.n	8008ec0 <__mcmp+0x18>
 8008ed6:	e7fb      	b.n	8008ed0 <__mcmp+0x28>
 8008ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8008edc:	e7f8      	b.n	8008ed0 <__mcmp+0x28>
	...

08008ee0 <__mdiff>:
 8008ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee4:	460d      	mov	r5, r1
 8008ee6:	4607      	mov	r7, r0
 8008ee8:	4611      	mov	r1, r2
 8008eea:	4628      	mov	r0, r5
 8008eec:	4614      	mov	r4, r2
 8008eee:	f7ff ffdb 	bl	8008ea8 <__mcmp>
 8008ef2:	1e06      	subs	r6, r0, #0
 8008ef4:	d111      	bne.n	8008f1a <__mdiff+0x3a>
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4638      	mov	r0, r7
 8008efa:	f7ff fd11 	bl	8008920 <_Balloc>
 8008efe:	4602      	mov	r2, r0
 8008f00:	b928      	cbnz	r0, 8008f0e <__mdiff+0x2e>
 8008f02:	f240 2137 	movw	r1, #567	; 0x237
 8008f06:	4b3a      	ldr	r3, [pc, #232]	; (8008ff0 <__mdiff+0x110>)
 8008f08:	483a      	ldr	r0, [pc, #232]	; (8008ff4 <__mdiff+0x114>)
 8008f0a:	f001 fa95 	bl	800a438 <__assert_func>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008f14:	4610      	mov	r0, r2
 8008f16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1a:	bfa4      	itt	ge
 8008f1c:	4623      	movge	r3, r4
 8008f1e:	462c      	movge	r4, r5
 8008f20:	4638      	mov	r0, r7
 8008f22:	6861      	ldr	r1, [r4, #4]
 8008f24:	bfa6      	itte	ge
 8008f26:	461d      	movge	r5, r3
 8008f28:	2600      	movge	r6, #0
 8008f2a:	2601      	movlt	r6, #1
 8008f2c:	f7ff fcf8 	bl	8008920 <_Balloc>
 8008f30:	4602      	mov	r2, r0
 8008f32:	b918      	cbnz	r0, 8008f3c <__mdiff+0x5c>
 8008f34:	f240 2145 	movw	r1, #581	; 0x245
 8008f38:	4b2d      	ldr	r3, [pc, #180]	; (8008ff0 <__mdiff+0x110>)
 8008f3a:	e7e5      	b.n	8008f08 <__mdiff+0x28>
 8008f3c:	f102 0814 	add.w	r8, r2, #20
 8008f40:	46c2      	mov	sl, r8
 8008f42:	f04f 0c00 	mov.w	ip, #0
 8008f46:	6927      	ldr	r7, [r4, #16]
 8008f48:	60c6      	str	r6, [r0, #12]
 8008f4a:	692e      	ldr	r6, [r5, #16]
 8008f4c:	f104 0014 	add.w	r0, r4, #20
 8008f50:	f105 0914 	add.w	r9, r5, #20
 8008f54:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008f58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f5c:	3410      	adds	r4, #16
 8008f5e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008f62:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f66:	fa1f f18b 	uxth.w	r1, fp
 8008f6a:	4461      	add	r1, ip
 8008f6c:	fa1f fc83 	uxth.w	ip, r3
 8008f70:	0c1b      	lsrs	r3, r3, #16
 8008f72:	eba1 010c 	sub.w	r1, r1, ip
 8008f76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f7a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008f7e:	b289      	uxth	r1, r1
 8008f80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008f84:	454e      	cmp	r6, r9
 8008f86:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008f8a:	f84a 1b04 	str.w	r1, [sl], #4
 8008f8e:	d8e6      	bhi.n	8008f5e <__mdiff+0x7e>
 8008f90:	1b73      	subs	r3, r6, r5
 8008f92:	3b15      	subs	r3, #21
 8008f94:	f023 0303 	bic.w	r3, r3, #3
 8008f98:	3515      	adds	r5, #21
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	42ae      	cmp	r6, r5
 8008f9e:	bf38      	it	cc
 8008fa0:	2304      	movcc	r3, #4
 8008fa2:	4418      	add	r0, r3
 8008fa4:	4443      	add	r3, r8
 8008fa6:	461e      	mov	r6, r3
 8008fa8:	4605      	mov	r5, r0
 8008faa:	4575      	cmp	r5, lr
 8008fac:	d30e      	bcc.n	8008fcc <__mdiff+0xec>
 8008fae:	f10e 0103 	add.w	r1, lr, #3
 8008fb2:	1a09      	subs	r1, r1, r0
 8008fb4:	f021 0103 	bic.w	r1, r1, #3
 8008fb8:	3803      	subs	r0, #3
 8008fba:	4586      	cmp	lr, r0
 8008fbc:	bf38      	it	cc
 8008fbe:	2100      	movcc	r1, #0
 8008fc0:	440b      	add	r3, r1
 8008fc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fc6:	b189      	cbz	r1, 8008fec <__mdiff+0x10c>
 8008fc8:	6117      	str	r7, [r2, #16]
 8008fca:	e7a3      	b.n	8008f14 <__mdiff+0x34>
 8008fcc:	f855 8b04 	ldr.w	r8, [r5], #4
 8008fd0:	fa1f f188 	uxth.w	r1, r8
 8008fd4:	4461      	add	r1, ip
 8008fd6:	140c      	asrs	r4, r1, #16
 8008fd8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008fdc:	b289      	uxth	r1, r1
 8008fde:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008fe2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008fe6:	f846 1b04 	str.w	r1, [r6], #4
 8008fea:	e7de      	b.n	8008faa <__mdiff+0xca>
 8008fec:	3f01      	subs	r7, #1
 8008fee:	e7e8      	b.n	8008fc2 <__mdiff+0xe2>
 8008ff0:	0800b2af 	.word	0x0800b2af
 8008ff4:	0800b2c0 	.word	0x0800b2c0

08008ff8 <__ulp>:
 8008ff8:	4b0e      	ldr	r3, [pc, #56]	; (8009034 <__ulp+0x3c>)
 8008ffa:	400b      	ands	r3, r1
 8008ffc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009000:	2b00      	cmp	r3, #0
 8009002:	dc08      	bgt.n	8009016 <__ulp+0x1e>
 8009004:	425b      	negs	r3, r3
 8009006:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800900a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800900e:	da04      	bge.n	800901a <__ulp+0x22>
 8009010:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009014:	4113      	asrs	r3, r2
 8009016:	2200      	movs	r2, #0
 8009018:	e008      	b.n	800902c <__ulp+0x34>
 800901a:	f1a2 0314 	sub.w	r3, r2, #20
 800901e:	2b1e      	cmp	r3, #30
 8009020:	bfd6      	itet	le
 8009022:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009026:	2201      	movgt	r2, #1
 8009028:	40da      	lsrle	r2, r3
 800902a:	2300      	movs	r3, #0
 800902c:	4619      	mov	r1, r3
 800902e:	4610      	mov	r0, r2
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	7ff00000 	.word	0x7ff00000

08009038 <__b2d>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	6905      	ldr	r5, [r0, #16]
 800903c:	f100 0714 	add.w	r7, r0, #20
 8009040:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009044:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009048:	1f2e      	subs	r6, r5, #4
 800904a:	4620      	mov	r0, r4
 800904c:	f7ff fd5a 	bl	8008b04 <__hi0bits>
 8009050:	f1c0 0220 	rsb	r2, r0, #32
 8009054:	280a      	cmp	r0, #10
 8009056:	4603      	mov	r3, r0
 8009058:	f8df c068 	ldr.w	ip, [pc, #104]	; 80090c4 <__b2d+0x8c>
 800905c:	600a      	str	r2, [r1, #0]
 800905e:	dc12      	bgt.n	8009086 <__b2d+0x4e>
 8009060:	f1c0 0e0b 	rsb	lr, r0, #11
 8009064:	fa24 f20e 	lsr.w	r2, r4, lr
 8009068:	42b7      	cmp	r7, r6
 800906a:	ea42 010c 	orr.w	r1, r2, ip
 800906e:	bf2c      	ite	cs
 8009070:	2200      	movcs	r2, #0
 8009072:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009076:	3315      	adds	r3, #21
 8009078:	fa04 f303 	lsl.w	r3, r4, r3
 800907c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009080:	431a      	orrs	r2, r3
 8009082:	4610      	mov	r0, r2
 8009084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009086:	42b7      	cmp	r7, r6
 8009088:	bf2e      	itee	cs
 800908a:	2200      	movcs	r2, #0
 800908c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009090:	f1a5 0608 	subcc.w	r6, r5, #8
 8009094:	3b0b      	subs	r3, #11
 8009096:	d012      	beq.n	80090be <__b2d+0x86>
 8009098:	f1c3 0520 	rsb	r5, r3, #32
 800909c:	fa22 f105 	lsr.w	r1, r2, r5
 80090a0:	409c      	lsls	r4, r3
 80090a2:	430c      	orrs	r4, r1
 80090a4:	42be      	cmp	r6, r7
 80090a6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80090aa:	bf94      	ite	ls
 80090ac:	2400      	movls	r4, #0
 80090ae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80090b2:	409a      	lsls	r2, r3
 80090b4:	40ec      	lsrs	r4, r5
 80090b6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80090ba:	4322      	orrs	r2, r4
 80090bc:	e7e1      	b.n	8009082 <__b2d+0x4a>
 80090be:	ea44 010c 	orr.w	r1, r4, ip
 80090c2:	e7de      	b.n	8009082 <__b2d+0x4a>
 80090c4:	3ff00000 	.word	0x3ff00000

080090c8 <__d2b>:
 80090c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ca:	2101      	movs	r1, #1
 80090cc:	4617      	mov	r7, r2
 80090ce:	461c      	mov	r4, r3
 80090d0:	9e08      	ldr	r6, [sp, #32]
 80090d2:	f7ff fc25 	bl	8008920 <_Balloc>
 80090d6:	4605      	mov	r5, r0
 80090d8:	b930      	cbnz	r0, 80090e8 <__d2b+0x20>
 80090da:	4602      	mov	r2, r0
 80090dc:	f240 310f 	movw	r1, #783	; 0x30f
 80090e0:	4b22      	ldr	r3, [pc, #136]	; (800916c <__d2b+0xa4>)
 80090e2:	4823      	ldr	r0, [pc, #140]	; (8009170 <__d2b+0xa8>)
 80090e4:	f001 f9a8 	bl	800a438 <__assert_func>
 80090e8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80090ec:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80090f0:	bb24      	cbnz	r4, 800913c <__d2b+0x74>
 80090f2:	2f00      	cmp	r7, #0
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	d026      	beq.n	8009146 <__d2b+0x7e>
 80090f8:	4668      	mov	r0, sp
 80090fa:	9700      	str	r7, [sp, #0]
 80090fc:	f7ff fd22 	bl	8008b44 <__lo0bits>
 8009100:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009104:	b1e8      	cbz	r0, 8009142 <__d2b+0x7a>
 8009106:	f1c0 0320 	rsb	r3, r0, #32
 800910a:	fa02 f303 	lsl.w	r3, r2, r3
 800910e:	430b      	orrs	r3, r1
 8009110:	40c2      	lsrs	r2, r0
 8009112:	616b      	str	r3, [r5, #20]
 8009114:	9201      	str	r2, [sp, #4]
 8009116:	9b01      	ldr	r3, [sp, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	bf14      	ite	ne
 800911c:	2102      	movne	r1, #2
 800911e:	2101      	moveq	r1, #1
 8009120:	61ab      	str	r3, [r5, #24]
 8009122:	6129      	str	r1, [r5, #16]
 8009124:	b1bc      	cbz	r4, 8009156 <__d2b+0x8e>
 8009126:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800912a:	4404      	add	r4, r0
 800912c:	6034      	str	r4, [r6, #0]
 800912e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009134:	6018      	str	r0, [r3, #0]
 8009136:	4628      	mov	r0, r5
 8009138:	b003      	add	sp, #12
 800913a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800913c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009140:	e7d7      	b.n	80090f2 <__d2b+0x2a>
 8009142:	6169      	str	r1, [r5, #20]
 8009144:	e7e7      	b.n	8009116 <__d2b+0x4e>
 8009146:	a801      	add	r0, sp, #4
 8009148:	f7ff fcfc 	bl	8008b44 <__lo0bits>
 800914c:	9b01      	ldr	r3, [sp, #4]
 800914e:	2101      	movs	r1, #1
 8009150:	616b      	str	r3, [r5, #20]
 8009152:	3020      	adds	r0, #32
 8009154:	e7e5      	b.n	8009122 <__d2b+0x5a>
 8009156:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800915a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800915e:	6030      	str	r0, [r6, #0]
 8009160:	6918      	ldr	r0, [r3, #16]
 8009162:	f7ff fccf 	bl	8008b04 <__hi0bits>
 8009166:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800916a:	e7e2      	b.n	8009132 <__d2b+0x6a>
 800916c:	0800b2af 	.word	0x0800b2af
 8009170:	0800b2c0 	.word	0x0800b2c0

08009174 <__ratio>:
 8009174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009178:	4688      	mov	r8, r1
 800917a:	4669      	mov	r1, sp
 800917c:	4681      	mov	r9, r0
 800917e:	f7ff ff5b 	bl	8009038 <__b2d>
 8009182:	460f      	mov	r7, r1
 8009184:	4604      	mov	r4, r0
 8009186:	460d      	mov	r5, r1
 8009188:	4640      	mov	r0, r8
 800918a:	a901      	add	r1, sp, #4
 800918c:	f7ff ff54 	bl	8009038 <__b2d>
 8009190:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009194:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009198:	468b      	mov	fp, r1
 800919a:	eba3 0c02 	sub.w	ip, r3, r2
 800919e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80091a2:	1a9b      	subs	r3, r3, r2
 80091a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	bfd5      	itete	le
 80091ac:	460a      	movle	r2, r1
 80091ae:	462a      	movgt	r2, r5
 80091b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80091b4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80091b8:	bfd8      	it	le
 80091ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80091be:	465b      	mov	r3, fp
 80091c0:	4602      	mov	r2, r0
 80091c2:	4639      	mov	r1, r7
 80091c4:	4620      	mov	r0, r4
 80091c6:	f7f7 fab1 	bl	800072c <__aeabi_ddiv>
 80091ca:	b003      	add	sp, #12
 80091cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091d0 <__copybits>:
 80091d0:	3901      	subs	r1, #1
 80091d2:	b570      	push	{r4, r5, r6, lr}
 80091d4:	1149      	asrs	r1, r1, #5
 80091d6:	6914      	ldr	r4, [r2, #16]
 80091d8:	3101      	adds	r1, #1
 80091da:	f102 0314 	add.w	r3, r2, #20
 80091de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80091e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80091e6:	1f05      	subs	r5, r0, #4
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	d30c      	bcc.n	8009206 <__copybits+0x36>
 80091ec:	1aa3      	subs	r3, r4, r2
 80091ee:	3b11      	subs	r3, #17
 80091f0:	f023 0303 	bic.w	r3, r3, #3
 80091f4:	3211      	adds	r2, #17
 80091f6:	42a2      	cmp	r2, r4
 80091f8:	bf88      	it	hi
 80091fa:	2300      	movhi	r3, #0
 80091fc:	4418      	add	r0, r3
 80091fe:	2300      	movs	r3, #0
 8009200:	4288      	cmp	r0, r1
 8009202:	d305      	bcc.n	8009210 <__copybits+0x40>
 8009204:	bd70      	pop	{r4, r5, r6, pc}
 8009206:	f853 6b04 	ldr.w	r6, [r3], #4
 800920a:	f845 6f04 	str.w	r6, [r5, #4]!
 800920e:	e7eb      	b.n	80091e8 <__copybits+0x18>
 8009210:	f840 3b04 	str.w	r3, [r0], #4
 8009214:	e7f4      	b.n	8009200 <__copybits+0x30>

08009216 <__any_on>:
 8009216:	f100 0214 	add.w	r2, r0, #20
 800921a:	6900      	ldr	r0, [r0, #16]
 800921c:	114b      	asrs	r3, r1, #5
 800921e:	4298      	cmp	r0, r3
 8009220:	b510      	push	{r4, lr}
 8009222:	db11      	blt.n	8009248 <__any_on+0x32>
 8009224:	dd0a      	ble.n	800923c <__any_on+0x26>
 8009226:	f011 011f 	ands.w	r1, r1, #31
 800922a:	d007      	beq.n	800923c <__any_on+0x26>
 800922c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009230:	fa24 f001 	lsr.w	r0, r4, r1
 8009234:	fa00 f101 	lsl.w	r1, r0, r1
 8009238:	428c      	cmp	r4, r1
 800923a:	d10b      	bne.n	8009254 <__any_on+0x3e>
 800923c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009240:	4293      	cmp	r3, r2
 8009242:	d803      	bhi.n	800924c <__any_on+0x36>
 8009244:	2000      	movs	r0, #0
 8009246:	bd10      	pop	{r4, pc}
 8009248:	4603      	mov	r3, r0
 800924a:	e7f7      	b.n	800923c <__any_on+0x26>
 800924c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009250:	2900      	cmp	r1, #0
 8009252:	d0f5      	beq.n	8009240 <__any_on+0x2a>
 8009254:	2001      	movs	r0, #1
 8009256:	e7f6      	b.n	8009246 <__any_on+0x30>

08009258 <sulp>:
 8009258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800925c:	460f      	mov	r7, r1
 800925e:	4690      	mov	r8, r2
 8009260:	f7ff feca 	bl	8008ff8 <__ulp>
 8009264:	4604      	mov	r4, r0
 8009266:	460d      	mov	r5, r1
 8009268:	f1b8 0f00 	cmp.w	r8, #0
 800926c:	d011      	beq.n	8009292 <sulp+0x3a>
 800926e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009272:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009276:	2b00      	cmp	r3, #0
 8009278:	dd0b      	ble.n	8009292 <sulp+0x3a>
 800927a:	2400      	movs	r4, #0
 800927c:	051b      	lsls	r3, r3, #20
 800927e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009282:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009286:	4622      	mov	r2, r4
 8009288:	462b      	mov	r3, r5
 800928a:	f7f7 f925 	bl	80004d8 <__aeabi_dmul>
 800928e:	4604      	mov	r4, r0
 8009290:	460d      	mov	r5, r1
 8009292:	4620      	mov	r0, r4
 8009294:	4629      	mov	r1, r5
 8009296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800929a:	0000      	movs	r0, r0
 800929c:	0000      	movs	r0, r0
	...

080092a0 <_strtod_l>:
 80092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	b09f      	sub	sp, #124	; 0x7c
 80092a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80092a8:	2200      	movs	r2, #0
 80092aa:	4604      	mov	r4, r0
 80092ac:	921a      	str	r2, [sp, #104]	; 0x68
 80092ae:	460d      	mov	r5, r1
 80092b0:	f04f 0800 	mov.w	r8, #0
 80092b4:	f04f 0900 	mov.w	r9, #0
 80092b8:	460a      	mov	r2, r1
 80092ba:	9219      	str	r2, [sp, #100]	; 0x64
 80092bc:	7811      	ldrb	r1, [r2, #0]
 80092be:	292b      	cmp	r1, #43	; 0x2b
 80092c0:	d04a      	beq.n	8009358 <_strtod_l+0xb8>
 80092c2:	d838      	bhi.n	8009336 <_strtod_l+0x96>
 80092c4:	290d      	cmp	r1, #13
 80092c6:	d832      	bhi.n	800932e <_strtod_l+0x8e>
 80092c8:	2908      	cmp	r1, #8
 80092ca:	d832      	bhi.n	8009332 <_strtod_l+0x92>
 80092cc:	2900      	cmp	r1, #0
 80092ce:	d03b      	beq.n	8009348 <_strtod_l+0xa8>
 80092d0:	2200      	movs	r2, #0
 80092d2:	920e      	str	r2, [sp, #56]	; 0x38
 80092d4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80092d6:	7832      	ldrb	r2, [r6, #0]
 80092d8:	2a30      	cmp	r2, #48	; 0x30
 80092da:	f040 80b2 	bne.w	8009442 <_strtod_l+0x1a2>
 80092de:	7872      	ldrb	r2, [r6, #1]
 80092e0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80092e4:	2a58      	cmp	r2, #88	; 0x58
 80092e6:	d16e      	bne.n	80093c6 <_strtod_l+0x126>
 80092e8:	9302      	str	r3, [sp, #8]
 80092ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092ec:	4620      	mov	r0, r4
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	ab1a      	add	r3, sp, #104	; 0x68
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	4a8c      	ldr	r2, [pc, #560]	; (8009528 <_strtod_l+0x288>)
 80092f6:	ab1b      	add	r3, sp, #108	; 0x6c
 80092f8:	a919      	add	r1, sp, #100	; 0x64
 80092fa:	f001 f937 	bl	800a56c <__gethex>
 80092fe:	f010 070f 	ands.w	r7, r0, #15
 8009302:	4605      	mov	r5, r0
 8009304:	d005      	beq.n	8009312 <_strtod_l+0x72>
 8009306:	2f06      	cmp	r7, #6
 8009308:	d128      	bne.n	800935c <_strtod_l+0xbc>
 800930a:	2300      	movs	r3, #0
 800930c:	3601      	adds	r6, #1
 800930e:	9619      	str	r6, [sp, #100]	; 0x64
 8009310:	930e      	str	r3, [sp, #56]	; 0x38
 8009312:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009314:	2b00      	cmp	r3, #0
 8009316:	f040 85a0 	bne.w	8009e5a <_strtod_l+0xbba>
 800931a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800931c:	b1cb      	cbz	r3, 8009352 <_strtod_l+0xb2>
 800931e:	4642      	mov	r2, r8
 8009320:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009324:	4610      	mov	r0, r2
 8009326:	4619      	mov	r1, r3
 8009328:	b01f      	add	sp, #124	; 0x7c
 800932a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800932e:	2920      	cmp	r1, #32
 8009330:	d1ce      	bne.n	80092d0 <_strtod_l+0x30>
 8009332:	3201      	adds	r2, #1
 8009334:	e7c1      	b.n	80092ba <_strtod_l+0x1a>
 8009336:	292d      	cmp	r1, #45	; 0x2d
 8009338:	d1ca      	bne.n	80092d0 <_strtod_l+0x30>
 800933a:	2101      	movs	r1, #1
 800933c:	910e      	str	r1, [sp, #56]	; 0x38
 800933e:	1c51      	adds	r1, r2, #1
 8009340:	9119      	str	r1, [sp, #100]	; 0x64
 8009342:	7852      	ldrb	r2, [r2, #1]
 8009344:	2a00      	cmp	r2, #0
 8009346:	d1c5      	bne.n	80092d4 <_strtod_l+0x34>
 8009348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800934a:	9519      	str	r5, [sp, #100]	; 0x64
 800934c:	2b00      	cmp	r3, #0
 800934e:	f040 8582 	bne.w	8009e56 <_strtod_l+0xbb6>
 8009352:	4642      	mov	r2, r8
 8009354:	464b      	mov	r3, r9
 8009356:	e7e5      	b.n	8009324 <_strtod_l+0x84>
 8009358:	2100      	movs	r1, #0
 800935a:	e7ef      	b.n	800933c <_strtod_l+0x9c>
 800935c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800935e:	b13a      	cbz	r2, 8009370 <_strtod_l+0xd0>
 8009360:	2135      	movs	r1, #53	; 0x35
 8009362:	a81c      	add	r0, sp, #112	; 0x70
 8009364:	f7ff ff34 	bl	80091d0 <__copybits>
 8009368:	4620      	mov	r0, r4
 800936a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800936c:	f7ff fb18 	bl	80089a0 <_Bfree>
 8009370:	3f01      	subs	r7, #1
 8009372:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009374:	2f04      	cmp	r7, #4
 8009376:	d806      	bhi.n	8009386 <_strtod_l+0xe6>
 8009378:	e8df f007 	tbb	[pc, r7]
 800937c:	201d0314 	.word	0x201d0314
 8009380:	14          	.byte	0x14
 8009381:	00          	.byte	0x00
 8009382:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009386:	05e9      	lsls	r1, r5, #23
 8009388:	bf48      	it	mi
 800938a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800938e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009392:	0d1b      	lsrs	r3, r3, #20
 8009394:	051b      	lsls	r3, r3, #20
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1bb      	bne.n	8009312 <_strtod_l+0x72>
 800939a:	f7fe fb17 	bl	80079cc <__errno>
 800939e:	2322      	movs	r3, #34	; 0x22
 80093a0:	6003      	str	r3, [r0, #0]
 80093a2:	e7b6      	b.n	8009312 <_strtod_l+0x72>
 80093a4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80093a8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80093ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80093b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80093b4:	e7e7      	b.n	8009386 <_strtod_l+0xe6>
 80093b6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800952c <_strtod_l+0x28c>
 80093ba:	e7e4      	b.n	8009386 <_strtod_l+0xe6>
 80093bc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80093c0:	f04f 38ff 	mov.w	r8, #4294967295
 80093c4:	e7df      	b.n	8009386 <_strtod_l+0xe6>
 80093c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	9219      	str	r2, [sp, #100]	; 0x64
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	2b30      	cmp	r3, #48	; 0x30
 80093d0:	d0f9      	beq.n	80093c6 <_strtod_l+0x126>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d09d      	beq.n	8009312 <_strtod_l+0x72>
 80093d6:	2301      	movs	r3, #1
 80093d8:	f04f 0a00 	mov.w	sl, #0
 80093dc:	220a      	movs	r2, #10
 80093de:	46d3      	mov	fp, sl
 80093e0:	9305      	str	r3, [sp, #20]
 80093e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093e4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80093e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80093ea:	9819      	ldr	r0, [sp, #100]	; 0x64
 80093ec:	7806      	ldrb	r6, [r0, #0]
 80093ee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80093f2:	b2d9      	uxtb	r1, r3
 80093f4:	2909      	cmp	r1, #9
 80093f6:	d926      	bls.n	8009446 <_strtod_l+0x1a6>
 80093f8:	2201      	movs	r2, #1
 80093fa:	494d      	ldr	r1, [pc, #308]	; (8009530 <_strtod_l+0x290>)
 80093fc:	f000 ffe6 	bl	800a3cc <strncmp>
 8009400:	2800      	cmp	r0, #0
 8009402:	d030      	beq.n	8009466 <_strtod_l+0x1c6>
 8009404:	2000      	movs	r0, #0
 8009406:	4632      	mov	r2, r6
 8009408:	4603      	mov	r3, r0
 800940a:	465e      	mov	r6, fp
 800940c:	9008      	str	r0, [sp, #32]
 800940e:	2a65      	cmp	r2, #101	; 0x65
 8009410:	d001      	beq.n	8009416 <_strtod_l+0x176>
 8009412:	2a45      	cmp	r2, #69	; 0x45
 8009414:	d113      	bne.n	800943e <_strtod_l+0x19e>
 8009416:	b91e      	cbnz	r6, 8009420 <_strtod_l+0x180>
 8009418:	9a05      	ldr	r2, [sp, #20]
 800941a:	4302      	orrs	r2, r0
 800941c:	d094      	beq.n	8009348 <_strtod_l+0xa8>
 800941e:	2600      	movs	r6, #0
 8009420:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009422:	1c6a      	adds	r2, r5, #1
 8009424:	9219      	str	r2, [sp, #100]	; 0x64
 8009426:	786a      	ldrb	r2, [r5, #1]
 8009428:	2a2b      	cmp	r2, #43	; 0x2b
 800942a:	d074      	beq.n	8009516 <_strtod_l+0x276>
 800942c:	2a2d      	cmp	r2, #45	; 0x2d
 800942e:	d078      	beq.n	8009522 <_strtod_l+0x282>
 8009430:	f04f 0c00 	mov.w	ip, #0
 8009434:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009438:	2909      	cmp	r1, #9
 800943a:	d97f      	bls.n	800953c <_strtod_l+0x29c>
 800943c:	9519      	str	r5, [sp, #100]	; 0x64
 800943e:	2700      	movs	r7, #0
 8009440:	e09e      	b.n	8009580 <_strtod_l+0x2e0>
 8009442:	2300      	movs	r3, #0
 8009444:	e7c8      	b.n	80093d8 <_strtod_l+0x138>
 8009446:	f1bb 0f08 	cmp.w	fp, #8
 800944a:	bfd8      	it	le
 800944c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800944e:	f100 0001 	add.w	r0, r0, #1
 8009452:	bfd6      	itet	le
 8009454:	fb02 3301 	mlale	r3, r2, r1, r3
 8009458:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800945c:	930a      	strle	r3, [sp, #40]	; 0x28
 800945e:	f10b 0b01 	add.w	fp, fp, #1
 8009462:	9019      	str	r0, [sp, #100]	; 0x64
 8009464:	e7c1      	b.n	80093ea <_strtod_l+0x14a>
 8009466:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	9219      	str	r2, [sp, #100]	; 0x64
 800946c:	785a      	ldrb	r2, [r3, #1]
 800946e:	f1bb 0f00 	cmp.w	fp, #0
 8009472:	d037      	beq.n	80094e4 <_strtod_l+0x244>
 8009474:	465e      	mov	r6, fp
 8009476:	9008      	str	r0, [sp, #32]
 8009478:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800947c:	2b09      	cmp	r3, #9
 800947e:	d912      	bls.n	80094a6 <_strtod_l+0x206>
 8009480:	2301      	movs	r3, #1
 8009482:	e7c4      	b.n	800940e <_strtod_l+0x16e>
 8009484:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009486:	3001      	adds	r0, #1
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	9219      	str	r2, [sp, #100]	; 0x64
 800948c:	785a      	ldrb	r2, [r3, #1]
 800948e:	2a30      	cmp	r2, #48	; 0x30
 8009490:	d0f8      	beq.n	8009484 <_strtod_l+0x1e4>
 8009492:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009496:	2b08      	cmp	r3, #8
 8009498:	f200 84e4 	bhi.w	8009e64 <_strtod_l+0xbc4>
 800949c:	9008      	str	r0, [sp, #32]
 800949e:	2000      	movs	r0, #0
 80094a0:	4606      	mov	r6, r0
 80094a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80094a6:	3a30      	subs	r2, #48	; 0x30
 80094a8:	f100 0301 	add.w	r3, r0, #1
 80094ac:	d014      	beq.n	80094d8 <_strtod_l+0x238>
 80094ae:	9908      	ldr	r1, [sp, #32]
 80094b0:	eb00 0c06 	add.w	ip, r0, r6
 80094b4:	4419      	add	r1, r3
 80094b6:	9108      	str	r1, [sp, #32]
 80094b8:	4633      	mov	r3, r6
 80094ba:	210a      	movs	r1, #10
 80094bc:	4563      	cmp	r3, ip
 80094be:	d113      	bne.n	80094e8 <_strtod_l+0x248>
 80094c0:	1833      	adds	r3, r6, r0
 80094c2:	2b08      	cmp	r3, #8
 80094c4:	f106 0601 	add.w	r6, r6, #1
 80094c8:	4406      	add	r6, r0
 80094ca:	dc1a      	bgt.n	8009502 <_strtod_l+0x262>
 80094cc:	230a      	movs	r3, #10
 80094ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80094d0:	fb03 2301 	mla	r3, r3, r1, r2
 80094d4:	930a      	str	r3, [sp, #40]	; 0x28
 80094d6:	2300      	movs	r3, #0
 80094d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80094da:	4618      	mov	r0, r3
 80094dc:	1c51      	adds	r1, r2, #1
 80094de:	9119      	str	r1, [sp, #100]	; 0x64
 80094e0:	7852      	ldrb	r2, [r2, #1]
 80094e2:	e7c9      	b.n	8009478 <_strtod_l+0x1d8>
 80094e4:	4658      	mov	r0, fp
 80094e6:	e7d2      	b.n	800948e <_strtod_l+0x1ee>
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	f103 0301 	add.w	r3, r3, #1
 80094ee:	dc03      	bgt.n	80094f8 <_strtod_l+0x258>
 80094f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80094f2:	434f      	muls	r7, r1
 80094f4:	970a      	str	r7, [sp, #40]	; 0x28
 80094f6:	e7e1      	b.n	80094bc <_strtod_l+0x21c>
 80094f8:	2b10      	cmp	r3, #16
 80094fa:	bfd8      	it	le
 80094fc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009500:	e7dc      	b.n	80094bc <_strtod_l+0x21c>
 8009502:	2e10      	cmp	r6, #16
 8009504:	bfdc      	itt	le
 8009506:	230a      	movle	r3, #10
 8009508:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800950c:	e7e3      	b.n	80094d6 <_strtod_l+0x236>
 800950e:	2300      	movs	r3, #0
 8009510:	9308      	str	r3, [sp, #32]
 8009512:	2301      	movs	r3, #1
 8009514:	e780      	b.n	8009418 <_strtod_l+0x178>
 8009516:	f04f 0c00 	mov.w	ip, #0
 800951a:	1caa      	adds	r2, r5, #2
 800951c:	9219      	str	r2, [sp, #100]	; 0x64
 800951e:	78aa      	ldrb	r2, [r5, #2]
 8009520:	e788      	b.n	8009434 <_strtod_l+0x194>
 8009522:	f04f 0c01 	mov.w	ip, #1
 8009526:	e7f8      	b.n	800951a <_strtod_l+0x27a>
 8009528:	0800b420 	.word	0x0800b420
 800952c:	7ff00000 	.word	0x7ff00000
 8009530:	0800b41c 	.word	0x0800b41c
 8009534:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009536:	1c51      	adds	r1, r2, #1
 8009538:	9119      	str	r1, [sp, #100]	; 0x64
 800953a:	7852      	ldrb	r2, [r2, #1]
 800953c:	2a30      	cmp	r2, #48	; 0x30
 800953e:	d0f9      	beq.n	8009534 <_strtod_l+0x294>
 8009540:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009544:	2908      	cmp	r1, #8
 8009546:	f63f af7a 	bhi.w	800943e <_strtod_l+0x19e>
 800954a:	3a30      	subs	r2, #48	; 0x30
 800954c:	9209      	str	r2, [sp, #36]	; 0x24
 800954e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009550:	920c      	str	r2, [sp, #48]	; 0x30
 8009552:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009554:	1c57      	adds	r7, r2, #1
 8009556:	9719      	str	r7, [sp, #100]	; 0x64
 8009558:	7852      	ldrb	r2, [r2, #1]
 800955a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800955e:	f1be 0f09 	cmp.w	lr, #9
 8009562:	d938      	bls.n	80095d6 <_strtod_l+0x336>
 8009564:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009566:	1a7f      	subs	r7, r7, r1
 8009568:	2f08      	cmp	r7, #8
 800956a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800956e:	dc03      	bgt.n	8009578 <_strtod_l+0x2d8>
 8009570:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009572:	428f      	cmp	r7, r1
 8009574:	bfa8      	it	ge
 8009576:	460f      	movge	r7, r1
 8009578:	f1bc 0f00 	cmp.w	ip, #0
 800957c:	d000      	beq.n	8009580 <_strtod_l+0x2e0>
 800957e:	427f      	negs	r7, r7
 8009580:	2e00      	cmp	r6, #0
 8009582:	d14f      	bne.n	8009624 <_strtod_l+0x384>
 8009584:	9905      	ldr	r1, [sp, #20]
 8009586:	4301      	orrs	r1, r0
 8009588:	f47f aec3 	bne.w	8009312 <_strtod_l+0x72>
 800958c:	2b00      	cmp	r3, #0
 800958e:	f47f aedb 	bne.w	8009348 <_strtod_l+0xa8>
 8009592:	2a69      	cmp	r2, #105	; 0x69
 8009594:	d029      	beq.n	80095ea <_strtod_l+0x34a>
 8009596:	dc26      	bgt.n	80095e6 <_strtod_l+0x346>
 8009598:	2a49      	cmp	r2, #73	; 0x49
 800959a:	d026      	beq.n	80095ea <_strtod_l+0x34a>
 800959c:	2a4e      	cmp	r2, #78	; 0x4e
 800959e:	f47f aed3 	bne.w	8009348 <_strtod_l+0xa8>
 80095a2:	499a      	ldr	r1, [pc, #616]	; (800980c <_strtod_l+0x56c>)
 80095a4:	a819      	add	r0, sp, #100	; 0x64
 80095a6:	f001 fa23 	bl	800a9f0 <__match>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	f43f aecc 	beq.w	8009348 <_strtod_l+0xa8>
 80095b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	2b28      	cmp	r3, #40	; 0x28
 80095b6:	d12f      	bne.n	8009618 <_strtod_l+0x378>
 80095b8:	4995      	ldr	r1, [pc, #596]	; (8009810 <_strtod_l+0x570>)
 80095ba:	aa1c      	add	r2, sp, #112	; 0x70
 80095bc:	a819      	add	r0, sp, #100	; 0x64
 80095be:	f001 fa2b 	bl	800aa18 <__hexnan>
 80095c2:	2805      	cmp	r0, #5
 80095c4:	d128      	bne.n	8009618 <_strtod_l+0x378>
 80095c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095c8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80095cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80095d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80095d4:	e69d      	b.n	8009312 <_strtod_l+0x72>
 80095d6:	210a      	movs	r1, #10
 80095d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80095da:	fb01 2107 	mla	r1, r1, r7, r2
 80095de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80095e2:	9209      	str	r2, [sp, #36]	; 0x24
 80095e4:	e7b5      	b.n	8009552 <_strtod_l+0x2b2>
 80095e6:	2a6e      	cmp	r2, #110	; 0x6e
 80095e8:	e7d9      	b.n	800959e <_strtod_l+0x2fe>
 80095ea:	498a      	ldr	r1, [pc, #552]	; (8009814 <_strtod_l+0x574>)
 80095ec:	a819      	add	r0, sp, #100	; 0x64
 80095ee:	f001 f9ff 	bl	800a9f0 <__match>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	f43f aea8 	beq.w	8009348 <_strtod_l+0xa8>
 80095f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095fa:	4987      	ldr	r1, [pc, #540]	; (8009818 <_strtod_l+0x578>)
 80095fc:	3b01      	subs	r3, #1
 80095fe:	a819      	add	r0, sp, #100	; 0x64
 8009600:	9319      	str	r3, [sp, #100]	; 0x64
 8009602:	f001 f9f5 	bl	800a9f0 <__match>
 8009606:	b910      	cbnz	r0, 800960e <_strtod_l+0x36e>
 8009608:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800960a:	3301      	adds	r3, #1
 800960c:	9319      	str	r3, [sp, #100]	; 0x64
 800960e:	f04f 0800 	mov.w	r8, #0
 8009612:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800981c <_strtod_l+0x57c>
 8009616:	e67c      	b.n	8009312 <_strtod_l+0x72>
 8009618:	4881      	ldr	r0, [pc, #516]	; (8009820 <_strtod_l+0x580>)
 800961a:	f000 ff07 	bl	800a42c <nan>
 800961e:	4680      	mov	r8, r0
 8009620:	4689      	mov	r9, r1
 8009622:	e676      	b.n	8009312 <_strtod_l+0x72>
 8009624:	9b08      	ldr	r3, [sp, #32]
 8009626:	f1bb 0f00 	cmp.w	fp, #0
 800962a:	bf08      	it	eq
 800962c:	46b3      	moveq	fp, r6
 800962e:	1afb      	subs	r3, r7, r3
 8009630:	2e10      	cmp	r6, #16
 8009632:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009634:	4635      	mov	r5, r6
 8009636:	9309      	str	r3, [sp, #36]	; 0x24
 8009638:	bfa8      	it	ge
 800963a:	2510      	movge	r5, #16
 800963c:	f7f6 fed2 	bl	80003e4 <__aeabi_ui2d>
 8009640:	2e09      	cmp	r6, #9
 8009642:	4680      	mov	r8, r0
 8009644:	4689      	mov	r9, r1
 8009646:	dd13      	ble.n	8009670 <_strtod_l+0x3d0>
 8009648:	4b76      	ldr	r3, [pc, #472]	; (8009824 <_strtod_l+0x584>)
 800964a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800964e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009652:	f7f6 ff41 	bl	80004d8 <__aeabi_dmul>
 8009656:	4680      	mov	r8, r0
 8009658:	4650      	mov	r0, sl
 800965a:	4689      	mov	r9, r1
 800965c:	f7f6 fec2 	bl	80003e4 <__aeabi_ui2d>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	4640      	mov	r0, r8
 8009666:	4649      	mov	r1, r9
 8009668:	f7f6 fd80 	bl	800016c <__adddf3>
 800966c:	4680      	mov	r8, r0
 800966e:	4689      	mov	r9, r1
 8009670:	2e0f      	cmp	r6, #15
 8009672:	dc36      	bgt.n	80096e2 <_strtod_l+0x442>
 8009674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009676:	2b00      	cmp	r3, #0
 8009678:	f43f ae4b 	beq.w	8009312 <_strtod_l+0x72>
 800967c:	dd22      	ble.n	80096c4 <_strtod_l+0x424>
 800967e:	2b16      	cmp	r3, #22
 8009680:	dc09      	bgt.n	8009696 <_strtod_l+0x3f6>
 8009682:	4968      	ldr	r1, [pc, #416]	; (8009824 <_strtod_l+0x584>)
 8009684:	4642      	mov	r2, r8
 8009686:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800968a:	464b      	mov	r3, r9
 800968c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009690:	f7f6 ff22 	bl	80004d8 <__aeabi_dmul>
 8009694:	e7c3      	b.n	800961e <_strtod_l+0x37e>
 8009696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009698:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800969c:	4293      	cmp	r3, r2
 800969e:	db20      	blt.n	80096e2 <_strtod_l+0x442>
 80096a0:	4c60      	ldr	r4, [pc, #384]	; (8009824 <_strtod_l+0x584>)
 80096a2:	f1c6 060f 	rsb	r6, r6, #15
 80096a6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80096aa:	4642      	mov	r2, r8
 80096ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096b0:	464b      	mov	r3, r9
 80096b2:	f7f6 ff11 	bl	80004d8 <__aeabi_dmul>
 80096b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b8:	1b9e      	subs	r6, r3, r6
 80096ba:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80096be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096c2:	e7e5      	b.n	8009690 <_strtod_l+0x3f0>
 80096c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c6:	3316      	adds	r3, #22
 80096c8:	db0b      	blt.n	80096e2 <_strtod_l+0x442>
 80096ca:	9b08      	ldr	r3, [sp, #32]
 80096cc:	4640      	mov	r0, r8
 80096ce:	1bdf      	subs	r7, r3, r7
 80096d0:	4b54      	ldr	r3, [pc, #336]	; (8009824 <_strtod_l+0x584>)
 80096d2:	4649      	mov	r1, r9
 80096d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80096d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096dc:	f7f7 f826 	bl	800072c <__aeabi_ddiv>
 80096e0:	e79d      	b.n	800961e <_strtod_l+0x37e>
 80096e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e4:	1b75      	subs	r5, r6, r5
 80096e6:	441d      	add	r5, r3
 80096e8:	2d00      	cmp	r5, #0
 80096ea:	dd70      	ble.n	80097ce <_strtod_l+0x52e>
 80096ec:	f015 030f 	ands.w	r3, r5, #15
 80096f0:	d00a      	beq.n	8009708 <_strtod_l+0x468>
 80096f2:	494c      	ldr	r1, [pc, #304]	; (8009824 <_strtod_l+0x584>)
 80096f4:	4642      	mov	r2, r8
 80096f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096fe:	464b      	mov	r3, r9
 8009700:	f7f6 feea 	bl	80004d8 <__aeabi_dmul>
 8009704:	4680      	mov	r8, r0
 8009706:	4689      	mov	r9, r1
 8009708:	f035 050f 	bics.w	r5, r5, #15
 800970c:	d04d      	beq.n	80097aa <_strtod_l+0x50a>
 800970e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009712:	dd22      	ble.n	800975a <_strtod_l+0x4ba>
 8009714:	2600      	movs	r6, #0
 8009716:	46b3      	mov	fp, r6
 8009718:	960b      	str	r6, [sp, #44]	; 0x2c
 800971a:	9608      	str	r6, [sp, #32]
 800971c:	2322      	movs	r3, #34	; 0x22
 800971e:	f04f 0800 	mov.w	r8, #0
 8009722:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800981c <_strtod_l+0x57c>
 8009726:	6023      	str	r3, [r4, #0]
 8009728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800972a:	2b00      	cmp	r3, #0
 800972c:	f43f adf1 	beq.w	8009312 <_strtod_l+0x72>
 8009730:	4620      	mov	r0, r4
 8009732:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009734:	f7ff f934 	bl	80089a0 <_Bfree>
 8009738:	4620      	mov	r0, r4
 800973a:	9908      	ldr	r1, [sp, #32]
 800973c:	f7ff f930 	bl	80089a0 <_Bfree>
 8009740:	4659      	mov	r1, fp
 8009742:	4620      	mov	r0, r4
 8009744:	f7ff f92c 	bl	80089a0 <_Bfree>
 8009748:	4620      	mov	r0, r4
 800974a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800974c:	f7ff f928 	bl	80089a0 <_Bfree>
 8009750:	4631      	mov	r1, r6
 8009752:	4620      	mov	r0, r4
 8009754:	f7ff f924 	bl	80089a0 <_Bfree>
 8009758:	e5db      	b.n	8009312 <_strtod_l+0x72>
 800975a:	4b33      	ldr	r3, [pc, #204]	; (8009828 <_strtod_l+0x588>)
 800975c:	4640      	mov	r0, r8
 800975e:	9305      	str	r3, [sp, #20]
 8009760:	2300      	movs	r3, #0
 8009762:	4649      	mov	r1, r9
 8009764:	469a      	mov	sl, r3
 8009766:	112d      	asrs	r5, r5, #4
 8009768:	2d01      	cmp	r5, #1
 800976a:	dc21      	bgt.n	80097b0 <_strtod_l+0x510>
 800976c:	b10b      	cbz	r3, 8009772 <_strtod_l+0x4d2>
 800976e:	4680      	mov	r8, r0
 8009770:	4689      	mov	r9, r1
 8009772:	492d      	ldr	r1, [pc, #180]	; (8009828 <_strtod_l+0x588>)
 8009774:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009778:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800977c:	4642      	mov	r2, r8
 800977e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009782:	464b      	mov	r3, r9
 8009784:	f7f6 fea8 	bl	80004d8 <__aeabi_dmul>
 8009788:	4b24      	ldr	r3, [pc, #144]	; (800981c <_strtod_l+0x57c>)
 800978a:	460a      	mov	r2, r1
 800978c:	400b      	ands	r3, r1
 800978e:	4927      	ldr	r1, [pc, #156]	; (800982c <_strtod_l+0x58c>)
 8009790:	4680      	mov	r8, r0
 8009792:	428b      	cmp	r3, r1
 8009794:	d8be      	bhi.n	8009714 <_strtod_l+0x474>
 8009796:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800979a:	428b      	cmp	r3, r1
 800979c:	bf86      	itte	hi
 800979e:	f04f 38ff 	movhi.w	r8, #4294967295
 80097a2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009830 <_strtod_l+0x590>
 80097a6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80097aa:	2300      	movs	r3, #0
 80097ac:	9305      	str	r3, [sp, #20]
 80097ae:	e07b      	b.n	80098a8 <_strtod_l+0x608>
 80097b0:	07ea      	lsls	r2, r5, #31
 80097b2:	d505      	bpl.n	80097c0 <_strtod_l+0x520>
 80097b4:	9b05      	ldr	r3, [sp, #20]
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	f7f6 fe8d 	bl	80004d8 <__aeabi_dmul>
 80097be:	2301      	movs	r3, #1
 80097c0:	9a05      	ldr	r2, [sp, #20]
 80097c2:	f10a 0a01 	add.w	sl, sl, #1
 80097c6:	3208      	adds	r2, #8
 80097c8:	106d      	asrs	r5, r5, #1
 80097ca:	9205      	str	r2, [sp, #20]
 80097cc:	e7cc      	b.n	8009768 <_strtod_l+0x4c8>
 80097ce:	d0ec      	beq.n	80097aa <_strtod_l+0x50a>
 80097d0:	426d      	negs	r5, r5
 80097d2:	f015 020f 	ands.w	r2, r5, #15
 80097d6:	d00a      	beq.n	80097ee <_strtod_l+0x54e>
 80097d8:	4b12      	ldr	r3, [pc, #72]	; (8009824 <_strtod_l+0x584>)
 80097da:	4640      	mov	r0, r8
 80097dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097e0:	4649      	mov	r1, r9
 80097e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e6:	f7f6 ffa1 	bl	800072c <__aeabi_ddiv>
 80097ea:	4680      	mov	r8, r0
 80097ec:	4689      	mov	r9, r1
 80097ee:	112d      	asrs	r5, r5, #4
 80097f0:	d0db      	beq.n	80097aa <_strtod_l+0x50a>
 80097f2:	2d1f      	cmp	r5, #31
 80097f4:	dd1e      	ble.n	8009834 <_strtod_l+0x594>
 80097f6:	2600      	movs	r6, #0
 80097f8:	46b3      	mov	fp, r6
 80097fa:	960b      	str	r6, [sp, #44]	; 0x2c
 80097fc:	9608      	str	r6, [sp, #32]
 80097fe:	2322      	movs	r3, #34	; 0x22
 8009800:	f04f 0800 	mov.w	r8, #0
 8009804:	f04f 0900 	mov.w	r9, #0
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	e78d      	b.n	8009728 <_strtod_l+0x488>
 800980c:	0800b207 	.word	0x0800b207
 8009810:	0800b434 	.word	0x0800b434
 8009814:	0800b1ff 	.word	0x0800b1ff
 8009818:	0800b236 	.word	0x0800b236
 800981c:	7ff00000 	.word	0x7ff00000
 8009820:	0800b5c5 	.word	0x0800b5c5
 8009824:	0800b348 	.word	0x0800b348
 8009828:	0800b320 	.word	0x0800b320
 800982c:	7ca00000 	.word	0x7ca00000
 8009830:	7fefffff 	.word	0x7fefffff
 8009834:	f015 0310 	ands.w	r3, r5, #16
 8009838:	bf18      	it	ne
 800983a:	236a      	movne	r3, #106	; 0x6a
 800983c:	4640      	mov	r0, r8
 800983e:	9305      	str	r3, [sp, #20]
 8009840:	4649      	mov	r1, r9
 8009842:	2300      	movs	r3, #0
 8009844:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009b10 <_strtod_l+0x870>
 8009848:	07ea      	lsls	r2, r5, #31
 800984a:	d504      	bpl.n	8009856 <_strtod_l+0x5b6>
 800984c:	e9da 2300 	ldrd	r2, r3, [sl]
 8009850:	f7f6 fe42 	bl	80004d8 <__aeabi_dmul>
 8009854:	2301      	movs	r3, #1
 8009856:	106d      	asrs	r5, r5, #1
 8009858:	f10a 0a08 	add.w	sl, sl, #8
 800985c:	d1f4      	bne.n	8009848 <_strtod_l+0x5a8>
 800985e:	b10b      	cbz	r3, 8009864 <_strtod_l+0x5c4>
 8009860:	4680      	mov	r8, r0
 8009862:	4689      	mov	r9, r1
 8009864:	9b05      	ldr	r3, [sp, #20]
 8009866:	b1bb      	cbz	r3, 8009898 <_strtod_l+0x5f8>
 8009868:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800986c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009870:	2b00      	cmp	r3, #0
 8009872:	4649      	mov	r1, r9
 8009874:	dd10      	ble.n	8009898 <_strtod_l+0x5f8>
 8009876:	2b1f      	cmp	r3, #31
 8009878:	f340 8128 	ble.w	8009acc <_strtod_l+0x82c>
 800987c:	2b34      	cmp	r3, #52	; 0x34
 800987e:	bfd8      	it	le
 8009880:	f04f 33ff 	movle.w	r3, #4294967295
 8009884:	f04f 0800 	mov.w	r8, #0
 8009888:	bfcf      	iteee	gt
 800988a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800988e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009892:	4093      	lslle	r3, r2
 8009894:	ea03 0901 	andle.w	r9, r3, r1
 8009898:	2200      	movs	r2, #0
 800989a:	2300      	movs	r3, #0
 800989c:	4640      	mov	r0, r8
 800989e:	4649      	mov	r1, r9
 80098a0:	f7f7 f882 	bl	80009a8 <__aeabi_dcmpeq>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d1a6      	bne.n	80097f6 <_strtod_l+0x556>
 80098a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098aa:	465a      	mov	r2, fp
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	4620      	mov	r0, r4
 80098b0:	4633      	mov	r3, r6
 80098b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098b4:	f7ff f8dc 	bl	8008a70 <__s2b>
 80098b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80098ba:	2800      	cmp	r0, #0
 80098bc:	f43f af2a 	beq.w	8009714 <_strtod_l+0x474>
 80098c0:	2600      	movs	r6, #0
 80098c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098c4:	9b08      	ldr	r3, [sp, #32]
 80098c6:	2a00      	cmp	r2, #0
 80098c8:	eba3 0307 	sub.w	r3, r3, r7
 80098cc:	bfa8      	it	ge
 80098ce:	2300      	movge	r3, #0
 80098d0:	46b3      	mov	fp, r6
 80098d2:	9312      	str	r3, [sp, #72]	; 0x48
 80098d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80098d8:	9316      	str	r3, [sp, #88]	; 0x58
 80098da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098dc:	4620      	mov	r0, r4
 80098de:	6859      	ldr	r1, [r3, #4]
 80098e0:	f7ff f81e 	bl	8008920 <_Balloc>
 80098e4:	9008      	str	r0, [sp, #32]
 80098e6:	2800      	cmp	r0, #0
 80098e8:	f43f af18 	beq.w	800971c <_strtod_l+0x47c>
 80098ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ee:	300c      	adds	r0, #12
 80098f0:	691a      	ldr	r2, [r3, #16]
 80098f2:	f103 010c 	add.w	r1, r3, #12
 80098f6:	3202      	adds	r2, #2
 80098f8:	0092      	lsls	r2, r2, #2
 80098fa:	f000 fd89 	bl	800a410 <memcpy>
 80098fe:	ab1c      	add	r3, sp, #112	; 0x70
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	ab1b      	add	r3, sp, #108	; 0x6c
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	4642      	mov	r2, r8
 8009908:	464b      	mov	r3, r9
 800990a:	4620      	mov	r0, r4
 800990c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009910:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8009914:	f7ff fbd8 	bl	80090c8 <__d2b>
 8009918:	901a      	str	r0, [sp, #104]	; 0x68
 800991a:	2800      	cmp	r0, #0
 800991c:	f43f aefe 	beq.w	800971c <_strtod_l+0x47c>
 8009920:	2101      	movs	r1, #1
 8009922:	4620      	mov	r0, r4
 8009924:	f7ff f93c 	bl	8008ba0 <__i2b>
 8009928:	4683      	mov	fp, r0
 800992a:	2800      	cmp	r0, #0
 800992c:	f43f aef6 	beq.w	800971c <_strtod_l+0x47c>
 8009930:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009932:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009934:	2f00      	cmp	r7, #0
 8009936:	bfab      	itete	ge
 8009938:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800993a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800993c:	eb07 0a03 	addge.w	sl, r7, r3
 8009940:	1bdd      	sublt	r5, r3, r7
 8009942:	9b05      	ldr	r3, [sp, #20]
 8009944:	bfa8      	it	ge
 8009946:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009948:	eba7 0703 	sub.w	r7, r7, r3
 800994c:	4417      	add	r7, r2
 800994e:	4b71      	ldr	r3, [pc, #452]	; (8009b14 <_strtod_l+0x874>)
 8009950:	f107 37ff 	add.w	r7, r7, #4294967295
 8009954:	bfb8      	it	lt
 8009956:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800995a:	429f      	cmp	r7, r3
 800995c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009960:	f280 80c7 	bge.w	8009af2 <_strtod_l+0x852>
 8009964:	1bdb      	subs	r3, r3, r7
 8009966:	2b1f      	cmp	r3, #31
 8009968:	f04f 0101 	mov.w	r1, #1
 800996c:	eba2 0203 	sub.w	r2, r2, r3
 8009970:	f300 80b3 	bgt.w	8009ada <_strtod_l+0x83a>
 8009974:	fa01 f303 	lsl.w	r3, r1, r3
 8009978:	9313      	str	r3, [sp, #76]	; 0x4c
 800997a:	2300      	movs	r3, #0
 800997c:	9310      	str	r3, [sp, #64]	; 0x40
 800997e:	eb0a 0702 	add.w	r7, sl, r2
 8009982:	9b05      	ldr	r3, [sp, #20]
 8009984:	45ba      	cmp	sl, r7
 8009986:	4415      	add	r5, r2
 8009988:	441d      	add	r5, r3
 800998a:	4653      	mov	r3, sl
 800998c:	bfa8      	it	ge
 800998e:	463b      	movge	r3, r7
 8009990:	42ab      	cmp	r3, r5
 8009992:	bfa8      	it	ge
 8009994:	462b      	movge	r3, r5
 8009996:	2b00      	cmp	r3, #0
 8009998:	bfc2      	ittt	gt
 800999a:	1aff      	subgt	r7, r7, r3
 800999c:	1aed      	subgt	r5, r5, r3
 800999e:	ebaa 0a03 	subgt.w	sl, sl, r3
 80099a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	dd17      	ble.n	80099d8 <_strtod_l+0x738>
 80099a8:	4659      	mov	r1, fp
 80099aa:	461a      	mov	r2, r3
 80099ac:	4620      	mov	r0, r4
 80099ae:	f7ff f9b5 	bl	8008d1c <__pow5mult>
 80099b2:	4683      	mov	fp, r0
 80099b4:	2800      	cmp	r0, #0
 80099b6:	f43f aeb1 	beq.w	800971c <_strtod_l+0x47c>
 80099ba:	4601      	mov	r1, r0
 80099bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80099be:	4620      	mov	r0, r4
 80099c0:	f7ff f904 	bl	8008bcc <__multiply>
 80099c4:	900a      	str	r0, [sp, #40]	; 0x28
 80099c6:	2800      	cmp	r0, #0
 80099c8:	f43f aea8 	beq.w	800971c <_strtod_l+0x47c>
 80099cc:	4620      	mov	r0, r4
 80099ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 80099d0:	f7fe ffe6 	bl	80089a0 <_Bfree>
 80099d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099d6:	931a      	str	r3, [sp, #104]	; 0x68
 80099d8:	2f00      	cmp	r7, #0
 80099da:	f300 808f 	bgt.w	8009afc <_strtod_l+0x85c>
 80099de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	dd08      	ble.n	80099f6 <_strtod_l+0x756>
 80099e4:	4620      	mov	r0, r4
 80099e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80099e8:	9908      	ldr	r1, [sp, #32]
 80099ea:	f7ff f997 	bl	8008d1c <__pow5mult>
 80099ee:	9008      	str	r0, [sp, #32]
 80099f0:	2800      	cmp	r0, #0
 80099f2:	f43f ae93 	beq.w	800971c <_strtod_l+0x47c>
 80099f6:	2d00      	cmp	r5, #0
 80099f8:	dd08      	ble.n	8009a0c <_strtod_l+0x76c>
 80099fa:	462a      	mov	r2, r5
 80099fc:	4620      	mov	r0, r4
 80099fe:	9908      	ldr	r1, [sp, #32]
 8009a00:	f7ff f9e6 	bl	8008dd0 <__lshift>
 8009a04:	9008      	str	r0, [sp, #32]
 8009a06:	2800      	cmp	r0, #0
 8009a08:	f43f ae88 	beq.w	800971c <_strtod_l+0x47c>
 8009a0c:	f1ba 0f00 	cmp.w	sl, #0
 8009a10:	dd08      	ble.n	8009a24 <_strtod_l+0x784>
 8009a12:	4659      	mov	r1, fp
 8009a14:	4652      	mov	r2, sl
 8009a16:	4620      	mov	r0, r4
 8009a18:	f7ff f9da 	bl	8008dd0 <__lshift>
 8009a1c:	4683      	mov	fp, r0
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f43f ae7c 	beq.w	800971c <_strtod_l+0x47c>
 8009a24:	4620      	mov	r0, r4
 8009a26:	9a08      	ldr	r2, [sp, #32]
 8009a28:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009a2a:	f7ff fa59 	bl	8008ee0 <__mdiff>
 8009a2e:	4606      	mov	r6, r0
 8009a30:	2800      	cmp	r0, #0
 8009a32:	f43f ae73 	beq.w	800971c <_strtod_l+0x47c>
 8009a36:	2500      	movs	r5, #0
 8009a38:	68c3      	ldr	r3, [r0, #12]
 8009a3a:	4659      	mov	r1, fp
 8009a3c:	60c5      	str	r5, [r0, #12]
 8009a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a40:	f7ff fa32 	bl	8008ea8 <__mcmp>
 8009a44:	42a8      	cmp	r0, r5
 8009a46:	da6b      	bge.n	8009b20 <_strtod_l+0x880>
 8009a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a4a:	ea53 0308 	orrs.w	r3, r3, r8
 8009a4e:	f040 808f 	bne.w	8009b70 <_strtod_l+0x8d0>
 8009a52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f040 808a 	bne.w	8009b70 <_strtod_l+0x8d0>
 8009a5c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a60:	0d1b      	lsrs	r3, r3, #20
 8009a62:	051b      	lsls	r3, r3, #20
 8009a64:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a68:	f240 8082 	bls.w	8009b70 <_strtod_l+0x8d0>
 8009a6c:	6973      	ldr	r3, [r6, #20]
 8009a6e:	b913      	cbnz	r3, 8009a76 <_strtod_l+0x7d6>
 8009a70:	6933      	ldr	r3, [r6, #16]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	dd7c      	ble.n	8009b70 <_strtod_l+0x8d0>
 8009a76:	4631      	mov	r1, r6
 8009a78:	2201      	movs	r2, #1
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f7ff f9a8 	bl	8008dd0 <__lshift>
 8009a80:	4659      	mov	r1, fp
 8009a82:	4606      	mov	r6, r0
 8009a84:	f7ff fa10 	bl	8008ea8 <__mcmp>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	dd71      	ble.n	8009b70 <_strtod_l+0x8d0>
 8009a8c:	9905      	ldr	r1, [sp, #20]
 8009a8e:	464b      	mov	r3, r9
 8009a90:	4a21      	ldr	r2, [pc, #132]	; (8009b18 <_strtod_l+0x878>)
 8009a92:	2900      	cmp	r1, #0
 8009a94:	f000 808d 	beq.w	8009bb2 <_strtod_l+0x912>
 8009a98:	ea02 0109 	and.w	r1, r2, r9
 8009a9c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009aa0:	f300 8087 	bgt.w	8009bb2 <_strtod_l+0x912>
 8009aa4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009aa8:	f77f aea9 	ble.w	80097fe <_strtod_l+0x55e>
 8009aac:	4640      	mov	r0, r8
 8009aae:	4649      	mov	r1, r9
 8009ab0:	4b1a      	ldr	r3, [pc, #104]	; (8009b1c <_strtod_l+0x87c>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f7f6 fd10 	bl	80004d8 <__aeabi_dmul>
 8009ab8:	4b17      	ldr	r3, [pc, #92]	; (8009b18 <_strtod_l+0x878>)
 8009aba:	4680      	mov	r8, r0
 8009abc:	400b      	ands	r3, r1
 8009abe:	4689      	mov	r9, r1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f47f ae35 	bne.w	8009730 <_strtod_l+0x490>
 8009ac6:	2322      	movs	r3, #34	; 0x22
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	e631      	b.n	8009730 <_strtod_l+0x490>
 8009acc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad4:	ea03 0808 	and.w	r8, r3, r8
 8009ad8:	e6de      	b.n	8009898 <_strtod_l+0x5f8>
 8009ada:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8009ade:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8009ae2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8009ae6:	37e2      	adds	r7, #226	; 0xe2
 8009ae8:	fa01 f307 	lsl.w	r3, r1, r7
 8009aec:	9310      	str	r3, [sp, #64]	; 0x40
 8009aee:	9113      	str	r1, [sp, #76]	; 0x4c
 8009af0:	e745      	b.n	800997e <_strtod_l+0x6de>
 8009af2:	2300      	movs	r3, #0
 8009af4:	9310      	str	r3, [sp, #64]	; 0x40
 8009af6:	2301      	movs	r3, #1
 8009af8:	9313      	str	r3, [sp, #76]	; 0x4c
 8009afa:	e740      	b.n	800997e <_strtod_l+0x6de>
 8009afc:	463a      	mov	r2, r7
 8009afe:	4620      	mov	r0, r4
 8009b00:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009b02:	f7ff f965 	bl	8008dd0 <__lshift>
 8009b06:	901a      	str	r0, [sp, #104]	; 0x68
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	f47f af68 	bne.w	80099de <_strtod_l+0x73e>
 8009b0e:	e605      	b.n	800971c <_strtod_l+0x47c>
 8009b10:	0800b448 	.word	0x0800b448
 8009b14:	fffffc02 	.word	0xfffffc02
 8009b18:	7ff00000 	.word	0x7ff00000
 8009b1c:	39500000 	.word	0x39500000
 8009b20:	46ca      	mov	sl, r9
 8009b22:	d165      	bne.n	8009bf0 <_strtod_l+0x950>
 8009b24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b2a:	b352      	cbz	r2, 8009b82 <_strtod_l+0x8e2>
 8009b2c:	4a9e      	ldr	r2, [pc, #632]	; (8009da8 <_strtod_l+0xb08>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d12a      	bne.n	8009b88 <_strtod_l+0x8e8>
 8009b32:	9b05      	ldr	r3, [sp, #20]
 8009b34:	4641      	mov	r1, r8
 8009b36:	b1fb      	cbz	r3, 8009b78 <_strtod_l+0x8d8>
 8009b38:	4b9c      	ldr	r3, [pc, #624]	; (8009dac <_strtod_l+0xb0c>)
 8009b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b3e:	ea09 0303 	and.w	r3, r9, r3
 8009b42:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b46:	d81a      	bhi.n	8009b7e <_strtod_l+0x8de>
 8009b48:	0d1b      	lsrs	r3, r3, #20
 8009b4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b52:	4299      	cmp	r1, r3
 8009b54:	d118      	bne.n	8009b88 <_strtod_l+0x8e8>
 8009b56:	4b96      	ldr	r3, [pc, #600]	; (8009db0 <_strtod_l+0xb10>)
 8009b58:	459a      	cmp	sl, r3
 8009b5a:	d102      	bne.n	8009b62 <_strtod_l+0x8c2>
 8009b5c:	3101      	adds	r1, #1
 8009b5e:	f43f addd 	beq.w	800971c <_strtod_l+0x47c>
 8009b62:	f04f 0800 	mov.w	r8, #0
 8009b66:	4b91      	ldr	r3, [pc, #580]	; (8009dac <_strtod_l+0xb0c>)
 8009b68:	ea0a 0303 	and.w	r3, sl, r3
 8009b6c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009b70:	9b05      	ldr	r3, [sp, #20]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d19a      	bne.n	8009aac <_strtod_l+0x80c>
 8009b76:	e5db      	b.n	8009730 <_strtod_l+0x490>
 8009b78:	f04f 33ff 	mov.w	r3, #4294967295
 8009b7c:	e7e9      	b.n	8009b52 <_strtod_l+0x8b2>
 8009b7e:	4613      	mov	r3, r2
 8009b80:	e7e7      	b.n	8009b52 <_strtod_l+0x8b2>
 8009b82:	ea53 0308 	orrs.w	r3, r3, r8
 8009b86:	d081      	beq.n	8009a8c <_strtod_l+0x7ec>
 8009b88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b8a:	b1e3      	cbz	r3, 8009bc6 <_strtod_l+0x926>
 8009b8c:	ea13 0f0a 	tst.w	r3, sl
 8009b90:	d0ee      	beq.n	8009b70 <_strtod_l+0x8d0>
 8009b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b94:	4640      	mov	r0, r8
 8009b96:	4649      	mov	r1, r9
 8009b98:	9a05      	ldr	r2, [sp, #20]
 8009b9a:	b1c3      	cbz	r3, 8009bce <_strtod_l+0x92e>
 8009b9c:	f7ff fb5c 	bl	8009258 <sulp>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009ba6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ba8:	f7f6 fae0 	bl	800016c <__adddf3>
 8009bac:	4680      	mov	r8, r0
 8009bae:	4689      	mov	r9, r1
 8009bb0:	e7de      	b.n	8009b70 <_strtod_l+0x8d0>
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009bb8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009bbc:	f04f 38ff 	mov.w	r8, #4294967295
 8009bc0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009bc4:	e7d4      	b.n	8009b70 <_strtod_l+0x8d0>
 8009bc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009bc8:	ea13 0f08 	tst.w	r3, r8
 8009bcc:	e7e0      	b.n	8009b90 <_strtod_l+0x8f0>
 8009bce:	f7ff fb43 	bl	8009258 <sulp>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009bd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009bda:	f7f6 fac5 	bl	8000168 <__aeabi_dsub>
 8009bde:	2200      	movs	r2, #0
 8009be0:	2300      	movs	r3, #0
 8009be2:	4680      	mov	r8, r0
 8009be4:	4689      	mov	r9, r1
 8009be6:	f7f6 fedf 	bl	80009a8 <__aeabi_dcmpeq>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d0c0      	beq.n	8009b70 <_strtod_l+0x8d0>
 8009bee:	e606      	b.n	80097fe <_strtod_l+0x55e>
 8009bf0:	4659      	mov	r1, fp
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f7ff fabe 	bl	8009174 <__ratio>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009c00:	2200      	movs	r2, #0
 8009c02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c06:	f7f6 fee3 	bl	80009d0 <__aeabi_dcmple>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d06f      	beq.n	8009cee <_strtod_l+0xa4e>
 8009c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d17c      	bne.n	8009d0e <_strtod_l+0xa6e>
 8009c14:	f1b8 0f00 	cmp.w	r8, #0
 8009c18:	d159      	bne.n	8009cce <_strtod_l+0xa2e>
 8009c1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d17b      	bne.n	8009d1a <_strtod_l+0xa7a>
 8009c22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c26:	2200      	movs	r2, #0
 8009c28:	4b62      	ldr	r3, [pc, #392]	; (8009db4 <_strtod_l+0xb14>)
 8009c2a:	f7f6 fec7 	bl	80009bc <__aeabi_dcmplt>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	d15a      	bne.n	8009ce8 <_strtod_l+0xa48>
 8009c32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c36:	2200      	movs	r2, #0
 8009c38:	4b5f      	ldr	r3, [pc, #380]	; (8009db8 <_strtod_l+0xb18>)
 8009c3a:	f7f6 fc4d 	bl	80004d8 <__aeabi_dmul>
 8009c3e:	4605      	mov	r5, r0
 8009c40:	460f      	mov	r7, r1
 8009c42:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009c46:	9506      	str	r5, [sp, #24]
 8009c48:	9307      	str	r3, [sp, #28]
 8009c4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c4e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009c52:	4b56      	ldr	r3, [pc, #344]	; (8009dac <_strtod_l+0xb0c>)
 8009c54:	4a55      	ldr	r2, [pc, #340]	; (8009dac <_strtod_l+0xb0c>)
 8009c56:	ea0a 0303 	and.w	r3, sl, r3
 8009c5a:	9313      	str	r3, [sp, #76]	; 0x4c
 8009c5c:	4b57      	ldr	r3, [pc, #348]	; (8009dbc <_strtod_l+0xb1c>)
 8009c5e:	ea0a 0202 	and.w	r2, sl, r2
 8009c62:	429a      	cmp	r2, r3
 8009c64:	f040 80b0 	bne.w	8009dc8 <_strtod_l+0xb28>
 8009c68:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009c6c:	4640      	mov	r0, r8
 8009c6e:	4649      	mov	r1, r9
 8009c70:	f7ff f9c2 	bl	8008ff8 <__ulp>
 8009c74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c78:	f7f6 fc2e 	bl	80004d8 <__aeabi_dmul>
 8009c7c:	4642      	mov	r2, r8
 8009c7e:	464b      	mov	r3, r9
 8009c80:	f7f6 fa74 	bl	800016c <__adddf3>
 8009c84:	f8df a124 	ldr.w	sl, [pc, #292]	; 8009dac <_strtod_l+0xb0c>
 8009c88:	4a4d      	ldr	r2, [pc, #308]	; (8009dc0 <_strtod_l+0xb20>)
 8009c8a:	ea01 0a0a 	and.w	sl, r1, sl
 8009c8e:	4592      	cmp	sl, r2
 8009c90:	4680      	mov	r8, r0
 8009c92:	d948      	bls.n	8009d26 <_strtod_l+0xa86>
 8009c94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c96:	4b46      	ldr	r3, [pc, #280]	; (8009db0 <_strtod_l+0xb10>)
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d103      	bne.n	8009ca4 <_strtod_l+0xa04>
 8009c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	f43f ad3c 	beq.w	800971c <_strtod_l+0x47c>
 8009ca4:	f04f 38ff 	mov.w	r8, #4294967295
 8009ca8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8009db0 <_strtod_l+0xb10>
 8009cac:	4620      	mov	r0, r4
 8009cae:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009cb0:	f7fe fe76 	bl	80089a0 <_Bfree>
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	9908      	ldr	r1, [sp, #32]
 8009cb8:	f7fe fe72 	bl	80089a0 <_Bfree>
 8009cbc:	4659      	mov	r1, fp
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f7fe fe6e 	bl	80089a0 <_Bfree>
 8009cc4:	4631      	mov	r1, r6
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f7fe fe6a 	bl	80089a0 <_Bfree>
 8009ccc:	e605      	b.n	80098da <_strtod_l+0x63a>
 8009cce:	f1b8 0f01 	cmp.w	r8, #1
 8009cd2:	d103      	bne.n	8009cdc <_strtod_l+0xa3c>
 8009cd4:	f1b9 0f00 	cmp.w	r9, #0
 8009cd8:	f43f ad91 	beq.w	80097fe <_strtod_l+0x55e>
 8009cdc:	2200      	movs	r2, #0
 8009cde:	4b39      	ldr	r3, [pc, #228]	; (8009dc4 <_strtod_l+0xb24>)
 8009ce0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009ce2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ce6:	e016      	b.n	8009d16 <_strtod_l+0xa76>
 8009ce8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009cea:	4f33      	ldr	r7, [pc, #204]	; (8009db8 <_strtod_l+0xb18>)
 8009cec:	e7a9      	b.n	8009c42 <_strtod_l+0x9a2>
 8009cee:	4b32      	ldr	r3, [pc, #200]	; (8009db8 <_strtod_l+0xb18>)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009cf6:	f7f6 fbef 	bl	80004d8 <__aeabi_dmul>
 8009cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	460f      	mov	r7, r1
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d09e      	beq.n	8009c42 <_strtod_l+0x9a2>
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d0c:	e79d      	b.n	8009c4a <_strtod_l+0x9aa>
 8009d0e:	2200      	movs	r2, #0
 8009d10:	4b28      	ldr	r3, [pc, #160]	; (8009db4 <_strtod_l+0xb14>)
 8009d12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d16:	4f27      	ldr	r7, [pc, #156]	; (8009db4 <_strtod_l+0xb14>)
 8009d18:	e797      	b.n	8009c4a <_strtod_l+0x9aa>
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	4b29      	ldr	r3, [pc, #164]	; (8009dc4 <_strtod_l+0xb24>)
 8009d1e:	4645      	mov	r5, r8
 8009d20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d24:	e7f7      	b.n	8009d16 <_strtod_l+0xa76>
 8009d26:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8009d2a:	9b05      	ldr	r3, [sp, #20]
 8009d2c:	46ca      	mov	sl, r9
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1bc      	bne.n	8009cac <_strtod_l+0xa0c>
 8009d32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d38:	0d1b      	lsrs	r3, r3, #20
 8009d3a:	051b      	lsls	r3, r3, #20
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d1b5      	bne.n	8009cac <_strtod_l+0xa0c>
 8009d40:	4628      	mov	r0, r5
 8009d42:	4639      	mov	r1, r7
 8009d44:	f7f7 f9b4 	bl	80010b0 <__aeabi_d2lz>
 8009d48:	f7f6 fb98 	bl	800047c <__aeabi_l2d>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4628      	mov	r0, r5
 8009d52:	4639      	mov	r1, r7
 8009d54:	f7f6 fa08 	bl	8000168 <__aeabi_dsub>
 8009d58:	460b      	mov	r3, r1
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8009d60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d66:	ea4a 0a08 	orr.w	sl, sl, r8
 8009d6a:	ea5a 0a03 	orrs.w	sl, sl, r3
 8009d6e:	d06c      	beq.n	8009e4a <_strtod_l+0xbaa>
 8009d70:	a309      	add	r3, pc, #36	; (adr r3, 8009d98 <_strtod_l+0xaf8>)
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	f7f6 fe21 	bl	80009bc <__aeabi_dcmplt>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	f47f acd8 	bne.w	8009730 <_strtod_l+0x490>
 8009d80:	a307      	add	r3, pc, #28	; (adr r3, 8009da0 <_strtod_l+0xb00>)
 8009d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d8a:	f7f6 fe35 	bl	80009f8 <__aeabi_dcmpgt>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d08c      	beq.n	8009cac <_strtod_l+0xa0c>
 8009d92:	e4cd      	b.n	8009730 <_strtod_l+0x490>
 8009d94:	f3af 8000 	nop.w
 8009d98:	94a03595 	.word	0x94a03595
 8009d9c:	3fdfffff 	.word	0x3fdfffff
 8009da0:	35afe535 	.word	0x35afe535
 8009da4:	3fe00000 	.word	0x3fe00000
 8009da8:	000fffff 	.word	0x000fffff
 8009dac:	7ff00000 	.word	0x7ff00000
 8009db0:	7fefffff 	.word	0x7fefffff
 8009db4:	3ff00000 	.word	0x3ff00000
 8009db8:	3fe00000 	.word	0x3fe00000
 8009dbc:	7fe00000 	.word	0x7fe00000
 8009dc0:	7c9fffff 	.word	0x7c9fffff
 8009dc4:	bff00000 	.word	0xbff00000
 8009dc8:	9b05      	ldr	r3, [sp, #20]
 8009dca:	b333      	cbz	r3, 8009e1a <_strtod_l+0xb7a>
 8009dcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009dce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009dd2:	d822      	bhi.n	8009e1a <_strtod_l+0xb7a>
 8009dd4:	a328      	add	r3, pc, #160	; (adr r3, 8009e78 <_strtod_l+0xbd8>)
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	4628      	mov	r0, r5
 8009ddc:	4639      	mov	r1, r7
 8009dde:	f7f6 fdf7 	bl	80009d0 <__aeabi_dcmple>
 8009de2:	b1a0      	cbz	r0, 8009e0e <_strtod_l+0xb6e>
 8009de4:	4639      	mov	r1, r7
 8009de6:	4628      	mov	r0, r5
 8009de8:	f7f6 fe4e 	bl	8000a88 <__aeabi_d2uiz>
 8009dec:	2801      	cmp	r0, #1
 8009dee:	bf38      	it	cc
 8009df0:	2001      	movcc	r0, #1
 8009df2:	f7f6 faf7 	bl	80003e4 <__aeabi_ui2d>
 8009df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009df8:	4605      	mov	r5, r0
 8009dfa:	460f      	mov	r7, r1
 8009dfc:	bb03      	cbnz	r3, 8009e40 <_strtod_l+0xba0>
 8009dfe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e02:	9014      	str	r0, [sp, #80]	; 0x50
 8009e04:	9315      	str	r3, [sp, #84]	; 0x54
 8009e06:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009e0a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009e0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e12:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009e16:	1a9b      	subs	r3, r3, r2
 8009e18:	9311      	str	r3, [sp, #68]	; 0x44
 8009e1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009e1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009e1e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8009e22:	f7ff f8e9 	bl	8008ff8 <__ulp>
 8009e26:	4602      	mov	r2, r0
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4640      	mov	r0, r8
 8009e2c:	4649      	mov	r1, r9
 8009e2e:	f7f6 fb53 	bl	80004d8 <__aeabi_dmul>
 8009e32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e36:	f7f6 f999 	bl	800016c <__adddf3>
 8009e3a:	4680      	mov	r8, r0
 8009e3c:	4689      	mov	r9, r1
 8009e3e:	e774      	b.n	8009d2a <_strtod_l+0xa8a>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009e48:	e7dd      	b.n	8009e06 <_strtod_l+0xb66>
 8009e4a:	a30d      	add	r3, pc, #52	; (adr r3, 8009e80 <_strtod_l+0xbe0>)
 8009e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e50:	f7f6 fdb4 	bl	80009bc <__aeabi_dcmplt>
 8009e54:	e79b      	b.n	8009d8e <_strtod_l+0xaee>
 8009e56:	2300      	movs	r3, #0
 8009e58:	930e      	str	r3, [sp, #56]	; 0x38
 8009e5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	f7ff ba5b 	b.w	800931a <_strtod_l+0x7a>
 8009e64:	2a65      	cmp	r2, #101	; 0x65
 8009e66:	f43f ab52 	beq.w	800950e <_strtod_l+0x26e>
 8009e6a:	2a45      	cmp	r2, #69	; 0x45
 8009e6c:	f43f ab4f 	beq.w	800950e <_strtod_l+0x26e>
 8009e70:	2301      	movs	r3, #1
 8009e72:	f7ff bb87 	b.w	8009584 <_strtod_l+0x2e4>
 8009e76:	bf00      	nop
 8009e78:	ffc00000 	.word	0xffc00000
 8009e7c:	41dfffff 	.word	0x41dfffff
 8009e80:	94a03595 	.word	0x94a03595
 8009e84:	3fcfffff 	.word	0x3fcfffff

08009e88 <_strtod_r>:
 8009e88:	4b01      	ldr	r3, [pc, #4]	; (8009e90 <_strtod_r+0x8>)
 8009e8a:	f7ff ba09 	b.w	80092a0 <_strtod_l>
 8009e8e:	bf00      	nop
 8009e90:	20000068 	.word	0x20000068

08009e94 <_strtol_l.constprop.0>:
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e9a:	4686      	mov	lr, r0
 8009e9c:	4690      	mov	r8, r2
 8009e9e:	d001      	beq.n	8009ea4 <_strtol_l.constprop.0+0x10>
 8009ea0:	2b24      	cmp	r3, #36	; 0x24
 8009ea2:	d906      	bls.n	8009eb2 <_strtol_l.constprop.0+0x1e>
 8009ea4:	f7fd fd92 	bl	80079cc <__errno>
 8009ea8:	2316      	movs	r3, #22
 8009eaa:	6003      	str	r3, [r0, #0]
 8009eac:	2000      	movs	r0, #0
 8009eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb2:	460d      	mov	r5, r1
 8009eb4:	4835      	ldr	r0, [pc, #212]	; (8009f8c <_strtol_l.constprop.0+0xf8>)
 8009eb6:	462a      	mov	r2, r5
 8009eb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ebc:	5d06      	ldrb	r6, [r0, r4]
 8009ebe:	f016 0608 	ands.w	r6, r6, #8
 8009ec2:	d1f8      	bne.n	8009eb6 <_strtol_l.constprop.0+0x22>
 8009ec4:	2c2d      	cmp	r4, #45	; 0x2d
 8009ec6:	d12e      	bne.n	8009f26 <_strtol_l.constprop.0+0x92>
 8009ec8:	2601      	movs	r6, #1
 8009eca:	782c      	ldrb	r4, [r5, #0]
 8009ecc:	1c95      	adds	r5, r2, #2
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d057      	beq.n	8009f82 <_strtol_l.constprop.0+0xee>
 8009ed2:	2b10      	cmp	r3, #16
 8009ed4:	d109      	bne.n	8009eea <_strtol_l.constprop.0+0x56>
 8009ed6:	2c30      	cmp	r4, #48	; 0x30
 8009ed8:	d107      	bne.n	8009eea <_strtol_l.constprop.0+0x56>
 8009eda:	782a      	ldrb	r2, [r5, #0]
 8009edc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009ee0:	2a58      	cmp	r2, #88	; 0x58
 8009ee2:	d149      	bne.n	8009f78 <_strtol_l.constprop.0+0xe4>
 8009ee4:	2310      	movs	r3, #16
 8009ee6:	786c      	ldrb	r4, [r5, #1]
 8009ee8:	3502      	adds	r5, #2
 8009eea:	2200      	movs	r2, #0
 8009eec:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8009ef0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009ef4:	fbbc f9f3 	udiv	r9, ip, r3
 8009ef8:	4610      	mov	r0, r2
 8009efa:	fb03 ca19 	mls	sl, r3, r9, ip
 8009efe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009f02:	2f09      	cmp	r7, #9
 8009f04:	d814      	bhi.n	8009f30 <_strtol_l.constprop.0+0x9c>
 8009f06:	463c      	mov	r4, r7
 8009f08:	42a3      	cmp	r3, r4
 8009f0a:	dd20      	ble.n	8009f4e <_strtol_l.constprop.0+0xba>
 8009f0c:	1c57      	adds	r7, r2, #1
 8009f0e:	d007      	beq.n	8009f20 <_strtol_l.constprop.0+0x8c>
 8009f10:	4581      	cmp	r9, r0
 8009f12:	d319      	bcc.n	8009f48 <_strtol_l.constprop.0+0xb4>
 8009f14:	d101      	bne.n	8009f1a <_strtol_l.constprop.0+0x86>
 8009f16:	45a2      	cmp	sl, r4
 8009f18:	db16      	blt.n	8009f48 <_strtol_l.constprop.0+0xb4>
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	fb00 4003 	mla	r0, r0, r3, r4
 8009f20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f24:	e7eb      	b.n	8009efe <_strtol_l.constprop.0+0x6a>
 8009f26:	2c2b      	cmp	r4, #43	; 0x2b
 8009f28:	bf04      	itt	eq
 8009f2a:	782c      	ldrbeq	r4, [r5, #0]
 8009f2c:	1c95      	addeq	r5, r2, #2
 8009f2e:	e7ce      	b.n	8009ece <_strtol_l.constprop.0+0x3a>
 8009f30:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009f34:	2f19      	cmp	r7, #25
 8009f36:	d801      	bhi.n	8009f3c <_strtol_l.constprop.0+0xa8>
 8009f38:	3c37      	subs	r4, #55	; 0x37
 8009f3a:	e7e5      	b.n	8009f08 <_strtol_l.constprop.0+0x74>
 8009f3c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009f40:	2f19      	cmp	r7, #25
 8009f42:	d804      	bhi.n	8009f4e <_strtol_l.constprop.0+0xba>
 8009f44:	3c57      	subs	r4, #87	; 0x57
 8009f46:	e7df      	b.n	8009f08 <_strtol_l.constprop.0+0x74>
 8009f48:	f04f 32ff 	mov.w	r2, #4294967295
 8009f4c:	e7e8      	b.n	8009f20 <_strtol_l.constprop.0+0x8c>
 8009f4e:	1c53      	adds	r3, r2, #1
 8009f50:	d108      	bne.n	8009f64 <_strtol_l.constprop.0+0xd0>
 8009f52:	2322      	movs	r3, #34	; 0x22
 8009f54:	4660      	mov	r0, ip
 8009f56:	f8ce 3000 	str.w	r3, [lr]
 8009f5a:	f1b8 0f00 	cmp.w	r8, #0
 8009f5e:	d0a6      	beq.n	8009eae <_strtol_l.constprop.0+0x1a>
 8009f60:	1e69      	subs	r1, r5, #1
 8009f62:	e006      	b.n	8009f72 <_strtol_l.constprop.0+0xde>
 8009f64:	b106      	cbz	r6, 8009f68 <_strtol_l.constprop.0+0xd4>
 8009f66:	4240      	negs	r0, r0
 8009f68:	f1b8 0f00 	cmp.w	r8, #0
 8009f6c:	d09f      	beq.n	8009eae <_strtol_l.constprop.0+0x1a>
 8009f6e:	2a00      	cmp	r2, #0
 8009f70:	d1f6      	bne.n	8009f60 <_strtol_l.constprop.0+0xcc>
 8009f72:	f8c8 1000 	str.w	r1, [r8]
 8009f76:	e79a      	b.n	8009eae <_strtol_l.constprop.0+0x1a>
 8009f78:	2430      	movs	r4, #48	; 0x30
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1b5      	bne.n	8009eea <_strtol_l.constprop.0+0x56>
 8009f7e:	2308      	movs	r3, #8
 8009f80:	e7b3      	b.n	8009eea <_strtol_l.constprop.0+0x56>
 8009f82:	2c30      	cmp	r4, #48	; 0x30
 8009f84:	d0a9      	beq.n	8009eda <_strtol_l.constprop.0+0x46>
 8009f86:	230a      	movs	r3, #10
 8009f88:	e7af      	b.n	8009eea <_strtol_l.constprop.0+0x56>
 8009f8a:	bf00      	nop
 8009f8c:	0800b471 	.word	0x0800b471

08009f90 <_strtol_r>:
 8009f90:	f7ff bf80 	b.w	8009e94 <_strtol_l.constprop.0>

08009f94 <__ssputs_r>:
 8009f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f98:	461f      	mov	r7, r3
 8009f9a:	688e      	ldr	r6, [r1, #8]
 8009f9c:	4682      	mov	sl, r0
 8009f9e:	42be      	cmp	r6, r7
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	4690      	mov	r8, r2
 8009fa4:	680b      	ldr	r3, [r1, #0]
 8009fa6:	d82c      	bhi.n	800a002 <__ssputs_r+0x6e>
 8009fa8:	898a      	ldrh	r2, [r1, #12]
 8009faa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fae:	d026      	beq.n	8009ffe <__ssputs_r+0x6a>
 8009fb0:	6965      	ldr	r5, [r4, #20]
 8009fb2:	6909      	ldr	r1, [r1, #16]
 8009fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fb8:	eba3 0901 	sub.w	r9, r3, r1
 8009fbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fc0:	1c7b      	adds	r3, r7, #1
 8009fc2:	444b      	add	r3, r9
 8009fc4:	106d      	asrs	r5, r5, #1
 8009fc6:	429d      	cmp	r5, r3
 8009fc8:	bf38      	it	cc
 8009fca:	461d      	movcc	r5, r3
 8009fcc:	0553      	lsls	r3, r2, #21
 8009fce:	d527      	bpl.n	800a020 <__ssputs_r+0x8c>
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	f7fe fc19 	bl	8008808 <_malloc_r>
 8009fd6:	4606      	mov	r6, r0
 8009fd8:	b360      	cbz	r0, 800a034 <__ssputs_r+0xa0>
 8009fda:	464a      	mov	r2, r9
 8009fdc:	6921      	ldr	r1, [r4, #16]
 8009fde:	f000 fa17 	bl	800a410 <memcpy>
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fec:	81a3      	strh	r3, [r4, #12]
 8009fee:	6126      	str	r6, [r4, #16]
 8009ff0:	444e      	add	r6, r9
 8009ff2:	6026      	str	r6, [r4, #0]
 8009ff4:	463e      	mov	r6, r7
 8009ff6:	6165      	str	r5, [r4, #20]
 8009ff8:	eba5 0509 	sub.w	r5, r5, r9
 8009ffc:	60a5      	str	r5, [r4, #8]
 8009ffe:	42be      	cmp	r6, r7
 800a000:	d900      	bls.n	800a004 <__ssputs_r+0x70>
 800a002:	463e      	mov	r6, r7
 800a004:	4632      	mov	r2, r6
 800a006:	4641      	mov	r1, r8
 800a008:	6820      	ldr	r0, [r4, #0]
 800a00a:	f000 f9c5 	bl	800a398 <memmove>
 800a00e:	2000      	movs	r0, #0
 800a010:	68a3      	ldr	r3, [r4, #8]
 800a012:	1b9b      	subs	r3, r3, r6
 800a014:	60a3      	str	r3, [r4, #8]
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	4433      	add	r3, r6
 800a01a:	6023      	str	r3, [r4, #0]
 800a01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a020:	462a      	mov	r2, r5
 800a022:	f000 fda6 	bl	800ab72 <_realloc_r>
 800a026:	4606      	mov	r6, r0
 800a028:	2800      	cmp	r0, #0
 800a02a:	d1e0      	bne.n	8009fee <__ssputs_r+0x5a>
 800a02c:	4650      	mov	r0, sl
 800a02e:	6921      	ldr	r1, [r4, #16]
 800a030:	f7fe fb7a 	bl	8008728 <_free_r>
 800a034:	230c      	movs	r3, #12
 800a036:	f8ca 3000 	str.w	r3, [sl]
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	f04f 30ff 	mov.w	r0, #4294967295
 800a040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a044:	81a3      	strh	r3, [r4, #12]
 800a046:	e7e9      	b.n	800a01c <__ssputs_r+0x88>

0800a048 <_svfiprintf_r>:
 800a048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04c:	4698      	mov	r8, r3
 800a04e:	898b      	ldrh	r3, [r1, #12]
 800a050:	4607      	mov	r7, r0
 800a052:	061b      	lsls	r3, r3, #24
 800a054:	460d      	mov	r5, r1
 800a056:	4614      	mov	r4, r2
 800a058:	b09d      	sub	sp, #116	; 0x74
 800a05a:	d50e      	bpl.n	800a07a <_svfiprintf_r+0x32>
 800a05c:	690b      	ldr	r3, [r1, #16]
 800a05e:	b963      	cbnz	r3, 800a07a <_svfiprintf_r+0x32>
 800a060:	2140      	movs	r1, #64	; 0x40
 800a062:	f7fe fbd1 	bl	8008808 <_malloc_r>
 800a066:	6028      	str	r0, [r5, #0]
 800a068:	6128      	str	r0, [r5, #16]
 800a06a:	b920      	cbnz	r0, 800a076 <_svfiprintf_r+0x2e>
 800a06c:	230c      	movs	r3, #12
 800a06e:	603b      	str	r3, [r7, #0]
 800a070:	f04f 30ff 	mov.w	r0, #4294967295
 800a074:	e0d0      	b.n	800a218 <_svfiprintf_r+0x1d0>
 800a076:	2340      	movs	r3, #64	; 0x40
 800a078:	616b      	str	r3, [r5, #20]
 800a07a:	2300      	movs	r3, #0
 800a07c:	9309      	str	r3, [sp, #36]	; 0x24
 800a07e:	2320      	movs	r3, #32
 800a080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a084:	2330      	movs	r3, #48	; 0x30
 800a086:	f04f 0901 	mov.w	r9, #1
 800a08a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a08e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a230 <_svfiprintf_r+0x1e8>
 800a092:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a096:	4623      	mov	r3, r4
 800a098:	469a      	mov	sl, r3
 800a09a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a09e:	b10a      	cbz	r2, 800a0a4 <_svfiprintf_r+0x5c>
 800a0a0:	2a25      	cmp	r2, #37	; 0x25
 800a0a2:	d1f9      	bne.n	800a098 <_svfiprintf_r+0x50>
 800a0a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a0a8:	d00b      	beq.n	800a0c2 <_svfiprintf_r+0x7a>
 800a0aa:	465b      	mov	r3, fp
 800a0ac:	4622      	mov	r2, r4
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	4638      	mov	r0, r7
 800a0b2:	f7ff ff6f 	bl	8009f94 <__ssputs_r>
 800a0b6:	3001      	adds	r0, #1
 800a0b8:	f000 80a9 	beq.w	800a20e <_svfiprintf_r+0x1c6>
 800a0bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0be:	445a      	add	r2, fp
 800a0c0:	9209      	str	r2, [sp, #36]	; 0x24
 800a0c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f000 80a1 	beq.w	800a20e <_svfiprintf_r+0x1c6>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0d6:	f10a 0a01 	add.w	sl, sl, #1
 800a0da:	9304      	str	r3, [sp, #16]
 800a0dc:	9307      	str	r3, [sp, #28]
 800a0de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0e2:	931a      	str	r3, [sp, #104]	; 0x68
 800a0e4:	4654      	mov	r4, sl
 800a0e6:	2205      	movs	r2, #5
 800a0e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ec:	4850      	ldr	r0, [pc, #320]	; (800a230 <_svfiprintf_r+0x1e8>)
 800a0ee:	f7fd fc9a 	bl	8007a26 <memchr>
 800a0f2:	9a04      	ldr	r2, [sp, #16]
 800a0f4:	b9d8      	cbnz	r0, 800a12e <_svfiprintf_r+0xe6>
 800a0f6:	06d0      	lsls	r0, r2, #27
 800a0f8:	bf44      	itt	mi
 800a0fa:	2320      	movmi	r3, #32
 800a0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a100:	0711      	lsls	r1, r2, #28
 800a102:	bf44      	itt	mi
 800a104:	232b      	movmi	r3, #43	; 0x2b
 800a106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a10a:	f89a 3000 	ldrb.w	r3, [sl]
 800a10e:	2b2a      	cmp	r3, #42	; 0x2a
 800a110:	d015      	beq.n	800a13e <_svfiprintf_r+0xf6>
 800a112:	4654      	mov	r4, sl
 800a114:	2000      	movs	r0, #0
 800a116:	f04f 0c0a 	mov.w	ip, #10
 800a11a:	9a07      	ldr	r2, [sp, #28]
 800a11c:	4621      	mov	r1, r4
 800a11e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a122:	3b30      	subs	r3, #48	; 0x30
 800a124:	2b09      	cmp	r3, #9
 800a126:	d94d      	bls.n	800a1c4 <_svfiprintf_r+0x17c>
 800a128:	b1b0      	cbz	r0, 800a158 <_svfiprintf_r+0x110>
 800a12a:	9207      	str	r2, [sp, #28]
 800a12c:	e014      	b.n	800a158 <_svfiprintf_r+0x110>
 800a12e:	eba0 0308 	sub.w	r3, r0, r8
 800a132:	fa09 f303 	lsl.w	r3, r9, r3
 800a136:	4313      	orrs	r3, r2
 800a138:	46a2      	mov	sl, r4
 800a13a:	9304      	str	r3, [sp, #16]
 800a13c:	e7d2      	b.n	800a0e4 <_svfiprintf_r+0x9c>
 800a13e:	9b03      	ldr	r3, [sp, #12]
 800a140:	1d19      	adds	r1, r3, #4
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	9103      	str	r1, [sp, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	bfbb      	ittet	lt
 800a14a:	425b      	neglt	r3, r3
 800a14c:	f042 0202 	orrlt.w	r2, r2, #2
 800a150:	9307      	strge	r3, [sp, #28]
 800a152:	9307      	strlt	r3, [sp, #28]
 800a154:	bfb8      	it	lt
 800a156:	9204      	strlt	r2, [sp, #16]
 800a158:	7823      	ldrb	r3, [r4, #0]
 800a15a:	2b2e      	cmp	r3, #46	; 0x2e
 800a15c:	d10c      	bne.n	800a178 <_svfiprintf_r+0x130>
 800a15e:	7863      	ldrb	r3, [r4, #1]
 800a160:	2b2a      	cmp	r3, #42	; 0x2a
 800a162:	d134      	bne.n	800a1ce <_svfiprintf_r+0x186>
 800a164:	9b03      	ldr	r3, [sp, #12]
 800a166:	3402      	adds	r4, #2
 800a168:	1d1a      	adds	r2, r3, #4
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	9203      	str	r2, [sp, #12]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	bfb8      	it	lt
 800a172:	f04f 33ff 	movlt.w	r3, #4294967295
 800a176:	9305      	str	r3, [sp, #20]
 800a178:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a234 <_svfiprintf_r+0x1ec>
 800a17c:	2203      	movs	r2, #3
 800a17e:	4650      	mov	r0, sl
 800a180:	7821      	ldrb	r1, [r4, #0]
 800a182:	f7fd fc50 	bl	8007a26 <memchr>
 800a186:	b138      	cbz	r0, 800a198 <_svfiprintf_r+0x150>
 800a188:	2240      	movs	r2, #64	; 0x40
 800a18a:	9b04      	ldr	r3, [sp, #16]
 800a18c:	eba0 000a 	sub.w	r0, r0, sl
 800a190:	4082      	lsls	r2, r0
 800a192:	4313      	orrs	r3, r2
 800a194:	3401      	adds	r4, #1
 800a196:	9304      	str	r3, [sp, #16]
 800a198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a19c:	2206      	movs	r2, #6
 800a19e:	4826      	ldr	r0, [pc, #152]	; (800a238 <_svfiprintf_r+0x1f0>)
 800a1a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1a4:	f7fd fc3f 	bl	8007a26 <memchr>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d038      	beq.n	800a21e <_svfiprintf_r+0x1d6>
 800a1ac:	4b23      	ldr	r3, [pc, #140]	; (800a23c <_svfiprintf_r+0x1f4>)
 800a1ae:	bb1b      	cbnz	r3, 800a1f8 <_svfiprintf_r+0x1b0>
 800a1b0:	9b03      	ldr	r3, [sp, #12]
 800a1b2:	3307      	adds	r3, #7
 800a1b4:	f023 0307 	bic.w	r3, r3, #7
 800a1b8:	3308      	adds	r3, #8
 800a1ba:	9303      	str	r3, [sp, #12]
 800a1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1be:	4433      	add	r3, r6
 800a1c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c2:	e768      	b.n	800a096 <_svfiprintf_r+0x4e>
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	2001      	movs	r0, #1
 800a1c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1cc:	e7a6      	b.n	800a11c <_svfiprintf_r+0xd4>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	f04f 0c0a 	mov.w	ip, #10
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	3401      	adds	r4, #1
 800a1d8:	9305      	str	r3, [sp, #20]
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1e0:	3a30      	subs	r2, #48	; 0x30
 800a1e2:	2a09      	cmp	r2, #9
 800a1e4:	d903      	bls.n	800a1ee <_svfiprintf_r+0x1a6>
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d0c6      	beq.n	800a178 <_svfiprintf_r+0x130>
 800a1ea:	9105      	str	r1, [sp, #20]
 800a1ec:	e7c4      	b.n	800a178 <_svfiprintf_r+0x130>
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1f6:	e7f0      	b.n	800a1da <_svfiprintf_r+0x192>
 800a1f8:	ab03      	add	r3, sp, #12
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	462a      	mov	r2, r5
 800a1fe:	4638      	mov	r0, r7
 800a200:	4b0f      	ldr	r3, [pc, #60]	; (800a240 <_svfiprintf_r+0x1f8>)
 800a202:	a904      	add	r1, sp, #16
 800a204:	f7fc fc9a 	bl	8006b3c <_printf_float>
 800a208:	1c42      	adds	r2, r0, #1
 800a20a:	4606      	mov	r6, r0
 800a20c:	d1d6      	bne.n	800a1bc <_svfiprintf_r+0x174>
 800a20e:	89ab      	ldrh	r3, [r5, #12]
 800a210:	065b      	lsls	r3, r3, #25
 800a212:	f53f af2d 	bmi.w	800a070 <_svfiprintf_r+0x28>
 800a216:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a218:	b01d      	add	sp, #116	; 0x74
 800a21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21e:	ab03      	add	r3, sp, #12
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	462a      	mov	r2, r5
 800a224:	4638      	mov	r0, r7
 800a226:	4b06      	ldr	r3, [pc, #24]	; (800a240 <_svfiprintf_r+0x1f8>)
 800a228:	a904      	add	r1, sp, #16
 800a22a:	f7fc ff27 	bl	800707c <_printf_i>
 800a22e:	e7eb      	b.n	800a208 <_svfiprintf_r+0x1c0>
 800a230:	0800b571 	.word	0x0800b571
 800a234:	0800b577 	.word	0x0800b577
 800a238:	0800b57b 	.word	0x0800b57b
 800a23c:	08006b3d 	.word	0x08006b3d
 800a240:	08009f95 	.word	0x08009f95

0800a244 <__sflush_r>:
 800a244:	898a      	ldrh	r2, [r1, #12]
 800a246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a248:	4605      	mov	r5, r0
 800a24a:	0710      	lsls	r0, r2, #28
 800a24c:	460c      	mov	r4, r1
 800a24e:	d457      	bmi.n	800a300 <__sflush_r+0xbc>
 800a250:	684b      	ldr	r3, [r1, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	dc04      	bgt.n	800a260 <__sflush_r+0x1c>
 800a256:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a258:	2b00      	cmp	r3, #0
 800a25a:	dc01      	bgt.n	800a260 <__sflush_r+0x1c>
 800a25c:	2000      	movs	r0, #0
 800a25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a262:	2e00      	cmp	r6, #0
 800a264:	d0fa      	beq.n	800a25c <__sflush_r+0x18>
 800a266:	2300      	movs	r3, #0
 800a268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a26c:	682f      	ldr	r7, [r5, #0]
 800a26e:	6a21      	ldr	r1, [r4, #32]
 800a270:	602b      	str	r3, [r5, #0]
 800a272:	d032      	beq.n	800a2da <__sflush_r+0x96>
 800a274:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a276:	89a3      	ldrh	r3, [r4, #12]
 800a278:	075a      	lsls	r2, r3, #29
 800a27a:	d505      	bpl.n	800a288 <__sflush_r+0x44>
 800a27c:	6863      	ldr	r3, [r4, #4]
 800a27e:	1ac0      	subs	r0, r0, r3
 800a280:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a282:	b10b      	cbz	r3, 800a288 <__sflush_r+0x44>
 800a284:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a286:	1ac0      	subs	r0, r0, r3
 800a288:	2300      	movs	r3, #0
 800a28a:	4602      	mov	r2, r0
 800a28c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a28e:	4628      	mov	r0, r5
 800a290:	6a21      	ldr	r1, [r4, #32]
 800a292:	47b0      	blx	r6
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	d106      	bne.n	800a2a8 <__sflush_r+0x64>
 800a29a:	6829      	ldr	r1, [r5, #0]
 800a29c:	291d      	cmp	r1, #29
 800a29e:	d82b      	bhi.n	800a2f8 <__sflush_r+0xb4>
 800a2a0:	4a28      	ldr	r2, [pc, #160]	; (800a344 <__sflush_r+0x100>)
 800a2a2:	410a      	asrs	r2, r1
 800a2a4:	07d6      	lsls	r6, r2, #31
 800a2a6:	d427      	bmi.n	800a2f8 <__sflush_r+0xb4>
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	6062      	str	r2, [r4, #4]
 800a2ac:	6922      	ldr	r2, [r4, #16]
 800a2ae:	04d9      	lsls	r1, r3, #19
 800a2b0:	6022      	str	r2, [r4, #0]
 800a2b2:	d504      	bpl.n	800a2be <__sflush_r+0x7a>
 800a2b4:	1c42      	adds	r2, r0, #1
 800a2b6:	d101      	bne.n	800a2bc <__sflush_r+0x78>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	b903      	cbnz	r3, 800a2be <__sflush_r+0x7a>
 800a2bc:	6560      	str	r0, [r4, #84]	; 0x54
 800a2be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2c0:	602f      	str	r7, [r5, #0]
 800a2c2:	2900      	cmp	r1, #0
 800a2c4:	d0ca      	beq.n	800a25c <__sflush_r+0x18>
 800a2c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2ca:	4299      	cmp	r1, r3
 800a2cc:	d002      	beq.n	800a2d4 <__sflush_r+0x90>
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f7fe fa2a 	bl	8008728 <_free_r>
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	6360      	str	r0, [r4, #52]	; 0x34
 800a2d8:	e7c1      	b.n	800a25e <__sflush_r+0x1a>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4628      	mov	r0, r5
 800a2de:	47b0      	blx	r6
 800a2e0:	1c41      	adds	r1, r0, #1
 800a2e2:	d1c8      	bne.n	800a276 <__sflush_r+0x32>
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d0c5      	beq.n	800a276 <__sflush_r+0x32>
 800a2ea:	2b1d      	cmp	r3, #29
 800a2ec:	d001      	beq.n	800a2f2 <__sflush_r+0xae>
 800a2ee:	2b16      	cmp	r3, #22
 800a2f0:	d101      	bne.n	800a2f6 <__sflush_r+0xb2>
 800a2f2:	602f      	str	r7, [r5, #0]
 800a2f4:	e7b2      	b.n	800a25c <__sflush_r+0x18>
 800a2f6:	89a3      	ldrh	r3, [r4, #12]
 800a2f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2fc:	81a3      	strh	r3, [r4, #12]
 800a2fe:	e7ae      	b.n	800a25e <__sflush_r+0x1a>
 800a300:	690f      	ldr	r7, [r1, #16]
 800a302:	2f00      	cmp	r7, #0
 800a304:	d0aa      	beq.n	800a25c <__sflush_r+0x18>
 800a306:	0793      	lsls	r3, r2, #30
 800a308:	bf18      	it	ne
 800a30a:	2300      	movne	r3, #0
 800a30c:	680e      	ldr	r6, [r1, #0]
 800a30e:	bf08      	it	eq
 800a310:	694b      	ldreq	r3, [r1, #20]
 800a312:	1bf6      	subs	r6, r6, r7
 800a314:	600f      	str	r7, [r1, #0]
 800a316:	608b      	str	r3, [r1, #8]
 800a318:	2e00      	cmp	r6, #0
 800a31a:	dd9f      	ble.n	800a25c <__sflush_r+0x18>
 800a31c:	4633      	mov	r3, r6
 800a31e:	463a      	mov	r2, r7
 800a320:	4628      	mov	r0, r5
 800a322:	6a21      	ldr	r1, [r4, #32]
 800a324:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a328:	47e0      	blx	ip
 800a32a:	2800      	cmp	r0, #0
 800a32c:	dc06      	bgt.n	800a33c <__sflush_r+0xf8>
 800a32e:	89a3      	ldrh	r3, [r4, #12]
 800a330:	f04f 30ff 	mov.w	r0, #4294967295
 800a334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a338:	81a3      	strh	r3, [r4, #12]
 800a33a:	e790      	b.n	800a25e <__sflush_r+0x1a>
 800a33c:	4407      	add	r7, r0
 800a33e:	1a36      	subs	r6, r6, r0
 800a340:	e7ea      	b.n	800a318 <__sflush_r+0xd4>
 800a342:	bf00      	nop
 800a344:	dfbffffe 	.word	0xdfbffffe

0800a348 <_fflush_r>:
 800a348:	b538      	push	{r3, r4, r5, lr}
 800a34a:	690b      	ldr	r3, [r1, #16]
 800a34c:	4605      	mov	r5, r0
 800a34e:	460c      	mov	r4, r1
 800a350:	b913      	cbnz	r3, 800a358 <_fflush_r+0x10>
 800a352:	2500      	movs	r5, #0
 800a354:	4628      	mov	r0, r5
 800a356:	bd38      	pop	{r3, r4, r5, pc}
 800a358:	b118      	cbz	r0, 800a362 <_fflush_r+0x1a>
 800a35a:	6a03      	ldr	r3, [r0, #32]
 800a35c:	b90b      	cbnz	r3, 800a362 <_fflush_r+0x1a>
 800a35e:	f7fd fa49 	bl	80077f4 <__sinit>
 800a362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d0f3      	beq.n	800a352 <_fflush_r+0xa>
 800a36a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a36c:	07d0      	lsls	r0, r2, #31
 800a36e:	d404      	bmi.n	800a37a <_fflush_r+0x32>
 800a370:	0599      	lsls	r1, r3, #22
 800a372:	d402      	bmi.n	800a37a <_fflush_r+0x32>
 800a374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a376:	f7fd fb54 	bl	8007a22 <__retarget_lock_acquire_recursive>
 800a37a:	4628      	mov	r0, r5
 800a37c:	4621      	mov	r1, r4
 800a37e:	f7ff ff61 	bl	800a244 <__sflush_r>
 800a382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a384:	4605      	mov	r5, r0
 800a386:	07da      	lsls	r2, r3, #31
 800a388:	d4e4      	bmi.n	800a354 <_fflush_r+0xc>
 800a38a:	89a3      	ldrh	r3, [r4, #12]
 800a38c:	059b      	lsls	r3, r3, #22
 800a38e:	d4e1      	bmi.n	800a354 <_fflush_r+0xc>
 800a390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a392:	f7fd fb47 	bl	8007a24 <__retarget_lock_release_recursive>
 800a396:	e7dd      	b.n	800a354 <_fflush_r+0xc>

0800a398 <memmove>:
 800a398:	4288      	cmp	r0, r1
 800a39a:	b510      	push	{r4, lr}
 800a39c:	eb01 0402 	add.w	r4, r1, r2
 800a3a0:	d902      	bls.n	800a3a8 <memmove+0x10>
 800a3a2:	4284      	cmp	r4, r0
 800a3a4:	4623      	mov	r3, r4
 800a3a6:	d807      	bhi.n	800a3b8 <memmove+0x20>
 800a3a8:	1e43      	subs	r3, r0, #1
 800a3aa:	42a1      	cmp	r1, r4
 800a3ac:	d008      	beq.n	800a3c0 <memmove+0x28>
 800a3ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3b6:	e7f8      	b.n	800a3aa <memmove+0x12>
 800a3b8:	4601      	mov	r1, r0
 800a3ba:	4402      	add	r2, r0
 800a3bc:	428a      	cmp	r2, r1
 800a3be:	d100      	bne.n	800a3c2 <memmove+0x2a>
 800a3c0:	bd10      	pop	{r4, pc}
 800a3c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3ca:	e7f7      	b.n	800a3bc <memmove+0x24>

0800a3cc <strncmp>:
 800a3cc:	b510      	push	{r4, lr}
 800a3ce:	b16a      	cbz	r2, 800a3ec <strncmp+0x20>
 800a3d0:	3901      	subs	r1, #1
 800a3d2:	1884      	adds	r4, r0, r2
 800a3d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d103      	bne.n	800a3e8 <strncmp+0x1c>
 800a3e0:	42a0      	cmp	r0, r4
 800a3e2:	d001      	beq.n	800a3e8 <strncmp+0x1c>
 800a3e4:	2a00      	cmp	r2, #0
 800a3e6:	d1f5      	bne.n	800a3d4 <strncmp+0x8>
 800a3e8:	1ad0      	subs	r0, r2, r3
 800a3ea:	bd10      	pop	{r4, pc}
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	e7fc      	b.n	800a3ea <strncmp+0x1e>

0800a3f0 <_sbrk_r>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	4d05      	ldr	r5, [pc, #20]	; (800a40c <_sbrk_r+0x1c>)
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	602b      	str	r3, [r5, #0]
 800a3fc:	f7f7 faa6 	bl	800194c <_sbrk>
 800a400:	1c43      	adds	r3, r0, #1
 800a402:	d102      	bne.n	800a40a <_sbrk_r+0x1a>
 800a404:	682b      	ldr	r3, [r5, #0]
 800a406:	b103      	cbz	r3, 800a40a <_sbrk_r+0x1a>
 800a408:	6023      	str	r3, [r4, #0]
 800a40a:	bd38      	pop	{r3, r4, r5, pc}
 800a40c:	20000410 	.word	0x20000410

0800a410 <memcpy>:
 800a410:	440a      	add	r2, r1
 800a412:	4291      	cmp	r1, r2
 800a414:	f100 33ff 	add.w	r3, r0, #4294967295
 800a418:	d100      	bne.n	800a41c <memcpy+0xc>
 800a41a:	4770      	bx	lr
 800a41c:	b510      	push	{r4, lr}
 800a41e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a422:	4291      	cmp	r1, r2
 800a424:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a428:	d1f9      	bne.n	800a41e <memcpy+0xe>
 800a42a:	bd10      	pop	{r4, pc}

0800a42c <nan>:
 800a42c:	2000      	movs	r0, #0
 800a42e:	4901      	ldr	r1, [pc, #4]	; (800a434 <nan+0x8>)
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	7ff80000 	.word	0x7ff80000

0800a438 <__assert_func>:
 800a438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a43a:	4614      	mov	r4, r2
 800a43c:	461a      	mov	r2, r3
 800a43e:	4b09      	ldr	r3, [pc, #36]	; (800a464 <__assert_func+0x2c>)
 800a440:	4605      	mov	r5, r0
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68d8      	ldr	r0, [r3, #12]
 800a446:	b14c      	cbz	r4, 800a45c <__assert_func+0x24>
 800a448:	4b07      	ldr	r3, [pc, #28]	; (800a468 <__assert_func+0x30>)
 800a44a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a44e:	9100      	str	r1, [sp, #0]
 800a450:	462b      	mov	r3, r5
 800a452:	4906      	ldr	r1, [pc, #24]	; (800a46c <__assert_func+0x34>)
 800a454:	f000 fbca 	bl	800abec <fiprintf>
 800a458:	f000 fbda 	bl	800ac10 <abort>
 800a45c:	4b04      	ldr	r3, [pc, #16]	; (800a470 <__assert_func+0x38>)
 800a45e:	461c      	mov	r4, r3
 800a460:	e7f3      	b.n	800a44a <__assert_func+0x12>
 800a462:	bf00      	nop
 800a464:	20000064 	.word	0x20000064
 800a468:	0800b58a 	.word	0x0800b58a
 800a46c:	0800b597 	.word	0x0800b597
 800a470:	0800b5c5 	.word	0x0800b5c5

0800a474 <_calloc_r>:
 800a474:	b570      	push	{r4, r5, r6, lr}
 800a476:	fba1 5402 	umull	r5, r4, r1, r2
 800a47a:	b934      	cbnz	r4, 800a48a <_calloc_r+0x16>
 800a47c:	4629      	mov	r1, r5
 800a47e:	f7fe f9c3 	bl	8008808 <_malloc_r>
 800a482:	4606      	mov	r6, r0
 800a484:	b928      	cbnz	r0, 800a492 <_calloc_r+0x1e>
 800a486:	4630      	mov	r0, r6
 800a488:	bd70      	pop	{r4, r5, r6, pc}
 800a48a:	220c      	movs	r2, #12
 800a48c:	2600      	movs	r6, #0
 800a48e:	6002      	str	r2, [r0, #0]
 800a490:	e7f9      	b.n	800a486 <_calloc_r+0x12>
 800a492:	462a      	mov	r2, r5
 800a494:	4621      	mov	r1, r4
 800a496:	f7fd fa46 	bl	8007926 <memset>
 800a49a:	e7f4      	b.n	800a486 <_calloc_r+0x12>

0800a49c <rshift>:
 800a49c:	6903      	ldr	r3, [r0, #16]
 800a49e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4a6:	f100 0414 	add.w	r4, r0, #20
 800a4aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a4ae:	dd46      	ble.n	800a53e <rshift+0xa2>
 800a4b0:	f011 011f 	ands.w	r1, r1, #31
 800a4b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a4b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a4bc:	d10c      	bne.n	800a4d8 <rshift+0x3c>
 800a4be:	4629      	mov	r1, r5
 800a4c0:	f100 0710 	add.w	r7, r0, #16
 800a4c4:	42b1      	cmp	r1, r6
 800a4c6:	d335      	bcc.n	800a534 <rshift+0x98>
 800a4c8:	1a9b      	subs	r3, r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	1eea      	subs	r2, r5, #3
 800a4ce:	4296      	cmp	r6, r2
 800a4d0:	bf38      	it	cc
 800a4d2:	2300      	movcc	r3, #0
 800a4d4:	4423      	add	r3, r4
 800a4d6:	e015      	b.n	800a504 <rshift+0x68>
 800a4d8:	46a1      	mov	r9, r4
 800a4da:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a4de:	f1c1 0820 	rsb	r8, r1, #32
 800a4e2:	40cf      	lsrs	r7, r1
 800a4e4:	f105 0e04 	add.w	lr, r5, #4
 800a4e8:	4576      	cmp	r6, lr
 800a4ea:	46f4      	mov	ip, lr
 800a4ec:	d816      	bhi.n	800a51c <rshift+0x80>
 800a4ee:	1a9a      	subs	r2, r3, r2
 800a4f0:	0092      	lsls	r2, r2, #2
 800a4f2:	3a04      	subs	r2, #4
 800a4f4:	3501      	adds	r5, #1
 800a4f6:	42ae      	cmp	r6, r5
 800a4f8:	bf38      	it	cc
 800a4fa:	2200      	movcc	r2, #0
 800a4fc:	18a3      	adds	r3, r4, r2
 800a4fe:	50a7      	str	r7, [r4, r2]
 800a500:	b107      	cbz	r7, 800a504 <rshift+0x68>
 800a502:	3304      	adds	r3, #4
 800a504:	42a3      	cmp	r3, r4
 800a506:	eba3 0204 	sub.w	r2, r3, r4
 800a50a:	bf08      	it	eq
 800a50c:	2300      	moveq	r3, #0
 800a50e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a512:	6102      	str	r2, [r0, #16]
 800a514:	bf08      	it	eq
 800a516:	6143      	streq	r3, [r0, #20]
 800a518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a51c:	f8dc c000 	ldr.w	ip, [ip]
 800a520:	fa0c fc08 	lsl.w	ip, ip, r8
 800a524:	ea4c 0707 	orr.w	r7, ip, r7
 800a528:	f849 7b04 	str.w	r7, [r9], #4
 800a52c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a530:	40cf      	lsrs	r7, r1
 800a532:	e7d9      	b.n	800a4e8 <rshift+0x4c>
 800a534:	f851 cb04 	ldr.w	ip, [r1], #4
 800a538:	f847 cf04 	str.w	ip, [r7, #4]!
 800a53c:	e7c2      	b.n	800a4c4 <rshift+0x28>
 800a53e:	4623      	mov	r3, r4
 800a540:	e7e0      	b.n	800a504 <rshift+0x68>

0800a542 <__hexdig_fun>:
 800a542:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a546:	2b09      	cmp	r3, #9
 800a548:	d802      	bhi.n	800a550 <__hexdig_fun+0xe>
 800a54a:	3820      	subs	r0, #32
 800a54c:	b2c0      	uxtb	r0, r0
 800a54e:	4770      	bx	lr
 800a550:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a554:	2b05      	cmp	r3, #5
 800a556:	d801      	bhi.n	800a55c <__hexdig_fun+0x1a>
 800a558:	3847      	subs	r0, #71	; 0x47
 800a55a:	e7f7      	b.n	800a54c <__hexdig_fun+0xa>
 800a55c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a560:	2b05      	cmp	r3, #5
 800a562:	d801      	bhi.n	800a568 <__hexdig_fun+0x26>
 800a564:	3827      	subs	r0, #39	; 0x27
 800a566:	e7f1      	b.n	800a54c <__hexdig_fun+0xa>
 800a568:	2000      	movs	r0, #0
 800a56a:	4770      	bx	lr

0800a56c <__gethex>:
 800a56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a570:	4681      	mov	r9, r0
 800a572:	468a      	mov	sl, r1
 800a574:	4617      	mov	r7, r2
 800a576:	680a      	ldr	r2, [r1, #0]
 800a578:	b085      	sub	sp, #20
 800a57a:	f102 0b02 	add.w	fp, r2, #2
 800a57e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a582:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a586:	9302      	str	r3, [sp, #8]
 800a588:	32fe      	adds	r2, #254	; 0xfe
 800a58a:	eb02 030b 	add.w	r3, r2, fp
 800a58e:	46d8      	mov	r8, fp
 800a590:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a594:	9301      	str	r3, [sp, #4]
 800a596:	2830      	cmp	r0, #48	; 0x30
 800a598:	d0f7      	beq.n	800a58a <__gethex+0x1e>
 800a59a:	f7ff ffd2 	bl	800a542 <__hexdig_fun>
 800a59e:	4604      	mov	r4, r0
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d138      	bne.n	800a616 <__gethex+0xaa>
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	4640      	mov	r0, r8
 800a5a8:	49a7      	ldr	r1, [pc, #668]	; (800a848 <__gethex+0x2dc>)
 800a5aa:	f7ff ff0f 	bl	800a3cc <strncmp>
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d169      	bne.n	800a688 <__gethex+0x11c>
 800a5b4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a5b8:	465d      	mov	r5, fp
 800a5ba:	f7ff ffc2 	bl	800a542 <__hexdig_fun>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d064      	beq.n	800a68c <__gethex+0x120>
 800a5c2:	465a      	mov	r2, fp
 800a5c4:	7810      	ldrb	r0, [r2, #0]
 800a5c6:	4690      	mov	r8, r2
 800a5c8:	2830      	cmp	r0, #48	; 0x30
 800a5ca:	f102 0201 	add.w	r2, r2, #1
 800a5ce:	d0f9      	beq.n	800a5c4 <__gethex+0x58>
 800a5d0:	f7ff ffb7 	bl	800a542 <__hexdig_fun>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	fab0 f480 	clz	r4, r0
 800a5da:	465e      	mov	r6, fp
 800a5dc:	0964      	lsrs	r4, r4, #5
 800a5de:	9301      	str	r3, [sp, #4]
 800a5e0:	4642      	mov	r2, r8
 800a5e2:	4615      	mov	r5, r2
 800a5e4:	7828      	ldrb	r0, [r5, #0]
 800a5e6:	3201      	adds	r2, #1
 800a5e8:	f7ff ffab 	bl	800a542 <__hexdig_fun>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d1f8      	bne.n	800a5e2 <__gethex+0x76>
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	4994      	ldr	r1, [pc, #592]	; (800a848 <__gethex+0x2dc>)
 800a5f6:	f7ff fee9 	bl	800a3cc <strncmp>
 800a5fa:	b978      	cbnz	r0, 800a61c <__gethex+0xb0>
 800a5fc:	b946      	cbnz	r6, 800a610 <__gethex+0xa4>
 800a5fe:	1c6e      	adds	r6, r5, #1
 800a600:	4632      	mov	r2, r6
 800a602:	4615      	mov	r5, r2
 800a604:	7828      	ldrb	r0, [r5, #0]
 800a606:	3201      	adds	r2, #1
 800a608:	f7ff ff9b 	bl	800a542 <__hexdig_fun>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d1f8      	bne.n	800a602 <__gethex+0x96>
 800a610:	1b73      	subs	r3, r6, r5
 800a612:	009e      	lsls	r6, r3, #2
 800a614:	e004      	b.n	800a620 <__gethex+0xb4>
 800a616:	2400      	movs	r4, #0
 800a618:	4626      	mov	r6, r4
 800a61a:	e7e1      	b.n	800a5e0 <__gethex+0x74>
 800a61c:	2e00      	cmp	r6, #0
 800a61e:	d1f7      	bne.n	800a610 <__gethex+0xa4>
 800a620:	782b      	ldrb	r3, [r5, #0]
 800a622:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a626:	2b50      	cmp	r3, #80	; 0x50
 800a628:	d13d      	bne.n	800a6a6 <__gethex+0x13a>
 800a62a:	786b      	ldrb	r3, [r5, #1]
 800a62c:	2b2b      	cmp	r3, #43	; 0x2b
 800a62e:	d02f      	beq.n	800a690 <__gethex+0x124>
 800a630:	2b2d      	cmp	r3, #45	; 0x2d
 800a632:	d031      	beq.n	800a698 <__gethex+0x12c>
 800a634:	f04f 0b00 	mov.w	fp, #0
 800a638:	1c69      	adds	r1, r5, #1
 800a63a:	7808      	ldrb	r0, [r1, #0]
 800a63c:	f7ff ff81 	bl	800a542 <__hexdig_fun>
 800a640:	1e42      	subs	r2, r0, #1
 800a642:	b2d2      	uxtb	r2, r2
 800a644:	2a18      	cmp	r2, #24
 800a646:	d82e      	bhi.n	800a6a6 <__gethex+0x13a>
 800a648:	f1a0 0210 	sub.w	r2, r0, #16
 800a64c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a650:	f7ff ff77 	bl	800a542 <__hexdig_fun>
 800a654:	f100 3cff 	add.w	ip, r0, #4294967295
 800a658:	fa5f fc8c 	uxtb.w	ip, ip
 800a65c:	f1bc 0f18 	cmp.w	ip, #24
 800a660:	d91d      	bls.n	800a69e <__gethex+0x132>
 800a662:	f1bb 0f00 	cmp.w	fp, #0
 800a666:	d000      	beq.n	800a66a <__gethex+0xfe>
 800a668:	4252      	negs	r2, r2
 800a66a:	4416      	add	r6, r2
 800a66c:	f8ca 1000 	str.w	r1, [sl]
 800a670:	b1dc      	cbz	r4, 800a6aa <__gethex+0x13e>
 800a672:	9b01      	ldr	r3, [sp, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	bf14      	ite	ne
 800a678:	f04f 0800 	movne.w	r8, #0
 800a67c:	f04f 0806 	moveq.w	r8, #6
 800a680:	4640      	mov	r0, r8
 800a682:	b005      	add	sp, #20
 800a684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a688:	4645      	mov	r5, r8
 800a68a:	4626      	mov	r6, r4
 800a68c:	2401      	movs	r4, #1
 800a68e:	e7c7      	b.n	800a620 <__gethex+0xb4>
 800a690:	f04f 0b00 	mov.w	fp, #0
 800a694:	1ca9      	adds	r1, r5, #2
 800a696:	e7d0      	b.n	800a63a <__gethex+0xce>
 800a698:	f04f 0b01 	mov.w	fp, #1
 800a69c:	e7fa      	b.n	800a694 <__gethex+0x128>
 800a69e:	230a      	movs	r3, #10
 800a6a0:	fb03 0002 	mla	r0, r3, r2, r0
 800a6a4:	e7d0      	b.n	800a648 <__gethex+0xdc>
 800a6a6:	4629      	mov	r1, r5
 800a6a8:	e7e0      	b.n	800a66c <__gethex+0x100>
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	eba5 0308 	sub.w	r3, r5, r8
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	2b07      	cmp	r3, #7
 800a6b4:	dc0a      	bgt.n	800a6cc <__gethex+0x160>
 800a6b6:	4648      	mov	r0, r9
 800a6b8:	f7fe f932 	bl	8008920 <_Balloc>
 800a6bc:	4604      	mov	r4, r0
 800a6be:	b940      	cbnz	r0, 800a6d2 <__gethex+0x166>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	21e4      	movs	r1, #228	; 0xe4
 800a6c4:	4b61      	ldr	r3, [pc, #388]	; (800a84c <__gethex+0x2e0>)
 800a6c6:	4862      	ldr	r0, [pc, #392]	; (800a850 <__gethex+0x2e4>)
 800a6c8:	f7ff feb6 	bl	800a438 <__assert_func>
 800a6cc:	3101      	adds	r1, #1
 800a6ce:	105b      	asrs	r3, r3, #1
 800a6d0:	e7ef      	b.n	800a6b2 <__gethex+0x146>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	469b      	mov	fp, r3
 800a6d6:	f100 0a14 	add.w	sl, r0, #20
 800a6da:	f8cd a004 	str.w	sl, [sp, #4]
 800a6de:	45a8      	cmp	r8, r5
 800a6e0:	d344      	bcc.n	800a76c <__gethex+0x200>
 800a6e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a6e6:	4658      	mov	r0, fp
 800a6e8:	f848 bb04 	str.w	fp, [r8], #4
 800a6ec:	eba8 080a 	sub.w	r8, r8, sl
 800a6f0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a6f4:	6122      	str	r2, [r4, #16]
 800a6f6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a6fa:	f7fe fa03 	bl	8008b04 <__hi0bits>
 800a6fe:	683d      	ldr	r5, [r7, #0]
 800a700:	eba8 0800 	sub.w	r8, r8, r0
 800a704:	45a8      	cmp	r8, r5
 800a706:	dd59      	ble.n	800a7bc <__gethex+0x250>
 800a708:	eba8 0805 	sub.w	r8, r8, r5
 800a70c:	4641      	mov	r1, r8
 800a70e:	4620      	mov	r0, r4
 800a710:	f7fe fd81 	bl	8009216 <__any_on>
 800a714:	4683      	mov	fp, r0
 800a716:	b1b8      	cbz	r0, 800a748 <__gethex+0x1dc>
 800a718:	f04f 0b01 	mov.w	fp, #1
 800a71c:	f108 33ff 	add.w	r3, r8, #4294967295
 800a720:	1159      	asrs	r1, r3, #5
 800a722:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a726:	f003 021f 	and.w	r2, r3, #31
 800a72a:	fa0b f202 	lsl.w	r2, fp, r2
 800a72e:	420a      	tst	r2, r1
 800a730:	d00a      	beq.n	800a748 <__gethex+0x1dc>
 800a732:	455b      	cmp	r3, fp
 800a734:	dd06      	ble.n	800a744 <__gethex+0x1d8>
 800a736:	4620      	mov	r0, r4
 800a738:	f1a8 0102 	sub.w	r1, r8, #2
 800a73c:	f7fe fd6b 	bl	8009216 <__any_on>
 800a740:	2800      	cmp	r0, #0
 800a742:	d138      	bne.n	800a7b6 <__gethex+0x24a>
 800a744:	f04f 0b02 	mov.w	fp, #2
 800a748:	4641      	mov	r1, r8
 800a74a:	4620      	mov	r0, r4
 800a74c:	f7ff fea6 	bl	800a49c <rshift>
 800a750:	4446      	add	r6, r8
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	42b3      	cmp	r3, r6
 800a756:	da41      	bge.n	800a7dc <__gethex+0x270>
 800a758:	4621      	mov	r1, r4
 800a75a:	4648      	mov	r0, r9
 800a75c:	f7fe f920 	bl	80089a0 <_Bfree>
 800a760:	2300      	movs	r3, #0
 800a762:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a764:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a768:	6013      	str	r3, [r2, #0]
 800a76a:	e789      	b.n	800a680 <__gethex+0x114>
 800a76c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a770:	2a2e      	cmp	r2, #46	; 0x2e
 800a772:	d014      	beq.n	800a79e <__gethex+0x232>
 800a774:	2b20      	cmp	r3, #32
 800a776:	d106      	bne.n	800a786 <__gethex+0x21a>
 800a778:	9b01      	ldr	r3, [sp, #4]
 800a77a:	f843 bb04 	str.w	fp, [r3], #4
 800a77e:	f04f 0b00 	mov.w	fp, #0
 800a782:	9301      	str	r3, [sp, #4]
 800a784:	465b      	mov	r3, fp
 800a786:	7828      	ldrb	r0, [r5, #0]
 800a788:	9303      	str	r3, [sp, #12]
 800a78a:	f7ff feda 	bl	800a542 <__hexdig_fun>
 800a78e:	9b03      	ldr	r3, [sp, #12]
 800a790:	f000 000f 	and.w	r0, r0, #15
 800a794:	4098      	lsls	r0, r3
 800a796:	ea4b 0b00 	orr.w	fp, fp, r0
 800a79a:	3304      	adds	r3, #4
 800a79c:	e79f      	b.n	800a6de <__gethex+0x172>
 800a79e:	45a8      	cmp	r8, r5
 800a7a0:	d8e8      	bhi.n	800a774 <__gethex+0x208>
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	4928      	ldr	r1, [pc, #160]	; (800a848 <__gethex+0x2dc>)
 800a7a8:	9303      	str	r3, [sp, #12]
 800a7aa:	f7ff fe0f 	bl	800a3cc <strncmp>
 800a7ae:	9b03      	ldr	r3, [sp, #12]
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d1df      	bne.n	800a774 <__gethex+0x208>
 800a7b4:	e793      	b.n	800a6de <__gethex+0x172>
 800a7b6:	f04f 0b03 	mov.w	fp, #3
 800a7ba:	e7c5      	b.n	800a748 <__gethex+0x1dc>
 800a7bc:	da0b      	bge.n	800a7d6 <__gethex+0x26a>
 800a7be:	eba5 0808 	sub.w	r8, r5, r8
 800a7c2:	4621      	mov	r1, r4
 800a7c4:	4642      	mov	r2, r8
 800a7c6:	4648      	mov	r0, r9
 800a7c8:	f7fe fb02 	bl	8008dd0 <__lshift>
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	eba6 0608 	sub.w	r6, r6, r8
 800a7d2:	f100 0a14 	add.w	sl, r0, #20
 800a7d6:	f04f 0b00 	mov.w	fp, #0
 800a7da:	e7ba      	b.n	800a752 <__gethex+0x1e6>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	42b3      	cmp	r3, r6
 800a7e0:	dd74      	ble.n	800a8cc <__gethex+0x360>
 800a7e2:	1b9e      	subs	r6, r3, r6
 800a7e4:	42b5      	cmp	r5, r6
 800a7e6:	dc35      	bgt.n	800a854 <__gethex+0x2e8>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d023      	beq.n	800a836 <__gethex+0x2ca>
 800a7ee:	2b03      	cmp	r3, #3
 800a7f0:	d025      	beq.n	800a83e <__gethex+0x2d2>
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d115      	bne.n	800a822 <__gethex+0x2b6>
 800a7f6:	42b5      	cmp	r5, r6
 800a7f8:	d113      	bne.n	800a822 <__gethex+0x2b6>
 800a7fa:	2d01      	cmp	r5, #1
 800a7fc:	d10b      	bne.n	800a816 <__gethex+0x2aa>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	9a02      	ldr	r2, [sp, #8]
 800a802:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	2301      	movs	r3, #1
 800a80a:	6123      	str	r3, [r4, #16]
 800a80c:	f8ca 3000 	str.w	r3, [sl]
 800a810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a812:	601c      	str	r4, [r3, #0]
 800a814:	e734      	b.n	800a680 <__gethex+0x114>
 800a816:	4620      	mov	r0, r4
 800a818:	1e69      	subs	r1, r5, #1
 800a81a:	f7fe fcfc 	bl	8009216 <__any_on>
 800a81e:	2800      	cmp	r0, #0
 800a820:	d1ed      	bne.n	800a7fe <__gethex+0x292>
 800a822:	4621      	mov	r1, r4
 800a824:	4648      	mov	r0, r9
 800a826:	f7fe f8bb 	bl	80089a0 <_Bfree>
 800a82a:	2300      	movs	r3, #0
 800a82c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a82e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a832:	6013      	str	r3, [r2, #0]
 800a834:	e724      	b.n	800a680 <__gethex+0x114>
 800a836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1f2      	bne.n	800a822 <__gethex+0x2b6>
 800a83c:	e7df      	b.n	800a7fe <__gethex+0x292>
 800a83e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1dc      	bne.n	800a7fe <__gethex+0x292>
 800a844:	e7ed      	b.n	800a822 <__gethex+0x2b6>
 800a846:	bf00      	nop
 800a848:	0800b41c 	.word	0x0800b41c
 800a84c:	0800b2af 	.word	0x0800b2af
 800a850:	0800b5c6 	.word	0x0800b5c6
 800a854:	f106 38ff 	add.w	r8, r6, #4294967295
 800a858:	f1bb 0f00 	cmp.w	fp, #0
 800a85c:	d133      	bne.n	800a8c6 <__gethex+0x35a>
 800a85e:	f1b8 0f00 	cmp.w	r8, #0
 800a862:	d004      	beq.n	800a86e <__gethex+0x302>
 800a864:	4641      	mov	r1, r8
 800a866:	4620      	mov	r0, r4
 800a868:	f7fe fcd5 	bl	8009216 <__any_on>
 800a86c:	4683      	mov	fp, r0
 800a86e:	2301      	movs	r3, #1
 800a870:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a874:	f008 081f 	and.w	r8, r8, #31
 800a878:	fa03 f308 	lsl.w	r3, r3, r8
 800a87c:	f04f 0802 	mov.w	r8, #2
 800a880:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a884:	4631      	mov	r1, r6
 800a886:	4213      	tst	r3, r2
 800a888:	4620      	mov	r0, r4
 800a88a:	bf18      	it	ne
 800a88c:	f04b 0b02 	orrne.w	fp, fp, #2
 800a890:	1bad      	subs	r5, r5, r6
 800a892:	f7ff fe03 	bl	800a49c <rshift>
 800a896:	687e      	ldr	r6, [r7, #4]
 800a898:	f1bb 0f00 	cmp.w	fp, #0
 800a89c:	d04a      	beq.n	800a934 <__gethex+0x3c8>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d016      	beq.n	800a8d2 <__gethex+0x366>
 800a8a4:	2b03      	cmp	r3, #3
 800a8a6:	d018      	beq.n	800a8da <__gethex+0x36e>
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d109      	bne.n	800a8c0 <__gethex+0x354>
 800a8ac:	f01b 0f02 	tst.w	fp, #2
 800a8b0:	d006      	beq.n	800a8c0 <__gethex+0x354>
 800a8b2:	f8da 3000 	ldr.w	r3, [sl]
 800a8b6:	ea4b 0b03 	orr.w	fp, fp, r3
 800a8ba:	f01b 0f01 	tst.w	fp, #1
 800a8be:	d10f      	bne.n	800a8e0 <__gethex+0x374>
 800a8c0:	f048 0810 	orr.w	r8, r8, #16
 800a8c4:	e036      	b.n	800a934 <__gethex+0x3c8>
 800a8c6:	f04f 0b01 	mov.w	fp, #1
 800a8ca:	e7d0      	b.n	800a86e <__gethex+0x302>
 800a8cc:	f04f 0801 	mov.w	r8, #1
 800a8d0:	e7e2      	b.n	800a898 <__gethex+0x32c>
 800a8d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8d4:	f1c3 0301 	rsb	r3, r3, #1
 800a8d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d0ef      	beq.n	800a8c0 <__gethex+0x354>
 800a8e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a8e4:	f104 0214 	add.w	r2, r4, #20
 800a8e8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a8ec:	9301      	str	r3, [sp, #4]
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a8f4:	4694      	mov	ip, r2
 800a8f6:	f852 1b04 	ldr.w	r1, [r2], #4
 800a8fa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a8fe:	d01e      	beq.n	800a93e <__gethex+0x3d2>
 800a900:	3101      	adds	r1, #1
 800a902:	f8cc 1000 	str.w	r1, [ip]
 800a906:	f1b8 0f02 	cmp.w	r8, #2
 800a90a:	f104 0214 	add.w	r2, r4, #20
 800a90e:	d13d      	bne.n	800a98c <__gethex+0x420>
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	3b01      	subs	r3, #1
 800a914:	42ab      	cmp	r3, r5
 800a916:	d10b      	bne.n	800a930 <__gethex+0x3c4>
 800a918:	2301      	movs	r3, #1
 800a91a:	1169      	asrs	r1, r5, #5
 800a91c:	f005 051f 	and.w	r5, r5, #31
 800a920:	fa03 f505 	lsl.w	r5, r3, r5
 800a924:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a928:	421d      	tst	r5, r3
 800a92a:	bf18      	it	ne
 800a92c:	f04f 0801 	movne.w	r8, #1
 800a930:	f048 0820 	orr.w	r8, r8, #32
 800a934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a936:	601c      	str	r4, [r3, #0]
 800a938:	9b02      	ldr	r3, [sp, #8]
 800a93a:	601e      	str	r6, [r3, #0]
 800a93c:	e6a0      	b.n	800a680 <__gethex+0x114>
 800a93e:	4290      	cmp	r0, r2
 800a940:	f842 3c04 	str.w	r3, [r2, #-4]
 800a944:	d8d6      	bhi.n	800a8f4 <__gethex+0x388>
 800a946:	68a2      	ldr	r2, [r4, #8]
 800a948:	4593      	cmp	fp, r2
 800a94a:	db17      	blt.n	800a97c <__gethex+0x410>
 800a94c:	6861      	ldr	r1, [r4, #4]
 800a94e:	4648      	mov	r0, r9
 800a950:	3101      	adds	r1, #1
 800a952:	f7fd ffe5 	bl	8008920 <_Balloc>
 800a956:	4682      	mov	sl, r0
 800a958:	b918      	cbnz	r0, 800a962 <__gethex+0x3f6>
 800a95a:	4602      	mov	r2, r0
 800a95c:	2184      	movs	r1, #132	; 0x84
 800a95e:	4b1a      	ldr	r3, [pc, #104]	; (800a9c8 <__gethex+0x45c>)
 800a960:	e6b1      	b.n	800a6c6 <__gethex+0x15a>
 800a962:	6922      	ldr	r2, [r4, #16]
 800a964:	f104 010c 	add.w	r1, r4, #12
 800a968:	3202      	adds	r2, #2
 800a96a:	0092      	lsls	r2, r2, #2
 800a96c:	300c      	adds	r0, #12
 800a96e:	f7ff fd4f 	bl	800a410 <memcpy>
 800a972:	4621      	mov	r1, r4
 800a974:	4648      	mov	r0, r9
 800a976:	f7fe f813 	bl	80089a0 <_Bfree>
 800a97a:	4654      	mov	r4, sl
 800a97c:	6922      	ldr	r2, [r4, #16]
 800a97e:	1c51      	adds	r1, r2, #1
 800a980:	6121      	str	r1, [r4, #16]
 800a982:	2101      	movs	r1, #1
 800a984:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a988:	6151      	str	r1, [r2, #20]
 800a98a:	e7bc      	b.n	800a906 <__gethex+0x39a>
 800a98c:	6921      	ldr	r1, [r4, #16]
 800a98e:	4559      	cmp	r1, fp
 800a990:	dd0b      	ble.n	800a9aa <__gethex+0x43e>
 800a992:	2101      	movs	r1, #1
 800a994:	4620      	mov	r0, r4
 800a996:	f7ff fd81 	bl	800a49c <rshift>
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	3601      	adds	r6, #1
 800a99e:	42b3      	cmp	r3, r6
 800a9a0:	f6ff aeda 	blt.w	800a758 <__gethex+0x1ec>
 800a9a4:	f04f 0801 	mov.w	r8, #1
 800a9a8:	e7c2      	b.n	800a930 <__gethex+0x3c4>
 800a9aa:	f015 051f 	ands.w	r5, r5, #31
 800a9ae:	d0f9      	beq.n	800a9a4 <__gethex+0x438>
 800a9b0:	9b01      	ldr	r3, [sp, #4]
 800a9b2:	f1c5 0520 	rsb	r5, r5, #32
 800a9b6:	441a      	add	r2, r3
 800a9b8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a9bc:	f7fe f8a2 	bl	8008b04 <__hi0bits>
 800a9c0:	42a8      	cmp	r0, r5
 800a9c2:	dbe6      	blt.n	800a992 <__gethex+0x426>
 800a9c4:	e7ee      	b.n	800a9a4 <__gethex+0x438>
 800a9c6:	bf00      	nop
 800a9c8:	0800b2af 	.word	0x0800b2af

0800a9cc <L_shift>:
 800a9cc:	f1c2 0208 	rsb	r2, r2, #8
 800a9d0:	0092      	lsls	r2, r2, #2
 800a9d2:	b570      	push	{r4, r5, r6, lr}
 800a9d4:	f1c2 0620 	rsb	r6, r2, #32
 800a9d8:	6843      	ldr	r3, [r0, #4]
 800a9da:	6804      	ldr	r4, [r0, #0]
 800a9dc:	fa03 f506 	lsl.w	r5, r3, r6
 800a9e0:	432c      	orrs	r4, r5
 800a9e2:	40d3      	lsrs	r3, r2
 800a9e4:	6004      	str	r4, [r0, #0]
 800a9e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a9ea:	4288      	cmp	r0, r1
 800a9ec:	d3f4      	bcc.n	800a9d8 <L_shift+0xc>
 800a9ee:	bd70      	pop	{r4, r5, r6, pc}

0800a9f0 <__match>:
 800a9f0:	b530      	push	{r4, r5, lr}
 800a9f2:	6803      	ldr	r3, [r0, #0]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9fa:	b914      	cbnz	r4, 800aa02 <__match+0x12>
 800a9fc:	6003      	str	r3, [r0, #0]
 800a9fe:	2001      	movs	r0, #1
 800aa00:	bd30      	pop	{r4, r5, pc}
 800aa02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa0a:	2d19      	cmp	r5, #25
 800aa0c:	bf98      	it	ls
 800aa0e:	3220      	addls	r2, #32
 800aa10:	42a2      	cmp	r2, r4
 800aa12:	d0f0      	beq.n	800a9f6 <__match+0x6>
 800aa14:	2000      	movs	r0, #0
 800aa16:	e7f3      	b.n	800aa00 <__match+0x10>

0800aa18 <__hexnan>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	2500      	movs	r5, #0
 800aa1e:	680b      	ldr	r3, [r1, #0]
 800aa20:	4682      	mov	sl, r0
 800aa22:	115e      	asrs	r6, r3, #5
 800aa24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa28:	f013 031f 	ands.w	r3, r3, #31
 800aa2c:	bf18      	it	ne
 800aa2e:	3604      	addne	r6, #4
 800aa30:	1f37      	subs	r7, r6, #4
 800aa32:	4690      	mov	r8, r2
 800aa34:	46b9      	mov	r9, r7
 800aa36:	463c      	mov	r4, r7
 800aa38:	46ab      	mov	fp, r5
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	6801      	ldr	r1, [r0, #0]
 800aa3e:	9301      	str	r3, [sp, #4]
 800aa40:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa44:	9502      	str	r5, [sp, #8]
 800aa46:	784a      	ldrb	r2, [r1, #1]
 800aa48:	1c4b      	adds	r3, r1, #1
 800aa4a:	9303      	str	r3, [sp, #12]
 800aa4c:	b342      	cbz	r2, 800aaa0 <__hexnan+0x88>
 800aa4e:	4610      	mov	r0, r2
 800aa50:	9105      	str	r1, [sp, #20]
 800aa52:	9204      	str	r2, [sp, #16]
 800aa54:	f7ff fd75 	bl	800a542 <__hexdig_fun>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d14f      	bne.n	800aafc <__hexnan+0xe4>
 800aa5c:	9a04      	ldr	r2, [sp, #16]
 800aa5e:	9905      	ldr	r1, [sp, #20]
 800aa60:	2a20      	cmp	r2, #32
 800aa62:	d818      	bhi.n	800aa96 <__hexnan+0x7e>
 800aa64:	9b02      	ldr	r3, [sp, #8]
 800aa66:	459b      	cmp	fp, r3
 800aa68:	dd13      	ble.n	800aa92 <__hexnan+0x7a>
 800aa6a:	454c      	cmp	r4, r9
 800aa6c:	d206      	bcs.n	800aa7c <__hexnan+0x64>
 800aa6e:	2d07      	cmp	r5, #7
 800aa70:	dc04      	bgt.n	800aa7c <__hexnan+0x64>
 800aa72:	462a      	mov	r2, r5
 800aa74:	4649      	mov	r1, r9
 800aa76:	4620      	mov	r0, r4
 800aa78:	f7ff ffa8 	bl	800a9cc <L_shift>
 800aa7c:	4544      	cmp	r4, r8
 800aa7e:	d950      	bls.n	800ab22 <__hexnan+0x10a>
 800aa80:	2300      	movs	r3, #0
 800aa82:	f1a4 0904 	sub.w	r9, r4, #4
 800aa86:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa8a:	461d      	mov	r5, r3
 800aa8c:	464c      	mov	r4, r9
 800aa8e:	f8cd b008 	str.w	fp, [sp, #8]
 800aa92:	9903      	ldr	r1, [sp, #12]
 800aa94:	e7d7      	b.n	800aa46 <__hexnan+0x2e>
 800aa96:	2a29      	cmp	r2, #41	; 0x29
 800aa98:	d155      	bne.n	800ab46 <__hexnan+0x12e>
 800aa9a:	3102      	adds	r1, #2
 800aa9c:	f8ca 1000 	str.w	r1, [sl]
 800aaa0:	f1bb 0f00 	cmp.w	fp, #0
 800aaa4:	d04f      	beq.n	800ab46 <__hexnan+0x12e>
 800aaa6:	454c      	cmp	r4, r9
 800aaa8:	d206      	bcs.n	800aab8 <__hexnan+0xa0>
 800aaaa:	2d07      	cmp	r5, #7
 800aaac:	dc04      	bgt.n	800aab8 <__hexnan+0xa0>
 800aaae:	462a      	mov	r2, r5
 800aab0:	4649      	mov	r1, r9
 800aab2:	4620      	mov	r0, r4
 800aab4:	f7ff ff8a 	bl	800a9cc <L_shift>
 800aab8:	4544      	cmp	r4, r8
 800aaba:	d934      	bls.n	800ab26 <__hexnan+0x10e>
 800aabc:	4623      	mov	r3, r4
 800aabe:	f1a8 0204 	sub.w	r2, r8, #4
 800aac2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aac6:	429f      	cmp	r7, r3
 800aac8:	f842 1f04 	str.w	r1, [r2, #4]!
 800aacc:	d2f9      	bcs.n	800aac2 <__hexnan+0xaa>
 800aace:	1b3b      	subs	r3, r7, r4
 800aad0:	f023 0303 	bic.w	r3, r3, #3
 800aad4:	3304      	adds	r3, #4
 800aad6:	3e03      	subs	r6, #3
 800aad8:	3401      	adds	r4, #1
 800aada:	42a6      	cmp	r6, r4
 800aadc:	bf38      	it	cc
 800aade:	2304      	movcc	r3, #4
 800aae0:	2200      	movs	r2, #0
 800aae2:	4443      	add	r3, r8
 800aae4:	f843 2b04 	str.w	r2, [r3], #4
 800aae8:	429f      	cmp	r7, r3
 800aaea:	d2fb      	bcs.n	800aae4 <__hexnan+0xcc>
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	b91b      	cbnz	r3, 800aaf8 <__hexnan+0xe0>
 800aaf0:	4547      	cmp	r7, r8
 800aaf2:	d126      	bne.n	800ab42 <__hexnan+0x12a>
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	603b      	str	r3, [r7, #0]
 800aaf8:	2005      	movs	r0, #5
 800aafa:	e025      	b.n	800ab48 <__hexnan+0x130>
 800aafc:	3501      	adds	r5, #1
 800aafe:	2d08      	cmp	r5, #8
 800ab00:	f10b 0b01 	add.w	fp, fp, #1
 800ab04:	dd06      	ble.n	800ab14 <__hexnan+0xfc>
 800ab06:	4544      	cmp	r4, r8
 800ab08:	d9c3      	bls.n	800aa92 <__hexnan+0x7a>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	2501      	movs	r5, #1
 800ab0e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab12:	3c04      	subs	r4, #4
 800ab14:	6822      	ldr	r2, [r4, #0]
 800ab16:	f000 000f 	and.w	r0, r0, #15
 800ab1a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ab1e:	6020      	str	r0, [r4, #0]
 800ab20:	e7b7      	b.n	800aa92 <__hexnan+0x7a>
 800ab22:	2508      	movs	r5, #8
 800ab24:	e7b5      	b.n	800aa92 <__hexnan+0x7a>
 800ab26:	9b01      	ldr	r3, [sp, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d0df      	beq.n	800aaec <__hexnan+0xd4>
 800ab2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab30:	f1c3 0320 	rsb	r3, r3, #32
 800ab34:	40da      	lsrs	r2, r3
 800ab36:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab3a:	4013      	ands	r3, r2
 800ab3c:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab40:	e7d4      	b.n	800aaec <__hexnan+0xd4>
 800ab42:	3f04      	subs	r7, #4
 800ab44:	e7d2      	b.n	800aaec <__hexnan+0xd4>
 800ab46:	2004      	movs	r0, #4
 800ab48:	b007      	add	sp, #28
 800ab4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab4e <__ascii_mbtowc>:
 800ab4e:	b082      	sub	sp, #8
 800ab50:	b901      	cbnz	r1, 800ab54 <__ascii_mbtowc+0x6>
 800ab52:	a901      	add	r1, sp, #4
 800ab54:	b142      	cbz	r2, 800ab68 <__ascii_mbtowc+0x1a>
 800ab56:	b14b      	cbz	r3, 800ab6c <__ascii_mbtowc+0x1e>
 800ab58:	7813      	ldrb	r3, [r2, #0]
 800ab5a:	600b      	str	r3, [r1, #0]
 800ab5c:	7812      	ldrb	r2, [r2, #0]
 800ab5e:	1e10      	subs	r0, r2, #0
 800ab60:	bf18      	it	ne
 800ab62:	2001      	movne	r0, #1
 800ab64:	b002      	add	sp, #8
 800ab66:	4770      	bx	lr
 800ab68:	4610      	mov	r0, r2
 800ab6a:	e7fb      	b.n	800ab64 <__ascii_mbtowc+0x16>
 800ab6c:	f06f 0001 	mvn.w	r0, #1
 800ab70:	e7f8      	b.n	800ab64 <__ascii_mbtowc+0x16>

0800ab72 <_realloc_r>:
 800ab72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab76:	4680      	mov	r8, r0
 800ab78:	4614      	mov	r4, r2
 800ab7a:	460e      	mov	r6, r1
 800ab7c:	b921      	cbnz	r1, 800ab88 <_realloc_r+0x16>
 800ab7e:	4611      	mov	r1, r2
 800ab80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab84:	f7fd be40 	b.w	8008808 <_malloc_r>
 800ab88:	b92a      	cbnz	r2, 800ab96 <_realloc_r+0x24>
 800ab8a:	f7fd fdcd 	bl	8008728 <_free_r>
 800ab8e:	4625      	mov	r5, r4
 800ab90:	4628      	mov	r0, r5
 800ab92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab96:	f000 f842 	bl	800ac1e <_malloc_usable_size_r>
 800ab9a:	4284      	cmp	r4, r0
 800ab9c:	4607      	mov	r7, r0
 800ab9e:	d802      	bhi.n	800aba6 <_realloc_r+0x34>
 800aba0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aba4:	d812      	bhi.n	800abcc <_realloc_r+0x5a>
 800aba6:	4621      	mov	r1, r4
 800aba8:	4640      	mov	r0, r8
 800abaa:	f7fd fe2d 	bl	8008808 <_malloc_r>
 800abae:	4605      	mov	r5, r0
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d0ed      	beq.n	800ab90 <_realloc_r+0x1e>
 800abb4:	42bc      	cmp	r4, r7
 800abb6:	4622      	mov	r2, r4
 800abb8:	4631      	mov	r1, r6
 800abba:	bf28      	it	cs
 800abbc:	463a      	movcs	r2, r7
 800abbe:	f7ff fc27 	bl	800a410 <memcpy>
 800abc2:	4631      	mov	r1, r6
 800abc4:	4640      	mov	r0, r8
 800abc6:	f7fd fdaf 	bl	8008728 <_free_r>
 800abca:	e7e1      	b.n	800ab90 <_realloc_r+0x1e>
 800abcc:	4635      	mov	r5, r6
 800abce:	e7df      	b.n	800ab90 <_realloc_r+0x1e>

0800abd0 <__ascii_wctomb>:
 800abd0:	4603      	mov	r3, r0
 800abd2:	4608      	mov	r0, r1
 800abd4:	b141      	cbz	r1, 800abe8 <__ascii_wctomb+0x18>
 800abd6:	2aff      	cmp	r2, #255	; 0xff
 800abd8:	d904      	bls.n	800abe4 <__ascii_wctomb+0x14>
 800abda:	228a      	movs	r2, #138	; 0x8a
 800abdc:	f04f 30ff 	mov.w	r0, #4294967295
 800abe0:	601a      	str	r2, [r3, #0]
 800abe2:	4770      	bx	lr
 800abe4:	2001      	movs	r0, #1
 800abe6:	700a      	strb	r2, [r1, #0]
 800abe8:	4770      	bx	lr
	...

0800abec <fiprintf>:
 800abec:	b40e      	push	{r1, r2, r3}
 800abee:	b503      	push	{r0, r1, lr}
 800abf0:	4601      	mov	r1, r0
 800abf2:	ab03      	add	r3, sp, #12
 800abf4:	4805      	ldr	r0, [pc, #20]	; (800ac0c <fiprintf+0x20>)
 800abf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800abfa:	6800      	ldr	r0, [r0, #0]
 800abfc:	9301      	str	r3, [sp, #4]
 800abfe:	f000 f83d 	bl	800ac7c <_vfiprintf_r>
 800ac02:	b002      	add	sp, #8
 800ac04:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac08:	b003      	add	sp, #12
 800ac0a:	4770      	bx	lr
 800ac0c:	20000064 	.word	0x20000064

0800ac10 <abort>:
 800ac10:	2006      	movs	r0, #6
 800ac12:	b508      	push	{r3, lr}
 800ac14:	f000 fa0a 	bl	800b02c <raise>
 800ac18:	2001      	movs	r0, #1
 800ac1a:	f7f6 fe24 	bl	8001866 <_exit>

0800ac1e <_malloc_usable_size_r>:
 800ac1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac22:	1f18      	subs	r0, r3, #4
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	bfbc      	itt	lt
 800ac28:	580b      	ldrlt	r3, [r1, r0]
 800ac2a:	18c0      	addlt	r0, r0, r3
 800ac2c:	4770      	bx	lr

0800ac2e <__sfputc_r>:
 800ac2e:	6893      	ldr	r3, [r2, #8]
 800ac30:	b410      	push	{r4}
 800ac32:	3b01      	subs	r3, #1
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	6093      	str	r3, [r2, #8]
 800ac38:	da07      	bge.n	800ac4a <__sfputc_r+0x1c>
 800ac3a:	6994      	ldr	r4, [r2, #24]
 800ac3c:	42a3      	cmp	r3, r4
 800ac3e:	db01      	blt.n	800ac44 <__sfputc_r+0x16>
 800ac40:	290a      	cmp	r1, #10
 800ac42:	d102      	bne.n	800ac4a <__sfputc_r+0x1c>
 800ac44:	bc10      	pop	{r4}
 800ac46:	f000 b933 	b.w	800aeb0 <__swbuf_r>
 800ac4a:	6813      	ldr	r3, [r2, #0]
 800ac4c:	1c58      	adds	r0, r3, #1
 800ac4e:	6010      	str	r0, [r2, #0]
 800ac50:	7019      	strb	r1, [r3, #0]
 800ac52:	4608      	mov	r0, r1
 800ac54:	bc10      	pop	{r4}
 800ac56:	4770      	bx	lr

0800ac58 <__sfputs_r>:
 800ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5a:	4606      	mov	r6, r0
 800ac5c:	460f      	mov	r7, r1
 800ac5e:	4614      	mov	r4, r2
 800ac60:	18d5      	adds	r5, r2, r3
 800ac62:	42ac      	cmp	r4, r5
 800ac64:	d101      	bne.n	800ac6a <__sfputs_r+0x12>
 800ac66:	2000      	movs	r0, #0
 800ac68:	e007      	b.n	800ac7a <__sfputs_r+0x22>
 800ac6a:	463a      	mov	r2, r7
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac72:	f7ff ffdc 	bl	800ac2e <__sfputc_r>
 800ac76:	1c43      	adds	r3, r0, #1
 800ac78:	d1f3      	bne.n	800ac62 <__sfputs_r+0xa>
 800ac7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac7c <_vfiprintf_r>:
 800ac7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac80:	460d      	mov	r5, r1
 800ac82:	4614      	mov	r4, r2
 800ac84:	4698      	mov	r8, r3
 800ac86:	4606      	mov	r6, r0
 800ac88:	b09d      	sub	sp, #116	; 0x74
 800ac8a:	b118      	cbz	r0, 800ac94 <_vfiprintf_r+0x18>
 800ac8c:	6a03      	ldr	r3, [r0, #32]
 800ac8e:	b90b      	cbnz	r3, 800ac94 <_vfiprintf_r+0x18>
 800ac90:	f7fc fdb0 	bl	80077f4 <__sinit>
 800ac94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac96:	07d9      	lsls	r1, r3, #31
 800ac98:	d405      	bmi.n	800aca6 <_vfiprintf_r+0x2a>
 800ac9a:	89ab      	ldrh	r3, [r5, #12]
 800ac9c:	059a      	lsls	r2, r3, #22
 800ac9e:	d402      	bmi.n	800aca6 <_vfiprintf_r+0x2a>
 800aca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aca2:	f7fc febe 	bl	8007a22 <__retarget_lock_acquire_recursive>
 800aca6:	89ab      	ldrh	r3, [r5, #12]
 800aca8:	071b      	lsls	r3, r3, #28
 800acaa:	d501      	bpl.n	800acb0 <_vfiprintf_r+0x34>
 800acac:	692b      	ldr	r3, [r5, #16]
 800acae:	b99b      	cbnz	r3, 800acd8 <_vfiprintf_r+0x5c>
 800acb0:	4629      	mov	r1, r5
 800acb2:	4630      	mov	r0, r6
 800acb4:	f000 f93a 	bl	800af2c <__swsetup_r>
 800acb8:	b170      	cbz	r0, 800acd8 <_vfiprintf_r+0x5c>
 800acba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acbc:	07dc      	lsls	r4, r3, #31
 800acbe:	d504      	bpl.n	800acca <_vfiprintf_r+0x4e>
 800acc0:	f04f 30ff 	mov.w	r0, #4294967295
 800acc4:	b01d      	add	sp, #116	; 0x74
 800acc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acca:	89ab      	ldrh	r3, [r5, #12]
 800accc:	0598      	lsls	r0, r3, #22
 800acce:	d4f7      	bmi.n	800acc0 <_vfiprintf_r+0x44>
 800acd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acd2:	f7fc fea7 	bl	8007a24 <__retarget_lock_release_recursive>
 800acd6:	e7f3      	b.n	800acc0 <_vfiprintf_r+0x44>
 800acd8:	2300      	movs	r3, #0
 800acda:	9309      	str	r3, [sp, #36]	; 0x24
 800acdc:	2320      	movs	r3, #32
 800acde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ace2:	2330      	movs	r3, #48	; 0x30
 800ace4:	f04f 0901 	mov.w	r9, #1
 800ace8:	f8cd 800c 	str.w	r8, [sp, #12]
 800acec:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800ae9c <_vfiprintf_r+0x220>
 800acf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acf4:	4623      	mov	r3, r4
 800acf6:	469a      	mov	sl, r3
 800acf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acfc:	b10a      	cbz	r2, 800ad02 <_vfiprintf_r+0x86>
 800acfe:	2a25      	cmp	r2, #37	; 0x25
 800ad00:	d1f9      	bne.n	800acf6 <_vfiprintf_r+0x7a>
 800ad02:	ebba 0b04 	subs.w	fp, sl, r4
 800ad06:	d00b      	beq.n	800ad20 <_vfiprintf_r+0xa4>
 800ad08:	465b      	mov	r3, fp
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f7ff ffa2 	bl	800ac58 <__sfputs_r>
 800ad14:	3001      	adds	r0, #1
 800ad16:	f000 80a9 	beq.w	800ae6c <_vfiprintf_r+0x1f0>
 800ad1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad1c:	445a      	add	r2, fp
 800ad1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ad20:	f89a 3000 	ldrb.w	r3, [sl]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 80a1 	beq.w	800ae6c <_vfiprintf_r+0x1f0>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad34:	f10a 0a01 	add.w	sl, sl, #1
 800ad38:	9304      	str	r3, [sp, #16]
 800ad3a:	9307      	str	r3, [sp, #28]
 800ad3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad40:	931a      	str	r3, [sp, #104]	; 0x68
 800ad42:	4654      	mov	r4, sl
 800ad44:	2205      	movs	r2, #5
 800ad46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad4a:	4854      	ldr	r0, [pc, #336]	; (800ae9c <_vfiprintf_r+0x220>)
 800ad4c:	f7fc fe6b 	bl	8007a26 <memchr>
 800ad50:	9a04      	ldr	r2, [sp, #16]
 800ad52:	b9d8      	cbnz	r0, 800ad8c <_vfiprintf_r+0x110>
 800ad54:	06d1      	lsls	r1, r2, #27
 800ad56:	bf44      	itt	mi
 800ad58:	2320      	movmi	r3, #32
 800ad5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad5e:	0713      	lsls	r3, r2, #28
 800ad60:	bf44      	itt	mi
 800ad62:	232b      	movmi	r3, #43	; 0x2b
 800ad64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad68:	f89a 3000 	ldrb.w	r3, [sl]
 800ad6c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad6e:	d015      	beq.n	800ad9c <_vfiprintf_r+0x120>
 800ad70:	4654      	mov	r4, sl
 800ad72:	2000      	movs	r0, #0
 800ad74:	f04f 0c0a 	mov.w	ip, #10
 800ad78:	9a07      	ldr	r2, [sp, #28]
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad80:	3b30      	subs	r3, #48	; 0x30
 800ad82:	2b09      	cmp	r3, #9
 800ad84:	d94d      	bls.n	800ae22 <_vfiprintf_r+0x1a6>
 800ad86:	b1b0      	cbz	r0, 800adb6 <_vfiprintf_r+0x13a>
 800ad88:	9207      	str	r2, [sp, #28]
 800ad8a:	e014      	b.n	800adb6 <_vfiprintf_r+0x13a>
 800ad8c:	eba0 0308 	sub.w	r3, r0, r8
 800ad90:	fa09 f303 	lsl.w	r3, r9, r3
 800ad94:	4313      	orrs	r3, r2
 800ad96:	46a2      	mov	sl, r4
 800ad98:	9304      	str	r3, [sp, #16]
 800ad9a:	e7d2      	b.n	800ad42 <_vfiprintf_r+0xc6>
 800ad9c:	9b03      	ldr	r3, [sp, #12]
 800ad9e:	1d19      	adds	r1, r3, #4
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	9103      	str	r1, [sp, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	bfbb      	ittet	lt
 800ada8:	425b      	neglt	r3, r3
 800adaa:	f042 0202 	orrlt.w	r2, r2, #2
 800adae:	9307      	strge	r3, [sp, #28]
 800adb0:	9307      	strlt	r3, [sp, #28]
 800adb2:	bfb8      	it	lt
 800adb4:	9204      	strlt	r2, [sp, #16]
 800adb6:	7823      	ldrb	r3, [r4, #0]
 800adb8:	2b2e      	cmp	r3, #46	; 0x2e
 800adba:	d10c      	bne.n	800add6 <_vfiprintf_r+0x15a>
 800adbc:	7863      	ldrb	r3, [r4, #1]
 800adbe:	2b2a      	cmp	r3, #42	; 0x2a
 800adc0:	d134      	bne.n	800ae2c <_vfiprintf_r+0x1b0>
 800adc2:	9b03      	ldr	r3, [sp, #12]
 800adc4:	3402      	adds	r4, #2
 800adc6:	1d1a      	adds	r2, r3, #4
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	9203      	str	r2, [sp, #12]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	bfb8      	it	lt
 800add0:	f04f 33ff 	movlt.w	r3, #4294967295
 800add4:	9305      	str	r3, [sp, #20]
 800add6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aea0 <_vfiprintf_r+0x224>
 800adda:	2203      	movs	r2, #3
 800addc:	4650      	mov	r0, sl
 800adde:	7821      	ldrb	r1, [r4, #0]
 800ade0:	f7fc fe21 	bl	8007a26 <memchr>
 800ade4:	b138      	cbz	r0, 800adf6 <_vfiprintf_r+0x17a>
 800ade6:	2240      	movs	r2, #64	; 0x40
 800ade8:	9b04      	ldr	r3, [sp, #16]
 800adea:	eba0 000a 	sub.w	r0, r0, sl
 800adee:	4082      	lsls	r2, r0
 800adf0:	4313      	orrs	r3, r2
 800adf2:	3401      	adds	r4, #1
 800adf4:	9304      	str	r3, [sp, #16]
 800adf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adfa:	2206      	movs	r2, #6
 800adfc:	4829      	ldr	r0, [pc, #164]	; (800aea4 <_vfiprintf_r+0x228>)
 800adfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae02:	f7fc fe10 	bl	8007a26 <memchr>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d03f      	beq.n	800ae8a <_vfiprintf_r+0x20e>
 800ae0a:	4b27      	ldr	r3, [pc, #156]	; (800aea8 <_vfiprintf_r+0x22c>)
 800ae0c:	bb1b      	cbnz	r3, 800ae56 <_vfiprintf_r+0x1da>
 800ae0e:	9b03      	ldr	r3, [sp, #12]
 800ae10:	3307      	adds	r3, #7
 800ae12:	f023 0307 	bic.w	r3, r3, #7
 800ae16:	3308      	adds	r3, #8
 800ae18:	9303      	str	r3, [sp, #12]
 800ae1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae1c:	443b      	add	r3, r7
 800ae1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae20:	e768      	b.n	800acf4 <_vfiprintf_r+0x78>
 800ae22:	460c      	mov	r4, r1
 800ae24:	2001      	movs	r0, #1
 800ae26:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae2a:	e7a6      	b.n	800ad7a <_vfiprintf_r+0xfe>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f04f 0c0a 	mov.w	ip, #10
 800ae32:	4619      	mov	r1, r3
 800ae34:	3401      	adds	r4, #1
 800ae36:	9305      	str	r3, [sp, #20]
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae3e:	3a30      	subs	r2, #48	; 0x30
 800ae40:	2a09      	cmp	r2, #9
 800ae42:	d903      	bls.n	800ae4c <_vfiprintf_r+0x1d0>
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d0c6      	beq.n	800add6 <_vfiprintf_r+0x15a>
 800ae48:	9105      	str	r1, [sp, #20]
 800ae4a:	e7c4      	b.n	800add6 <_vfiprintf_r+0x15a>
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	2301      	movs	r3, #1
 800ae50:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae54:	e7f0      	b.n	800ae38 <_vfiprintf_r+0x1bc>
 800ae56:	ab03      	add	r3, sp, #12
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	462a      	mov	r2, r5
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	4b13      	ldr	r3, [pc, #76]	; (800aeac <_vfiprintf_r+0x230>)
 800ae60:	a904      	add	r1, sp, #16
 800ae62:	f7fb fe6b 	bl	8006b3c <_printf_float>
 800ae66:	4607      	mov	r7, r0
 800ae68:	1c78      	adds	r0, r7, #1
 800ae6a:	d1d6      	bne.n	800ae1a <_vfiprintf_r+0x19e>
 800ae6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae6e:	07d9      	lsls	r1, r3, #31
 800ae70:	d405      	bmi.n	800ae7e <_vfiprintf_r+0x202>
 800ae72:	89ab      	ldrh	r3, [r5, #12]
 800ae74:	059a      	lsls	r2, r3, #22
 800ae76:	d402      	bmi.n	800ae7e <_vfiprintf_r+0x202>
 800ae78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae7a:	f7fc fdd3 	bl	8007a24 <__retarget_lock_release_recursive>
 800ae7e:	89ab      	ldrh	r3, [r5, #12]
 800ae80:	065b      	lsls	r3, r3, #25
 800ae82:	f53f af1d 	bmi.w	800acc0 <_vfiprintf_r+0x44>
 800ae86:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae88:	e71c      	b.n	800acc4 <_vfiprintf_r+0x48>
 800ae8a:	ab03      	add	r3, sp, #12
 800ae8c:	9300      	str	r3, [sp, #0]
 800ae8e:	462a      	mov	r2, r5
 800ae90:	4630      	mov	r0, r6
 800ae92:	4b06      	ldr	r3, [pc, #24]	; (800aeac <_vfiprintf_r+0x230>)
 800ae94:	a904      	add	r1, sp, #16
 800ae96:	f7fc f8f1 	bl	800707c <_printf_i>
 800ae9a:	e7e4      	b.n	800ae66 <_vfiprintf_r+0x1ea>
 800ae9c:	0800b571 	.word	0x0800b571
 800aea0:	0800b577 	.word	0x0800b577
 800aea4:	0800b57b 	.word	0x0800b57b
 800aea8:	08006b3d 	.word	0x08006b3d
 800aeac:	0800ac59 	.word	0x0800ac59

0800aeb0 <__swbuf_r>:
 800aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb2:	460e      	mov	r6, r1
 800aeb4:	4614      	mov	r4, r2
 800aeb6:	4605      	mov	r5, r0
 800aeb8:	b118      	cbz	r0, 800aec2 <__swbuf_r+0x12>
 800aeba:	6a03      	ldr	r3, [r0, #32]
 800aebc:	b90b      	cbnz	r3, 800aec2 <__swbuf_r+0x12>
 800aebe:	f7fc fc99 	bl	80077f4 <__sinit>
 800aec2:	69a3      	ldr	r3, [r4, #24]
 800aec4:	60a3      	str	r3, [r4, #8]
 800aec6:	89a3      	ldrh	r3, [r4, #12]
 800aec8:	071a      	lsls	r2, r3, #28
 800aeca:	d525      	bpl.n	800af18 <__swbuf_r+0x68>
 800aecc:	6923      	ldr	r3, [r4, #16]
 800aece:	b31b      	cbz	r3, 800af18 <__swbuf_r+0x68>
 800aed0:	6823      	ldr	r3, [r4, #0]
 800aed2:	6922      	ldr	r2, [r4, #16]
 800aed4:	b2f6      	uxtb	r6, r6
 800aed6:	1a98      	subs	r0, r3, r2
 800aed8:	6963      	ldr	r3, [r4, #20]
 800aeda:	4637      	mov	r7, r6
 800aedc:	4283      	cmp	r3, r0
 800aede:	dc04      	bgt.n	800aeea <__swbuf_r+0x3a>
 800aee0:	4621      	mov	r1, r4
 800aee2:	4628      	mov	r0, r5
 800aee4:	f7ff fa30 	bl	800a348 <_fflush_r>
 800aee8:	b9e0      	cbnz	r0, 800af24 <__swbuf_r+0x74>
 800aeea:	68a3      	ldr	r3, [r4, #8]
 800aeec:	3b01      	subs	r3, #1
 800aeee:	60a3      	str	r3, [r4, #8]
 800aef0:	6823      	ldr	r3, [r4, #0]
 800aef2:	1c5a      	adds	r2, r3, #1
 800aef4:	6022      	str	r2, [r4, #0]
 800aef6:	701e      	strb	r6, [r3, #0]
 800aef8:	6962      	ldr	r2, [r4, #20]
 800aefa:	1c43      	adds	r3, r0, #1
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d004      	beq.n	800af0a <__swbuf_r+0x5a>
 800af00:	89a3      	ldrh	r3, [r4, #12]
 800af02:	07db      	lsls	r3, r3, #31
 800af04:	d506      	bpl.n	800af14 <__swbuf_r+0x64>
 800af06:	2e0a      	cmp	r6, #10
 800af08:	d104      	bne.n	800af14 <__swbuf_r+0x64>
 800af0a:	4621      	mov	r1, r4
 800af0c:	4628      	mov	r0, r5
 800af0e:	f7ff fa1b 	bl	800a348 <_fflush_r>
 800af12:	b938      	cbnz	r0, 800af24 <__swbuf_r+0x74>
 800af14:	4638      	mov	r0, r7
 800af16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af18:	4621      	mov	r1, r4
 800af1a:	4628      	mov	r0, r5
 800af1c:	f000 f806 	bl	800af2c <__swsetup_r>
 800af20:	2800      	cmp	r0, #0
 800af22:	d0d5      	beq.n	800aed0 <__swbuf_r+0x20>
 800af24:	f04f 37ff 	mov.w	r7, #4294967295
 800af28:	e7f4      	b.n	800af14 <__swbuf_r+0x64>
	...

0800af2c <__swsetup_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4b2a      	ldr	r3, [pc, #168]	; (800afd8 <__swsetup_r+0xac>)
 800af30:	4605      	mov	r5, r0
 800af32:	6818      	ldr	r0, [r3, #0]
 800af34:	460c      	mov	r4, r1
 800af36:	b118      	cbz	r0, 800af40 <__swsetup_r+0x14>
 800af38:	6a03      	ldr	r3, [r0, #32]
 800af3a:	b90b      	cbnz	r3, 800af40 <__swsetup_r+0x14>
 800af3c:	f7fc fc5a 	bl	80077f4 <__sinit>
 800af40:	89a3      	ldrh	r3, [r4, #12]
 800af42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af46:	0718      	lsls	r0, r3, #28
 800af48:	d422      	bmi.n	800af90 <__swsetup_r+0x64>
 800af4a:	06d9      	lsls	r1, r3, #27
 800af4c:	d407      	bmi.n	800af5e <__swsetup_r+0x32>
 800af4e:	2309      	movs	r3, #9
 800af50:	602b      	str	r3, [r5, #0]
 800af52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af56:	f04f 30ff 	mov.w	r0, #4294967295
 800af5a:	81a3      	strh	r3, [r4, #12]
 800af5c:	e034      	b.n	800afc8 <__swsetup_r+0x9c>
 800af5e:	0758      	lsls	r0, r3, #29
 800af60:	d512      	bpl.n	800af88 <__swsetup_r+0x5c>
 800af62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af64:	b141      	cbz	r1, 800af78 <__swsetup_r+0x4c>
 800af66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af6a:	4299      	cmp	r1, r3
 800af6c:	d002      	beq.n	800af74 <__swsetup_r+0x48>
 800af6e:	4628      	mov	r0, r5
 800af70:	f7fd fbda 	bl	8008728 <_free_r>
 800af74:	2300      	movs	r3, #0
 800af76:	6363      	str	r3, [r4, #52]	; 0x34
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af7e:	81a3      	strh	r3, [r4, #12]
 800af80:	2300      	movs	r3, #0
 800af82:	6063      	str	r3, [r4, #4]
 800af84:	6923      	ldr	r3, [r4, #16]
 800af86:	6023      	str	r3, [r4, #0]
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	f043 0308 	orr.w	r3, r3, #8
 800af8e:	81a3      	strh	r3, [r4, #12]
 800af90:	6923      	ldr	r3, [r4, #16]
 800af92:	b94b      	cbnz	r3, 800afa8 <__swsetup_r+0x7c>
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af9e:	d003      	beq.n	800afa8 <__swsetup_r+0x7c>
 800afa0:	4621      	mov	r1, r4
 800afa2:	4628      	mov	r0, r5
 800afa4:	f000 f883 	bl	800b0ae <__smakebuf_r>
 800afa8:	89a0      	ldrh	r0, [r4, #12]
 800afaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afae:	f010 0301 	ands.w	r3, r0, #1
 800afb2:	d00a      	beq.n	800afca <__swsetup_r+0x9e>
 800afb4:	2300      	movs	r3, #0
 800afb6:	60a3      	str	r3, [r4, #8]
 800afb8:	6963      	ldr	r3, [r4, #20]
 800afba:	425b      	negs	r3, r3
 800afbc:	61a3      	str	r3, [r4, #24]
 800afbe:	6923      	ldr	r3, [r4, #16]
 800afc0:	b943      	cbnz	r3, 800afd4 <__swsetup_r+0xa8>
 800afc2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afc6:	d1c4      	bne.n	800af52 <__swsetup_r+0x26>
 800afc8:	bd38      	pop	{r3, r4, r5, pc}
 800afca:	0781      	lsls	r1, r0, #30
 800afcc:	bf58      	it	pl
 800afce:	6963      	ldrpl	r3, [r4, #20]
 800afd0:	60a3      	str	r3, [r4, #8]
 800afd2:	e7f4      	b.n	800afbe <__swsetup_r+0x92>
 800afd4:	2000      	movs	r0, #0
 800afd6:	e7f7      	b.n	800afc8 <__swsetup_r+0x9c>
 800afd8:	20000064 	.word	0x20000064

0800afdc <_raise_r>:
 800afdc:	291f      	cmp	r1, #31
 800afde:	b538      	push	{r3, r4, r5, lr}
 800afe0:	4604      	mov	r4, r0
 800afe2:	460d      	mov	r5, r1
 800afe4:	d904      	bls.n	800aff0 <_raise_r+0x14>
 800afe6:	2316      	movs	r3, #22
 800afe8:	6003      	str	r3, [r0, #0]
 800afea:	f04f 30ff 	mov.w	r0, #4294967295
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aff2:	b112      	cbz	r2, 800affa <_raise_r+0x1e>
 800aff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aff8:	b94b      	cbnz	r3, 800b00e <_raise_r+0x32>
 800affa:	4620      	mov	r0, r4
 800affc:	f000 f830 	bl	800b060 <_getpid_r>
 800b000:	462a      	mov	r2, r5
 800b002:	4601      	mov	r1, r0
 800b004:	4620      	mov	r0, r4
 800b006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b00a:	f000 b817 	b.w	800b03c <_kill_r>
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d00a      	beq.n	800b028 <_raise_r+0x4c>
 800b012:	1c59      	adds	r1, r3, #1
 800b014:	d103      	bne.n	800b01e <_raise_r+0x42>
 800b016:	2316      	movs	r3, #22
 800b018:	6003      	str	r3, [r0, #0]
 800b01a:	2001      	movs	r0, #1
 800b01c:	e7e7      	b.n	800afee <_raise_r+0x12>
 800b01e:	2400      	movs	r4, #0
 800b020:	4628      	mov	r0, r5
 800b022:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b026:	4798      	blx	r3
 800b028:	2000      	movs	r0, #0
 800b02a:	e7e0      	b.n	800afee <_raise_r+0x12>

0800b02c <raise>:
 800b02c:	4b02      	ldr	r3, [pc, #8]	; (800b038 <raise+0xc>)
 800b02e:	4601      	mov	r1, r0
 800b030:	6818      	ldr	r0, [r3, #0]
 800b032:	f7ff bfd3 	b.w	800afdc <_raise_r>
 800b036:	bf00      	nop
 800b038:	20000064 	.word	0x20000064

0800b03c <_kill_r>:
 800b03c:	b538      	push	{r3, r4, r5, lr}
 800b03e:	2300      	movs	r3, #0
 800b040:	4d06      	ldr	r5, [pc, #24]	; (800b05c <_kill_r+0x20>)
 800b042:	4604      	mov	r4, r0
 800b044:	4608      	mov	r0, r1
 800b046:	4611      	mov	r1, r2
 800b048:	602b      	str	r3, [r5, #0]
 800b04a:	f7f6 fbfc 	bl	8001846 <_kill>
 800b04e:	1c43      	adds	r3, r0, #1
 800b050:	d102      	bne.n	800b058 <_kill_r+0x1c>
 800b052:	682b      	ldr	r3, [r5, #0]
 800b054:	b103      	cbz	r3, 800b058 <_kill_r+0x1c>
 800b056:	6023      	str	r3, [r4, #0]
 800b058:	bd38      	pop	{r3, r4, r5, pc}
 800b05a:	bf00      	nop
 800b05c:	20000410 	.word	0x20000410

0800b060 <_getpid_r>:
 800b060:	f7f6 bbea 	b.w	8001838 <_getpid>

0800b064 <__swhatbuf_r>:
 800b064:	b570      	push	{r4, r5, r6, lr}
 800b066:	460c      	mov	r4, r1
 800b068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b06c:	4615      	mov	r5, r2
 800b06e:	2900      	cmp	r1, #0
 800b070:	461e      	mov	r6, r3
 800b072:	b096      	sub	sp, #88	; 0x58
 800b074:	da0c      	bge.n	800b090 <__swhatbuf_r+0x2c>
 800b076:	89a3      	ldrh	r3, [r4, #12]
 800b078:	2100      	movs	r1, #0
 800b07a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b07e:	bf0c      	ite	eq
 800b080:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b084:	2340      	movne	r3, #64	; 0x40
 800b086:	2000      	movs	r0, #0
 800b088:	6031      	str	r1, [r6, #0]
 800b08a:	602b      	str	r3, [r5, #0]
 800b08c:	b016      	add	sp, #88	; 0x58
 800b08e:	bd70      	pop	{r4, r5, r6, pc}
 800b090:	466a      	mov	r2, sp
 800b092:	f000 f849 	bl	800b128 <_fstat_r>
 800b096:	2800      	cmp	r0, #0
 800b098:	dbed      	blt.n	800b076 <__swhatbuf_r+0x12>
 800b09a:	9901      	ldr	r1, [sp, #4]
 800b09c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b0a0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b0a4:	4259      	negs	r1, r3
 800b0a6:	4159      	adcs	r1, r3
 800b0a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ac:	e7eb      	b.n	800b086 <__swhatbuf_r+0x22>

0800b0ae <__smakebuf_r>:
 800b0ae:	898b      	ldrh	r3, [r1, #12]
 800b0b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0b2:	079d      	lsls	r5, r3, #30
 800b0b4:	4606      	mov	r6, r0
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	d507      	bpl.n	800b0ca <__smakebuf_r+0x1c>
 800b0ba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0be:	6023      	str	r3, [r4, #0]
 800b0c0:	6123      	str	r3, [r4, #16]
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	6163      	str	r3, [r4, #20]
 800b0c6:	b002      	add	sp, #8
 800b0c8:	bd70      	pop	{r4, r5, r6, pc}
 800b0ca:	466a      	mov	r2, sp
 800b0cc:	ab01      	add	r3, sp, #4
 800b0ce:	f7ff ffc9 	bl	800b064 <__swhatbuf_r>
 800b0d2:	9900      	ldr	r1, [sp, #0]
 800b0d4:	4605      	mov	r5, r0
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	f7fd fb96 	bl	8008808 <_malloc_r>
 800b0dc:	b948      	cbnz	r0, 800b0f2 <__smakebuf_r+0x44>
 800b0de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0e2:	059a      	lsls	r2, r3, #22
 800b0e4:	d4ef      	bmi.n	800b0c6 <__smakebuf_r+0x18>
 800b0e6:	f023 0303 	bic.w	r3, r3, #3
 800b0ea:	f043 0302 	orr.w	r3, r3, #2
 800b0ee:	81a3      	strh	r3, [r4, #12]
 800b0f0:	e7e3      	b.n	800b0ba <__smakebuf_r+0xc>
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	6020      	str	r0, [r4, #0]
 800b0f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0fa:	81a3      	strh	r3, [r4, #12]
 800b0fc:	9b00      	ldr	r3, [sp, #0]
 800b0fe:	6120      	str	r0, [r4, #16]
 800b100:	6163      	str	r3, [r4, #20]
 800b102:	9b01      	ldr	r3, [sp, #4]
 800b104:	b15b      	cbz	r3, 800b11e <__smakebuf_r+0x70>
 800b106:	4630      	mov	r0, r6
 800b108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b10c:	f000 f81e 	bl	800b14c <_isatty_r>
 800b110:	b128      	cbz	r0, 800b11e <__smakebuf_r+0x70>
 800b112:	89a3      	ldrh	r3, [r4, #12]
 800b114:	f023 0303 	bic.w	r3, r3, #3
 800b118:	f043 0301 	orr.w	r3, r3, #1
 800b11c:	81a3      	strh	r3, [r4, #12]
 800b11e:	89a3      	ldrh	r3, [r4, #12]
 800b120:	431d      	orrs	r5, r3
 800b122:	81a5      	strh	r5, [r4, #12]
 800b124:	e7cf      	b.n	800b0c6 <__smakebuf_r+0x18>
	...

0800b128 <_fstat_r>:
 800b128:	b538      	push	{r3, r4, r5, lr}
 800b12a:	2300      	movs	r3, #0
 800b12c:	4d06      	ldr	r5, [pc, #24]	; (800b148 <_fstat_r+0x20>)
 800b12e:	4604      	mov	r4, r0
 800b130:	4608      	mov	r0, r1
 800b132:	4611      	mov	r1, r2
 800b134:	602b      	str	r3, [r5, #0]
 800b136:	f7f6 fbe4 	bl	8001902 <_fstat>
 800b13a:	1c43      	adds	r3, r0, #1
 800b13c:	d102      	bne.n	800b144 <_fstat_r+0x1c>
 800b13e:	682b      	ldr	r3, [r5, #0]
 800b140:	b103      	cbz	r3, 800b144 <_fstat_r+0x1c>
 800b142:	6023      	str	r3, [r4, #0]
 800b144:	bd38      	pop	{r3, r4, r5, pc}
 800b146:	bf00      	nop
 800b148:	20000410 	.word	0x20000410

0800b14c <_isatty_r>:
 800b14c:	b538      	push	{r3, r4, r5, lr}
 800b14e:	2300      	movs	r3, #0
 800b150:	4d05      	ldr	r5, [pc, #20]	; (800b168 <_isatty_r+0x1c>)
 800b152:	4604      	mov	r4, r0
 800b154:	4608      	mov	r0, r1
 800b156:	602b      	str	r3, [r5, #0]
 800b158:	f7f6 fbe2 	bl	8001920 <_isatty>
 800b15c:	1c43      	adds	r3, r0, #1
 800b15e:	d102      	bne.n	800b166 <_isatty_r+0x1a>
 800b160:	682b      	ldr	r3, [r5, #0]
 800b162:	b103      	cbz	r3, 800b166 <_isatty_r+0x1a>
 800b164:	6023      	str	r3, [r4, #0]
 800b166:	bd38      	pop	{r3, r4, r5, pc}
 800b168:	20000410 	.word	0x20000410

0800b16c <_init>:
 800b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16e:	bf00      	nop
 800b170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b172:	bc08      	pop	{r3}
 800b174:	469e      	mov	lr, r3
 800b176:	4770      	bx	lr

0800b178 <_fini>:
 800b178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17a:	bf00      	nop
 800b17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17e:	bc08      	pop	{r3}
 800b180:	469e      	mov	lr, r3
 800b182:	4770      	bx	lr

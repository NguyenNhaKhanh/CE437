
Lab03_Actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08003708  08003708  00013708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003810  08003810  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003810  08003810  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003810  08003810  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003810  08003810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000068  08003880  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003880  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   000093ba  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bf4  00000000  00000000  0002948e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  0002b088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000673  00000000  00000000  0002b918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018259  00000000  00000000  0002bf8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a3de  00000000  00000000  000441e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008652b  00000000  00000000  0004e5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ad8  00000000  00000000  000d4af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d75c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080036f0 	.word	0x080036f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080036f0 	.word	0x080036f0

0800014c <CANCom_Init>:

extern CAN_HandleTypeDef hcan;
extern uint8_t SendBuf[8];
extern uint8_t MsgCounter;

void CANCom_Init() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef RxFilter = {0 };
 8000152:	463b      	mov	r3, r7
 8000154:	2228      	movs	r2, #40	; 0x28
 8000156:	2100      	movs	r1, #0
 8000158:	4618      	mov	r0, r3
 800015a:	f002 fc1e 	bl	800299a <memset>
		RxFilter.FilterActivation = CAN_FILTER_ENABLE;
 800015e:	2301      	movs	r3, #1
 8000160:	623b      	str	r3, [r7, #32]
		RxFilter.FilterBank = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	617b      	str	r3, [r7, #20]
		RxFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000166:	2300      	movs	r3, #0
 8000168:	613b      	str	r3, [r7, #16]
		RxFilter.FilterIdHigh = RX_ID << 5;
 800016a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800016e:	603b      	str	r3, [r7, #0]
		RxFilter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000170:	2301      	movs	r3, #1
 8000172:	61bb      	str	r3, [r7, #24]
		RxFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 8000174:	2300      	movs	r3, #0
 8000176:	61fb      	str	r3, [r7, #28]
	HAL_CAN_ConfigFilter(&hcan, &RxFilter);
 8000178:	463b      	mov	r3, r7
 800017a:	4619      	mov	r1, r3
 800017c:	4806      	ldr	r0, [pc, #24]	; (8000198 <CANCom_Init+0x4c>)
 800017e:	f000 fd8a 	bl	8000c96 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000182:	2102      	movs	r1, #2
 8000184:	4804      	ldr	r0, [pc, #16]	; (8000198 <CANCom_Init+0x4c>)
 8000186:	f001 f883 	bl	8001290 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan);
 800018a:	4803      	ldr	r0, [pc, #12]	; (8000198 <CANCom_Init+0x4c>)
 800018c:	f000 fe4c 	bl	8000e28 <HAL_CAN_Start>
}
 8000190:	bf00      	nop
 8000192:	3728      	adds	r7, #40	; 0x28
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	20000084 	.word	0x20000084

0800019c <CANCom_Transmit>:

void CANCom_Transmit(uint8_t *pData, uint8_t len) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b08a      	sub	sp, #40	; 0x28
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
 80001a4:	460b      	mov	r3, r1
 80001a6:	70fb      	strb	r3, [r7, #3]
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = len;
 80001a8:	78fb      	ldrb	r3, [r7, #3]
 80001aa:	623b      	str	r3, [r7, #32]
	TxHeader.IDE = CAN_ID_STD;
 80001ac:	2300      	movs	r3, #0
 80001ae:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 80001b0:	2300      	movs	r3, #0
 80001b2:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = TX_ID;
 80001b4:	23a2      	movs	r3, #162	; 0xa2
 80001b6:	613b      	str	r3, [r7, #16]
	uint8_t Mailbox;
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, pData, &Mailbox);
 80001b8:	f107 030f 	add.w	r3, r7, #15
 80001bc:	f107 0110 	add.w	r1, r7, #16
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	4803      	ldr	r0, [pc, #12]	; (80001d0 <CANCom_Transmit+0x34>)
 80001c4:	f000 fe74 	bl	8000eb0 <HAL_CAN_AddTxMessage>
}
 80001c8:	bf00      	nop
 80001ca:	3728      	adds	r7, #40	; 0x28
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	20000084 	.word	0x20000084

080001d4 <Actuator_RecvHandle>:
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_RESET);
	}
}

void Actuator_RecvHandle(uint8_t *Buf,uint8_t Len) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	70fb      	strb	r3, [r7, #3]
	if (Buf[0] == SendBuf[0] && Buf[1] == SendBuf[1] && MsgCounter == Buf[7]) {
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	781a      	ldrb	r2, [r3, #0]
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <Actuator_RecvHandle+0x60>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	429a      	cmp	r2, r3
 80001ea:	d119      	bne.n	8000220 <Actuator_RecvHandle+0x4c>
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	3301      	adds	r3, #1
 80001f0:	781a      	ldrb	r2, [r3, #0]
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <Actuator_RecvHandle+0x60>)
 80001f4:	785b      	ldrb	r3, [r3, #1]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d112      	bne.n	8000220 <Actuator_RecvHandle+0x4c>
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	3307      	adds	r3, #7
 80001fe:	781a      	ldrb	r2, [r3, #0]
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <Actuator_RecvHandle+0x64>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	429a      	cmp	r2, r3
 8000206:	d10b      	bne.n	8000220 <Actuator_RecvHandle+0x4c>
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	2110      	movs	r1, #16
 800020c:	480b      	ldr	r0, [pc, #44]	; (800023c <Actuator_RecvHandle+0x68>)
 800020e:	f001 fd19 	bl	8001c44 <HAL_GPIO_WritePin>
		MsgCounter++;
 8000212:	4b09      	ldr	r3, [pc, #36]	; (8000238 <Actuator_RecvHandle+0x64>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	3301      	adds	r3, #1
 8000218:	b2da      	uxtb	r2, r3
 800021a:	4b07      	ldr	r3, [pc, #28]	; (8000238 <Actuator_RecvHandle+0x64>)
 800021c:	701a      	strb	r2, [r3, #0]
 800021e:	e005      	b.n	800022c <Actuator_RecvHandle+0x58>
	}
	else {
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 8000220:	2201      	movs	r2, #1
 8000222:	2110      	movs	r1, #16
 8000224:	4805      	ldr	r0, [pc, #20]	; (800023c <Actuator_RecvHandle+0x68>)
 8000226:	f001 fd0d 	bl	8001c44 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_RESET);
	}
}
 800022a:	bf00      	nop
 800022c:	bf00      	nop
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	200000f8 	.word	0x200000f8
 8000238:	200000f4 	.word	0x200000f4
 800023c:	40010c00 	.word	0x40010c00

08000240 <CANCom_ReceiveCallback>:

void CANCom_ReceiveCallback() {
 8000240:	b580      	push	{r7, lr}
 8000242:	b08a      	sub	sp, #40	; 0x28
 8000244:	af00      	add	r7, sp, #0
	uint8_t RcvBuf[8];
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(&hcan, CAN_FILTER_FIFO0, &RxHeader, RcvBuf);
 8000246:	f107 0320 	add.w	r3, r7, #32
 800024a:	1d3a      	adds	r2, r7, #4
 800024c:	2100      	movs	r1, #0
 800024e:	4807      	ldr	r0, [pc, #28]	; (800026c <CANCom_ReceiveCallback+0x2c>)
 8000250:	f000 fefd 	bl	800104e <HAL_CAN_GetRxMessage>
#if SENSOR_NODE
	Sensor_RecvHandle(RcvBuf,RxHeader.DLC);
#elif ACTUATOR_NODE
	Actuator_RecvHandle(RcvBuf,RxHeader.DLC);
 8000254:	697b      	ldr	r3, [r7, #20]
 8000256:	b2da      	uxtb	r2, r3
 8000258:	f107 0320 	add.w	r3, r7, #32
 800025c:	4611      	mov	r1, r2
 800025e:	4618      	mov	r0, r3
 8000260:	f7ff ffb8 	bl	80001d4 <Actuator_RecvHandle>
#endif
}
 8000264:	bf00      	nop
 8000266:	3728      	adds	r7, #40	; 0x28
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000084 	.word	0x20000084

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fb8d 	bl	8000994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f849 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f8ef 	bl	8000460 <MX_GPIO_Init>
  MX_CAN_Init();
 8000282:	f000 f88b 	bl	800039c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000286:	f000 f8c1 	bl	800040c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	CANCom_Init();
 800028a:	f7ff ff5f 	bl	800014c <CANCom_Init>
//	uint8_t val1 = 0,val2 = 0;
	int crc_val = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		SendBuf[0] = rand() % 255;
 8000292:	f002 fa3f 	bl	8002714 <rand>
 8000296:	4602      	mov	r2, r0
 8000298:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <main+0x98>)
 800029a:	fb83 1302 	smull	r1, r3, r3, r2
 800029e:	4413      	add	r3, r2
 80002a0:	11d9      	asrs	r1, r3, #7
 80002a2:	17d3      	asrs	r3, r2, #31
 80002a4:	1ac9      	subs	r1, r1, r3
 80002a6:	460b      	mov	r3, r1
 80002a8:	021b      	lsls	r3, r3, #8
 80002aa:	1a5b      	subs	r3, r3, r1
 80002ac:	1ad1      	subs	r1, r2, r3
 80002ae:	b2ca      	uxtb	r2, r1
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <main+0x9c>)
 80002b2:	701a      	strb	r2, [r3, #0]
		SendBuf[1] = rand() % 255;
 80002b4:	f002 fa2e 	bl	8002714 <rand>
 80002b8:	4602      	mov	r2, r0
 80002ba:	4b13      	ldr	r3, [pc, #76]	; (8000308 <main+0x98>)
 80002bc:	fb83 1302 	smull	r1, r3, r3, r2
 80002c0:	4413      	add	r3, r2
 80002c2:	11d9      	asrs	r1, r3, #7
 80002c4:	17d3      	asrs	r3, r2, #31
 80002c6:	1ac9      	subs	r1, r1, r3
 80002c8:	460b      	mov	r3, r1
 80002ca:	021b      	lsls	r3, r3, #8
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	1ad1      	subs	r1, r2, r3
 80002d0:	b2ca      	uxtb	r2, r1
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <main+0x9c>)
 80002d4:	705a      	strb	r2, [r3, #1]
		SendBuf[2] = SendBuf[0] + SendBuf[1];
 80002d6:	4b0d      	ldr	r3, [pc, #52]	; (800030c <main+0x9c>)
 80002d8:	781a      	ldrb	r2, [r3, #0]
 80002da:	4b0c      	ldr	r3, [pc, #48]	; (800030c <main+0x9c>)
 80002dc:	785b      	ldrb	r3, [r3, #1]
 80002de:	4413      	add	r3, r2
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4b0a      	ldr	r3, [pc, #40]	; (800030c <main+0x9c>)
 80002e4:	709a      	strb	r2, [r3, #2]
		crc_val = calc_SAE_J1850(SendBuf, 7);
 80002e6:	2107      	movs	r1, #7
 80002e8:	4808      	ldr	r0, [pc, #32]	; (800030c <main+0x9c>)
 80002ea:	f002 f9cb 	bl	8002684 <calc_SAE_J1850>
 80002ee:	6078      	str	r0, [r7, #4]
		SendBuf[7] = crc_val;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <main+0x9c>)
 80002f6:	71da      	strb	r2, [r3, #7]
		CANCom_Transmit(SendBuf, 8);
 80002f8:	2108      	movs	r1, #8
 80002fa:	4804      	ldr	r0, [pc, #16]	; (800030c <main+0x9c>)
 80002fc:	f7ff ff4e 	bl	800019c <CANCom_Transmit>
		HAL_Delay(50);
 8000300:	2032      	movs	r0, #50	; 0x32
 8000302:	f000 fba9 	bl	8000a58 <HAL_Delay>
	while (1) {
 8000306:	e7c4      	b.n	8000292 <main+0x22>
 8000308:	80808081 	.word	0x80808081
 800030c:	200000f8 	.word	0x200000f8

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b090      	sub	sp, #64	; 0x40
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0318 	add.w	r3, r7, #24
 800031a:	2228      	movs	r2, #40	; 0x28
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f002 fb3b 	bl	800299a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
 8000330:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000332:	2301      	movs	r3, #1
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000340:	2301      	movs	r3, #1
 8000342:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000344:	2302      	movs	r3, #2
 8000346:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800034c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800034e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000352:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000354:	f107 0318 	add.w	r3, r7, #24
 8000358:	4618      	mov	r0, r3
 800035a:	f001 fca5 	bl	8001ca8 <HAL_RCC_OscConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000364:	f000 f8d6 	bl	8000514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000368:	230f      	movs	r3, #15
 800036a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036c:	2302      	movs	r3, #2
 800036e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2102      	movs	r1, #2
 8000382:	4618      	mov	r0, r3
 8000384:	f001 ff12 	bl	80021ac <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800038e:	f000 f8c1 	bl	8000514 <Error_Handler>
  }
}
 8000392:	bf00      	nop
 8000394:	3740      	adds	r7, #64	; 0x40
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80003a0:	4b18      	ldr	r3, [pc, #96]	; (8000404 <MX_CAN_Init+0x68>)
 80003a2:	4a19      	ldr	r2, [pc, #100]	; (8000408 <MX_CAN_Init+0x6c>)
 80003a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <MX_CAN_Init+0x68>)
 80003a8:	2204      	movs	r2, #4
 80003aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003ac:	4b15      	ldr	r3, [pc, #84]	; (8000404 <MX_CAN_Init+0x68>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80003b2:	4b14      	ldr	r3, [pc, #80]	; (8000404 <MX_CAN_Init+0x68>)
 80003b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80003b8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <MX_CAN_Init+0x68>)
 80003bc:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80003c0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_CAN_Init+0x68>)
 80003c4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80003c8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_CAN_Init+0x68>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_CAN_Init+0x68>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <MX_CAN_Init+0x68>)
 80003d8:	2200      	movs	r2, #0
 80003da:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_CAN_Init+0x68>)
 80003de:	2200      	movs	r2, #0
 80003e0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_CAN_Init+0x68>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_CAN_Init+0x68>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_CAN_Init+0x68>)
 80003f0:	f000 fb56 	bl	8000aa0 <HAL_CAN_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80003fa:	f000 f88b 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000084 	.word	0x20000084
 8000408:	40006400 	.word	0x40006400

0800040c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000412:	4a12      	ldr	r2, [pc, #72]	; (800045c <MX_USART1_UART_Init+0x50>)
 8000414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000416:	4b10      	ldr	r3, [pc, #64]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800041c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000432:	220c      	movs	r2, #12
 8000434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000436:	4b08      	ldr	r3, [pc, #32]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000442:	4805      	ldr	r0, [pc, #20]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000444:	f002 f840 	bl	80024c8 <HAL_UART_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800044e:	f000 f861 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200000ac 	.word	0x200000ac
 800045c:	40013800 	.word	0x40013800

08000460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000474:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <MX_GPIO_Init+0x8c>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <MX_GPIO_Init+0x8c>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <MX_GPIO_Init+0x8c>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0320 	and.w	r3, r3, #32
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b17      	ldr	r3, [pc, #92]	; (80004ec <MX_GPIO_Init+0x8c>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a16      	ldr	r2, [pc, #88]	; (80004ec <MX_GPIO_Init+0x8c>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_GPIO_Init+0x8c>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_GPIO_Init+0x8c>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a10      	ldr	r2, [pc, #64]	; (80004ec <MX_GPIO_Init+0x8c>)
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_GPIO_Init+0x8c>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0308 	and.w	r3, r3, #8
 80004b8:	607b      	str	r3, [r7, #4]
 80004ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin|LEDG_Pin|LEDB_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2138      	movs	r1, #56	; 0x38
 80004c0:	480b      	ldr	r0, [pc, #44]	; (80004f0 <MX_GPIO_Init+0x90>)
 80004c2:	f001 fbbf 	bl	8001c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDR_Pin LEDG_Pin LEDB_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDG_Pin|LEDB_Pin;
 80004c6:	2338      	movs	r3, #56	; 0x38
 80004c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ca:	2301      	movs	r3, #1
 80004cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	2302      	movs	r3, #2
 80004d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	4619      	mov	r1, r3
 80004dc:	4804      	ldr	r0, [pc, #16]	; (80004f0 <MX_GPIO_Init+0x90>)
 80004de:	f001 fa2d 	bl	800193c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004e2:	bf00      	nop
 80004e4:	3720      	adds	r7, #32
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40010c00 	.word	0x40010c00

080004f4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
 80004fc:	2120      	movs	r1, #32
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000500:	f001 fbb8 	bl	8001c74 <HAL_GPIO_TogglePin>
	CANCom_ReceiveCallback();
 8000504:	f7ff fe9c 	bl	8000240 <CANCom_ReceiveCallback>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40010c00 	.word	0x40010c00

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800051c:	e7fe      	b.n	800051c <Error_Handler+0x8>
	...

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <HAL_MspInit+0x5c>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a14      	ldr	r2, [pc, #80]	; (800057c <HAL_MspInit+0x5c>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_MspInit+0x5c>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <HAL_MspInit+0x5c>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <HAL_MspInit+0x5c>)
 8000544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000548:	61d3      	str	r3, [r2, #28]
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <HAL_MspInit+0x5c>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_MspInit+0x60>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <HAL_MspInit+0x60>)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000
 8000580:	40010000 	.word	0x40010000

08000584 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a35      	ldr	r2, [pc, #212]	; (8000674 <HAL_CAN_MspInit+0xf0>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d163      	bne.n	800066c <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005a4:	4b34      	ldr	r3, [pc, #208]	; (8000678 <HAL_CAN_MspInit+0xf4>)
 80005a6:	69db      	ldr	r3, [r3, #28]
 80005a8:	4a33      	ldr	r2, [pc, #204]	; (8000678 <HAL_CAN_MspInit+0xf4>)
 80005aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ae:	61d3      	str	r3, [r2, #28]
 80005b0:	4b31      	ldr	r3, [pc, #196]	; (8000678 <HAL_CAN_MspInit+0xf4>)
 80005b2:	69db      	ldr	r3, [r3, #28]
 80005b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005bc:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <HAL_CAN_MspInit+0xf4>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a2d      	ldr	r2, [pc, #180]	; (8000678 <HAL_CAN_MspInit+0xf4>)
 80005c2:	f043 0308 	orr.w	r3, r3, #8
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <HAL_CAN_MspInit+0xf4>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f003 0308 	and.w	r3, r3, #8
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	4824      	ldr	r0, [pc, #144]	; (800067c <HAL_CAN_MspInit+0xf8>)
 80005ea:	f001 f9a7 	bl	800193c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f4:	2302      	movs	r3, #2
 80005f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f8:	2303      	movs	r3, #3
 80005fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4619      	mov	r1, r3
 8000602:	481e      	ldr	r0, [pc, #120]	; (800067c <HAL_CAN_MspInit+0xf8>)
 8000604:	f001 f99a 	bl	800193c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <HAL_CAN_MspInit+0xfc>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
 800060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000610:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000618:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
 800061e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
 8000626:	4a16      	ldr	r2, [pc, #88]	; (8000680 <HAL_CAN_MspInit+0xfc>)
 8000628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	2013      	movs	r0, #19
 8000632:	f001 f94c 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000636:	2013      	movs	r0, #19
 8000638:	f001 f965 	bl	8001906 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	2100      	movs	r1, #0
 8000640:	2014      	movs	r0, #20
 8000642:	f001 f944 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000646:	2014      	movs	r0, #20
 8000648:	f001 f95d 	bl	8001906 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	2015      	movs	r0, #21
 8000652:	f001 f93c 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000656:	2015      	movs	r0, #21
 8000658:	f001 f955 	bl	8001906 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	2016      	movs	r0, #22
 8000662:	f001 f934 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000666:	2016      	movs	r0, #22
 8000668:	f001 f94d 	bl	8001906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800066c:	bf00      	nop
 800066e:	3728      	adds	r7, #40	; 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40006400 	.word	0x40006400
 8000678:	40021000 	.word	0x40021000
 800067c:	40010c00 	.word	0x40010c00
 8000680:	40010000 	.word	0x40010000

08000684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <HAL_UART_MspInit+0x8c>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d131      	bne.n	8000708 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <HAL_UART_MspInit+0x90>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a1a      	ldr	r2, [pc, #104]	; (8000714 <HAL_UART_MspInit+0x90>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <HAL_UART_MspInit+0x90>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_UART_MspInit+0x90>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a14      	ldr	r2, [pc, #80]	; (8000714 <HAL_UART_MspInit+0x90>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_UART_MspInit+0x90>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	4619      	mov	r1, r3
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <HAL_UART_MspInit+0x94>)
 80006ea:	f001 f927 	bl	800193c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4619      	mov	r1, r3
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <HAL_UART_MspInit+0x94>)
 8000704:	f001 f91a 	bl	800193c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40013800 	.word	0x40013800
 8000714:	40021000 	.word	0x40021000
 8000718:	40010800 	.word	0x40010800

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <NMI_Handler+0x4>

08000722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <HardFault_Handler+0x4>

08000728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <MemManage_Handler+0x4>

0800072e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <BusFault_Handler+0x4>

08000734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <UsageFault_Handler+0x4>

0800073a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000762:	f000 f95d 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000772:	f000 fdb2 	bl	80012da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000084 	.word	0x20000084

08000780 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000786:	f000 fda8 	bl	80012da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000084 	.word	0x20000084

08000794 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <CAN1_RX1_IRQHandler+0x10>)
 800079a:	f000 fd9e 	bl	80012da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000084 	.word	0x20000084

080007a8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <CAN1_SCE_IRQHandler+0x10>)
 80007ae:	f000 fd94 	bl	80012da <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000084 	.word	0x20000084

080007bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return 1;
 80007c0:	2301      	movs	r3, #1
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <_kill>:

int _kill(int pid, int sig)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80007d4:	f002 f930 	bl	8002a38 <__errno>
 80007d8:	4603      	mov	r3, r0
 80007da:	2216      	movs	r2, #22
 80007dc:	601a      	str	r2, [r3, #0]
  return -1;
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <_exit>:

void _exit (int status)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80007f2:	f04f 31ff 	mov.w	r1, #4294967295
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ffe7 	bl	80007ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80007fc:	e7fe      	b.n	80007fc <_exit+0x12>

080007fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	e00a      	b.n	8000826 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000810:	f3af 8000 	nop.w
 8000814:	4601      	mov	r1, r0
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	60ba      	str	r2, [r7, #8]
 800081c:	b2ca      	uxtb	r2, r1
 800081e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	429a      	cmp	r2, r3
 800082c:	dbf0      	blt.n	8000810 <_read+0x12>
  }

  return len;
 800082e:	687b      	ldr	r3, [r7, #4]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	e009      	b.n	800085e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	60ba      	str	r2, [r7, #8]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	3301      	adds	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	429a      	cmp	r2, r3
 8000864:	dbf1      	blt.n	800084a <_write+0x12>
  }
  return len;
 8000866:	687b      	ldr	r3, [r7, #4]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <_close>:

int _close(int file)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000896:	605a      	str	r2, [r3, #4]
  return 0;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <_isatty>:

int _isatty(int file)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ac:	2301      	movs	r3, #1
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d8:	4a14      	ldr	r2, [pc, #80]	; (800092c <_sbrk+0x5c>)
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <_sbrk+0x60>)
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <_sbrk+0x64>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <_sbrk+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d207      	bcs.n	8000910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000900:	f002 f89a 	bl	8002a38 <__errno>
 8000904:	4603      	mov	r3, r0
 8000906:	220c      	movs	r2, #12
 8000908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	e009      	b.n	8000924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a05      	ldr	r2, [pc, #20]	; (8000934 <_sbrk+0x64>)
 8000920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20005000 	.word	0x20005000
 8000930:	00000400 	.word	0x00000400
 8000934:	20000100 	.word	0x20000100
 8000938:	20000258 	.word	0x20000258

0800093c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000948:	f7ff fff8 	bl	800093c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800094e:	490c      	ldr	r1, [pc, #48]	; (8000980 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a09      	ldr	r2, [pc, #36]	; (8000988 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000964:	4c09      	ldr	r4, [pc, #36]	; (800098c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000972:	f002 f867 	bl	8002a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000976:	f7ff fc7b 	bl	8000270 <main>
  bx lr
 800097a:	4770      	bx	lr
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000984:	08003818 	.word	0x08003818
  ldr r2, =_sbss
 8000988:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800098c:	20000254 	.word	0x20000254

08000990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC1_2_IRQHandler>
	...

08000994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_Init+0x28>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_Init+0x28>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 ff87 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	200f      	movs	r0, #15
 80009ac:	f000 f808 	bl	80009c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff fdb6 	bl	8000520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40022000 	.word	0x40022000

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_InitTick+0x54>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x58>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 ff9f 	bl	8001922 <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00e      	b.n	8000a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d80a      	bhi.n	8000a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f000 ff67 	bl	80018ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_InitTick+0x5c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000004 	.word	0x20000004

08000a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x1c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_IncTick+0x20>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <HAL_IncTick+0x20>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000104 	.word	0x20000104

08000a44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b02      	ldr	r3, [pc, #8]	; (8000a54 <HAL_GetTick+0x10>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	20000104 	.word	0x20000104

08000a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a60:	f7ff fff0 	bl	8000a44 <HAL_GetTick>
 8000a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a70:	d005      	beq.n	8000a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_Delay+0x44>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a7e:	bf00      	nop
 8000a80:	f7ff ffe0 	bl	8000a44 <HAL_GetTick>
 8000a84:	4602      	mov	r2, r0
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d8f7      	bhi.n	8000a80 <HAL_Delay+0x28>
  {
  }
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000008 	.word	0x20000008

08000aa0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d101      	bne.n	8000ab2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e0ed      	b.n	8000c8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d102      	bne.n	8000ac4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff fd60 	bl	8000584 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f042 0201 	orr.w	r2, r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ad4:	f7ff ffb6 	bl	8000a44 <HAL_GetTick>
 8000ad8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ada:	e012      	b.n	8000b02 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000adc:	f7ff ffb2 	bl	8000a44 <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	2b0a      	cmp	r3, #10
 8000ae8:	d90b      	bls.n	8000b02 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2205      	movs	r2, #5
 8000afa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e0c5      	b.n	8000c8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0e5      	beq.n	8000adc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f022 0202 	bic.w	r2, r2, #2
 8000b1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b20:	f7ff ff90 	bl	8000a44 <HAL_GetTick>
 8000b24:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b26:	e012      	b.n	8000b4e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b28:	f7ff ff8c 	bl	8000a44 <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	2b0a      	cmp	r3, #10
 8000b34:	d90b      	bls.n	8000b4e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2205      	movs	r2, #5
 8000b46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e09f      	b.n	8000c8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1e5      	bne.n	8000b28 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	7e1b      	ldrb	r3, [r3, #24]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d108      	bne.n	8000b76 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	e007      	b.n	8000b86 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	7e5b      	ldrb	r3, [r3, #25]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d108      	bne.n	8000ba0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	e007      	b.n	8000bb0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7e9b      	ldrb	r3, [r3, #26]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d108      	bne.n	8000bca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f042 0220 	orr.w	r2, r2, #32
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	e007      	b.n	8000bda <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 0220 	bic.w	r2, r2, #32
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7edb      	ldrb	r3, [r3, #27]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d108      	bne.n	8000bf4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f022 0210 	bic.w	r2, r2, #16
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	e007      	b.n	8000c04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f042 0210 	orr.w	r2, r2, #16
 8000c02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7f1b      	ldrb	r3, [r3, #28]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d108      	bne.n	8000c1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f042 0208 	orr.w	r2, r2, #8
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	e007      	b.n	8000c2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f022 0208 	bic.w	r2, r2, #8
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7f5b      	ldrb	r3, [r3, #29]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d108      	bne.n	8000c48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f042 0204 	orr.w	r2, r2, #4
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	e007      	b.n	8000c58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0204 	bic.w	r2, r2, #4
 8000c56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	431a      	orrs	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	ea42 0103 	orr.w	r1, r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	1e5a      	subs	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2201      	movs	r2, #1
 8000c88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b087      	sub	sp, #28
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cac:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cae:	7cfb      	ldrb	r3, [r7, #19]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d003      	beq.n	8000cbc <HAL_CAN_ConfigFilter+0x26>
 8000cb4:	7cfb      	ldrb	r3, [r7, #19]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	f040 80aa 	bne.w	8000e10 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cc2:	f043 0201 	orr.w	r2, r3, #1
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	f003 031f 	and.w	r3, r3, #31
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d123      	bne.n	8000d3e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	401a      	ands	r2, r3
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d18:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	3248      	adds	r2, #72	; 0x48
 8000d1e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d32:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d34:	6979      	ldr	r1, [r7, #20]
 8000d36:	3348      	adds	r3, #72	; 0x48
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	440b      	add	r3, r1
 8000d3c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d122      	bne.n	8000d8c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d66:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3248      	adds	r2, #72	; 0x48
 8000d6c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d82:	6979      	ldr	r1, [r7, #20]
 8000d84:	3348      	adds	r3, #72	; 0x48
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	440b      	add	r3, r1
 8000d8a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d109      	bne.n	8000da8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000da6:	e007      	b.n	8000db8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	431a      	orrs	r2, r3
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d109      	bne.n	8000dd4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000dd2:	e007      	b.n	8000de4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d107      	bne.n	8000dfc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	431a      	orrs	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e02:	f023 0201 	bic.w	r2, r3, #1
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e006      	b.n	8000e1e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
  }
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	371c      	adds	r7, #28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d12e      	bne.n	8000e9a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2202      	movs	r2, #2
 8000e40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f022 0201 	bic.w	r2, r2, #1
 8000e52:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e54:	f7ff fdf6 	bl	8000a44 <HAL_GetTick>
 8000e58:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e5a:	e012      	b.n	8000e82 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e5c:	f7ff fdf2 	bl	8000a44 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b0a      	cmp	r3, #10
 8000e68:	d90b      	bls.n	8000e82 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2205      	movs	r2, #5
 8000e7a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e012      	b.n	8000ea8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1e5      	bne.n	8000e5c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e006      	b.n	8000ea8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
  }
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ece:	7ffb      	ldrb	r3, [r7, #31]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d003      	beq.n	8000edc <HAL_CAN_AddTxMessage+0x2c>
 8000ed4:	7ffb      	ldrb	r3, [r7, #31]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	f040 80ad 	bne.w	8001036 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10a      	bne.n	8000efc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d105      	bne.n	8000efc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 8095 	beq.w	8001026 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	0e1b      	lsrs	r3, r3, #24
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f06:	2201      	movs	r2, #1
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10d      	bne.n	8000f34 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f22:	68f9      	ldr	r1, [r7, #12]
 8000f24:	6809      	ldr	r1, [r1, #0]
 8000f26:	431a      	orrs	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3318      	adds	r3, #24
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	440b      	add	r3, r1
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e00f      	b.n	8000f54 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f3e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f44:	68f9      	ldr	r1, [r7, #12]
 8000f46:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f48:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3318      	adds	r3, #24
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	440b      	add	r3, r1
 8000f52:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6819      	ldr	r1, [r3, #0]
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3318      	adds	r3, #24
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	440b      	add	r3, r1
 8000f64:	3304      	adds	r3, #4
 8000f66:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	7d1b      	ldrb	r3, [r3, #20]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d111      	bne.n	8000f94 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	3318      	adds	r3, #24
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	6811      	ldr	r1, [r2, #0]
 8000f84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3318      	adds	r3, #24
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	440b      	add	r3, r1
 8000f90:	3304      	adds	r3, #4
 8000f92:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3307      	adds	r3, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	061a      	lsls	r2, r3, #24
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3306      	adds	r3, #6
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	041b      	lsls	r3, r3, #16
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3305      	adds	r3, #5
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	3204      	adds	r2, #4
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	6811      	ldr	r1, [r2, #0]
 8000fbc:	ea43 0200 	orr.w	r2, r3, r0
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	440b      	add	r3, r1
 8000fc6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000fca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3303      	adds	r3, #3
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	061a      	lsls	r2, r3, #24
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	041b      	lsls	r3, r3, #16
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	7812      	ldrb	r2, [r2, #0]
 8000fec:	4610      	mov	r0, r2
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	6811      	ldr	r1, [r2, #0]
 8000ff2:	ea43 0200 	orr.w	r2, r3, r0
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001000:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3318      	adds	r3, #24
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	4413      	add	r3, r2
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	6811      	ldr	r1, [r2, #0]
 8001014:	f043 0201 	orr.w	r2, r3, #1
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3318      	adds	r3, #24
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	440b      	add	r3, r1
 8001020:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e00e      	b.n	8001044 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e006      	b.n	8001044 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
  }
}
 8001044:	4618      	mov	r0, r3
 8001046:	3724      	adds	r7, #36	; 0x24
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800104e:	b480      	push	{r7}
 8001050:	b087      	sub	sp, #28
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001062:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d003      	beq.n	8001072 <HAL_CAN_GetRxMessage+0x24>
 800106a:	7dfb      	ldrb	r3, [r7, #23]
 800106c:	2b02      	cmp	r3, #2
 800106e:	f040 8103 	bne.w	8001278 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10e      	bne.n	8001096 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d116      	bne.n	80010b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e0f7      	b.n	8001286 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d107      	bne.n	80010b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e0e8      	b.n	8001286 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	331b      	adds	r3, #27
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	4413      	add	r3, r2
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0204 	and.w	r2, r3, #4
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10c      	bne.n	80010ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	331b      	adds	r3, #27
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	4413      	add	r3, r2
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	0d5b      	lsrs	r3, r3, #21
 80010e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e00b      	b.n	8001104 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	331b      	adds	r3, #27
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	4413      	add	r3, r2
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	08db      	lsrs	r3, r3, #3
 80010fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	331b      	adds	r3, #27
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	4413      	add	r3, r2
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0202 	and.w	r2, r3, #2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	331b      	adds	r3, #27
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	4413      	add	r3, r2
 8001126:	3304      	adds	r3, #4
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2208      	movs	r2, #8
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	e00b      	b.n	8001152 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	331b      	adds	r3, #27
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	4413      	add	r3, r2
 8001146:	3304      	adds	r3, #4
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 020f 	and.w	r2, r3, #15
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	331b      	adds	r3, #27
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	4413      	add	r3, r2
 800115e:	3304      	adds	r3, #4
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	b2da      	uxtb	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	331b      	adds	r3, #27
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	4413      	add	r3, r2
 8001176:	3304      	adds	r3, #4
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	0c1b      	lsrs	r3, r3, #16
 800117c:	b29a      	uxth	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	4413      	add	r3, r2
 800118c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	4413      	add	r3, r2
 80011a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	0a1a      	lsrs	r2, r3, #8
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	4413      	add	r3, r2
 80011bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	0c1a      	lsrs	r2, r3, #16
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	3302      	adds	r3, #2
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	4413      	add	r3, r2
 80011d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	0e1a      	lsrs	r2, r3, #24
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	3303      	adds	r3, #3
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	4413      	add	r3, r2
 80011f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3304      	adds	r3, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	4413      	add	r3, r2
 8001208:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	0a1a      	lsrs	r2, r3, #8
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	3305      	adds	r3, #5
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	4413      	add	r3, r2
 8001222:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0c1a      	lsrs	r2, r3, #16
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	3306      	adds	r3, #6
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	4413      	add	r3, r2
 800123c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	0e1a      	lsrs	r2, r3, #24
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	3307      	adds	r3, #7
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d108      	bne.n	8001264 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68da      	ldr	r2, [r3, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0220 	orr.w	r2, r2, #32
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	e007      	b.n	8001274 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	691a      	ldr	r2, [r3, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0220 	orr.w	r2, r2, #32
 8001272:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	e006      	b.n	8001286 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
  }
}
 8001286:	4618      	mov	r0, r3
 8001288:	371c      	adds	r7, #28
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d002      	beq.n	80012ae <HAL_CAN_ActivateNotification+0x1e>
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d109      	bne.n	80012c2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6959      	ldr	r1, [r3, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e006      	b.n	80012d0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
  }
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b08a      	sub	sp, #40	; 0x28
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d07c      	beq.n	800141a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d023      	beq.n	8001372 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2201      	movs	r2, #1
 8001330:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f983 	bl	8001648 <HAL_CAN_TxMailbox0CompleteCallback>
 8001342:	e016      	b.n	8001372 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d004      	beq.n	8001358 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
 8001356:	e00c      	b.n	8001372 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d004      	beq.n	800136c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
 800136a:	e002      	b.n	8001372 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f986 	bl	800167e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001378:	2b00      	cmp	r3, #0
 800137a:	d024      	beq.n	80013c6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001384:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f962 	bl	800165a <HAL_CAN_TxMailbox1CompleteCallback>
 8001396:	e016      	b.n	80013c6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d004      	beq.n	80013ac <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
 80013aa:	e00c      	b.n	80013c6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
 80013be:	e002      	b.n	80013c6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f965 	bl	8001690 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d024      	beq.n	800141a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f941 	bl	800166c <HAL_CAN_TxMailbox2CompleteCallback>
 80013ea:	e016      	b.n	800141a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d004      	beq.n	8001400 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
 80013fe:	e00c      	b.n	800141a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d004      	beq.n	8001414 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
 8001412:	e002      	b.n	800141a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f944 	bl	80016a2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00c      	beq.n	800143e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	2b00      	cmp	r3, #0
 800142c:	d007      	beq.n	800143e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001434:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2210      	movs	r2, #16
 800143c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00b      	beq.n	8001460 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d006      	beq.n	8001460 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2208      	movs	r2, #8
 8001458:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f92a 	bl	80016b4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001460:	6a3b      	ldr	r3, [r7, #32]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d009      	beq.n	800147e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff f83b 	bl	80004f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00c      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	2b00      	cmp	r3, #0
 8001490:	d007      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001498:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2210      	movs	r2, #16
 80014a0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00b      	beq.n	80014c4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d006      	beq.n	80014c4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2208      	movs	r2, #8
 80014bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f90a 	bl	80016d8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	f003 0310 	and.w	r3, r3, #16
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d009      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f8f2 	bl	80016c6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00b      	beq.n	8001504 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d006      	beq.n	8001504 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2210      	movs	r2, #16
 80014fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f8f3 	bl	80016ea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00b      	beq.n	8001526 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2208      	movs	r2, #8
 800151e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f8eb 	bl	80016fc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d07b      	beq.n	8001628 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b00      	cmp	r3, #0
 8001538:	d072      	beq.n	8001620 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d008      	beq.n	8001556 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	2b00      	cmp	r3, #0
 800157a:	d008      	beq.n	800158e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001594:	2b00      	cmp	r3, #0
 8001596:	d043      	beq.n	8001620 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d03e      	beq.n	8001620 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015a8:	2b60      	cmp	r3, #96	; 0x60
 80015aa:	d02b      	beq.n	8001604 <HAL_CAN_IRQHandler+0x32a>
 80015ac:	2b60      	cmp	r3, #96	; 0x60
 80015ae:	d82e      	bhi.n	800160e <HAL_CAN_IRQHandler+0x334>
 80015b0:	2b50      	cmp	r3, #80	; 0x50
 80015b2:	d022      	beq.n	80015fa <HAL_CAN_IRQHandler+0x320>
 80015b4:	2b50      	cmp	r3, #80	; 0x50
 80015b6:	d82a      	bhi.n	800160e <HAL_CAN_IRQHandler+0x334>
 80015b8:	2b40      	cmp	r3, #64	; 0x40
 80015ba:	d019      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x316>
 80015bc:	2b40      	cmp	r3, #64	; 0x40
 80015be:	d826      	bhi.n	800160e <HAL_CAN_IRQHandler+0x334>
 80015c0:	2b30      	cmp	r3, #48	; 0x30
 80015c2:	d010      	beq.n	80015e6 <HAL_CAN_IRQHandler+0x30c>
 80015c4:	2b30      	cmp	r3, #48	; 0x30
 80015c6:	d822      	bhi.n	800160e <HAL_CAN_IRQHandler+0x334>
 80015c8:	2b10      	cmp	r3, #16
 80015ca:	d002      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x2f8>
 80015cc:	2b20      	cmp	r3, #32
 80015ce:	d005      	beq.n	80015dc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015d0:	e01d      	b.n	800160e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015da:	e019      	b.n	8001610 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	f043 0310 	orr.w	r3, r3, #16
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015e4:	e014      	b.n	8001610 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	f043 0320 	orr.w	r3, r3, #32
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015ee:	e00f      	b.n	8001610 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015f8:	e00a      	b.n	8001610 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001602:	e005      	b.n	8001610 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800160c:	e000      	b.n	8001610 <HAL_CAN_IRQHandler+0x336>
            break;
 800160e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	699a      	ldr	r2, [r3, #24]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800161e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2204      	movs	r2, #4
 8001626:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	2b00      	cmp	r3, #0
 800162c:	d008      	beq.n	8001640 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f867 	bl	800170e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <__NVIC_GetPriorityGrouping+0x18>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0307 	and.w	r3, r3, #7
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	2b00      	cmp	r3, #0
 8001794:	db0b      	blt.n	80017ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	f003 021f 	and.w	r2, r3, #31
 800179c:	4906      	ldr	r1, [pc, #24]	; (80017b8 <__NVIC_EnableIRQ+0x34>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	2001      	movs	r0, #1
 80017a6:	fa00 f202 	lsl.w	r2, r0, r2
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	490c      	ldr	r1, [pc, #48]	; (8001808 <__NVIC_SetPriority+0x4c>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4908      	ldr	r1, [pc, #32]	; (800180c <__NVIC_SetPriority+0x50>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3b04      	subs	r3, #4
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	f04f 32ff 	mov.w	r2, #4294967295
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43d9      	mvns	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	4313      	orrs	r3, r2
         );
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff90 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff2d 	bl	8001720 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff42 	bl	8001768 <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff90 	bl	8001810 <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5f 	bl	80017bc <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff35 	bl	8001784 <__NVIC_EnableIRQ>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffa2 	bl	8001874 <SysTick_Config>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b08b      	sub	sp, #44	; 0x2c
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	e169      	b.n	8001c24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001950:	2201      	movs	r2, #1
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	429a      	cmp	r2, r3
 800196a:	f040 8158 	bne.w	8001c1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4a9a      	ldr	r2, [pc, #616]	; (8001bdc <HAL_GPIO_Init+0x2a0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d05e      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001978:	4a98      	ldr	r2, [pc, #608]	; (8001bdc <HAL_GPIO_Init+0x2a0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d875      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 800197e:	4a98      	ldr	r2, [pc, #608]	; (8001be0 <HAL_GPIO_Init+0x2a4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d058      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001984:	4a96      	ldr	r2, [pc, #600]	; (8001be0 <HAL_GPIO_Init+0x2a4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d86f      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 800198a:	4a96      	ldr	r2, [pc, #600]	; (8001be4 <HAL_GPIO_Init+0x2a8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d052      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 8001990:	4a94      	ldr	r2, [pc, #592]	; (8001be4 <HAL_GPIO_Init+0x2a8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d869      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 8001996:	4a94      	ldr	r2, [pc, #592]	; (8001be8 <HAL_GPIO_Init+0x2ac>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d04c      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 800199c:	4a92      	ldr	r2, [pc, #584]	; (8001be8 <HAL_GPIO_Init+0x2ac>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d863      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019a2:	4a92      	ldr	r2, [pc, #584]	; (8001bec <HAL_GPIO_Init+0x2b0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d046      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
 80019a8:	4a90      	ldr	r2, [pc, #576]	; (8001bec <HAL_GPIO_Init+0x2b0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d85d      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019ae:	2b12      	cmp	r3, #18
 80019b0:	d82a      	bhi.n	8001a08 <HAL_GPIO_Init+0xcc>
 80019b2:	2b12      	cmp	r3, #18
 80019b4:	d859      	bhi.n	8001a6a <HAL_GPIO_Init+0x12e>
 80019b6:	a201      	add	r2, pc, #4	; (adr r2, 80019bc <HAL_GPIO_Init+0x80>)
 80019b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019bc:	08001a37 	.word	0x08001a37
 80019c0:	08001a11 	.word	0x08001a11
 80019c4:	08001a23 	.word	0x08001a23
 80019c8:	08001a65 	.word	0x08001a65
 80019cc:	08001a6b 	.word	0x08001a6b
 80019d0:	08001a6b 	.word	0x08001a6b
 80019d4:	08001a6b 	.word	0x08001a6b
 80019d8:	08001a6b 	.word	0x08001a6b
 80019dc:	08001a6b 	.word	0x08001a6b
 80019e0:	08001a6b 	.word	0x08001a6b
 80019e4:	08001a6b 	.word	0x08001a6b
 80019e8:	08001a6b 	.word	0x08001a6b
 80019ec:	08001a6b 	.word	0x08001a6b
 80019f0:	08001a6b 	.word	0x08001a6b
 80019f4:	08001a6b 	.word	0x08001a6b
 80019f8:	08001a6b 	.word	0x08001a6b
 80019fc:	08001a6b 	.word	0x08001a6b
 8001a00:	08001a19 	.word	0x08001a19
 8001a04:	08001a2d 	.word	0x08001a2d
 8001a08:	4a79      	ldr	r2, [pc, #484]	; (8001bf0 <HAL_GPIO_Init+0x2b4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a0e:	e02c      	b.n	8001a6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	623b      	str	r3, [r7, #32]
          break;
 8001a16:	e029      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	623b      	str	r3, [r7, #32]
          break;
 8001a20:	e024      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	3308      	adds	r3, #8
 8001a28:	623b      	str	r3, [r7, #32]
          break;
 8001a2a:	e01f      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	330c      	adds	r3, #12
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e01a      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	623b      	str	r3, [r7, #32]
          break;
 8001a42:	e013      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	611a      	str	r2, [r3, #16]
          break;
 8001a56:	e009      	b.n	8001a6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	615a      	str	r2, [r3, #20]
          break;
 8001a62:	e003      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
          break;
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x130>
          break;
 8001a6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2bff      	cmp	r3, #255	; 0xff
 8001a70:	d801      	bhi.n	8001a76 <HAL_GPIO_Init+0x13a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	e001      	b.n	8001a7a <HAL_GPIO_Init+0x13e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2bff      	cmp	r3, #255	; 0xff
 8001a80:	d802      	bhi.n	8001a88 <HAL_GPIO_Init+0x14c>
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	e002      	b.n	8001a8e <HAL_GPIO_Init+0x152>
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	3b08      	subs	r3, #8
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	210f      	movs	r1, #15
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	6a39      	ldr	r1, [r7, #32]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80b1 	beq.w	8001c1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001abc:	4b4d      	ldr	r3, [pc, #308]	; (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a4c      	ldr	r2, [pc, #304]	; (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b4a      	ldr	r3, [pc, #296]	; (8001bf4 <HAL_GPIO_Init+0x2b8>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_GPIO_Init+0x2bc>)
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a40      	ldr	r2, [pc, #256]	; (8001bfc <HAL_GPIO_Init+0x2c0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d013      	beq.n	8001b28 <HAL_GPIO_Init+0x1ec>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a3f      	ldr	r2, [pc, #252]	; (8001c00 <HAL_GPIO_Init+0x2c4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00d      	beq.n	8001b24 <HAL_GPIO_Init+0x1e8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a3e      	ldr	r2, [pc, #248]	; (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d007      	beq.n	8001b20 <HAL_GPIO_Init+0x1e4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a3d      	ldr	r2, [pc, #244]	; (8001c08 <HAL_GPIO_Init+0x2cc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d101      	bne.n	8001b1c <HAL_GPIO_Init+0x1e0>
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e006      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	e004      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e002      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <HAL_GPIO_Init+0x1ee>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2c:	f002 0203 	and.w	r2, r2, #3
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	4093      	lsls	r3, r2
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b3a:	492f      	ldr	r1, [pc, #188]	; (8001bf8 <HAL_GPIO_Init+0x2bc>)
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	492c      	ldr	r1, [pc, #176]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b62:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4928      	ldr	r1, [pc, #160]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	4922      	ldr	r1, [pc, #136]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60cb      	str	r3, [r1, #12]
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	491e      	ldr	r1, [pc, #120]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4918      	ldr	r1, [pc, #96]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	4914      	ldr	r1, [pc, #80]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d021      	beq.n	8001c10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	490e      	ldr	r1, [pc, #56]	; (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	e021      	b.n	8001c1e <HAL_GPIO_Init+0x2e2>
 8001bda:	bf00      	nop
 8001bdc:	10320000 	.word	0x10320000
 8001be0:	10310000 	.word	0x10310000
 8001be4:	10220000 	.word	0x10220000
 8001be8:	10210000 	.word	0x10210000
 8001bec:	10120000 	.word	0x10120000
 8001bf0:	10110000 	.word	0x10110000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	40010800 	.word	0x40010800
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	40011000 	.word	0x40011000
 8001c08:	40011400 	.word	0x40011400
 8001c0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_GPIO_Init+0x304>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	4909      	ldr	r1, [pc, #36]	; (8001c40 <HAL_GPIO_Init+0x304>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	3301      	adds	r3, #1
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f47f ae8e 	bne.w	8001950 <HAL_GPIO_Init+0x14>
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	372c      	adds	r7, #44	; 0x2c
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	40010400 	.word	0x40010400

08001c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
 8001c50:	4613      	mov	r3, r2
 8001c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c54:	787b      	ldrb	r3, [r7, #1]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c60:	e003      	b.n	8001c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c62:	887b      	ldrh	r3, [r7, #2]
 8001c64:	041a      	lsls	r2, r3, #16
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	611a      	str	r2, [r3, #16]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	041a      	lsls	r2, r3, #16
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43d9      	mvns	r1, r3
 8001c92:	887b      	ldrh	r3, [r7, #2]
 8001c94:	400b      	ands	r3, r1
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	611a      	str	r2, [r3, #16]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e272      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8087 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc8:	4b92      	ldr	r3, [pc, #584]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d00c      	beq.n	8001cee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cd4:	4b8f      	ldr	r3, [pc, #572]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d112      	bne.n	8001d06 <HAL_RCC_OscConfig+0x5e>
 8001ce0:	4b8c      	ldr	r3, [pc, #560]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cec:	d10b      	bne.n	8001d06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cee:	4b89      	ldr	r3, [pc, #548]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d06c      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x12c>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d168      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e24c      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_OscConfig+0x76>
 8001d10:	4b80      	ldr	r3, [pc, #512]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a7f      	ldr	r2, [pc, #508]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	e02e      	b.n	8001d7c <HAL_RCC_OscConfig+0xd4>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x98>
 8001d26:	4b7b      	ldr	r3, [pc, #492]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a7a      	ldr	r2, [pc, #488]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b78      	ldr	r3, [pc, #480]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a77      	ldr	r2, [pc, #476]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	e01d      	b.n	8001d7c <HAL_RCC_OscConfig+0xd4>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0xbc>
 8001d4a:	4b72      	ldr	r3, [pc, #456]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a71      	ldr	r2, [pc, #452]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	4b6f      	ldr	r3, [pc, #444]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a6e      	ldr	r2, [pc, #440]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e00b      	b.n	8001d7c <HAL_RCC_OscConfig+0xd4>
 8001d64:	4b6b      	ldr	r3, [pc, #428]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a6a      	ldr	r2, [pc, #424]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b68      	ldr	r3, [pc, #416]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a67      	ldr	r2, [pc, #412]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7fe fe5e 	bl	8000a44 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d8c:	f7fe fe5a 	bl	8000a44 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	; 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e200      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b5d      	ldr	r3, [pc, #372]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0xe4>
 8001daa:	e014      	b.n	8001dd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7fe fe4a 	bl	8000a44 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db4:	f7fe fe46 	bl	8000a44 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e1ec      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc6:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x10c>
 8001dd2:	e000      	b.n	8001dd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d063      	beq.n	8001eaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de2:	4b4c      	ldr	r3, [pc, #304]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dee:	4b49      	ldr	r3, [pc, #292]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d11c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x18c>
 8001dfa:	4b46      	ldr	r3, [pc, #280]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d116      	bne.n	8001e34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	4b43      	ldr	r3, [pc, #268]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_RCC_OscConfig+0x176>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e1c0      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1e:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4939      	ldr	r1, [pc, #228]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	e03a      	b.n	8001eaa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d020      	beq.n	8001e7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7fe fdff 	bl	8000a44 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4a:	f7fe fdfb 	bl	8000a44 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e1a1      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e68:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4927      	ldr	r1, [pc, #156]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
 8001e7c:	e015      	b.n	8001eaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <HAL_RCC_OscConfig+0x270>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7fe fdde 	bl	8000a44 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8c:	f7fe fdda 	bl	8000a44 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e180      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d03a      	beq.n	8001f2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d019      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_RCC_OscConfig+0x274>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7fe fdbe 	bl	8000a44 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ecc:	f7fe fdba 	bl	8000a44 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e160      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eea:	2001      	movs	r0, #1
 8001eec:	f000 face 	bl	800248c <RCC_Delay>
 8001ef0:	e01c      	b.n	8001f2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_RCC_OscConfig+0x274>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef8:	f7fe fda4 	bl	8000a44 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efe:	e00f      	b.n	8001f20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f00:	f7fe fda0 	bl	8000a44 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d908      	bls.n	8001f20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e146      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	42420000 	.word	0x42420000
 8001f1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	4b92      	ldr	r3, [pc, #584]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1e9      	bne.n	8001f00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80a6 	beq.w	8002086 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3e:	4b8b      	ldr	r3, [pc, #556]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10d      	bne.n	8001f66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	4b88      	ldr	r3, [pc, #544]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	4a87      	ldr	r2, [pc, #540]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f54:	61d3      	str	r3, [r2, #28]
 8001f56:	4b85      	ldr	r3, [pc, #532]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f62:	2301      	movs	r3, #1
 8001f64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	4b82      	ldr	r3, [pc, #520]	; (8002170 <HAL_RCC_OscConfig+0x4c8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d118      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f72:	4b7f      	ldr	r3, [pc, #508]	; (8002170 <HAL_RCC_OscConfig+0x4c8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a7e      	ldr	r2, [pc, #504]	; (8002170 <HAL_RCC_OscConfig+0x4c8>)
 8001f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7e:	f7fe fd61 	bl	8000a44 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f86:	f7fe fd5d 	bl	8000a44 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b64      	cmp	r3, #100	; 0x64
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e103      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	4b75      	ldr	r3, [pc, #468]	; (8002170 <HAL_RCC_OscConfig+0x4c8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x312>
 8001fac:	4b6f      	ldr	r3, [pc, #444]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4a6e      	ldr	r2, [pc, #440]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6213      	str	r3, [r2, #32]
 8001fb8:	e02d      	b.n	8002016 <HAL_RCC_OscConfig+0x36e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x334>
 8001fc2:	4b6a      	ldr	r3, [pc, #424]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a69      	ldr	r2, [pc, #420]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6213      	str	r3, [r2, #32]
 8001fce:	4b67      	ldr	r3, [pc, #412]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a66      	ldr	r2, [pc, #408]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	6213      	str	r3, [r2, #32]
 8001fda:	e01c      	b.n	8002016 <HAL_RCC_OscConfig+0x36e>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d10c      	bne.n	8001ffe <HAL_RCC_OscConfig+0x356>
 8001fe4:	4b61      	ldr	r3, [pc, #388]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a60      	ldr	r2, [pc, #384]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	4b5e      	ldr	r3, [pc, #376]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4a5d      	ldr	r2, [pc, #372]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6213      	str	r3, [r2, #32]
 8001ffc:	e00b      	b.n	8002016 <HAL_RCC_OscConfig+0x36e>
 8001ffe:	4b5b      	ldr	r3, [pc, #364]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4a5a      	ldr	r2, [pc, #360]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6213      	str	r3, [r2, #32]
 800200a:	4b58      	ldr	r3, [pc, #352]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4a57      	ldr	r2, [pc, #348]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d015      	beq.n	800204a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7fe fd11 	bl	8000a44 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7fe fd0d 	bl	8000a44 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e0b1      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203c:	4b4b      	ldr	r3, [pc, #300]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ee      	beq.n	8002026 <HAL_RCC_OscConfig+0x37e>
 8002048:	e014      	b.n	8002074 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7fe fcfb 	bl	8000a44 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002050:	e00a      	b.n	8002068 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7fe fcf7 	bl	8000a44 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e09b      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002068:	4b40      	ldr	r3, [pc, #256]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ee      	bne.n	8002052 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d105      	bne.n	8002086 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207a:	4b3c      	ldr	r3, [pc, #240]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4a3b      	ldr	r2, [pc, #236]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002084:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8087 	beq.w	800219e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002090:	4b36      	ldr	r3, [pc, #216]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b08      	cmp	r3, #8
 800209a:	d061      	beq.n	8002160 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d146      	bne.n	8002132 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a4:	4b33      	ldr	r3, [pc, #204]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7fe fccb 	bl	8000a44 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7fe fcc7 	bl	8000a44 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e06d      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c4:	4b29      	ldr	r3, [pc, #164]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d8:	d108      	bne.n	80020ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020da:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	4921      	ldr	r1, [pc, #132]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ec:	4b1f      	ldr	r3, [pc, #124]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a19      	ldr	r1, [r3, #32]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	430b      	orrs	r3, r1
 80020fe:	491b      	ldr	r1, [pc, #108]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7fe fc9b 	bl	8000a44 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002112:	f7fe fc97 	bl	8000a44 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e03d      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x46a>
 8002130:	e035      	b.n	800219e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_RCC_OscConfig+0x4cc>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7fe fc84 	bl	8000a44 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002140:	f7fe fc80 	bl	8000a44 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e026      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RCC_OscConfig+0x4c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x498>
 800215e:	e01e      	b.n	800219e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d107      	bne.n	8002178 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e019      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
 800216c:	40021000 	.word	0x40021000
 8002170:	40007000 	.word	0x40007000
 8002174:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_OscConfig+0x500>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	429a      	cmp	r2, r3
 800218a:	d106      	bne.n	800219a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000

080021ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0d0      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c0:	4b6a      	ldr	r3, [pc, #424]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d910      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b67      	ldr	r3, [pc, #412]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 0207 	bic.w	r2, r3, #7
 80021d6:	4965      	ldr	r1, [pc, #404]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b63      	ldr	r3, [pc, #396]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0b8      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002208:	4b59      	ldr	r3, [pc, #356]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4a58      	ldr	r2, [pc, #352]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002212:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002220:	4b53      	ldr	r3, [pc, #332]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4a52      	ldr	r2, [pc, #328]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800222a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800222c:	4b50      	ldr	r3, [pc, #320]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	494d      	ldr	r1, [pc, #308]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d040      	beq.n	80022cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b47      	ldr	r3, [pc, #284]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d115      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e07f      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226a:	4b41      	ldr	r3, [pc, #260]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e073      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227a:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e06b      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228a:	4b39      	ldr	r3, [pc, #228]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f023 0203 	bic.w	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4936      	ldr	r1, [pc, #216]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800229c:	f7fe fbd2 	bl	8000a44 <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a4:	f7fe fbce 	bl	8000a44 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e053      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 020c 	and.w	r2, r3, #12
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d1eb      	bne.n	80022a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022cc:	4b27      	ldr	r3, [pc, #156]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d210      	bcs.n	80022fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 0207 	bic.w	r2, r3, #7
 80022e2:	4922      	ldr	r1, [pc, #136]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e032      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002308:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4916      	ldr	r1, [pc, #88]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	490e      	ldr	r1, [pc, #56]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800233a:	f000 f821 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800233e:	4602      	mov	r2, r0
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	490a      	ldr	r1, [pc, #40]	; (8002374 <HAL_RCC_ClockConfig+0x1c8>)
 800234c:	5ccb      	ldrb	r3, [r1, r3]
 800234e:	fa22 f303 	lsr.w	r3, r2, r3
 8002352:	4a09      	ldr	r2, [pc, #36]	; (8002378 <HAL_RCC_ClockConfig+0x1cc>)
 8002354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_ClockConfig+0x1d0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fb30 	bl	80009c0 <HAL_InitTick>

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40022000 	.word	0x40022000
 8002370:	40021000 	.word	0x40021000
 8002374:	08003708 	.word	0x08003708
 8002378:	20000000 	.word	0x20000000
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <HAL_RCC_GetSysClockFreq+0x94>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d002      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x30>
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d003      	beq.n	80023b6 <HAL_RCC_GetSysClockFreq+0x36>
 80023ae:	e027      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023b0:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_RCC_GetSysClockFreq+0x98>)
 80023b2:	613b      	str	r3, [r7, #16]
      break;
 80023b4:	e027      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	0c9b      	lsrs	r3, r3, #18
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	4a17      	ldr	r2, [pc, #92]	; (800241c <HAL_RCC_GetSysClockFreq+0x9c>)
 80023c0:	5cd3      	ldrb	r3, [r2, r3]
 80023c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d010      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_RCC_GetSysClockFreq+0x94>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	0c5b      	lsrs	r3, r3, #17
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	4a11      	ldr	r2, [pc, #68]	; (8002420 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023da:	5cd3      	ldrb	r3, [r2, r3]
 80023dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a0d      	ldr	r2, [pc, #52]	; (8002418 <HAL_RCC_GetSysClockFreq+0x98>)
 80023e2:	fb03 f202 	mul.w	r2, r3, r2
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	e004      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	613b      	str	r3, [r7, #16]
      break;
 80023fe:	e002      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_RCC_GetSysClockFreq+0x98>)
 8002402:	613b      	str	r3, [r7, #16]
      break;
 8002404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002406:	693b      	ldr	r3, [r7, #16]
}
 8002408:	4618      	mov	r0, r3
 800240a:	371c      	adds	r7, #28
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	007a1200 	.word	0x007a1200
 800241c:	08003720 	.word	0x08003720
 8002420:	08003730 	.word	0x08003730
 8002424:	003d0900 	.word	0x003d0900

08002428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800242c:	4b02      	ldr	r3, [pc, #8]	; (8002438 <HAL_RCC_GetHCLKFreq+0x10>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	20000000 	.word	0x20000000

0800243c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002440:	f7ff fff2 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4903      	ldr	r1, [pc, #12]	; (8002460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	08003718 	.word	0x08003718

08002464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002468:	f7ff ffde 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	0adb      	lsrs	r3, r3, #11
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4903      	ldr	r1, [pc, #12]	; (8002488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000
 8002488:	08003718 	.word	0x08003718

0800248c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <RCC_Delay+0x34>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <RCC_Delay+0x38>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0a5b      	lsrs	r3, r3, #9
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024a8:	bf00      	nop
  }
  while (Delay --);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	60fa      	str	r2, [r7, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f9      	bne.n	80024a8 <RCC_Delay+0x1c>
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	20000000 	.word	0x20000000
 80024c4:	10624dd3 	.word	0x10624dd3

080024c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e042      	b.n	8002560 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe f8c8 	bl	8000684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2224      	movs	r2, #36	; 0x24
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800250a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f82b 	bl	8002568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002520:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002530:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002540:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025a2:	f023 030c 	bic.w	r3, r3, #12
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	430b      	orrs	r3, r1
 80025ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a2c      	ldr	r2, [pc, #176]	; (800267c <UART_SetConfig+0x114>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d103      	bne.n	80025d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025d0:	f7ff ff48 	bl	8002464 <HAL_RCC_GetPCLK2Freq>
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	e002      	b.n	80025de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025d8:	f7ff ff30 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 80025dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	009a      	lsls	r2, r3, #2
 80025e8:	441a      	add	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	4a22      	ldr	r2, [pc, #136]	; (8002680 <UART_SetConfig+0x118>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	0119      	lsls	r1, r3, #4
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	009a      	lsls	r2, r3, #2
 8002608:	441a      	add	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	fbb2 f2f3 	udiv	r2, r2, r3
 8002614:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <UART_SetConfig+0x118>)
 8002616:	fba3 0302 	umull	r0, r3, r3, r2
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	2064      	movs	r0, #100	; 0x64
 800261e:	fb00 f303 	mul.w	r3, r0, r3
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	3332      	adds	r3, #50	; 0x32
 8002628:	4a15      	ldr	r2, [pc, #84]	; (8002680 <UART_SetConfig+0x118>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002634:	4419      	add	r1, r3
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	009a      	lsls	r2, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fbb2 f2f3 	udiv	r2, r2, r3
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <UART_SetConfig+0x118>)
 800264e:	fba3 0302 	umull	r0, r3, r3, r2
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2064      	movs	r0, #100	; 0x64
 8002656:	fb00 f303 	mul.w	r3, r0, r3
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	3332      	adds	r3, #50	; 0x32
 8002660:	4a07      	ldr	r2, [pc, #28]	; (8002680 <UART_SetConfig+0x118>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	f003 020f 	and.w	r2, r3, #15
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	440a      	add	r2, r1
 8002672:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40013800 	.word	0x40013800
 8002680:	51eb851f 	.word	0x51eb851f

08002684 <calc_SAE_J1850>:
 */
#include "crc.h"
#include <stdio.h>

int calc_SAE_J1850(int data[],int crc_len)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
	int idx, crc, temp, temp1, temp2, idy;
	idx = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
	idy = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
	temp = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
	temp1 = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
	temp2 = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
	for (idx = 0; idx < crc_len;idx++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e02b      	b.n	8002700 <calc_SAE_J1850+0x7c>
	{
		if (idx == 0) {
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <calc_SAE_J1850+0x30>
			temp1 = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e007      	b.n	80026c4 <calc_SAE_J1850+0x40>
		}
		else {
			temp1 = data[crc_len - idx];
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	617b      	str	r3, [r7, #20]
		}
		crc = (crc ^ temp1);
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	4053      	eors	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
		for (idy = 8; idy > 0; idy--) {
 80026cc:	2308      	movs	r3, #8
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	e010      	b.n	80026f4 <calc_SAE_J1850+0x70>
			temp2 = crc;
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	60bb      	str	r3, [r7, #8]
			crc <<= 1;
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	61bb      	str	r3, [r7, #24]
			if (0 != (temp2 & 128)) {
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <calc_SAE_J1850+0x6a>
				crc ^=  0x1D;
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f083 031d 	eor.w	r3, r3, #29
 80026ec:	61bb      	str	r3, [r7, #24]
		for (idy = 8; idy > 0; idy--) {
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	dceb      	bgt.n	80026d2 <calc_SAE_J1850+0x4e>
	for (idx = 0; idx < crc_len;idx++)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3301      	adds	r3, #1
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	69fa      	ldr	r2, [r7, #28]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	dbcf      	blt.n	80026a8 <calc_SAE_J1850+0x24>
			}
		}
	}
	return crc;
 8002708:	69bb      	ldr	r3, [r7, #24]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3724      	adds	r7, #36	; 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <rand>:
 8002714:	4b16      	ldr	r3, [pc, #88]	; (8002770 <rand+0x5c>)
 8002716:	b510      	push	{r4, lr}
 8002718:	681c      	ldr	r4, [r3, #0]
 800271a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800271c:	b9b3      	cbnz	r3, 800274c <rand+0x38>
 800271e:	2018      	movs	r0, #24
 8002720:	f000 fa1e 	bl	8002b60 <malloc>
 8002724:	4602      	mov	r2, r0
 8002726:	6320      	str	r0, [r4, #48]	; 0x30
 8002728:	b920      	cbnz	r0, 8002734 <rand+0x20>
 800272a:	2152      	movs	r1, #82	; 0x52
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <rand+0x60>)
 800272e:	4812      	ldr	r0, [pc, #72]	; (8002778 <rand+0x64>)
 8002730:	f000 f9b0 	bl	8002a94 <__assert_func>
 8002734:	4911      	ldr	r1, [pc, #68]	; (800277c <rand+0x68>)
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <rand+0x6c>)
 8002738:	e9c0 1300 	strd	r1, r3, [r0]
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <rand+0x70>)
 800273e:	2100      	movs	r1, #0
 8002740:	6083      	str	r3, [r0, #8]
 8002742:	230b      	movs	r3, #11
 8002744:	8183      	strh	r3, [r0, #12]
 8002746:	2001      	movs	r0, #1
 8002748:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800274c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800274e:	480e      	ldr	r0, [pc, #56]	; (8002788 <rand+0x74>)
 8002750:	690b      	ldr	r3, [r1, #16]
 8002752:	694c      	ldr	r4, [r1, #20]
 8002754:	4358      	muls	r0, r3
 8002756:	4a0d      	ldr	r2, [pc, #52]	; (800278c <rand+0x78>)
 8002758:	fb02 0004 	mla	r0, r2, r4, r0
 800275c:	fba3 3202 	umull	r3, r2, r3, r2
 8002760:	3301      	adds	r3, #1
 8002762:	eb40 0002 	adc.w	r0, r0, r2
 8002766:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800276a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800276e:	bd10      	pop	{r4, pc}
 8002770:	20000064 	.word	0x20000064
 8002774:	08003732 	.word	0x08003732
 8002778:	08003749 	.word	0x08003749
 800277c:	abcd330e 	.word	0xabcd330e
 8002780:	e66d1234 	.word	0xe66d1234
 8002784:	0005deec 	.word	0x0005deec
 8002788:	5851f42d 	.word	0x5851f42d
 800278c:	4c957f2d 	.word	0x4c957f2d

08002790 <std>:
 8002790:	2300      	movs	r3, #0
 8002792:	b510      	push	{r4, lr}
 8002794:	4604      	mov	r4, r0
 8002796:	e9c0 3300 	strd	r3, r3, [r0]
 800279a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800279e:	6083      	str	r3, [r0, #8]
 80027a0:	8181      	strh	r1, [r0, #12]
 80027a2:	6643      	str	r3, [r0, #100]	; 0x64
 80027a4:	81c2      	strh	r2, [r0, #14]
 80027a6:	6183      	str	r3, [r0, #24]
 80027a8:	4619      	mov	r1, r3
 80027aa:	2208      	movs	r2, #8
 80027ac:	305c      	adds	r0, #92	; 0x5c
 80027ae:	f000 f8f4 	bl	800299a <memset>
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <std+0x58>)
 80027b4:	6224      	str	r4, [r4, #32]
 80027b6:	6263      	str	r3, [r4, #36]	; 0x24
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <std+0x5c>)
 80027ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <std+0x60>)
 80027be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <std+0x64>)
 80027c2:	6323      	str	r3, [r4, #48]	; 0x30
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <std+0x68>)
 80027c6:	429c      	cmp	r4, r3
 80027c8:	d006      	beq.n	80027d8 <std+0x48>
 80027ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80027ce:	4294      	cmp	r4, r2
 80027d0:	d002      	beq.n	80027d8 <std+0x48>
 80027d2:	33d0      	adds	r3, #208	; 0xd0
 80027d4:	429c      	cmp	r4, r3
 80027d6:	d105      	bne.n	80027e4 <std+0x54>
 80027d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80027dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027e0:	f000 b954 	b.w	8002a8c <__retarget_lock_init_recursive>
 80027e4:	bd10      	pop	{r4, pc}
 80027e6:	bf00      	nop
 80027e8:	08002915 	.word	0x08002915
 80027ec:	08002937 	.word	0x08002937
 80027f0:	0800296f 	.word	0x0800296f
 80027f4:	08002993 	.word	0x08002993
 80027f8:	20000108 	.word	0x20000108

080027fc <stdio_exit_handler>:
 80027fc:	4a02      	ldr	r2, [pc, #8]	; (8002808 <stdio_exit_handler+0xc>)
 80027fe:	4903      	ldr	r1, [pc, #12]	; (800280c <stdio_exit_handler+0x10>)
 8002800:	4803      	ldr	r0, [pc, #12]	; (8002810 <stdio_exit_handler+0x14>)
 8002802:	f000 b869 	b.w	80028d8 <_fwalk_sglue>
 8002806:	bf00      	nop
 8002808:	2000000c 	.word	0x2000000c
 800280c:	08002dcd 	.word	0x08002dcd
 8002810:	20000018 	.word	0x20000018

08002814 <cleanup_stdio>:
 8002814:	6841      	ldr	r1, [r0, #4]
 8002816:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <cleanup_stdio+0x34>)
 8002818:	b510      	push	{r4, lr}
 800281a:	4299      	cmp	r1, r3
 800281c:	4604      	mov	r4, r0
 800281e:	d001      	beq.n	8002824 <cleanup_stdio+0x10>
 8002820:	f000 fad4 	bl	8002dcc <_fflush_r>
 8002824:	68a1      	ldr	r1, [r4, #8]
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <cleanup_stdio+0x38>)
 8002828:	4299      	cmp	r1, r3
 800282a:	d002      	beq.n	8002832 <cleanup_stdio+0x1e>
 800282c:	4620      	mov	r0, r4
 800282e:	f000 facd 	bl	8002dcc <_fflush_r>
 8002832:	68e1      	ldr	r1, [r4, #12]
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <cleanup_stdio+0x3c>)
 8002836:	4299      	cmp	r1, r3
 8002838:	d004      	beq.n	8002844 <cleanup_stdio+0x30>
 800283a:	4620      	mov	r0, r4
 800283c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002840:	f000 bac4 	b.w	8002dcc <_fflush_r>
 8002844:	bd10      	pop	{r4, pc}
 8002846:	bf00      	nop
 8002848:	20000108 	.word	0x20000108
 800284c:	20000170 	.word	0x20000170
 8002850:	200001d8 	.word	0x200001d8

08002854 <global_stdio_init.part.0>:
 8002854:	b510      	push	{r4, lr}
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <global_stdio_init.part.0+0x30>)
 8002858:	4c0b      	ldr	r4, [pc, #44]	; (8002888 <global_stdio_init.part.0+0x34>)
 800285a:	4a0c      	ldr	r2, [pc, #48]	; (800288c <global_stdio_init.part.0+0x38>)
 800285c:	4620      	mov	r0, r4
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	2104      	movs	r1, #4
 8002862:	2200      	movs	r2, #0
 8002864:	f7ff ff94 	bl	8002790 <std>
 8002868:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800286c:	2201      	movs	r2, #1
 800286e:	2109      	movs	r1, #9
 8002870:	f7ff ff8e 	bl	8002790 <std>
 8002874:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002878:	2202      	movs	r2, #2
 800287a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800287e:	2112      	movs	r1, #18
 8002880:	f7ff bf86 	b.w	8002790 <std>
 8002884:	20000240 	.word	0x20000240
 8002888:	20000108 	.word	0x20000108
 800288c:	080027fd 	.word	0x080027fd

08002890 <__sfp_lock_acquire>:
 8002890:	4801      	ldr	r0, [pc, #4]	; (8002898 <__sfp_lock_acquire+0x8>)
 8002892:	f000 b8fc 	b.w	8002a8e <__retarget_lock_acquire_recursive>
 8002896:	bf00      	nop
 8002898:	20000249 	.word	0x20000249

0800289c <__sfp_lock_release>:
 800289c:	4801      	ldr	r0, [pc, #4]	; (80028a4 <__sfp_lock_release+0x8>)
 800289e:	f000 b8f7 	b.w	8002a90 <__retarget_lock_release_recursive>
 80028a2:	bf00      	nop
 80028a4:	20000249 	.word	0x20000249

080028a8 <__sinit>:
 80028a8:	b510      	push	{r4, lr}
 80028aa:	4604      	mov	r4, r0
 80028ac:	f7ff fff0 	bl	8002890 <__sfp_lock_acquire>
 80028b0:	6a23      	ldr	r3, [r4, #32]
 80028b2:	b11b      	cbz	r3, 80028bc <__sinit+0x14>
 80028b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028b8:	f7ff bff0 	b.w	800289c <__sfp_lock_release>
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__sinit+0x28>)
 80028be:	6223      	str	r3, [r4, #32]
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <__sinit+0x2c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f5      	bne.n	80028b4 <__sinit+0xc>
 80028c8:	f7ff ffc4 	bl	8002854 <global_stdio_init.part.0>
 80028cc:	e7f2      	b.n	80028b4 <__sinit+0xc>
 80028ce:	bf00      	nop
 80028d0:	08002815 	.word	0x08002815
 80028d4:	20000240 	.word	0x20000240

080028d8 <_fwalk_sglue>:
 80028d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028dc:	4607      	mov	r7, r0
 80028de:	4688      	mov	r8, r1
 80028e0:	4614      	mov	r4, r2
 80028e2:	2600      	movs	r6, #0
 80028e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80028e8:	f1b9 0901 	subs.w	r9, r9, #1
 80028ec:	d505      	bpl.n	80028fa <_fwalk_sglue+0x22>
 80028ee:	6824      	ldr	r4, [r4, #0]
 80028f0:	2c00      	cmp	r4, #0
 80028f2:	d1f7      	bne.n	80028e4 <_fwalk_sglue+0xc>
 80028f4:	4630      	mov	r0, r6
 80028f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028fa:	89ab      	ldrh	r3, [r5, #12]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d907      	bls.n	8002910 <_fwalk_sglue+0x38>
 8002900:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002904:	3301      	adds	r3, #1
 8002906:	d003      	beq.n	8002910 <_fwalk_sglue+0x38>
 8002908:	4629      	mov	r1, r5
 800290a:	4638      	mov	r0, r7
 800290c:	47c0      	blx	r8
 800290e:	4306      	orrs	r6, r0
 8002910:	3568      	adds	r5, #104	; 0x68
 8002912:	e7e9      	b.n	80028e8 <_fwalk_sglue+0x10>

08002914 <__sread>:
 8002914:	b510      	push	{r4, lr}
 8002916:	460c      	mov	r4, r1
 8002918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800291c:	f000 f868 	bl	80029f0 <_read_r>
 8002920:	2800      	cmp	r0, #0
 8002922:	bfab      	itete	ge
 8002924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002926:	89a3      	ldrhlt	r3, [r4, #12]
 8002928:	181b      	addge	r3, r3, r0
 800292a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800292e:	bfac      	ite	ge
 8002930:	6563      	strge	r3, [r4, #84]	; 0x54
 8002932:	81a3      	strhlt	r3, [r4, #12]
 8002934:	bd10      	pop	{r4, pc}

08002936 <__swrite>:
 8002936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800293a:	461f      	mov	r7, r3
 800293c:	898b      	ldrh	r3, [r1, #12]
 800293e:	4605      	mov	r5, r0
 8002940:	05db      	lsls	r3, r3, #23
 8002942:	460c      	mov	r4, r1
 8002944:	4616      	mov	r6, r2
 8002946:	d505      	bpl.n	8002954 <__swrite+0x1e>
 8002948:	2302      	movs	r3, #2
 800294a:	2200      	movs	r2, #0
 800294c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002950:	f000 f83c 	bl	80029cc <_lseek_r>
 8002954:	89a3      	ldrh	r3, [r4, #12]
 8002956:	4632      	mov	r2, r6
 8002958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800295c:	81a3      	strh	r3, [r4, #12]
 800295e:	4628      	mov	r0, r5
 8002960:	463b      	mov	r3, r7
 8002962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800296a:	f000 b853 	b.w	8002a14 <_write_r>

0800296e <__sseek>:
 800296e:	b510      	push	{r4, lr}
 8002970:	460c      	mov	r4, r1
 8002972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002976:	f000 f829 	bl	80029cc <_lseek_r>
 800297a:	1c43      	adds	r3, r0, #1
 800297c:	89a3      	ldrh	r3, [r4, #12]
 800297e:	bf15      	itete	ne
 8002980:	6560      	strne	r0, [r4, #84]	; 0x54
 8002982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800298a:	81a3      	strheq	r3, [r4, #12]
 800298c:	bf18      	it	ne
 800298e:	81a3      	strhne	r3, [r4, #12]
 8002990:	bd10      	pop	{r4, pc}

08002992 <__sclose>:
 8002992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002996:	f000 b809 	b.w	80029ac <_close_r>

0800299a <memset>:
 800299a:	4603      	mov	r3, r0
 800299c:	4402      	add	r2, r0
 800299e:	4293      	cmp	r3, r2
 80029a0:	d100      	bne.n	80029a4 <memset+0xa>
 80029a2:	4770      	bx	lr
 80029a4:	f803 1b01 	strb.w	r1, [r3], #1
 80029a8:	e7f9      	b.n	800299e <memset+0x4>
	...

080029ac <_close_r>:
 80029ac:	b538      	push	{r3, r4, r5, lr}
 80029ae:	2300      	movs	r3, #0
 80029b0:	4d05      	ldr	r5, [pc, #20]	; (80029c8 <_close_r+0x1c>)
 80029b2:	4604      	mov	r4, r0
 80029b4:	4608      	mov	r0, r1
 80029b6:	602b      	str	r3, [r5, #0]
 80029b8:	f7fd ff5a 	bl	8000870 <_close>
 80029bc:	1c43      	adds	r3, r0, #1
 80029be:	d102      	bne.n	80029c6 <_close_r+0x1a>
 80029c0:	682b      	ldr	r3, [r5, #0]
 80029c2:	b103      	cbz	r3, 80029c6 <_close_r+0x1a>
 80029c4:	6023      	str	r3, [r4, #0]
 80029c6:	bd38      	pop	{r3, r4, r5, pc}
 80029c8:	20000244 	.word	0x20000244

080029cc <_lseek_r>:
 80029cc:	b538      	push	{r3, r4, r5, lr}
 80029ce:	4604      	mov	r4, r0
 80029d0:	4608      	mov	r0, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	2200      	movs	r2, #0
 80029d6:	4d05      	ldr	r5, [pc, #20]	; (80029ec <_lseek_r+0x20>)
 80029d8:	602a      	str	r2, [r5, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	f7fd ff6c 	bl	80008b8 <_lseek>
 80029e0:	1c43      	adds	r3, r0, #1
 80029e2:	d102      	bne.n	80029ea <_lseek_r+0x1e>
 80029e4:	682b      	ldr	r3, [r5, #0]
 80029e6:	b103      	cbz	r3, 80029ea <_lseek_r+0x1e>
 80029e8:	6023      	str	r3, [r4, #0]
 80029ea:	bd38      	pop	{r3, r4, r5, pc}
 80029ec:	20000244 	.word	0x20000244

080029f0 <_read_r>:
 80029f0:	b538      	push	{r3, r4, r5, lr}
 80029f2:	4604      	mov	r4, r0
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	2200      	movs	r2, #0
 80029fa:	4d05      	ldr	r5, [pc, #20]	; (8002a10 <_read_r+0x20>)
 80029fc:	602a      	str	r2, [r5, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	f7fd fefd 	bl	80007fe <_read>
 8002a04:	1c43      	adds	r3, r0, #1
 8002a06:	d102      	bne.n	8002a0e <_read_r+0x1e>
 8002a08:	682b      	ldr	r3, [r5, #0]
 8002a0a:	b103      	cbz	r3, 8002a0e <_read_r+0x1e>
 8002a0c:	6023      	str	r3, [r4, #0]
 8002a0e:	bd38      	pop	{r3, r4, r5, pc}
 8002a10:	20000244 	.word	0x20000244

08002a14 <_write_r>:
 8002a14:	b538      	push	{r3, r4, r5, lr}
 8002a16:	4604      	mov	r4, r0
 8002a18:	4608      	mov	r0, r1
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	4d05      	ldr	r5, [pc, #20]	; (8002a34 <_write_r+0x20>)
 8002a20:	602a      	str	r2, [r5, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f7fd ff08 	bl	8000838 <_write>
 8002a28:	1c43      	adds	r3, r0, #1
 8002a2a:	d102      	bne.n	8002a32 <_write_r+0x1e>
 8002a2c:	682b      	ldr	r3, [r5, #0]
 8002a2e:	b103      	cbz	r3, 8002a32 <_write_r+0x1e>
 8002a30:	6023      	str	r3, [r4, #0]
 8002a32:	bd38      	pop	{r3, r4, r5, pc}
 8002a34:	20000244 	.word	0x20000244

08002a38 <__errno>:
 8002a38:	4b01      	ldr	r3, [pc, #4]	; (8002a40 <__errno+0x8>)
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000064 	.word	0x20000064

08002a44 <__libc_init_array>:
 8002a44:	b570      	push	{r4, r5, r6, lr}
 8002a46:	2600      	movs	r6, #0
 8002a48:	4d0c      	ldr	r5, [pc, #48]	; (8002a7c <__libc_init_array+0x38>)
 8002a4a:	4c0d      	ldr	r4, [pc, #52]	; (8002a80 <__libc_init_array+0x3c>)
 8002a4c:	1b64      	subs	r4, r4, r5
 8002a4e:	10a4      	asrs	r4, r4, #2
 8002a50:	42a6      	cmp	r6, r4
 8002a52:	d109      	bne.n	8002a68 <__libc_init_array+0x24>
 8002a54:	f000 fe4c 	bl	80036f0 <_init>
 8002a58:	2600      	movs	r6, #0
 8002a5a:	4d0a      	ldr	r5, [pc, #40]	; (8002a84 <__libc_init_array+0x40>)
 8002a5c:	4c0a      	ldr	r4, [pc, #40]	; (8002a88 <__libc_init_array+0x44>)
 8002a5e:	1b64      	subs	r4, r4, r5
 8002a60:	10a4      	asrs	r4, r4, #2
 8002a62:	42a6      	cmp	r6, r4
 8002a64:	d105      	bne.n	8002a72 <__libc_init_array+0x2e>
 8002a66:	bd70      	pop	{r4, r5, r6, pc}
 8002a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a6c:	4798      	blx	r3
 8002a6e:	3601      	adds	r6, #1
 8002a70:	e7ee      	b.n	8002a50 <__libc_init_array+0xc>
 8002a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a76:	4798      	blx	r3
 8002a78:	3601      	adds	r6, #1
 8002a7a:	e7f2      	b.n	8002a62 <__libc_init_array+0x1e>
 8002a7c:	08003810 	.word	0x08003810
 8002a80:	08003810 	.word	0x08003810
 8002a84:	08003810 	.word	0x08003810
 8002a88:	08003814 	.word	0x08003814

08002a8c <__retarget_lock_init_recursive>:
 8002a8c:	4770      	bx	lr

08002a8e <__retarget_lock_acquire_recursive>:
 8002a8e:	4770      	bx	lr

08002a90 <__retarget_lock_release_recursive>:
 8002a90:	4770      	bx	lr
	...

08002a94 <__assert_func>:
 8002a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002a96:	4614      	mov	r4, r2
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <__assert_func+0x2c>)
 8002a9c:	4605      	mov	r5, r0
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68d8      	ldr	r0, [r3, #12]
 8002aa2:	b14c      	cbz	r4, 8002ab8 <__assert_func+0x24>
 8002aa4:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <__assert_func+0x30>)
 8002aa6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002aaa:	9100      	str	r1, [sp, #0]
 8002aac:	462b      	mov	r3, r5
 8002aae:	4906      	ldr	r1, [pc, #24]	; (8002ac8 <__assert_func+0x34>)
 8002ab0:	f000 f9b4 	bl	8002e1c <fiprintf>
 8002ab4:	f000 f9d4 	bl	8002e60 <abort>
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <__assert_func+0x38>)
 8002aba:	461c      	mov	r4, r3
 8002abc:	e7f3      	b.n	8002aa6 <__assert_func+0x12>
 8002abe:	bf00      	nop
 8002ac0:	20000064 	.word	0x20000064
 8002ac4:	080037a1 	.word	0x080037a1
 8002ac8:	080037ae 	.word	0x080037ae
 8002acc:	080037dc 	.word	0x080037dc

08002ad0 <_free_r>:
 8002ad0:	b538      	push	{r3, r4, r5, lr}
 8002ad2:	4605      	mov	r5, r0
 8002ad4:	2900      	cmp	r1, #0
 8002ad6:	d040      	beq.n	8002b5a <_free_r+0x8a>
 8002ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002adc:	1f0c      	subs	r4, r1, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bfb8      	it	lt
 8002ae2:	18e4      	addlt	r4, r4, r3
 8002ae4:	f000 f8e4 	bl	8002cb0 <__malloc_lock>
 8002ae8:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <_free_r+0x8c>)
 8002aea:	6813      	ldr	r3, [r2, #0]
 8002aec:	b933      	cbnz	r3, 8002afc <_free_r+0x2c>
 8002aee:	6063      	str	r3, [r4, #4]
 8002af0:	6014      	str	r4, [r2, #0]
 8002af2:	4628      	mov	r0, r5
 8002af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002af8:	f000 b8e0 	b.w	8002cbc <__malloc_unlock>
 8002afc:	42a3      	cmp	r3, r4
 8002afe:	d908      	bls.n	8002b12 <_free_r+0x42>
 8002b00:	6820      	ldr	r0, [r4, #0]
 8002b02:	1821      	adds	r1, r4, r0
 8002b04:	428b      	cmp	r3, r1
 8002b06:	bf01      	itttt	eq
 8002b08:	6819      	ldreq	r1, [r3, #0]
 8002b0a:	685b      	ldreq	r3, [r3, #4]
 8002b0c:	1809      	addeq	r1, r1, r0
 8002b0e:	6021      	streq	r1, [r4, #0]
 8002b10:	e7ed      	b.n	8002aee <_free_r+0x1e>
 8002b12:	461a      	mov	r2, r3
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	b10b      	cbz	r3, 8002b1c <_free_r+0x4c>
 8002b18:	42a3      	cmp	r3, r4
 8002b1a:	d9fa      	bls.n	8002b12 <_free_r+0x42>
 8002b1c:	6811      	ldr	r1, [r2, #0]
 8002b1e:	1850      	adds	r0, r2, r1
 8002b20:	42a0      	cmp	r0, r4
 8002b22:	d10b      	bne.n	8002b3c <_free_r+0x6c>
 8002b24:	6820      	ldr	r0, [r4, #0]
 8002b26:	4401      	add	r1, r0
 8002b28:	1850      	adds	r0, r2, r1
 8002b2a:	4283      	cmp	r3, r0
 8002b2c:	6011      	str	r1, [r2, #0]
 8002b2e:	d1e0      	bne.n	8002af2 <_free_r+0x22>
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4408      	add	r0, r1
 8002b36:	6010      	str	r0, [r2, #0]
 8002b38:	6053      	str	r3, [r2, #4]
 8002b3a:	e7da      	b.n	8002af2 <_free_r+0x22>
 8002b3c:	d902      	bls.n	8002b44 <_free_r+0x74>
 8002b3e:	230c      	movs	r3, #12
 8002b40:	602b      	str	r3, [r5, #0]
 8002b42:	e7d6      	b.n	8002af2 <_free_r+0x22>
 8002b44:	6820      	ldr	r0, [r4, #0]
 8002b46:	1821      	adds	r1, r4, r0
 8002b48:	428b      	cmp	r3, r1
 8002b4a:	bf01      	itttt	eq
 8002b4c:	6819      	ldreq	r1, [r3, #0]
 8002b4e:	685b      	ldreq	r3, [r3, #4]
 8002b50:	1809      	addeq	r1, r1, r0
 8002b52:	6021      	streq	r1, [r4, #0]
 8002b54:	6063      	str	r3, [r4, #4]
 8002b56:	6054      	str	r4, [r2, #4]
 8002b58:	e7cb      	b.n	8002af2 <_free_r+0x22>
 8002b5a:	bd38      	pop	{r3, r4, r5, pc}
 8002b5c:	2000024c 	.word	0x2000024c

08002b60 <malloc>:
 8002b60:	4b02      	ldr	r3, [pc, #8]	; (8002b6c <malloc+0xc>)
 8002b62:	4601      	mov	r1, r0
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	f000 b823 	b.w	8002bb0 <_malloc_r>
 8002b6a:	bf00      	nop
 8002b6c:	20000064 	.word	0x20000064

08002b70 <sbrk_aligned>:
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	4e0e      	ldr	r6, [pc, #56]	; (8002bac <sbrk_aligned+0x3c>)
 8002b74:	460c      	mov	r4, r1
 8002b76:	6831      	ldr	r1, [r6, #0]
 8002b78:	4605      	mov	r5, r0
 8002b7a:	b911      	cbnz	r1, 8002b82 <sbrk_aligned+0x12>
 8002b7c:	f000 f960 	bl	8002e40 <_sbrk_r>
 8002b80:	6030      	str	r0, [r6, #0]
 8002b82:	4621      	mov	r1, r4
 8002b84:	4628      	mov	r0, r5
 8002b86:	f000 f95b 	bl	8002e40 <_sbrk_r>
 8002b8a:	1c43      	adds	r3, r0, #1
 8002b8c:	d00a      	beq.n	8002ba4 <sbrk_aligned+0x34>
 8002b8e:	1cc4      	adds	r4, r0, #3
 8002b90:	f024 0403 	bic.w	r4, r4, #3
 8002b94:	42a0      	cmp	r0, r4
 8002b96:	d007      	beq.n	8002ba8 <sbrk_aligned+0x38>
 8002b98:	1a21      	subs	r1, r4, r0
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f000 f950 	bl	8002e40 <_sbrk_r>
 8002ba0:	3001      	adds	r0, #1
 8002ba2:	d101      	bne.n	8002ba8 <sbrk_aligned+0x38>
 8002ba4:	f04f 34ff 	mov.w	r4, #4294967295
 8002ba8:	4620      	mov	r0, r4
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
 8002bac:	20000250 	.word	0x20000250

08002bb0 <_malloc_r>:
 8002bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bb4:	1ccd      	adds	r5, r1, #3
 8002bb6:	f025 0503 	bic.w	r5, r5, #3
 8002bba:	3508      	adds	r5, #8
 8002bbc:	2d0c      	cmp	r5, #12
 8002bbe:	bf38      	it	cc
 8002bc0:	250c      	movcc	r5, #12
 8002bc2:	2d00      	cmp	r5, #0
 8002bc4:	4607      	mov	r7, r0
 8002bc6:	db01      	blt.n	8002bcc <_malloc_r+0x1c>
 8002bc8:	42a9      	cmp	r1, r5
 8002bca:	d905      	bls.n	8002bd8 <_malloc_r+0x28>
 8002bcc:	230c      	movs	r3, #12
 8002bce:	2600      	movs	r6, #0
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	4630      	mov	r0, r6
 8002bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002cac <_malloc_r+0xfc>
 8002bdc:	f000 f868 	bl	8002cb0 <__malloc_lock>
 8002be0:	f8d8 3000 	ldr.w	r3, [r8]
 8002be4:	461c      	mov	r4, r3
 8002be6:	bb5c      	cbnz	r4, 8002c40 <_malloc_r+0x90>
 8002be8:	4629      	mov	r1, r5
 8002bea:	4638      	mov	r0, r7
 8002bec:	f7ff ffc0 	bl	8002b70 <sbrk_aligned>
 8002bf0:	1c43      	adds	r3, r0, #1
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	d155      	bne.n	8002ca2 <_malloc_r+0xf2>
 8002bf6:	f8d8 4000 	ldr.w	r4, [r8]
 8002bfa:	4626      	mov	r6, r4
 8002bfc:	2e00      	cmp	r6, #0
 8002bfe:	d145      	bne.n	8002c8c <_malloc_r+0xdc>
 8002c00:	2c00      	cmp	r4, #0
 8002c02:	d048      	beq.n	8002c96 <_malloc_r+0xe6>
 8002c04:	6823      	ldr	r3, [r4, #0]
 8002c06:	4631      	mov	r1, r6
 8002c08:	4638      	mov	r0, r7
 8002c0a:	eb04 0903 	add.w	r9, r4, r3
 8002c0e:	f000 f917 	bl	8002e40 <_sbrk_r>
 8002c12:	4581      	cmp	r9, r0
 8002c14:	d13f      	bne.n	8002c96 <_malloc_r+0xe6>
 8002c16:	6821      	ldr	r1, [r4, #0]
 8002c18:	4638      	mov	r0, r7
 8002c1a:	1a6d      	subs	r5, r5, r1
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f7ff ffa7 	bl	8002b70 <sbrk_aligned>
 8002c22:	3001      	adds	r0, #1
 8002c24:	d037      	beq.n	8002c96 <_malloc_r+0xe6>
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	442b      	add	r3, r5
 8002c2a:	6023      	str	r3, [r4, #0]
 8002c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d038      	beq.n	8002ca6 <_malloc_r+0xf6>
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	42a2      	cmp	r2, r4
 8002c38:	d12b      	bne.n	8002c92 <_malloc_r+0xe2>
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	e00f      	b.n	8002c60 <_malloc_r+0xb0>
 8002c40:	6822      	ldr	r2, [r4, #0]
 8002c42:	1b52      	subs	r2, r2, r5
 8002c44:	d41f      	bmi.n	8002c86 <_malloc_r+0xd6>
 8002c46:	2a0b      	cmp	r2, #11
 8002c48:	d917      	bls.n	8002c7a <_malloc_r+0xca>
 8002c4a:	1961      	adds	r1, r4, r5
 8002c4c:	42a3      	cmp	r3, r4
 8002c4e:	6025      	str	r5, [r4, #0]
 8002c50:	bf18      	it	ne
 8002c52:	6059      	strne	r1, [r3, #4]
 8002c54:	6863      	ldr	r3, [r4, #4]
 8002c56:	bf08      	it	eq
 8002c58:	f8c8 1000 	streq.w	r1, [r8]
 8002c5c:	5162      	str	r2, [r4, r5]
 8002c5e:	604b      	str	r3, [r1, #4]
 8002c60:	4638      	mov	r0, r7
 8002c62:	f104 060b 	add.w	r6, r4, #11
 8002c66:	f000 f829 	bl	8002cbc <__malloc_unlock>
 8002c6a:	f026 0607 	bic.w	r6, r6, #7
 8002c6e:	1d23      	adds	r3, r4, #4
 8002c70:	1af2      	subs	r2, r6, r3
 8002c72:	d0ae      	beq.n	8002bd2 <_malloc_r+0x22>
 8002c74:	1b9b      	subs	r3, r3, r6
 8002c76:	50a3      	str	r3, [r4, r2]
 8002c78:	e7ab      	b.n	8002bd2 <_malloc_r+0x22>
 8002c7a:	42a3      	cmp	r3, r4
 8002c7c:	6862      	ldr	r2, [r4, #4]
 8002c7e:	d1dd      	bne.n	8002c3c <_malloc_r+0x8c>
 8002c80:	f8c8 2000 	str.w	r2, [r8]
 8002c84:	e7ec      	b.n	8002c60 <_malloc_r+0xb0>
 8002c86:	4623      	mov	r3, r4
 8002c88:	6864      	ldr	r4, [r4, #4]
 8002c8a:	e7ac      	b.n	8002be6 <_malloc_r+0x36>
 8002c8c:	4634      	mov	r4, r6
 8002c8e:	6876      	ldr	r6, [r6, #4]
 8002c90:	e7b4      	b.n	8002bfc <_malloc_r+0x4c>
 8002c92:	4613      	mov	r3, r2
 8002c94:	e7cc      	b.n	8002c30 <_malloc_r+0x80>
 8002c96:	230c      	movs	r3, #12
 8002c98:	4638      	mov	r0, r7
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	f000 f80e 	bl	8002cbc <__malloc_unlock>
 8002ca0:	e797      	b.n	8002bd2 <_malloc_r+0x22>
 8002ca2:	6025      	str	r5, [r4, #0]
 8002ca4:	e7dc      	b.n	8002c60 <_malloc_r+0xb0>
 8002ca6:	605b      	str	r3, [r3, #4]
 8002ca8:	deff      	udf	#255	; 0xff
 8002caa:	bf00      	nop
 8002cac:	2000024c 	.word	0x2000024c

08002cb0 <__malloc_lock>:
 8002cb0:	4801      	ldr	r0, [pc, #4]	; (8002cb8 <__malloc_lock+0x8>)
 8002cb2:	f7ff beec 	b.w	8002a8e <__retarget_lock_acquire_recursive>
 8002cb6:	bf00      	nop
 8002cb8:	20000248 	.word	0x20000248

08002cbc <__malloc_unlock>:
 8002cbc:	4801      	ldr	r0, [pc, #4]	; (8002cc4 <__malloc_unlock+0x8>)
 8002cbe:	f7ff bee7 	b.w	8002a90 <__retarget_lock_release_recursive>
 8002cc2:	bf00      	nop
 8002cc4:	20000248 	.word	0x20000248

08002cc8 <__sflush_r>:
 8002cc8:	898a      	ldrh	r2, [r1, #12]
 8002cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ccc:	4605      	mov	r5, r0
 8002cce:	0710      	lsls	r0, r2, #28
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	d457      	bmi.n	8002d84 <__sflush_r+0xbc>
 8002cd4:	684b      	ldr	r3, [r1, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	dc04      	bgt.n	8002ce4 <__sflush_r+0x1c>
 8002cda:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	dc01      	bgt.n	8002ce4 <__sflush_r+0x1c>
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ce4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ce6:	2e00      	cmp	r6, #0
 8002ce8:	d0fa      	beq.n	8002ce0 <__sflush_r+0x18>
 8002cea:	2300      	movs	r3, #0
 8002cec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002cf0:	682f      	ldr	r7, [r5, #0]
 8002cf2:	6a21      	ldr	r1, [r4, #32]
 8002cf4:	602b      	str	r3, [r5, #0]
 8002cf6:	d032      	beq.n	8002d5e <__sflush_r+0x96>
 8002cf8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002cfa:	89a3      	ldrh	r3, [r4, #12]
 8002cfc:	075a      	lsls	r2, r3, #29
 8002cfe:	d505      	bpl.n	8002d0c <__sflush_r+0x44>
 8002d00:	6863      	ldr	r3, [r4, #4]
 8002d02:	1ac0      	subs	r0, r0, r3
 8002d04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d06:	b10b      	cbz	r3, 8002d0c <__sflush_r+0x44>
 8002d08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d0a:	1ac0      	subs	r0, r0, r3
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	4602      	mov	r2, r0
 8002d10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d12:	4628      	mov	r0, r5
 8002d14:	6a21      	ldr	r1, [r4, #32]
 8002d16:	47b0      	blx	r6
 8002d18:	1c43      	adds	r3, r0, #1
 8002d1a:	89a3      	ldrh	r3, [r4, #12]
 8002d1c:	d106      	bne.n	8002d2c <__sflush_r+0x64>
 8002d1e:	6829      	ldr	r1, [r5, #0]
 8002d20:	291d      	cmp	r1, #29
 8002d22:	d82b      	bhi.n	8002d7c <__sflush_r+0xb4>
 8002d24:	4a28      	ldr	r2, [pc, #160]	; (8002dc8 <__sflush_r+0x100>)
 8002d26:	410a      	asrs	r2, r1
 8002d28:	07d6      	lsls	r6, r2, #31
 8002d2a:	d427      	bmi.n	8002d7c <__sflush_r+0xb4>
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	6062      	str	r2, [r4, #4]
 8002d30:	6922      	ldr	r2, [r4, #16]
 8002d32:	04d9      	lsls	r1, r3, #19
 8002d34:	6022      	str	r2, [r4, #0]
 8002d36:	d504      	bpl.n	8002d42 <__sflush_r+0x7a>
 8002d38:	1c42      	adds	r2, r0, #1
 8002d3a:	d101      	bne.n	8002d40 <__sflush_r+0x78>
 8002d3c:	682b      	ldr	r3, [r5, #0]
 8002d3e:	b903      	cbnz	r3, 8002d42 <__sflush_r+0x7a>
 8002d40:	6560      	str	r0, [r4, #84]	; 0x54
 8002d42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d44:	602f      	str	r7, [r5, #0]
 8002d46:	2900      	cmp	r1, #0
 8002d48:	d0ca      	beq.n	8002ce0 <__sflush_r+0x18>
 8002d4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d4e:	4299      	cmp	r1, r3
 8002d50:	d002      	beq.n	8002d58 <__sflush_r+0x90>
 8002d52:	4628      	mov	r0, r5
 8002d54:	f7ff febc 	bl	8002ad0 <_free_r>
 8002d58:	2000      	movs	r0, #0
 8002d5a:	6360      	str	r0, [r4, #52]	; 0x34
 8002d5c:	e7c1      	b.n	8002ce2 <__sflush_r+0x1a>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4628      	mov	r0, r5
 8002d62:	47b0      	blx	r6
 8002d64:	1c41      	adds	r1, r0, #1
 8002d66:	d1c8      	bne.n	8002cfa <__sflush_r+0x32>
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0c5      	beq.n	8002cfa <__sflush_r+0x32>
 8002d6e:	2b1d      	cmp	r3, #29
 8002d70:	d001      	beq.n	8002d76 <__sflush_r+0xae>
 8002d72:	2b16      	cmp	r3, #22
 8002d74:	d101      	bne.n	8002d7a <__sflush_r+0xb2>
 8002d76:	602f      	str	r7, [r5, #0]
 8002d78:	e7b2      	b.n	8002ce0 <__sflush_r+0x18>
 8002d7a:	89a3      	ldrh	r3, [r4, #12]
 8002d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d80:	81a3      	strh	r3, [r4, #12]
 8002d82:	e7ae      	b.n	8002ce2 <__sflush_r+0x1a>
 8002d84:	690f      	ldr	r7, [r1, #16]
 8002d86:	2f00      	cmp	r7, #0
 8002d88:	d0aa      	beq.n	8002ce0 <__sflush_r+0x18>
 8002d8a:	0793      	lsls	r3, r2, #30
 8002d8c:	bf18      	it	ne
 8002d8e:	2300      	movne	r3, #0
 8002d90:	680e      	ldr	r6, [r1, #0]
 8002d92:	bf08      	it	eq
 8002d94:	694b      	ldreq	r3, [r1, #20]
 8002d96:	1bf6      	subs	r6, r6, r7
 8002d98:	600f      	str	r7, [r1, #0]
 8002d9a:	608b      	str	r3, [r1, #8]
 8002d9c:	2e00      	cmp	r6, #0
 8002d9e:	dd9f      	ble.n	8002ce0 <__sflush_r+0x18>
 8002da0:	4633      	mov	r3, r6
 8002da2:	463a      	mov	r2, r7
 8002da4:	4628      	mov	r0, r5
 8002da6:	6a21      	ldr	r1, [r4, #32]
 8002da8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002dac:	47e0      	blx	ip
 8002dae:	2800      	cmp	r0, #0
 8002db0:	dc06      	bgt.n	8002dc0 <__sflush_r+0xf8>
 8002db2:	89a3      	ldrh	r3, [r4, #12]
 8002db4:	f04f 30ff 	mov.w	r0, #4294967295
 8002db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dbc:	81a3      	strh	r3, [r4, #12]
 8002dbe:	e790      	b.n	8002ce2 <__sflush_r+0x1a>
 8002dc0:	4407      	add	r7, r0
 8002dc2:	1a36      	subs	r6, r6, r0
 8002dc4:	e7ea      	b.n	8002d9c <__sflush_r+0xd4>
 8002dc6:	bf00      	nop
 8002dc8:	dfbffffe 	.word	0xdfbffffe

08002dcc <_fflush_r>:
 8002dcc:	b538      	push	{r3, r4, r5, lr}
 8002dce:	690b      	ldr	r3, [r1, #16]
 8002dd0:	4605      	mov	r5, r0
 8002dd2:	460c      	mov	r4, r1
 8002dd4:	b913      	cbnz	r3, 8002ddc <_fflush_r+0x10>
 8002dd6:	2500      	movs	r5, #0
 8002dd8:	4628      	mov	r0, r5
 8002dda:	bd38      	pop	{r3, r4, r5, pc}
 8002ddc:	b118      	cbz	r0, 8002de6 <_fflush_r+0x1a>
 8002dde:	6a03      	ldr	r3, [r0, #32]
 8002de0:	b90b      	cbnz	r3, 8002de6 <_fflush_r+0x1a>
 8002de2:	f7ff fd61 	bl	80028a8 <__sinit>
 8002de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f3      	beq.n	8002dd6 <_fflush_r+0xa>
 8002dee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002df0:	07d0      	lsls	r0, r2, #31
 8002df2:	d404      	bmi.n	8002dfe <_fflush_r+0x32>
 8002df4:	0599      	lsls	r1, r3, #22
 8002df6:	d402      	bmi.n	8002dfe <_fflush_r+0x32>
 8002df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dfa:	f7ff fe48 	bl	8002a8e <__retarget_lock_acquire_recursive>
 8002dfe:	4628      	mov	r0, r5
 8002e00:	4621      	mov	r1, r4
 8002e02:	f7ff ff61 	bl	8002cc8 <__sflush_r>
 8002e06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e08:	4605      	mov	r5, r0
 8002e0a:	07da      	lsls	r2, r3, #31
 8002e0c:	d4e4      	bmi.n	8002dd8 <_fflush_r+0xc>
 8002e0e:	89a3      	ldrh	r3, [r4, #12]
 8002e10:	059b      	lsls	r3, r3, #22
 8002e12:	d4e1      	bmi.n	8002dd8 <_fflush_r+0xc>
 8002e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e16:	f7ff fe3b 	bl	8002a90 <__retarget_lock_release_recursive>
 8002e1a:	e7dd      	b.n	8002dd8 <_fflush_r+0xc>

08002e1c <fiprintf>:
 8002e1c:	b40e      	push	{r1, r2, r3}
 8002e1e:	b503      	push	{r0, r1, lr}
 8002e20:	4601      	mov	r1, r0
 8002e22:	ab03      	add	r3, sp, #12
 8002e24:	4805      	ldr	r0, [pc, #20]	; (8002e3c <fiprintf+0x20>)
 8002e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e2a:	6800      	ldr	r0, [r0, #0]
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	f000 f845 	bl	8002ebc <_vfiprintf_r>
 8002e32:	b002      	add	sp, #8
 8002e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e38:	b003      	add	sp, #12
 8002e3a:	4770      	bx	lr
 8002e3c:	20000064 	.word	0x20000064

08002e40 <_sbrk_r>:
 8002e40:	b538      	push	{r3, r4, r5, lr}
 8002e42:	2300      	movs	r3, #0
 8002e44:	4d05      	ldr	r5, [pc, #20]	; (8002e5c <_sbrk_r+0x1c>)
 8002e46:	4604      	mov	r4, r0
 8002e48:	4608      	mov	r0, r1
 8002e4a:	602b      	str	r3, [r5, #0]
 8002e4c:	f7fd fd40 	bl	80008d0 <_sbrk>
 8002e50:	1c43      	adds	r3, r0, #1
 8002e52:	d102      	bne.n	8002e5a <_sbrk_r+0x1a>
 8002e54:	682b      	ldr	r3, [r5, #0]
 8002e56:	b103      	cbz	r3, 8002e5a <_sbrk_r+0x1a>
 8002e58:	6023      	str	r3, [r4, #0]
 8002e5a:	bd38      	pop	{r3, r4, r5, pc}
 8002e5c:	20000244 	.word	0x20000244

08002e60 <abort>:
 8002e60:	2006      	movs	r0, #6
 8002e62:	b508      	push	{r3, lr}
 8002e64:	f000 fb96 	bl	8003594 <raise>
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f7fd fcbe 	bl	80007ea <_exit>

08002e6e <__sfputc_r>:
 8002e6e:	6893      	ldr	r3, [r2, #8]
 8002e70:	b410      	push	{r4}
 8002e72:	3b01      	subs	r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	6093      	str	r3, [r2, #8]
 8002e78:	da07      	bge.n	8002e8a <__sfputc_r+0x1c>
 8002e7a:	6994      	ldr	r4, [r2, #24]
 8002e7c:	42a3      	cmp	r3, r4
 8002e7e:	db01      	blt.n	8002e84 <__sfputc_r+0x16>
 8002e80:	290a      	cmp	r1, #10
 8002e82:	d102      	bne.n	8002e8a <__sfputc_r+0x1c>
 8002e84:	bc10      	pop	{r4}
 8002e86:	f000 bac7 	b.w	8003418 <__swbuf_r>
 8002e8a:	6813      	ldr	r3, [r2, #0]
 8002e8c:	1c58      	adds	r0, r3, #1
 8002e8e:	6010      	str	r0, [r2, #0]
 8002e90:	7019      	strb	r1, [r3, #0]
 8002e92:	4608      	mov	r0, r1
 8002e94:	bc10      	pop	{r4}
 8002e96:	4770      	bx	lr

08002e98 <__sfputs_r>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	4606      	mov	r6, r0
 8002e9c:	460f      	mov	r7, r1
 8002e9e:	4614      	mov	r4, r2
 8002ea0:	18d5      	adds	r5, r2, r3
 8002ea2:	42ac      	cmp	r4, r5
 8002ea4:	d101      	bne.n	8002eaa <__sfputs_r+0x12>
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	e007      	b.n	8002eba <__sfputs_r+0x22>
 8002eaa:	463a      	mov	r2, r7
 8002eac:	4630      	mov	r0, r6
 8002eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eb2:	f7ff ffdc 	bl	8002e6e <__sfputc_r>
 8002eb6:	1c43      	adds	r3, r0, #1
 8002eb8:	d1f3      	bne.n	8002ea2 <__sfputs_r+0xa>
 8002eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ebc <_vfiprintf_r>:
 8002ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ec0:	460d      	mov	r5, r1
 8002ec2:	4614      	mov	r4, r2
 8002ec4:	4698      	mov	r8, r3
 8002ec6:	4606      	mov	r6, r0
 8002ec8:	b09d      	sub	sp, #116	; 0x74
 8002eca:	b118      	cbz	r0, 8002ed4 <_vfiprintf_r+0x18>
 8002ecc:	6a03      	ldr	r3, [r0, #32]
 8002ece:	b90b      	cbnz	r3, 8002ed4 <_vfiprintf_r+0x18>
 8002ed0:	f7ff fcea 	bl	80028a8 <__sinit>
 8002ed4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ed6:	07d9      	lsls	r1, r3, #31
 8002ed8:	d405      	bmi.n	8002ee6 <_vfiprintf_r+0x2a>
 8002eda:	89ab      	ldrh	r3, [r5, #12]
 8002edc:	059a      	lsls	r2, r3, #22
 8002ede:	d402      	bmi.n	8002ee6 <_vfiprintf_r+0x2a>
 8002ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ee2:	f7ff fdd4 	bl	8002a8e <__retarget_lock_acquire_recursive>
 8002ee6:	89ab      	ldrh	r3, [r5, #12]
 8002ee8:	071b      	lsls	r3, r3, #28
 8002eea:	d501      	bpl.n	8002ef0 <_vfiprintf_r+0x34>
 8002eec:	692b      	ldr	r3, [r5, #16]
 8002eee:	b99b      	cbnz	r3, 8002f18 <_vfiprintf_r+0x5c>
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f000 face 	bl	8003494 <__swsetup_r>
 8002ef8:	b170      	cbz	r0, 8002f18 <_vfiprintf_r+0x5c>
 8002efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002efc:	07dc      	lsls	r4, r3, #31
 8002efe:	d504      	bpl.n	8002f0a <_vfiprintf_r+0x4e>
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295
 8002f04:	b01d      	add	sp, #116	; 0x74
 8002f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f0a:	89ab      	ldrh	r3, [r5, #12]
 8002f0c:	0598      	lsls	r0, r3, #22
 8002f0e:	d4f7      	bmi.n	8002f00 <_vfiprintf_r+0x44>
 8002f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f12:	f7ff fdbd 	bl	8002a90 <__retarget_lock_release_recursive>
 8002f16:	e7f3      	b.n	8002f00 <_vfiprintf_r+0x44>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f22:	2330      	movs	r3, #48	; 0x30
 8002f24:	f04f 0901 	mov.w	r9, #1
 8002f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80030dc <_vfiprintf_r+0x220>
 8002f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f34:	4623      	mov	r3, r4
 8002f36:	469a      	mov	sl, r3
 8002f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f3c:	b10a      	cbz	r2, 8002f42 <_vfiprintf_r+0x86>
 8002f3e:	2a25      	cmp	r2, #37	; 0x25
 8002f40:	d1f9      	bne.n	8002f36 <_vfiprintf_r+0x7a>
 8002f42:	ebba 0b04 	subs.w	fp, sl, r4
 8002f46:	d00b      	beq.n	8002f60 <_vfiprintf_r+0xa4>
 8002f48:	465b      	mov	r3, fp
 8002f4a:	4622      	mov	r2, r4
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	4630      	mov	r0, r6
 8002f50:	f7ff ffa2 	bl	8002e98 <__sfputs_r>
 8002f54:	3001      	adds	r0, #1
 8002f56:	f000 80a9 	beq.w	80030ac <_vfiprintf_r+0x1f0>
 8002f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f5c:	445a      	add	r2, fp
 8002f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8002f60:	f89a 3000 	ldrb.w	r3, [sl]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80a1 	beq.w	80030ac <_vfiprintf_r+0x1f0>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f74:	f10a 0a01 	add.w	sl, sl, #1
 8002f78:	9304      	str	r3, [sp, #16]
 8002f7a:	9307      	str	r3, [sp, #28]
 8002f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f80:	931a      	str	r3, [sp, #104]	; 0x68
 8002f82:	4654      	mov	r4, sl
 8002f84:	2205      	movs	r2, #5
 8002f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f8a:	4854      	ldr	r0, [pc, #336]	; (80030dc <_vfiprintf_r+0x220>)
 8002f8c:	f000 fb1e 	bl	80035cc <memchr>
 8002f90:	9a04      	ldr	r2, [sp, #16]
 8002f92:	b9d8      	cbnz	r0, 8002fcc <_vfiprintf_r+0x110>
 8002f94:	06d1      	lsls	r1, r2, #27
 8002f96:	bf44      	itt	mi
 8002f98:	2320      	movmi	r3, #32
 8002f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f9e:	0713      	lsls	r3, r2, #28
 8002fa0:	bf44      	itt	mi
 8002fa2:	232b      	movmi	r3, #43	; 0x2b
 8002fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8002fac:	2b2a      	cmp	r3, #42	; 0x2a
 8002fae:	d015      	beq.n	8002fdc <_vfiprintf_r+0x120>
 8002fb0:	4654      	mov	r4, sl
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f04f 0c0a 	mov.w	ip, #10
 8002fb8:	9a07      	ldr	r2, [sp, #28]
 8002fba:	4621      	mov	r1, r4
 8002fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fc0:	3b30      	subs	r3, #48	; 0x30
 8002fc2:	2b09      	cmp	r3, #9
 8002fc4:	d94d      	bls.n	8003062 <_vfiprintf_r+0x1a6>
 8002fc6:	b1b0      	cbz	r0, 8002ff6 <_vfiprintf_r+0x13a>
 8002fc8:	9207      	str	r2, [sp, #28]
 8002fca:	e014      	b.n	8002ff6 <_vfiprintf_r+0x13a>
 8002fcc:	eba0 0308 	sub.w	r3, r0, r8
 8002fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	46a2      	mov	sl, r4
 8002fd8:	9304      	str	r3, [sp, #16]
 8002fda:	e7d2      	b.n	8002f82 <_vfiprintf_r+0xc6>
 8002fdc:	9b03      	ldr	r3, [sp, #12]
 8002fde:	1d19      	adds	r1, r3, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	9103      	str	r1, [sp, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bfbb      	ittet	lt
 8002fe8:	425b      	neglt	r3, r3
 8002fea:	f042 0202 	orrlt.w	r2, r2, #2
 8002fee:	9307      	strge	r3, [sp, #28]
 8002ff0:	9307      	strlt	r3, [sp, #28]
 8002ff2:	bfb8      	it	lt
 8002ff4:	9204      	strlt	r2, [sp, #16]
 8002ff6:	7823      	ldrb	r3, [r4, #0]
 8002ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8002ffa:	d10c      	bne.n	8003016 <_vfiprintf_r+0x15a>
 8002ffc:	7863      	ldrb	r3, [r4, #1]
 8002ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8003000:	d134      	bne.n	800306c <_vfiprintf_r+0x1b0>
 8003002:	9b03      	ldr	r3, [sp, #12]
 8003004:	3402      	adds	r4, #2
 8003006:	1d1a      	adds	r2, r3, #4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	9203      	str	r2, [sp, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	bfb8      	it	lt
 8003010:	f04f 33ff 	movlt.w	r3, #4294967295
 8003014:	9305      	str	r3, [sp, #20]
 8003016:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80030e0 <_vfiprintf_r+0x224>
 800301a:	2203      	movs	r2, #3
 800301c:	4650      	mov	r0, sl
 800301e:	7821      	ldrb	r1, [r4, #0]
 8003020:	f000 fad4 	bl	80035cc <memchr>
 8003024:	b138      	cbz	r0, 8003036 <_vfiprintf_r+0x17a>
 8003026:	2240      	movs	r2, #64	; 0x40
 8003028:	9b04      	ldr	r3, [sp, #16]
 800302a:	eba0 000a 	sub.w	r0, r0, sl
 800302e:	4082      	lsls	r2, r0
 8003030:	4313      	orrs	r3, r2
 8003032:	3401      	adds	r4, #1
 8003034:	9304      	str	r3, [sp, #16]
 8003036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800303a:	2206      	movs	r2, #6
 800303c:	4829      	ldr	r0, [pc, #164]	; (80030e4 <_vfiprintf_r+0x228>)
 800303e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003042:	f000 fac3 	bl	80035cc <memchr>
 8003046:	2800      	cmp	r0, #0
 8003048:	d03f      	beq.n	80030ca <_vfiprintf_r+0x20e>
 800304a:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <_vfiprintf_r+0x22c>)
 800304c:	bb1b      	cbnz	r3, 8003096 <_vfiprintf_r+0x1da>
 800304e:	9b03      	ldr	r3, [sp, #12]
 8003050:	3307      	adds	r3, #7
 8003052:	f023 0307 	bic.w	r3, r3, #7
 8003056:	3308      	adds	r3, #8
 8003058:	9303      	str	r3, [sp, #12]
 800305a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800305c:	443b      	add	r3, r7
 800305e:	9309      	str	r3, [sp, #36]	; 0x24
 8003060:	e768      	b.n	8002f34 <_vfiprintf_r+0x78>
 8003062:	460c      	mov	r4, r1
 8003064:	2001      	movs	r0, #1
 8003066:	fb0c 3202 	mla	r2, ip, r2, r3
 800306a:	e7a6      	b.n	8002fba <_vfiprintf_r+0xfe>
 800306c:	2300      	movs	r3, #0
 800306e:	f04f 0c0a 	mov.w	ip, #10
 8003072:	4619      	mov	r1, r3
 8003074:	3401      	adds	r4, #1
 8003076:	9305      	str	r3, [sp, #20]
 8003078:	4620      	mov	r0, r4
 800307a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800307e:	3a30      	subs	r2, #48	; 0x30
 8003080:	2a09      	cmp	r2, #9
 8003082:	d903      	bls.n	800308c <_vfiprintf_r+0x1d0>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0c6      	beq.n	8003016 <_vfiprintf_r+0x15a>
 8003088:	9105      	str	r1, [sp, #20]
 800308a:	e7c4      	b.n	8003016 <_vfiprintf_r+0x15a>
 800308c:	4604      	mov	r4, r0
 800308e:	2301      	movs	r3, #1
 8003090:	fb0c 2101 	mla	r1, ip, r1, r2
 8003094:	e7f0      	b.n	8003078 <_vfiprintf_r+0x1bc>
 8003096:	ab03      	add	r3, sp, #12
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	462a      	mov	r2, r5
 800309c:	4630      	mov	r0, r6
 800309e:	4b13      	ldr	r3, [pc, #76]	; (80030ec <_vfiprintf_r+0x230>)
 80030a0:	a904      	add	r1, sp, #16
 80030a2:	f3af 8000 	nop.w
 80030a6:	4607      	mov	r7, r0
 80030a8:	1c78      	adds	r0, r7, #1
 80030aa:	d1d6      	bne.n	800305a <_vfiprintf_r+0x19e>
 80030ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030ae:	07d9      	lsls	r1, r3, #31
 80030b0:	d405      	bmi.n	80030be <_vfiprintf_r+0x202>
 80030b2:	89ab      	ldrh	r3, [r5, #12]
 80030b4:	059a      	lsls	r2, r3, #22
 80030b6:	d402      	bmi.n	80030be <_vfiprintf_r+0x202>
 80030b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030ba:	f7ff fce9 	bl	8002a90 <__retarget_lock_release_recursive>
 80030be:	89ab      	ldrh	r3, [r5, #12]
 80030c0:	065b      	lsls	r3, r3, #25
 80030c2:	f53f af1d 	bmi.w	8002f00 <_vfiprintf_r+0x44>
 80030c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030c8:	e71c      	b.n	8002f04 <_vfiprintf_r+0x48>
 80030ca:	ab03      	add	r3, sp, #12
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	462a      	mov	r2, r5
 80030d0:	4630      	mov	r0, r6
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <_vfiprintf_r+0x230>)
 80030d4:	a904      	add	r1, sp, #16
 80030d6:	f000 f87d 	bl	80031d4 <_printf_i>
 80030da:	e7e4      	b.n	80030a6 <_vfiprintf_r+0x1ea>
 80030dc:	080037dd 	.word	0x080037dd
 80030e0:	080037e3 	.word	0x080037e3
 80030e4:	080037e7 	.word	0x080037e7
 80030e8:	00000000 	.word	0x00000000
 80030ec:	08002e99 	.word	0x08002e99

080030f0 <_printf_common>:
 80030f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f4:	4616      	mov	r6, r2
 80030f6:	4699      	mov	r9, r3
 80030f8:	688a      	ldr	r2, [r1, #8]
 80030fa:	690b      	ldr	r3, [r1, #16]
 80030fc:	4607      	mov	r7, r0
 80030fe:	4293      	cmp	r3, r2
 8003100:	bfb8      	it	lt
 8003102:	4613      	movlt	r3, r2
 8003104:	6033      	str	r3, [r6, #0]
 8003106:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800310a:	460c      	mov	r4, r1
 800310c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003110:	b10a      	cbz	r2, 8003116 <_printf_common+0x26>
 8003112:	3301      	adds	r3, #1
 8003114:	6033      	str	r3, [r6, #0]
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	0699      	lsls	r1, r3, #26
 800311a:	bf42      	ittt	mi
 800311c:	6833      	ldrmi	r3, [r6, #0]
 800311e:	3302      	addmi	r3, #2
 8003120:	6033      	strmi	r3, [r6, #0]
 8003122:	6825      	ldr	r5, [r4, #0]
 8003124:	f015 0506 	ands.w	r5, r5, #6
 8003128:	d106      	bne.n	8003138 <_printf_common+0x48>
 800312a:	f104 0a19 	add.w	sl, r4, #25
 800312e:	68e3      	ldr	r3, [r4, #12]
 8003130:	6832      	ldr	r2, [r6, #0]
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	42ab      	cmp	r3, r5
 8003136:	dc2b      	bgt.n	8003190 <_printf_common+0xa0>
 8003138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800313c:	1e13      	subs	r3, r2, #0
 800313e:	6822      	ldr	r2, [r4, #0]
 8003140:	bf18      	it	ne
 8003142:	2301      	movne	r3, #1
 8003144:	0692      	lsls	r2, r2, #26
 8003146:	d430      	bmi.n	80031aa <_printf_common+0xba>
 8003148:	4649      	mov	r1, r9
 800314a:	4638      	mov	r0, r7
 800314c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003150:	47c0      	blx	r8
 8003152:	3001      	adds	r0, #1
 8003154:	d023      	beq.n	800319e <_printf_common+0xae>
 8003156:	6823      	ldr	r3, [r4, #0]
 8003158:	6922      	ldr	r2, [r4, #16]
 800315a:	f003 0306 	and.w	r3, r3, #6
 800315e:	2b04      	cmp	r3, #4
 8003160:	bf14      	ite	ne
 8003162:	2500      	movne	r5, #0
 8003164:	6833      	ldreq	r3, [r6, #0]
 8003166:	f04f 0600 	mov.w	r6, #0
 800316a:	bf08      	it	eq
 800316c:	68e5      	ldreq	r5, [r4, #12]
 800316e:	f104 041a 	add.w	r4, r4, #26
 8003172:	bf08      	it	eq
 8003174:	1aed      	subeq	r5, r5, r3
 8003176:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800317a:	bf08      	it	eq
 800317c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003180:	4293      	cmp	r3, r2
 8003182:	bfc4      	itt	gt
 8003184:	1a9b      	subgt	r3, r3, r2
 8003186:	18ed      	addgt	r5, r5, r3
 8003188:	42b5      	cmp	r5, r6
 800318a:	d11a      	bne.n	80031c2 <_printf_common+0xd2>
 800318c:	2000      	movs	r0, #0
 800318e:	e008      	b.n	80031a2 <_printf_common+0xb2>
 8003190:	2301      	movs	r3, #1
 8003192:	4652      	mov	r2, sl
 8003194:	4649      	mov	r1, r9
 8003196:	4638      	mov	r0, r7
 8003198:	47c0      	blx	r8
 800319a:	3001      	adds	r0, #1
 800319c:	d103      	bne.n	80031a6 <_printf_common+0xb6>
 800319e:	f04f 30ff 	mov.w	r0, #4294967295
 80031a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a6:	3501      	adds	r5, #1
 80031a8:	e7c1      	b.n	800312e <_printf_common+0x3e>
 80031aa:	2030      	movs	r0, #48	; 0x30
 80031ac:	18e1      	adds	r1, r4, r3
 80031ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031b8:	4422      	add	r2, r4
 80031ba:	3302      	adds	r3, #2
 80031bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031c0:	e7c2      	b.n	8003148 <_printf_common+0x58>
 80031c2:	2301      	movs	r3, #1
 80031c4:	4622      	mov	r2, r4
 80031c6:	4649      	mov	r1, r9
 80031c8:	4638      	mov	r0, r7
 80031ca:	47c0      	blx	r8
 80031cc:	3001      	adds	r0, #1
 80031ce:	d0e6      	beq.n	800319e <_printf_common+0xae>
 80031d0:	3601      	adds	r6, #1
 80031d2:	e7d9      	b.n	8003188 <_printf_common+0x98>

080031d4 <_printf_i>:
 80031d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031d8:	7e0f      	ldrb	r7, [r1, #24]
 80031da:	4691      	mov	r9, r2
 80031dc:	2f78      	cmp	r7, #120	; 0x78
 80031de:	4680      	mov	r8, r0
 80031e0:	460c      	mov	r4, r1
 80031e2:	469a      	mov	sl, r3
 80031e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80031ea:	d807      	bhi.n	80031fc <_printf_i+0x28>
 80031ec:	2f62      	cmp	r7, #98	; 0x62
 80031ee:	d80a      	bhi.n	8003206 <_printf_i+0x32>
 80031f0:	2f00      	cmp	r7, #0
 80031f2:	f000 80d5 	beq.w	80033a0 <_printf_i+0x1cc>
 80031f6:	2f58      	cmp	r7, #88	; 0x58
 80031f8:	f000 80c1 	beq.w	800337e <_printf_i+0x1aa>
 80031fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003204:	e03a      	b.n	800327c <_printf_i+0xa8>
 8003206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800320a:	2b15      	cmp	r3, #21
 800320c:	d8f6      	bhi.n	80031fc <_printf_i+0x28>
 800320e:	a101      	add	r1, pc, #4	; (adr r1, 8003214 <_printf_i+0x40>)
 8003210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003214:	0800326d 	.word	0x0800326d
 8003218:	08003281 	.word	0x08003281
 800321c:	080031fd 	.word	0x080031fd
 8003220:	080031fd 	.word	0x080031fd
 8003224:	080031fd 	.word	0x080031fd
 8003228:	080031fd 	.word	0x080031fd
 800322c:	08003281 	.word	0x08003281
 8003230:	080031fd 	.word	0x080031fd
 8003234:	080031fd 	.word	0x080031fd
 8003238:	080031fd 	.word	0x080031fd
 800323c:	080031fd 	.word	0x080031fd
 8003240:	08003387 	.word	0x08003387
 8003244:	080032ad 	.word	0x080032ad
 8003248:	08003341 	.word	0x08003341
 800324c:	080031fd 	.word	0x080031fd
 8003250:	080031fd 	.word	0x080031fd
 8003254:	080033a9 	.word	0x080033a9
 8003258:	080031fd 	.word	0x080031fd
 800325c:	080032ad 	.word	0x080032ad
 8003260:	080031fd 	.word	0x080031fd
 8003264:	080031fd 	.word	0x080031fd
 8003268:	08003349 	.word	0x08003349
 800326c:	682b      	ldr	r3, [r5, #0]
 800326e:	1d1a      	adds	r2, r3, #4
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	602a      	str	r2, [r5, #0]
 8003274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800327c:	2301      	movs	r3, #1
 800327e:	e0a0      	b.n	80033c2 <_printf_i+0x1ee>
 8003280:	6820      	ldr	r0, [r4, #0]
 8003282:	682b      	ldr	r3, [r5, #0]
 8003284:	0607      	lsls	r7, r0, #24
 8003286:	f103 0104 	add.w	r1, r3, #4
 800328a:	6029      	str	r1, [r5, #0]
 800328c:	d501      	bpl.n	8003292 <_printf_i+0xbe>
 800328e:	681e      	ldr	r6, [r3, #0]
 8003290:	e003      	b.n	800329a <_printf_i+0xc6>
 8003292:	0646      	lsls	r6, r0, #25
 8003294:	d5fb      	bpl.n	800328e <_printf_i+0xba>
 8003296:	f9b3 6000 	ldrsh.w	r6, [r3]
 800329a:	2e00      	cmp	r6, #0
 800329c:	da03      	bge.n	80032a6 <_printf_i+0xd2>
 800329e:	232d      	movs	r3, #45	; 0x2d
 80032a0:	4276      	negs	r6, r6
 80032a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032a6:	230a      	movs	r3, #10
 80032a8:	4859      	ldr	r0, [pc, #356]	; (8003410 <_printf_i+0x23c>)
 80032aa:	e012      	b.n	80032d2 <_printf_i+0xfe>
 80032ac:	682b      	ldr	r3, [r5, #0]
 80032ae:	6820      	ldr	r0, [r4, #0]
 80032b0:	1d19      	adds	r1, r3, #4
 80032b2:	6029      	str	r1, [r5, #0]
 80032b4:	0605      	lsls	r5, r0, #24
 80032b6:	d501      	bpl.n	80032bc <_printf_i+0xe8>
 80032b8:	681e      	ldr	r6, [r3, #0]
 80032ba:	e002      	b.n	80032c2 <_printf_i+0xee>
 80032bc:	0641      	lsls	r1, r0, #25
 80032be:	d5fb      	bpl.n	80032b8 <_printf_i+0xe4>
 80032c0:	881e      	ldrh	r6, [r3, #0]
 80032c2:	2f6f      	cmp	r7, #111	; 0x6f
 80032c4:	bf0c      	ite	eq
 80032c6:	2308      	moveq	r3, #8
 80032c8:	230a      	movne	r3, #10
 80032ca:	4851      	ldr	r0, [pc, #324]	; (8003410 <_printf_i+0x23c>)
 80032cc:	2100      	movs	r1, #0
 80032ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032d2:	6865      	ldr	r5, [r4, #4]
 80032d4:	2d00      	cmp	r5, #0
 80032d6:	bfa8      	it	ge
 80032d8:	6821      	ldrge	r1, [r4, #0]
 80032da:	60a5      	str	r5, [r4, #8]
 80032dc:	bfa4      	itt	ge
 80032de:	f021 0104 	bicge.w	r1, r1, #4
 80032e2:	6021      	strge	r1, [r4, #0]
 80032e4:	b90e      	cbnz	r6, 80032ea <_printf_i+0x116>
 80032e6:	2d00      	cmp	r5, #0
 80032e8:	d04b      	beq.n	8003382 <_printf_i+0x1ae>
 80032ea:	4615      	mov	r5, r2
 80032ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80032f0:	fb03 6711 	mls	r7, r3, r1, r6
 80032f4:	5dc7      	ldrb	r7, [r0, r7]
 80032f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80032fa:	4637      	mov	r7, r6
 80032fc:	42bb      	cmp	r3, r7
 80032fe:	460e      	mov	r6, r1
 8003300:	d9f4      	bls.n	80032ec <_printf_i+0x118>
 8003302:	2b08      	cmp	r3, #8
 8003304:	d10b      	bne.n	800331e <_printf_i+0x14a>
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	07de      	lsls	r6, r3, #31
 800330a:	d508      	bpl.n	800331e <_printf_i+0x14a>
 800330c:	6923      	ldr	r3, [r4, #16]
 800330e:	6861      	ldr	r1, [r4, #4]
 8003310:	4299      	cmp	r1, r3
 8003312:	bfde      	ittt	le
 8003314:	2330      	movle	r3, #48	; 0x30
 8003316:	f805 3c01 	strble.w	r3, [r5, #-1]
 800331a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800331e:	1b52      	subs	r2, r2, r5
 8003320:	6122      	str	r2, [r4, #16]
 8003322:	464b      	mov	r3, r9
 8003324:	4621      	mov	r1, r4
 8003326:	4640      	mov	r0, r8
 8003328:	f8cd a000 	str.w	sl, [sp]
 800332c:	aa03      	add	r2, sp, #12
 800332e:	f7ff fedf 	bl	80030f0 <_printf_common>
 8003332:	3001      	adds	r0, #1
 8003334:	d14a      	bne.n	80033cc <_printf_i+0x1f8>
 8003336:	f04f 30ff 	mov.w	r0, #4294967295
 800333a:	b004      	add	sp, #16
 800333c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	f043 0320 	orr.w	r3, r3, #32
 8003346:	6023      	str	r3, [r4, #0]
 8003348:	2778      	movs	r7, #120	; 0x78
 800334a:	4832      	ldr	r0, [pc, #200]	; (8003414 <_printf_i+0x240>)
 800334c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	6829      	ldr	r1, [r5, #0]
 8003354:	061f      	lsls	r7, r3, #24
 8003356:	f851 6b04 	ldr.w	r6, [r1], #4
 800335a:	d402      	bmi.n	8003362 <_printf_i+0x18e>
 800335c:	065f      	lsls	r7, r3, #25
 800335e:	bf48      	it	mi
 8003360:	b2b6      	uxthmi	r6, r6
 8003362:	07df      	lsls	r7, r3, #31
 8003364:	bf48      	it	mi
 8003366:	f043 0320 	orrmi.w	r3, r3, #32
 800336a:	6029      	str	r1, [r5, #0]
 800336c:	bf48      	it	mi
 800336e:	6023      	strmi	r3, [r4, #0]
 8003370:	b91e      	cbnz	r6, 800337a <_printf_i+0x1a6>
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	f023 0320 	bic.w	r3, r3, #32
 8003378:	6023      	str	r3, [r4, #0]
 800337a:	2310      	movs	r3, #16
 800337c:	e7a6      	b.n	80032cc <_printf_i+0xf8>
 800337e:	4824      	ldr	r0, [pc, #144]	; (8003410 <_printf_i+0x23c>)
 8003380:	e7e4      	b.n	800334c <_printf_i+0x178>
 8003382:	4615      	mov	r5, r2
 8003384:	e7bd      	b.n	8003302 <_printf_i+0x12e>
 8003386:	682b      	ldr	r3, [r5, #0]
 8003388:	6826      	ldr	r6, [r4, #0]
 800338a:	1d18      	adds	r0, r3, #4
 800338c:	6961      	ldr	r1, [r4, #20]
 800338e:	6028      	str	r0, [r5, #0]
 8003390:	0635      	lsls	r5, r6, #24
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	d501      	bpl.n	800339a <_printf_i+0x1c6>
 8003396:	6019      	str	r1, [r3, #0]
 8003398:	e002      	b.n	80033a0 <_printf_i+0x1cc>
 800339a:	0670      	lsls	r0, r6, #25
 800339c:	d5fb      	bpl.n	8003396 <_printf_i+0x1c2>
 800339e:	8019      	strh	r1, [r3, #0]
 80033a0:	2300      	movs	r3, #0
 80033a2:	4615      	mov	r5, r2
 80033a4:	6123      	str	r3, [r4, #16]
 80033a6:	e7bc      	b.n	8003322 <_printf_i+0x14e>
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	2100      	movs	r1, #0
 80033ac:	1d1a      	adds	r2, r3, #4
 80033ae:	602a      	str	r2, [r5, #0]
 80033b0:	681d      	ldr	r5, [r3, #0]
 80033b2:	6862      	ldr	r2, [r4, #4]
 80033b4:	4628      	mov	r0, r5
 80033b6:	f000 f909 	bl	80035cc <memchr>
 80033ba:	b108      	cbz	r0, 80033c0 <_printf_i+0x1ec>
 80033bc:	1b40      	subs	r0, r0, r5
 80033be:	6060      	str	r0, [r4, #4]
 80033c0:	6863      	ldr	r3, [r4, #4]
 80033c2:	6123      	str	r3, [r4, #16]
 80033c4:	2300      	movs	r3, #0
 80033c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ca:	e7aa      	b.n	8003322 <_printf_i+0x14e>
 80033cc:	462a      	mov	r2, r5
 80033ce:	4649      	mov	r1, r9
 80033d0:	4640      	mov	r0, r8
 80033d2:	6923      	ldr	r3, [r4, #16]
 80033d4:	47d0      	blx	sl
 80033d6:	3001      	adds	r0, #1
 80033d8:	d0ad      	beq.n	8003336 <_printf_i+0x162>
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	079b      	lsls	r3, r3, #30
 80033de:	d413      	bmi.n	8003408 <_printf_i+0x234>
 80033e0:	68e0      	ldr	r0, [r4, #12]
 80033e2:	9b03      	ldr	r3, [sp, #12]
 80033e4:	4298      	cmp	r0, r3
 80033e6:	bfb8      	it	lt
 80033e8:	4618      	movlt	r0, r3
 80033ea:	e7a6      	b.n	800333a <_printf_i+0x166>
 80033ec:	2301      	movs	r3, #1
 80033ee:	4632      	mov	r2, r6
 80033f0:	4649      	mov	r1, r9
 80033f2:	4640      	mov	r0, r8
 80033f4:	47d0      	blx	sl
 80033f6:	3001      	adds	r0, #1
 80033f8:	d09d      	beq.n	8003336 <_printf_i+0x162>
 80033fa:	3501      	adds	r5, #1
 80033fc:	68e3      	ldr	r3, [r4, #12]
 80033fe:	9903      	ldr	r1, [sp, #12]
 8003400:	1a5b      	subs	r3, r3, r1
 8003402:	42ab      	cmp	r3, r5
 8003404:	dcf2      	bgt.n	80033ec <_printf_i+0x218>
 8003406:	e7eb      	b.n	80033e0 <_printf_i+0x20c>
 8003408:	2500      	movs	r5, #0
 800340a:	f104 0619 	add.w	r6, r4, #25
 800340e:	e7f5      	b.n	80033fc <_printf_i+0x228>
 8003410:	080037ee 	.word	0x080037ee
 8003414:	080037ff 	.word	0x080037ff

08003418 <__swbuf_r>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	460e      	mov	r6, r1
 800341c:	4614      	mov	r4, r2
 800341e:	4605      	mov	r5, r0
 8003420:	b118      	cbz	r0, 800342a <__swbuf_r+0x12>
 8003422:	6a03      	ldr	r3, [r0, #32]
 8003424:	b90b      	cbnz	r3, 800342a <__swbuf_r+0x12>
 8003426:	f7ff fa3f 	bl	80028a8 <__sinit>
 800342a:	69a3      	ldr	r3, [r4, #24]
 800342c:	60a3      	str	r3, [r4, #8]
 800342e:	89a3      	ldrh	r3, [r4, #12]
 8003430:	071a      	lsls	r2, r3, #28
 8003432:	d525      	bpl.n	8003480 <__swbuf_r+0x68>
 8003434:	6923      	ldr	r3, [r4, #16]
 8003436:	b31b      	cbz	r3, 8003480 <__swbuf_r+0x68>
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	6922      	ldr	r2, [r4, #16]
 800343c:	b2f6      	uxtb	r6, r6
 800343e:	1a98      	subs	r0, r3, r2
 8003440:	6963      	ldr	r3, [r4, #20]
 8003442:	4637      	mov	r7, r6
 8003444:	4283      	cmp	r3, r0
 8003446:	dc04      	bgt.n	8003452 <__swbuf_r+0x3a>
 8003448:	4621      	mov	r1, r4
 800344a:	4628      	mov	r0, r5
 800344c:	f7ff fcbe 	bl	8002dcc <_fflush_r>
 8003450:	b9e0      	cbnz	r0, 800348c <__swbuf_r+0x74>
 8003452:	68a3      	ldr	r3, [r4, #8]
 8003454:	3b01      	subs	r3, #1
 8003456:	60a3      	str	r3, [r4, #8]
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	6022      	str	r2, [r4, #0]
 800345e:	701e      	strb	r6, [r3, #0]
 8003460:	6962      	ldr	r2, [r4, #20]
 8003462:	1c43      	adds	r3, r0, #1
 8003464:	429a      	cmp	r2, r3
 8003466:	d004      	beq.n	8003472 <__swbuf_r+0x5a>
 8003468:	89a3      	ldrh	r3, [r4, #12]
 800346a:	07db      	lsls	r3, r3, #31
 800346c:	d506      	bpl.n	800347c <__swbuf_r+0x64>
 800346e:	2e0a      	cmp	r6, #10
 8003470:	d104      	bne.n	800347c <__swbuf_r+0x64>
 8003472:	4621      	mov	r1, r4
 8003474:	4628      	mov	r0, r5
 8003476:	f7ff fca9 	bl	8002dcc <_fflush_r>
 800347a:	b938      	cbnz	r0, 800348c <__swbuf_r+0x74>
 800347c:	4638      	mov	r0, r7
 800347e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003480:	4621      	mov	r1, r4
 8003482:	4628      	mov	r0, r5
 8003484:	f000 f806 	bl	8003494 <__swsetup_r>
 8003488:	2800      	cmp	r0, #0
 800348a:	d0d5      	beq.n	8003438 <__swbuf_r+0x20>
 800348c:	f04f 37ff 	mov.w	r7, #4294967295
 8003490:	e7f4      	b.n	800347c <__swbuf_r+0x64>
	...

08003494 <__swsetup_r>:
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <__swsetup_r+0xac>)
 8003498:	4605      	mov	r5, r0
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	460c      	mov	r4, r1
 800349e:	b118      	cbz	r0, 80034a8 <__swsetup_r+0x14>
 80034a0:	6a03      	ldr	r3, [r0, #32]
 80034a2:	b90b      	cbnz	r3, 80034a8 <__swsetup_r+0x14>
 80034a4:	f7ff fa00 	bl	80028a8 <__sinit>
 80034a8:	89a3      	ldrh	r3, [r4, #12]
 80034aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034ae:	0718      	lsls	r0, r3, #28
 80034b0:	d422      	bmi.n	80034f8 <__swsetup_r+0x64>
 80034b2:	06d9      	lsls	r1, r3, #27
 80034b4:	d407      	bmi.n	80034c6 <__swsetup_r+0x32>
 80034b6:	2309      	movs	r3, #9
 80034b8:	602b      	str	r3, [r5, #0]
 80034ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034be:	f04f 30ff 	mov.w	r0, #4294967295
 80034c2:	81a3      	strh	r3, [r4, #12]
 80034c4:	e034      	b.n	8003530 <__swsetup_r+0x9c>
 80034c6:	0758      	lsls	r0, r3, #29
 80034c8:	d512      	bpl.n	80034f0 <__swsetup_r+0x5c>
 80034ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034cc:	b141      	cbz	r1, 80034e0 <__swsetup_r+0x4c>
 80034ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034d2:	4299      	cmp	r1, r3
 80034d4:	d002      	beq.n	80034dc <__swsetup_r+0x48>
 80034d6:	4628      	mov	r0, r5
 80034d8:	f7ff fafa 	bl	8002ad0 <_free_r>
 80034dc:	2300      	movs	r3, #0
 80034de:	6363      	str	r3, [r4, #52]	; 0x34
 80034e0:	89a3      	ldrh	r3, [r4, #12]
 80034e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034e6:	81a3      	strh	r3, [r4, #12]
 80034e8:	2300      	movs	r3, #0
 80034ea:	6063      	str	r3, [r4, #4]
 80034ec:	6923      	ldr	r3, [r4, #16]
 80034ee:	6023      	str	r3, [r4, #0]
 80034f0:	89a3      	ldrh	r3, [r4, #12]
 80034f2:	f043 0308 	orr.w	r3, r3, #8
 80034f6:	81a3      	strh	r3, [r4, #12]
 80034f8:	6923      	ldr	r3, [r4, #16]
 80034fa:	b94b      	cbnz	r3, 8003510 <__swsetup_r+0x7c>
 80034fc:	89a3      	ldrh	r3, [r4, #12]
 80034fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003506:	d003      	beq.n	8003510 <__swsetup_r+0x7c>
 8003508:	4621      	mov	r1, r4
 800350a:	4628      	mov	r0, r5
 800350c:	f000 f891 	bl	8003632 <__smakebuf_r>
 8003510:	89a0      	ldrh	r0, [r4, #12]
 8003512:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003516:	f010 0301 	ands.w	r3, r0, #1
 800351a:	d00a      	beq.n	8003532 <__swsetup_r+0x9e>
 800351c:	2300      	movs	r3, #0
 800351e:	60a3      	str	r3, [r4, #8]
 8003520:	6963      	ldr	r3, [r4, #20]
 8003522:	425b      	negs	r3, r3
 8003524:	61a3      	str	r3, [r4, #24]
 8003526:	6923      	ldr	r3, [r4, #16]
 8003528:	b943      	cbnz	r3, 800353c <__swsetup_r+0xa8>
 800352a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800352e:	d1c4      	bne.n	80034ba <__swsetup_r+0x26>
 8003530:	bd38      	pop	{r3, r4, r5, pc}
 8003532:	0781      	lsls	r1, r0, #30
 8003534:	bf58      	it	pl
 8003536:	6963      	ldrpl	r3, [r4, #20]
 8003538:	60a3      	str	r3, [r4, #8]
 800353a:	e7f4      	b.n	8003526 <__swsetup_r+0x92>
 800353c:	2000      	movs	r0, #0
 800353e:	e7f7      	b.n	8003530 <__swsetup_r+0x9c>
 8003540:	20000064 	.word	0x20000064

08003544 <_raise_r>:
 8003544:	291f      	cmp	r1, #31
 8003546:	b538      	push	{r3, r4, r5, lr}
 8003548:	4604      	mov	r4, r0
 800354a:	460d      	mov	r5, r1
 800354c:	d904      	bls.n	8003558 <_raise_r+0x14>
 800354e:	2316      	movs	r3, #22
 8003550:	6003      	str	r3, [r0, #0]
 8003552:	f04f 30ff 	mov.w	r0, #4294967295
 8003556:	bd38      	pop	{r3, r4, r5, pc}
 8003558:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800355a:	b112      	cbz	r2, 8003562 <_raise_r+0x1e>
 800355c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003560:	b94b      	cbnz	r3, 8003576 <_raise_r+0x32>
 8003562:	4620      	mov	r0, r4
 8003564:	f000 f830 	bl	80035c8 <_getpid_r>
 8003568:	462a      	mov	r2, r5
 800356a:	4601      	mov	r1, r0
 800356c:	4620      	mov	r0, r4
 800356e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003572:	f000 b817 	b.w	80035a4 <_kill_r>
 8003576:	2b01      	cmp	r3, #1
 8003578:	d00a      	beq.n	8003590 <_raise_r+0x4c>
 800357a:	1c59      	adds	r1, r3, #1
 800357c:	d103      	bne.n	8003586 <_raise_r+0x42>
 800357e:	2316      	movs	r3, #22
 8003580:	6003      	str	r3, [r0, #0]
 8003582:	2001      	movs	r0, #1
 8003584:	e7e7      	b.n	8003556 <_raise_r+0x12>
 8003586:	2400      	movs	r4, #0
 8003588:	4628      	mov	r0, r5
 800358a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800358e:	4798      	blx	r3
 8003590:	2000      	movs	r0, #0
 8003592:	e7e0      	b.n	8003556 <_raise_r+0x12>

08003594 <raise>:
 8003594:	4b02      	ldr	r3, [pc, #8]	; (80035a0 <raise+0xc>)
 8003596:	4601      	mov	r1, r0
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	f7ff bfd3 	b.w	8003544 <_raise_r>
 800359e:	bf00      	nop
 80035a0:	20000064 	.word	0x20000064

080035a4 <_kill_r>:
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	2300      	movs	r3, #0
 80035a8:	4d06      	ldr	r5, [pc, #24]	; (80035c4 <_kill_r+0x20>)
 80035aa:	4604      	mov	r4, r0
 80035ac:	4608      	mov	r0, r1
 80035ae:	4611      	mov	r1, r2
 80035b0:	602b      	str	r3, [r5, #0]
 80035b2:	f7fd f90a 	bl	80007ca <_kill>
 80035b6:	1c43      	adds	r3, r0, #1
 80035b8:	d102      	bne.n	80035c0 <_kill_r+0x1c>
 80035ba:	682b      	ldr	r3, [r5, #0]
 80035bc:	b103      	cbz	r3, 80035c0 <_kill_r+0x1c>
 80035be:	6023      	str	r3, [r4, #0]
 80035c0:	bd38      	pop	{r3, r4, r5, pc}
 80035c2:	bf00      	nop
 80035c4:	20000244 	.word	0x20000244

080035c8 <_getpid_r>:
 80035c8:	f7fd b8f8 	b.w	80007bc <_getpid>

080035cc <memchr>:
 80035cc:	4603      	mov	r3, r0
 80035ce:	b510      	push	{r4, lr}
 80035d0:	b2c9      	uxtb	r1, r1
 80035d2:	4402      	add	r2, r0
 80035d4:	4293      	cmp	r3, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	d101      	bne.n	80035de <memchr+0x12>
 80035da:	2000      	movs	r0, #0
 80035dc:	e003      	b.n	80035e6 <memchr+0x1a>
 80035de:	7804      	ldrb	r4, [r0, #0]
 80035e0:	3301      	adds	r3, #1
 80035e2:	428c      	cmp	r4, r1
 80035e4:	d1f6      	bne.n	80035d4 <memchr+0x8>
 80035e6:	bd10      	pop	{r4, pc}

080035e8 <__swhatbuf_r>:
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	460c      	mov	r4, r1
 80035ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035f0:	4615      	mov	r5, r2
 80035f2:	2900      	cmp	r1, #0
 80035f4:	461e      	mov	r6, r3
 80035f6:	b096      	sub	sp, #88	; 0x58
 80035f8:	da0c      	bge.n	8003614 <__swhatbuf_r+0x2c>
 80035fa:	89a3      	ldrh	r3, [r4, #12]
 80035fc:	2100      	movs	r1, #0
 80035fe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003602:	bf0c      	ite	eq
 8003604:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003608:	2340      	movne	r3, #64	; 0x40
 800360a:	2000      	movs	r0, #0
 800360c:	6031      	str	r1, [r6, #0]
 800360e:	602b      	str	r3, [r5, #0]
 8003610:	b016      	add	sp, #88	; 0x58
 8003612:	bd70      	pop	{r4, r5, r6, pc}
 8003614:	466a      	mov	r2, sp
 8003616:	f000 f849 	bl	80036ac <_fstat_r>
 800361a:	2800      	cmp	r0, #0
 800361c:	dbed      	blt.n	80035fa <__swhatbuf_r+0x12>
 800361e:	9901      	ldr	r1, [sp, #4]
 8003620:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003624:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003628:	4259      	negs	r1, r3
 800362a:	4159      	adcs	r1, r3
 800362c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003630:	e7eb      	b.n	800360a <__swhatbuf_r+0x22>

08003632 <__smakebuf_r>:
 8003632:	898b      	ldrh	r3, [r1, #12]
 8003634:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003636:	079d      	lsls	r5, r3, #30
 8003638:	4606      	mov	r6, r0
 800363a:	460c      	mov	r4, r1
 800363c:	d507      	bpl.n	800364e <__smakebuf_r+0x1c>
 800363e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003642:	6023      	str	r3, [r4, #0]
 8003644:	6123      	str	r3, [r4, #16]
 8003646:	2301      	movs	r3, #1
 8003648:	6163      	str	r3, [r4, #20]
 800364a:	b002      	add	sp, #8
 800364c:	bd70      	pop	{r4, r5, r6, pc}
 800364e:	466a      	mov	r2, sp
 8003650:	ab01      	add	r3, sp, #4
 8003652:	f7ff ffc9 	bl	80035e8 <__swhatbuf_r>
 8003656:	9900      	ldr	r1, [sp, #0]
 8003658:	4605      	mov	r5, r0
 800365a:	4630      	mov	r0, r6
 800365c:	f7ff faa8 	bl	8002bb0 <_malloc_r>
 8003660:	b948      	cbnz	r0, 8003676 <__smakebuf_r+0x44>
 8003662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003666:	059a      	lsls	r2, r3, #22
 8003668:	d4ef      	bmi.n	800364a <__smakebuf_r+0x18>
 800366a:	f023 0303 	bic.w	r3, r3, #3
 800366e:	f043 0302 	orr.w	r3, r3, #2
 8003672:	81a3      	strh	r3, [r4, #12]
 8003674:	e7e3      	b.n	800363e <__smakebuf_r+0xc>
 8003676:	89a3      	ldrh	r3, [r4, #12]
 8003678:	6020      	str	r0, [r4, #0]
 800367a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367e:	81a3      	strh	r3, [r4, #12]
 8003680:	9b00      	ldr	r3, [sp, #0]
 8003682:	6120      	str	r0, [r4, #16]
 8003684:	6163      	str	r3, [r4, #20]
 8003686:	9b01      	ldr	r3, [sp, #4]
 8003688:	b15b      	cbz	r3, 80036a2 <__smakebuf_r+0x70>
 800368a:	4630      	mov	r0, r6
 800368c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003690:	f000 f81e 	bl	80036d0 <_isatty_r>
 8003694:	b128      	cbz	r0, 80036a2 <__smakebuf_r+0x70>
 8003696:	89a3      	ldrh	r3, [r4, #12]
 8003698:	f023 0303 	bic.w	r3, r3, #3
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	81a3      	strh	r3, [r4, #12]
 80036a2:	89a3      	ldrh	r3, [r4, #12]
 80036a4:	431d      	orrs	r5, r3
 80036a6:	81a5      	strh	r5, [r4, #12]
 80036a8:	e7cf      	b.n	800364a <__smakebuf_r+0x18>
	...

080036ac <_fstat_r>:
 80036ac:	b538      	push	{r3, r4, r5, lr}
 80036ae:	2300      	movs	r3, #0
 80036b0:	4d06      	ldr	r5, [pc, #24]	; (80036cc <_fstat_r+0x20>)
 80036b2:	4604      	mov	r4, r0
 80036b4:	4608      	mov	r0, r1
 80036b6:	4611      	mov	r1, r2
 80036b8:	602b      	str	r3, [r5, #0]
 80036ba:	f7fd f8e4 	bl	8000886 <_fstat>
 80036be:	1c43      	adds	r3, r0, #1
 80036c0:	d102      	bne.n	80036c8 <_fstat_r+0x1c>
 80036c2:	682b      	ldr	r3, [r5, #0]
 80036c4:	b103      	cbz	r3, 80036c8 <_fstat_r+0x1c>
 80036c6:	6023      	str	r3, [r4, #0]
 80036c8:	bd38      	pop	{r3, r4, r5, pc}
 80036ca:	bf00      	nop
 80036cc:	20000244 	.word	0x20000244

080036d0 <_isatty_r>:
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	2300      	movs	r3, #0
 80036d4:	4d05      	ldr	r5, [pc, #20]	; (80036ec <_isatty_r+0x1c>)
 80036d6:	4604      	mov	r4, r0
 80036d8:	4608      	mov	r0, r1
 80036da:	602b      	str	r3, [r5, #0]
 80036dc:	f7fd f8e2 	bl	80008a4 <_isatty>
 80036e0:	1c43      	adds	r3, r0, #1
 80036e2:	d102      	bne.n	80036ea <_isatty_r+0x1a>
 80036e4:	682b      	ldr	r3, [r5, #0]
 80036e6:	b103      	cbz	r3, 80036ea <_isatty_r+0x1a>
 80036e8:	6023      	str	r3, [r4, #0]
 80036ea:	bd38      	pop	{r3, r4, r5, pc}
 80036ec:	20000244 	.word	0x20000244

080036f0 <_init>:
 80036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f2:	bf00      	nop
 80036f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f6:	bc08      	pop	{r3}
 80036f8:	469e      	mov	lr, r3
 80036fa:	4770      	bx	lr

080036fc <_fini>:
 80036fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fe:	bf00      	nop
 8003700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003702:	bc08      	pop	{r3}
 8003704:	469e      	mov	lr, r3
 8003706:	4770      	bx	lr
